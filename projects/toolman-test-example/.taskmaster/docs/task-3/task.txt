# Task ID: 3
# Title: User Authentication System
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Implement user registration, login, JWT token generation, refresh tokens, and password reset functionality.
# Details:
1. Create authentication controller with endpoints:
   - POST /api/auth/register
   - POST /api/auth/login
   - POST /api/auth/refresh
   - GET /api/auth/profile
   - POST /api/auth/reset-password

2. Implement JWT token generation and validation:
   - Access tokens (short-lived)
   - Refresh tokens (long-lived, stored in Redis)

3. Create middleware for protected routes

4. Implement password hashing using bcrypt

5. Set up email service for password reset functionality

6. Create user profile management endpoints

Example JWT implementation:
```typescript
const generateTokens = (userId: string) => {
  const accessToken = jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '15m' });
  const refreshToken = jwt.sign({ userId }, process.env.JWT_REFRESH_SECRET, { expiresIn: '7d' });
  
  // Store refresh token in Redis
  redisClient.set(`refresh_token:${userId}`, refreshToken, 'EX', 60 * 60 * 24 * 7);
  
  return { accessToken, refreshToken };
};
```

# Test Strategy:
Write unit tests for authentication controllers and middleware. Test JWT token generation, validation, and refresh flow. Test password hashing and verification. Implement integration tests for the complete authentication flow.

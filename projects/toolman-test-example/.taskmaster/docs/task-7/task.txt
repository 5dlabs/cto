# Task ID: 7
# Title: Chat UI Implementation
# Status: pending
# Dependencies: 5, 6
# Priority: medium
# Description: Develop the chat interface with real-time messaging, room management, and responsive design for both mobile and desktop.
# Details:
1. Create main chat layout components:
   - Sidebar with room list and user info
   - Chat room component with message list and input
   - Room creation and management modals

2. Implement Socket.io client integration:
   - Connect to Socket.io server with authentication
   - Handle real-time events (messages, typing, presence)
   - Implement reconnection logic

3. Create message components:
   - Message bubbles with user info and timestamp
   - Message status indicators (sent, delivered, read)
   - Support for emoji and markdown

4. Implement responsive design:
   - Desktop layout with sidebar and chat area
   - Mobile layout with collapsible sidebar
   - Touch-friendly interactions

5. Add dark/light theme toggle with CSS variables

Example Socket.io client setup:
```typescript
import { io, Socket } from 'socket.io-client';
import { useAuth } from '../contexts/AuthContext';

export const useSocket = () => {
  const { user, isAuthenticated } = useAuth();
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  
  useEffect(() => {
    if (!isAuthenticated || !user) return;
    
    const token = localStorage.getItem('accessToken');
    const newSocket = io(process.env.REACT_APP_SOCKET_URL, {
      auth: { token },
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
    });
    
    newSocket.on('connect', () => {
      setIsConnected(true);
      console.log('Socket connected');
    });
    
    newSocket.on('disconnect', () => {
      setIsConnected(false);
      console.log('Socket disconnected');
    });
    
    newSocket.on('connect_error', (error) => {
      console.error('Connection error:', error);
    });
    
    setSocket(newSocket);
    
    return () => {
      newSocket.disconnect();
    };
  }, [isAuthenticated, user]);
  
  return { socket, isConnected };
};
```

# Test Strategy:
Write unit tests for UI components. Test responsive design across different screen sizes. Test real-time updates and Socket.io integration. Implement end-to-end tests for the complete chat flow. Test theme switching and accessibility.

# Task ID: 8
# Title: File and Image Sharing Implementation
# Status: pending
# Dependencies: 4, 7
# Priority: medium
# Description: Add support for file and image sharing in chat messages with storage, preview, and download capabilities.
# Details:
1. Set up file storage solution (AWS S3 or similar)

2. Create file upload API endpoint:
   - POST /api/upload
   - Support for multiple file types (images, documents, etc.)
   - File size validation
   - Virus scanning (optional)

3. Extend message schema to support attachments:
   - Add attachments field to messages table
   - Store file metadata (URL, type, size, name)

4. Implement frontend file upload components:
   - Drag and drop support
   - Upload progress indicator
   - File type validation

5. Create file preview components:
   - Image previews with lightbox
   - Document previews
   - Download functionality

Example file upload component:
```typescript
const FileUpload: React.FC = () => {
  const [files, setFiles] = useState<File[]>([]);
  const [uploading, setUploading] = useState(false);
  const [progress, setProgress] = useState(0);
  
  const handleDrop = useCallback((acceptedFiles: File[]) => {
    setFiles(prev => [...prev, ...acceptedFiles]);
  }, []);
  
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop: handleDrop,
    accept: {
      'image/*': [],
      'application/pdf': [],
      'application/msword': [],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': []
    },
    maxSize: 10 * 1024 * 1024 // 10MB
  });
  
  const uploadFiles = async () => {
    if (files.length === 0) return;
    
    setUploading(true);
    setProgress(0);
    
    const formData = new FormData();
    files.forEach(file => formData.append('files', file));
    
    try {
      const response = await api.post('/api/upload', formData, {
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          setProgress(percentCompleted);
        }
      });
      
      // Return uploaded file URLs
      return response.data.files;
    } catch (error) {
      console.error('Upload failed:', error);
      throw error;
    } finally {
      setUploading(false);
      setFiles([]);
    }
  };
  
  return (
    <div>
      <div {...getRootProps()} className={`dropzone ${isDragActive ? 'active' : ''}`}>
        <input {...getInputProps()} />
        {isDragActive ? (
          <p>Drop the files here...</p>
        ) : (
          <p>Drag & drop files here, or click to select files</p>
        )}
      </div>
      
      {files.length > 0 && (
        <div className="file-list">
          {files.map((file, index) => (
            <div key={index} className="file-item">
              <span>{file.name}</span>
              <span>({(file.size / 1024).toFixed(2)} KB)</span>
              <button onClick={() => setFiles(files.filter((_, i) => i !== index))}>
                Remove
              </button>
            </div>
          ))}
        </div>
      )}
      
      {uploading && <progress value={progress} max="100" />}
      
      <button onClick={uploadFiles} disabled={files.length === 0 || uploading}>
        {uploading ? 'Uploading...' : 'Upload'}
      </button>
    </div>
  );
};
```

# Test Strategy:
Test file upload functionality with different file types and sizes. Test file preview components. Verify proper storage and retrieval of files. Test error handling for invalid files. Measure upload performance.

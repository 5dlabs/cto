# EXAMPLE - Chat Application - Product Requirements Document

## Project Overview
Create a real-time chat application with React frontend and Node.js backend, supporting multiple rooms and user authentication.

## Technical Requirements

### Technology Stack
- **Frontend**: React 18+ with TypeScript
- **Backend**: Node.js with Express and Socket.io
- **Database**: PostgreSQL with Redis for sessions
- **Authentication**: JWT with refresh tokens

### Core Features

#### 1. User Authentication
- User registration with email/password
- Login with JWT token generation
- Password reset functionality
- User profile management

#### 2. Chat Rooms
- Create and join chat rooms
- Real-time messaging with Socket.io
- Message history persistence
- Online user indicators

#### 3. Real-time Features
- Live message delivery
- Typing indicators
- User presence status
- Message read receipts

#### 4. UI/UX Requirements
- Responsive design for mobile and desktop
- Dark/light theme toggle
- Emoji support in messages
- File/image sharing capability

## API Specifications

### Authentication Endpoints
```
POST /api/auth/register
POST /api/auth/login
POST /api/auth/refresh
GET /api/auth/profile
```

### Chat Endpoints
```
GET /api/rooms
POST /api/rooms
GET /api/rooms/:id/messages
POST /api/rooms/:id/messages
```

## Quality Requirements
- Sub-100ms message delivery latency
- Support for 1000+ concurrent users
- 99.9% uptime requirement
- Mobile-responsive interface
- Comprehensive error handling

## Deliverables
1. React frontend application
2. Node.js backend API
3. PostgreSQL database schema
4. Redis configuration
5. Docker deployment setup
6. API documentation
7. User guide

## Success Metrics
- Message delivery under 100ms
- User engagement >80%
- Zero-downtime deployments
- Cross-platform compatibility
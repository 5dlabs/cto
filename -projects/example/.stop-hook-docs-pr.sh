#!/bin/bash
# Post-completion hook for docs generation
# Commits and pushes documentation changes to feature branch

set -e

echo "üîó Post-completion hook: Committing and pushing documentation changes..."

# Get current working directory
WORKING_DIR="$(pwd)"
echo "Working directory: $WORKING_DIR"

# Ensure we're in a git repository
if [ ! -d ".git" ]; then
    echo "‚ùå Error: Not in a git repository"
    exit 1
fi

# Source GitHub environment if available
if [ -f ".github-env" ]; then
    source .github-env
    echo "‚úÖ Loaded GitHub environment"
else
    echo "‚ö†Ô∏è  Warning: .github-env not found"
fi

# Setup authentication based on environment
if [ "$USE_SSH" = "true" ]; then
    echo "üîë Using SSH authentication"

    # Ensure SSH key is available
    if [ ! -f ~/.ssh/id_rsa ]; then
        echo "‚ùå Error: SSH private key not found at ~/.ssh/id_rsa"
        exit 1
    fi

    # Test SSH connection
    echo "Testing SSH connection to GitHub..."
    ssh -T git@github.com 2>&1 | head -3 || echo "SSH test completed"

elif [ -n "$GITHUB_TOKEN" ]; then
    echo "üîë Using HTTPS token authentication"

    # Configure git credential helper for token auth
    git config credential.helper store
    if [ -f "/workspace/.git-credentials" ]; then
        git config credential.helper 'store --file=/workspace/.git-credentials'
        echo "‚úÖ Using existing git credentials"
    else
        echo "‚ö†Ô∏è  Warning: No git credentials file found"
    fi
else
    echo "‚ùå Error: No authentication method available"
    echo "   Need either USE_SSH=true with SSH key or GITHUB_TOKEN"
    exit 1
fi

# Configure git user (use PM user or repository user)
PM_USER="pm0-5dlabs"
if [ -n "$PM_USER" ]; then
    git config user.name "$PM_USER"
    git config user.email "${PM_USER}@users.noreply.github.com"
    echo "‚úÖ Configured git user: $PM_USER"
else
    echo "‚ö†Ô∏è  Warning: No PM user configured"
fi

# Check if there are changes to commit
if git diff --quiet && git diff --cached --quiet; then
    echo "‚ÑπÔ∏è  No changes to commit"
    exit 0
fi

# Stage all changes
echo "üìù Staging changes..."
git add .

# Create commit message
COMMIT_MSG="docs: auto-generate Task Master documentation

- Generated documentation for Task Master tasks
- Updated by Claude Code agent
- Working directory: $WORKING_DIR
- Repository: git@github.com:5dlabs/agent-platform.git
- Source branch: feature/example-project-and-cli

ü§ñ Generated by Claude Code - Docs Generation"

# Commit changes
echo "üíæ Committing changes..."
git commit -m "$COMMIT_MSG"

# Push to current branch
CURRENT_BRANCH=$(git branch --show-current)
echo "üöÄ Pushing to branch: $CURRENT_BRANCH"

# Push using appropriate authentication method
if [ "$USE_SSH" = "true" ]; then
    echo "Pushing via SSH..."
    git push origin "$CURRENT_BRANCH"
    echo "‚úÖ Successfully pushed to $CURRENT_BRANCH via SSH"
elif [ -n "$GITHUB_TOKEN" ]; then
    echo "Pushing via HTTPS with token..."
    git push origin "$CURRENT_BRANCH"
    echo "‚úÖ Successfully pushed to $CURRENT_BRANCH via HTTPS"
else
    echo "‚ùå Error: No authentication method configured for push"
    exit 1
fi

# Create PR if we're not on the main branch
if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
    echo "üîÄ Creating pull request..."

    PR_TITLE="docs: auto-generate Task Master documentation"
    PR_BODY="## Documentation Update

**Generated by:** Claude Code Agent
**Working Directory:** \`$WORKING_DIR\`
**Branch:** \`$CURRENT_BRANCH\`
**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
**Authentication:** $([ "$USE_SSH" = "true" ] && echo "SSH" || echo "HTTPS")
**Repository:** git@github.com:5dlabs/agent-platform.git
**Source Branch:** feature/example-project-and-cli


### Changes
- Auto-generated Task Master documentation for all tasks
- Updated task files and specifications
- Documentation generated in: \`example\`

### Notes
This PR was automatically created by the Claude Code documentation generation system.
Scope: Complete Task Master documentation

ü§ñ **Auto-generated** - Review and merge when ready"

    # Create PR using GitHub CLI
    if command -v gh >/dev/null 2>&1; then
        # Set up gh authentication
        if [ "$USE_SSH" = "true" ]; then
            echo "Configuring GitHub CLI for SSH..."
            gh auth login --with-token <<< "$GITHUB_TOKEN" 2>/dev/null || echo "GitHub CLI auth may have failed"
        elif [ -n "$GITHUB_TOKEN" ]; then
            echo "Configuring GitHub CLI for HTTPS..."
            gh auth login --with-token <<< "$GITHUB_TOKEN" 2>/dev/null || echo "GitHub CLI auth may have failed"
        fi

        gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base "feature/example-project-and-cli" \
            --head "$CURRENT_BRANCH" \
            || echo "‚ö†Ô∏è  PR creation failed (may already exist)"
        echo "‚úÖ Pull request created successfully"
    else
        echo "‚ö†Ô∏è  GitHub CLI not available - skipping PR creation"
    fi
else
    echo "‚ÑπÔ∏è  On main branch - no PR needed"
fi

echo "üéâ Documentation commit and push completed successfully!"
# Makefile for GitOps testing and validation

.PHONY: help test validate lint security diff preview clean install-tools

# Default target
help: ## Show this help message
	@echo "GitOps Testing Commands:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

test: validate ## Run all tests
	@echo "‚úÖ All tests completed"

validate: lint structure security ## Run all validation checks
	@echo "üîç Running all validation checks..."

lint: ## Lint YAML files
	@echo "üìù Linting YAML files..."
	@if command -v yamllint >/dev/null 2>&1; then \
		yamllint -c ../../.yamllint.yaml . || exit 1; \
	else \
		echo "‚ö†Ô∏è  yamllint not installed. Run: make install-tools"; \
	fi

structure: ## Validate ArgoCD application structure
	@echo "üèóÔ∏è  Validating application structure..."
	@for file in applications/*.yaml; do \
		[ -f "$$file" ] || continue; \
		grep -q "kind: Application" "$$file" || (echo "‚ùå Not an Application: $$file" && exit 1); \
		grep -q "spec:" "$$file" || (echo "‚ùå Missing spec: $$file" && exit 1); \
		grep -q "destination:" "$$file" || (echo "‚ùå Missing destination: $$file" && exit 1); \
		grep -q "source:" "$$file" || (echo "‚ùå Missing source: $$file" && exit 1); \
	done
	@echo "‚úÖ Structure validation passed"

security: ## Run security checks
	@echo "üîí Running security checks..."
	@if grep -r "password:" . --include="*.yaml" | grep -v "secretKeyRef" | grep -v "CHANGE_THIS" | grep -v "examples" > /dev/null; then \
		echo "‚ùå Found potential hardcoded passwords"; \
		exit 1; \
	fi
	@echo "‚úÖ Security checks passed"

diff: ## Show diff against main branch
	@echo "üìä Showing diff against main branch..."
	@git diff origin/main...HEAD -- .

preview: ## Preview what would be deployed
	@echo "üëÅÔ∏è  Preview mode..."
	@echo "Applications to be deployed:"
	@ls -1 applications/*.yaml 2>/dev/null | sed 's/applications\//  - /g' | sed 's/\.yaml//g'
	@echo ""
	@echo "Database resources to be deployed:"
	@ls -1 databases/*.yaml 2>/dev/null | grep -v examples | grep -v README | sed 's/databases\//  - /g' | sed 's/\.yaml//g'

dry-run: ## Dry run with ArgoCD (requires ArgoCD CLI)
	@echo "üß™ Dry run with ArgoCD..."
	@if command -v argocd >/dev/null 2>&1; then \
		for app in applications/*.yaml; do \
			[ -f "$$app" ] || continue; \
			echo "Dry run for $$app:"; \
			kubectl apply --dry-run=client -f "$$app" || exit 1; \
		done; \
	else \
		echo "‚ö†Ô∏è  argocd CLI not installed"; \
	fi

install-tools: ## Install required testing tools
	@echo "üì¶ Installing testing tools..."
	@echo "Installing yamllint..."
	@pip install --user yamllint || echo "Failed to install yamllint"
	@echo ""
	@echo "Installing pre-commit..."
	@pip install --user pre-commit || echo "Failed to install pre-commit"
	@echo ""
	@echo "Installing yq..."
	@if [ "$$(uname)" = "Darwin" ]; then \
		brew install yq || echo "Failed to install yq"; \
	else \
		wget -qO /tmp/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && \
		chmod +x /tmp/yq && \
		sudo mv /tmp/yq /usr/local/bin/yq || echo "Failed to install yq"; \
	fi
	@echo ""
	@echo "Installing kubeconform..."
	@if [ "$$(uname)" = "Darwin" ]; then \
		brew install kubeconform || echo "Failed to install kubeconform"; \
	else \
		wget -qO- https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | \
		tar xz && sudo mv kubeconform /usr/local/bin || echo "Failed to install kubeconform"; \
	fi
	@echo ""
	@echo "‚úÖ Tool installation complete"

pre-commit-install: ## Install pre-commit hooks
	@echo "ü™ù Installing pre-commit hooks..."
	@pre-commit install
	@echo "‚úÖ Pre-commit hooks installed"

pre-commit-run: ## Run pre-commit on all files
	@echo "üèÉ Running pre-commit on all files..."
	@pre-commit run --all-files

clean: ## Clean up temporary files
	@echo "üßπ Cleaning up..."
	@find . -name "*.tmp" -delete
	@find . -name "*.bak" -delete
	@echo "‚úÖ Cleanup complete"

# Quick test for CI
ci-test: lint structure security ## Run CI tests
	@echo "‚úÖ CI tests passed"

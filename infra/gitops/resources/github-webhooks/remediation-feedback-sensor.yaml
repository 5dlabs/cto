---
# Sensor for PR Comment Remediation - Triggers CodeRun for feedback comments
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: remediation-feedback-sensor
  namespace: argo
  labels:
    app: remediation-loop
    component: feedback-sensor
spec:
  replicas: 1
  deploymentStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    serviceAccountName: argo-events-sa
    container:
      resources:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "128Mi"
          cpu: "200m"
  dependencies:
    # PR Comment Remediation (original functionality)
    - name: feedback-comment
      eventSourceName: github
      eventName: org
      filters:
        data:
          # Filter for issue_comment events with created action
          - path: headers.X-Github-Event
            type: string
            value: ["issue_comment"]
          - path: body.action
            type: string
            value: ["created"]
          # Filter for comments containing remediation patterns
          - path: body.comment.body
            type: string
            comparator: "regex"
            value: ["(?i)(üî¥.*required changes|fix required|needs changes|remediate|changes requested)"]
          # Ensure comment is on a pull request (not issue)
          - path: body.issue.pull_request.url
            type: string
            comparator: "!="
            value: [""]

    # PR Review Remediation (NEW - Critical Fix)
    - name: pr-review-feedback
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request_review"]
          - path: body.action
            type: string
            value: ["submitted"]
          - path: body.review.state
            type: string
            value: ["changes_requested"]
          - path: body.review.body
            type: string
            comparator: "regex"
            value: ["(?i)(üî¥|required changes|fix required|changes requested|needs work)"]

    # Check Run Remediation (NEW - For Tess check runs)
    - name: check-run-feedback
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["check_run"]
          - path: body.action
            type: string
            value: ["completed"]
          - path: body.check_run.app.slug
            type: string
            value: ["5dlabs-tess"]
          - path: body.check_run.conclusion
            type: string
            value: ["action_required", "failure"]

    # Manual Remediation Trigger (NEW - For human reviewers)
    - name: manual-remediation-trigger
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["issue_comment", "pull_request_review_comment"]
          - path: body.action
            type: string
            value: ["created"]
          - path: body.comment.body
            type: string
            comparator: "regex"
            value: ["(?i)(@5dlabs-rex.*remediate|@rex.*remediate|/remediate|üîß.*fix|üõ†Ô∏è.*fix)"]
          - path: body.comment.user.login
            type: string
            comparator: "not in"
            value: ["5DLabs-Rex", "5DLabs-Rex[bot]"]
  triggers:
    - template:
        name: trigger-remediation-coderun
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: remediation-feedback-
                namespace: agent-platform
                labels:
                  type: remediation-workflow
                  trigger-type: "comment-feedback"
              spec:
                entrypoint: handle-feedback-remediation
                serviceAccountName: argo-workflow
                arguments:
                  parameters:
                    - name: pr-number
                      value: "{{.prNumber}}"
                    - name: comment-id
                      value: "{{.commentId}}"
                    - name: comment-author
                      value: "{{.commentAuthor}}"
                    - name: pr-labels
                      value: "{{.prLabels}}"
                    - name: iteration
                      value: "{{.iteration}}"
                templates:
                  - name: handle-feedback-remediation
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        echo "=== Feedback Remediation Handler ==="
                        echo "PR Number: {{workflow.parameters.pr-number}}"
                        echo "Feedback ID: {{workflow.parameters.feedback-id}}"
                        echo "Feedback Author: {{workflow.parameters.feedback-author}}"
                        echo "Feedback Type: {{workflow.parameters.feedback-type}}"
                        echo "Iteration: {{workflow.parameters.iteration}}"

                        # Extract task ID from PR labels
                        PR_LABELS="{{workflow.parameters.pr-labels}}"
                        echo "PR Labels: $PR_LABELS"

                        # Extract task ID from labels (find first label starting with "task-")
                        TASK_ID=$(echo "$PR_LABELS" | jq -r '.[]? | select(.name | startswith("task-")) | .name | sub("task-"; "")' | head -1)

                        if [ -z "$TASK_ID" ] || [ "$TASK_ID" = "null" ]; then
                          echo "‚ùå ERROR: No task-* label found on PR"
                          echo "Available labels: $PR_LABELS"
                          exit 1
                        fi

                        echo "‚úÖ Extracted Task ID: $TASK_ID"

                        # Create CodeRun for Rex remediation agent
                        echo "Creating CodeRun for task $TASK_ID remediation..."
                        cat <<EOF | kubectl apply -f -
                        apiVersion: agents.platform/v1
                        kind: CodeRun
                        metadata:
                          generateName: rex-remediation-
                          namespace: agent-platform
                          labels:
                            task-id: "$TASK_ID"
                            pr-number: "{{workflow.parameters.pr-number}}"
                            trigger-type: "{{workflow.parameters.feedback-type}}"
                            feedback-author: "{{workflow.parameters.feedback-author}}"
                            remediation-iteration: "{{workflow.parameters.iteration}}"
                            remediation-state: "in-progress"
                        spec:
                          taskId: $TASK_ID
                          service: "task$TASK_ID"
                          repositoryUrl: "https://github.com/5dlabs/cto"
                          docsRepositoryUrl: "https://github.com/5dlabs/docs"
                          docsProjectDirectory: "agent-remediation-loop"
                          model: "sonnet"
                          githubApp: "5DLabs-Rex"
                          contextVersion: 1
                          docsBranch: "main"
                          continueSession: true
                          overwriteMemory: false
                          env:
                            REMEDIATION_MODE: "true"
                            FEEDBACK_ID: "{{workflow.parameters.feedback-id}}"
                            FEEDBACK_TYPE: "{{workflow.parameters.feedback-type}}"
                            ITERATION_COUNT: "{{workflow.parameters.iteration}}"
                            FEEDBACK_AUTHOR: "{{workflow.parameters.feedback-author}}"
                            PR_NUMBER: "{{workflow.parameters.pr-number}}"
                        EOF

                        echo "‚úÖ CodeRun created successfully for task $TASK_ID"
          parameters:
            # Extract PR number (handle different event types)
            - src:
                dependencyName: feedback-comment
                dataKey: body.issue.number
                dataTemplate: "{{ .Input }}"
              dest: pr-number
            - src:
                dependencyName: pr-review-feedback
                dataKey: body.pull_request.number
                dataTemplate: "{{ .Input }}"
              dest: pr-number
            - src:
                dependencyName: check-run-feedback
                dataKey: body.check_run.pull_requests[0].number
                dataTemplate: "{{ .Input }}"
              dest: pr-number
            - src:
                dependencyName: manual-remediation-trigger
                dataKey: body.issue.number
                dataTemplate: "{{ .Input }}"
              dest: pr-number

            # Extract comment/review/check ID
            - src:
                dependencyName: feedback-comment
                dataKey: body.comment.id
                dataTemplate: "{{ .Input }}"
              dest: feedback-id
            - src:
                dependencyName: pr-review-feedback
                dataKey: body.review.id
                dataTemplate: "{{ .Input }}"
              dest: feedback-id
            - src:
                dependencyName: check-run-feedback
                dataKey: body.check_run.id
                dataTemplate: "{{ .Input }}"
              dest: feedback-id
            - src:
                dependencyName: manual-remediation-trigger
                dataKey: body.comment.id
                dataTemplate: "{{ .Input }}"
              dest: feedback-id

            # Extract feedback author
            - src:
                dependencyName: feedback-comment
                dataKey: body.comment.user.login
                dataTemplate: "{{ .Input }}"
              dest: feedback-author
            - src:
                dependencyName: pr-review-feedback
                dataKey: body.review.user.login
                dataTemplate: "{{ .Input }}"
              dest: feedback-author
            - src:
                dependencyName: check-run-feedback
                dataKey: body.sender.login
                dataTemplate: "{{ .Input }}"
              dest: feedback-author
            - src:
                dependencyName: manual-remediation-trigger
                dataKey: body.comment.user.login
                dataTemplate: "{{ .Input }}"
              dest: feedback-author

            # Extract feedback type
            - src:
                dependencyName: feedback-comment
                dataTemplate: "comment"
              dest: feedback-type
            - src:
                dependencyName: pr-review-feedback
                dataTemplate: "review"
              dest: feedback-type
            - src:
                dependencyName: check-run-feedback
                dataTemplate: "check_run"
              dest: feedback-type
            - src:
                dependencyName: manual-remediation-trigger
                dataTemplate: "manual"
              dest: feedback-type

            # Pass PR labels for task ID extraction in workflow
            - src:
                dependencyName: feedback-comment
                dataKey: body.issue.labels
                dataTemplate: "{{ .Input }}"
              dest: pr-labels
            - src:
                dependencyName: pr-review-feedback
                dataKey: body.pull_request.labels
                dataTemplate: "{{ .Input }}"
              dest: pr-labels
            - src:
                dependencyName: check-run-feedback
                dataKey: body.check_run.pull_requests[0].labels
                dataTemplate: "{{ .Input }}"
              dest: pr-labels
            - src:
                dependencyName: manual-remediation-trigger
                dataKey: body.issue.labels
                dataTemplate: "{{ .Input }}"
              dest: pr-labels

            # Set iteration (always starts at 1 for new feedback cycles)
            - src:
                dependencyName: feedback-comment
                dataTemplate: "1"
              dest: iteration
            - src:
                dependencyName: pr-review-feedback
                dataTemplate: "1"
              dest: iteration
            - src:
                dependencyName: check-run-feedback
                dataTemplate: "1"
              dest: iteration
            - src:
                dependencyName: manual-remediation-trigger
                dataTemplate: "1"
              dest: iteration
        retryStrategy:
          steps: 2  # Minimal retries for reliability
          duration: "5s"
          factor: 2
          jitter: 0.1

---
# Stage-Aware Workflow Resume Sensor - Tess Approval
# Resumes workflows after Tess QA testing approval
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: stage-aware-tess-approval
  namespace: argo
  labels:
    task: "7"
    type: stage-management
    component: atomic-transitions
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    # Tess Approved PR - Resume workflows waiting for testing complete
    - name: tess-approved-event
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request_review"]
          - path: body.action
            type: string
            value: ["submitted"]
          - path: body.review.state
            type: string
            value: ["approved"]
          - path: body.review.user.login
            type: string
            value: ["tess-5dlabs"]

  triggers:
    # Resume workflows after Tess approval (waiting-ready-for-qa stage)
    - template:
        name: resume-after-tess-approval
        conditions: "tess-approved-event"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: stage-resume-tess-approved-
                namespace: agent-platform
                labels:
                  type: stage-resume
                  target-stage: waiting-ready-for-qa
              spec:
                entrypoint: resume-workflow
                serviceAccountName: argo-workflow
                templates:
                  - name: resume-workflow
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        # Ensure jq is available
                        if ! command -v jq >/dev/null 2>&1; then
                          if command -v apk >/dev/null 2>&1; then
                            apk add --no-cache jq
                          elif command -v apt-get >/dev/null 2>&1; then
                            apt-get update && apt-get install -y jq && rm -rf /var/lib/apt/lists/*
                          elif command -v microdnf >/dev/null 2>&1; then
                            microdnf -y install jq || true
                          else
                            echo "jq not found and no supported package manager available"
                          fi
                        fi

                        echo "=== Stage-Aware Workflow Resume ==="
                        echo "Target Stage: waiting-ready-for-qa"
                        echo "Reviewer: {{ .Input.body.review.user.login }}"
                        echo "Review State: {{ .Input.body.review.state }}"

                        # Extract task ID from PR labels using jq
                        TASK_LABELS_JSON='{{ .Input.body.pull_request.labels | toJson }}'
                        TASK_ID=$(echo "$TASK_LABELS_JSON" \
                          | jq -r '.[] | (.name // "") | ascii_downcase | capture("task-(?<id>[0-9]+)") | .id' \
                          | head -1)

                        if [ -z "$TASK_ID" ]; then
                          echo "ℹ️ No task-* label found on PR (not a play workflow PR)"
                          exit 0
                        fi

                        echo "Task ID: $TASK_ID"

                        # Extract repository for precise correlation (critical for parallel batch execution)
                        REPO_FULL='{{ .Input.body.repository.full_name }}'
                        REPO_LABEL=$(echo "$REPO_FULL" | tr '/' '-')
                        echo "Repository: $REPO_FULL (label: $REPO_LABEL)"

                        # Find workflow by labels (include repository for precise matching in parallel scenarios)
                        WORKFLOW_NAME=$(kubectl get workflows -n agent-platform \
                          -l task-id=$TASK_ID,workflow-type=play-orchestration,repository=$REPO_LABEL \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -z "$WORKFLOW_NAME" ]; then
                          echo "ℹ️ No workflow found for task-id=$TASK_ID and repository=$REPO_LABEL"
                          exit 0
                        fi

                        echo "Found workflow: $WORKFLOW_NAME"

                        # Check if workflow is at correct stage
                        CURRENT_STAGE=$(kubectl get workflow $WORKFLOW_NAME \
                          -n agent-platform \
                          -o jsonpath='{.metadata.labels.current-stage}' \
                          2>/dev/null || echo "")

                        if [ "$CURRENT_STAGE" = "waiting-ready-for-qa" ]; then
                          echo "Found workflow at correct stage, resuming..."

                          # Resume the workflow
                          kubectl patch workflow $WORKFLOW_NAME \
                            -n agent-platform \
                            --type='merge' \
                            -p '{"spec":{"suspend":false}}'

                          echo "✅ Workflow resumed successfully"
                        else
                          echo "Workflow not at expected stage (current: $CURRENT_STAGE)"
                          echo "Skipping resume to prevent incorrect stage progression"
                        fi
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2


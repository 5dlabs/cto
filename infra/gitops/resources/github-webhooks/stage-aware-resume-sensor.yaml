---
# Stage-Aware Workflow Resume Sensor
# Targets workflows based on current-stage label for precise event correlation
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: stage-aware-workflow-resume
  namespace: argo
  labels:
    task: "7"
    type: stage-management
    component: atomic-transitions
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    # PR Created Event - Resume workflows waiting for this
    - name: pr-created-event
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request"]
          - path: body.action
            type: string
            value: ["opened"]

    # Cleo Approved PR - Resume workflows waiting for quality review complete
    - name: cleo-approved-event
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request_review"]
          - path: body.action
            type: string
            value: ["submitted"]
          - path: body.review.state
            type: string
            value: ["approved"]
          - path: body.review.user.login
            type: string
            value: ["5dlabs-cleo[bot]"]

    # Tess Approved PR - Resume workflows waiting for testing complete
    - name: tess-approved-event
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request_review"]
          - path: body.action
            type: string
            value: ["submitted"]
          - path: body.review.state
            type: string
            value: ["approved"]
          - path: body.review.user.login
            type: string
            value: ["tess-5dlabs"]

    # PR Merged - Resume workflows waiting for this
    - name: pr-merged-event
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request"]
          - path: body.action
            type: string
            value: ["closed"]
          - path: body.pull_request.merged
            type: string
            value: ["true"]

  triggers:
    # Resume workflows at waiting-pr-created stage
    - template:
        name: resume-waiting-pr-created
        conditions: "pr-created-event"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: stage-resume-pr-created-
                namespace: agent-platform
                labels:
                  type: stage-resume
                  target-stage: waiting-pr-created
              spec:
                entrypoint: resume-workflow
                serviceAccountName: argo-workflow
                templates:
                  - name: resume-workflow
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        # Ensure jq is available (some downstream commands/scripts rely on it)
                        if ! command -v jq >/dev/null 2>&1; then
                          if command -v apk >/dev/null 2>&1; then
                            apk add --no-cache jq
                          elif command -v apt-get >/dev/null 2>&1; then
                            apt-get update && apt-get install -y jq && rm -rf /var/lib/apt/lists/*
                          elif command -v microdnf >/dev/null 2>&1; then
                            microdnf -y install jq || true
                          else
                            echo "jq not found and no supported package manager available"
                          fi
                        fi

                        update_workflow_pr_metadata() {
                          local workflow_name="$1"
                          local pr_url="$2"
                          local pr_number="$3"

                          WORKFLOW_JSON=$(kubectl get workflow "$workflow_name" -n agent-platform -o json 2>/dev/null)
                          if [ -z "$WORKFLOW_JSON" ]; then
                            echo "ERROR: Unable to fetch workflow $workflow_name for PR metadata update"
                            return 1
                          fi

                          set +e
                          PATCH_JSON=$(echo "$WORKFLOW_JSON" | jq --arg prUrl "$pr_url" --arg prNumber "$pr_number" '
                            .spec.arguments.parameters = (
                              ( .spec.arguments.parameters // [] )
                              | (if (map(.name) | index("pr-url")) != null
                                   then map(if .name == "pr-url" then (.value = $prUrl) else . end)
                                   else . + [{"name":"pr-url","value":$prUrl}]
                                 end)
                              | (if (map(.name) | index("pr-number")) != null
                                   then map(if .name == "pr-number" then (.value = $prNumber) else . end)
                                   else . + [{"name":"pr-number","value":$prNumber}]
                                 end)
                            )
                            | {spec:{arguments:{parameters:.spec.arguments.parameters}}}
                          ')
                          JQ_EXIT=$?
                          set -e

                          if [ $JQ_EXIT -ne 0 ]; then
                            echo "ERROR: jq failed while constructing PR metadata patch for $workflow_name"
                            return 1
                          fi

                          if [ -z "$PATCH_JSON" ]; then
                            echo "ERROR: Failed to construct PR metadata patch payload for $workflow_name"
                            return 1
                          fi

                          kubectl patch workflow "$workflow_name" -n agent-platform --type='merge' -p "$PATCH_JSON"
                        }

                        echo "=== Stage-Aware Workflow Resume ==="
                        echo "Target Stage: waiting-pr-created"
                        echo "PR Number: {{ .Input.body.pull_request.number }}"

                        extract_task_id() {
                          echo "$1" | tr '[:upper:]' '[:lower:]' | grep -oE 'task[-_/ ]*([0-9]+)' | head -n1 | grep -oE '[0-9]+' || true
                        }

                        TASK_ID=""
                        TASK_LABELS_JSON='{{ .Input.body.pull_request.labels | toJson }}'
                        if [ "$TASK_LABELS_JSON" != "null" ] && [ -n "$TASK_LABELS_JSON" ]; then
                          TASK_ID=$(echo "$TASK_LABELS_JSON" |
                            jq -er '.[] | (.name // "") | ascii_downcase | capture("task[-_/ ]*(?<id>[0-9]+)") | .id' 2>/dev/null | head -1 || true)
                        fi

                        if [ -z "$TASK_ID" ]; then
                          TASK_ID=$(extract_task_id '{{ .Input.body.pull_request.head.ref }}')
                        fi

                        if [ -z "$TASK_ID" ]; then
                          TASK_ID=$(extract_task_id '{{ .Input.body.pull_request.title }}')
                        fi

                        if [ -z "$TASK_ID" ]; then
                          echo "ℹ️ No task ID found in PR data (not a play workflow PR)"
                          exit 0
                        fi

                        echo "Task ID: $TASK_ID"

                        # Find workflow by labels (since actual names have random suffixes)
                        WORKFLOW_NAME=$(kubectl get workflows -n agent-platform \
                          -l task-id=$TASK_ID,workflow-type=play-orchestration \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -z "$WORKFLOW_NAME" ]; then
                          echo "ℹ️ No workflow found for task-id=$TASK_ID (may be for different repo/workflow)"
                          exit 0
                        fi

                        echo "Found workflow: $WORKFLOW_NAME"
                        echo "Looking for stage: waiting-pr-created"

                        # Check if workflow exists and is at correct stage
                        CURRENT_STAGE=$(kubectl get workflow $WORKFLOW_NAME \
                          -n agent-platform \
                          -o jsonpath='{.metadata.labels.current-stage}' \
                          2>/dev/null || echo "")

                        if [ "$CURRENT_STAGE" = "waiting-pr-created" ]; then
                          echo "Found workflow at correct stage, resuming..."

                          # Update workflow parameters with PR details
                          if ! update_workflow_pr_metadata "$WORKFLOW_NAME" "{{ .Input.body.pull_request.html_url }}" "{{ .Input.body.pull_request.number }}"; then
                            echo "ERROR: Failed to update PR metadata on $WORKFLOW_NAME"
                            exit 1
                          fi

                          # Resume the workflow
                          kubectl patch workflow $WORKFLOW_NAME \
                            -n agent-platform \
                            --type='merge' \
                            -p '{"spec":{"suspend":false}}'

                          echo "✅ Workflow resumed successfully"
                        else
                          echo "Workflow not at expected stage (current: $CURRENT_STAGE)"
                          echo "Skipping resume to prevent incorrect stage progression"
                        fi
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2

    # Resume workflows at waiting-pr-merged stage (PR closed & merged)
    - template:
        name: resume-waiting-pr-merged
        conditions: "pr-merged-event"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: stage-resume-pr-merged-
                namespace: agent-platform
                labels:
                  type: stage-resume
                  target-stage: waiting-pr-merged
              spec:
                entrypoint: resume-workflow
                serviceAccountName: argo-workflow
                templates:
                  - name: resume-workflow
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        echo "=== Stage-Aware Workflow Resume ==="
                        echo "Target Stage: waiting-pr-merged"
                        echo "PR Number: {{ .Input.body.pull_request.number }}"

                        # Extract task ID from PR labels using jq (JSON-encode + case-insensitive)
                        TASK_LABELS_JSON='{{ .Input.body.pull_request.labels | toJson }}'
                        TASK_ID=$(echo "$TASK_LABELS_JSON" \
                          | jq -r '.[] | (.name // "") | ascii_downcase | capture("task-(?<id>[0-9]+)") | .id' \
                          | head -1)

                        if [ -z "$TASK_ID" ]; then
                          echo "ℹ️ No task-* label found on PR (not a play workflow PR)"
                          exit 0
                        fi

                        echo "Task ID: $TASK_ID"

                        # Find workflow by labels (since actual names have random suffixes)
                        WORKFLOW_NAME=$(kubectl get workflows -n agent-platform \
                          -l task-id=$TASK_ID,workflow-type=play-orchestration \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -z "$WORKFLOW_NAME" ]; then
                          echo "ℹ️ No workflow found for task-id=$TASK_ID (may be for different repo/workflow)"
                          exit 0
                        fi

                        echo "Found workflow: $WORKFLOW_NAME"

                        # Check if workflow exists and is at correct stage
                        CURRENT_STAGE=$(kubectl get workflow $WORKFLOW_NAME \
                          -n agent-platform \
                          -o jsonpath='{.metadata.labels.current-stage}' \
                          2>/dev/null || echo "")

                        if [ "$CURRENT_STAGE" = "waiting-pr-merged" ]; then
                          echo "Found workflow at correct stage, resuming..."

                          # Resume the workflow
                          kubectl patch workflow $WORKFLOW_NAME \
                            -n agent-platform \
                            --type='merge' \
                            -p '{"spec":{"suspend":false}}'

                          echo "✅ Workflow resumed successfully"
                        else
                          echo "Workflow not at expected stage (current: $CURRENT_STAGE)"
                          echo "Skipping resume to prevent incorrect stage progression"
                        fi
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2

    # Resume workflows after Cleo approval (waiting-quality-complete stage)
    - template:
        name: resume-after-cleo-approval
        conditions: "cleo-approved-event"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: stage-resume-cleo-approved-
                namespace: agent-platform
                labels:
                  type: stage-resume
                  target-stage: waiting-quality-complete
              spec:
                entrypoint: resume-workflow
                serviceAccountName: argo-workflow
                templates:
                  - name: resume-workflow
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        # Ensure jq is available
                        if ! command -v jq >/dev/null 2>&1; then
                          if command -v apk >/dev/null 2>&1; then
                            apk add --no-cache jq
                          elif command -v apt-get >/dev/null 2>&1; then
                            apt-get update && apt-get install -y jq && rm -rf /var/lib/apt/lists/*
                          elif command -v microdnf >/dev/null 2>&1; then
                            microdnf -y install jq || true
                          else
                            echo "jq not found and no supported package manager available"
                          fi
                        fi

                        echo "=== Stage-Aware Workflow Resume ==="
                        echo "Target Stage: waiting-quality-complete"
                        echo "Reviewer: {{ .Input.body.review.user.login }}"
                        echo "Review State: {{ .Input.body.review.state }}"

                        # Extract task ID from PR labels using jq
                        TASK_LABELS_JSON='{{ .Input.body.pull_request.labels | toJson }}'
                        TASK_ID=$(echo "$TASK_LABELS_JSON" \
                          | jq -r '.[] | (.name // "") | ascii_downcase | capture("task-(?<id>[0-9]+)") | .id' \
                          | head -1)

                        if [ -z "$TASK_ID" ]; then
                          echo "ℹ️ No task-* label found on PR (not a play workflow PR)"
                          exit 0
                        fi

                        echo "Task ID: $TASK_ID"

                        # Find workflow by labels
                        WORKFLOW_NAME=$(kubectl get workflows -n agent-platform \
                          -l task-id=$TASK_ID,workflow-type=play-orchestration \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -z "$WORKFLOW_NAME" ]; then
                          echo "ℹ️ No workflow found for task-id=$TASK_ID (may be for different repo/workflow)"
                          exit 0
                        fi

                        echo "Found workflow: $WORKFLOW_NAME"

                        # Check if workflow is at correct stage
                        CURRENT_STAGE=$(kubectl get workflow $WORKFLOW_NAME \
                          -n agent-platform \
                          -o jsonpath='{.metadata.labels.current-stage}' \
                          2>/dev/null || echo "")

                        if [ "$CURRENT_STAGE" = "waiting-quality-complete" ]; then
                          echo "Found workflow at correct stage, resuming..."

                          # Resume the workflow
                          kubectl patch workflow $WORKFLOW_NAME \
                            -n agent-platform \
                            --type='merge' \
                            -p '{"spec":{"suspend":false}}'

                          echo "✅ Workflow resumed successfully"
                        else
                          echo "Workflow not at expected stage (current: $CURRENT_STAGE)"
                          echo "Skipping resume to prevent incorrect stage progression"
                        fi
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2

    # Resume workflows after Tess approval (waiting-ready-for-qa stage)
    - template:
        name: resume-after-tess-approval
        conditions: "tess-approved-event"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: stage-resume-tess-approved-
                namespace: agent-platform
                labels:
                  type: stage-resume
                  target-stage: waiting-ready-for-qa
              spec:
                entrypoint: resume-workflow
                serviceAccountName: argo-workflow
                templates:
                  - name: resume-workflow
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        # Ensure jq is available
                        if ! command -v jq >/dev/null 2>&1; then
                          if command -v apk >/dev/null 2>&1; then
                            apk add --no-cache jq
                          elif command -v apt-get >/dev/null 2>&1; then
                            apt-get update && apt-get install -y jq && rm -rf /var/lib/apt/lists/*
                          elif command -v microdnf >/dev/null 2>&1; then
                            microdnf -y install jq || true
                          else
                            echo "jq not found and no supported package manager available"
                          fi
                        fi

                        echo "=== Stage-Aware Workflow Resume ==="
                        echo "Target Stage: waiting-ready-for-qa"
                        echo "Reviewer: {{ .Input.body.review.user.login }}"
                        echo "Review State: {{ .Input.body.review.state }}"

                        # Extract task ID from PR labels using jq
                        TASK_LABELS_JSON='{{ .Input.body.pull_request.labels | toJson }}'
                        TASK_ID=$(echo "$TASK_LABELS_JSON" \
                          | jq -r '.[] | (.name // "") | ascii_downcase | capture("task-(?<id>[0-9]+)") | .id' \
                          | head -1)

                        if [ -z "$TASK_ID" ]; then
                          echo "ℹ️ No task-* label found on PR (not a play workflow PR)"
                          exit 0
                        fi

                        echo "Task ID: $TASK_ID"

                        # Find workflow by labels
                        WORKFLOW_NAME=$(kubectl get workflows -n agent-platform \
                          -l task-id=$TASK_ID,workflow-type=play-orchestration \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -z "$WORKFLOW_NAME" ]; then
                          echo "ℹ️ No workflow found for task-id=$TASK_ID (may be for different repo/workflow)"
                          exit 0
                        fi

                        echo "Found workflow: $WORKFLOW_NAME"

                        # Check if workflow is at correct stage
                        CURRENT_STAGE=$(kubectl get workflow $WORKFLOW_NAME \
                          -n agent-platform \
                          -o jsonpath='{.metadata.labels.current-stage}' \
                          2>/dev/null || echo "")

                        if [ "$CURRENT_STAGE" = "waiting-ready-for-qa" ]; then
                          echo "Found workflow at correct stage, resuming..."

                          # Resume the workflow
                          kubectl patch workflow $WORKFLOW_NAME \
                            -n agent-platform \
                            --type='merge' \
                            -p '{"spec":{"suspend":false}}'

                          echo "✅ Workflow resumed successfully"
                        else
                          echo "Workflow not at expected stage (current: $CURRENT_STAGE)"
                          echo "Skipping resume to prevent incorrect stage progression"
                        fi
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2

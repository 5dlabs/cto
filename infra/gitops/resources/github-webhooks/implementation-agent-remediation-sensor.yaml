---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: implementation-agent-remediation
  namespace: argo
  labels:
    sensor-type: multi-agent-orchestration
    agent-class: implementation
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: implementation-push-event
      eventSourceName: github
      eventName: org
      filters:
        data:
          # Filter for push events
          - path: headers.X-Github-Event
            type: string
            value: ["push"]
          # Match any 5DLabs implementation agent (Rex, Blaze, Morgan, etc.)
          - path: body.sender.login
            type: string
            comparator: "~"
            value: "5DLabs-(Rex|Blaze|Morgan)\\[bot\\]|5DLabs-(Rex|Blaze|Morgan)"
          # Ensure push is to a task branch
          - path: body.ref
            type: string
            comparator: "~"
            value: "refs/heads/task-.*"
  triggers:
    # Trigger 1: Create cleanup workflow to cancel running quality agents
    - template:
        name: create-cleanup-workflow
        conditions: "implementation-push-event"
        argoWorkflow:
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: cleanup-quality-agents-
                namespace: argo
              spec:
                entrypoint: cleanup-quality-agents
                arguments:
                  parameters:
                    - name: task-id
                      value: ""
                    - name: pushing-agent
                      value: ""
                templates:
                  - name: cleanup-quality-agents
                    inputs:
                      parameters:
                        - name: task-id
                        - name: pushing-agent
                    script:
                      image: bitnami/kubectl:latest
                      command: [sh]
                      source: |
                        #!/bin/sh
                        echo "Implementation agent {{inputs.parameters.pushing-agent}} pushed to task-{{inputs.parameters.task-id}}"
                        echo "Cancelling quality/testing agent CodeRuns for task-{{inputs.parameters.task-id}}"

                        # Delete quality agent CodeRuns for this specific task only
                        kubectl delete coderun -n argo \
                          -l "task-id={{inputs.parameters.task-id}},github-app notin (5DLabs-Rex,5DLabs-Blaze,5DLabs-Morgan)" \
                          || true
                        echo "QA pipeline cleanup complete for task-{{inputs.parameters.task-id}}"
          parameters:
            # Extract task ID from branch name for task-specific cleanup
            - src:
                dependencyName: implementation-push-event
                dataTemplate: |
                  {{ $ref := .Input.body.ref }}
                  {{ if hasPrefix $ref "refs/heads/task-" }}
                    {{ $branch := trimPrefix "refs/heads/task-" $ref }}
                    {{ $parts := splitList "-" $branch }}
                    {{ if gt (len $parts) 0 }}
                      {{ index $parts 0 }}
                    {{ end }}
                  {{ else }}
                    0
                  {{ end }}
              dest: spec.arguments.parameters.0.value
            # Extract the pushing agent name for logging
            - src:
                dependencyName: implementation-push-event
                dataTemplate: |
                  {{ $login := .Input.body.sender.login }}
                  {{ if hasPrefix $login "5DLabs-" }}
                    {{ $agent := trimPrefix "5DLabs-" $login }}
                    {{ $agent := trimSuffix "[bot]" $agent }}
                    {{ lower $agent }}
                  {{ else }}
                    unknown
                  {{ end }}
              dest: spec.arguments.parameters.1.value
      retryStrategy:
        steps: 3
        duration: "5s"
        factor: 2
        jitter: 0.1
    # Trigger 2: Log the remediation event for monitoring
    - template:
        name: log-remediation-event
        conditions: "implementation-push-event"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: v1
              kind: Event
              metadata:
                generateName: implementation-remediation-
                namespace: argo
              involvedObject:
                apiVersion: agents.platform/v1
                kind: CodeRun
                name: task-remediation
                namespace: argo
              type: Normal
              reason: "AgentPushDetected"
          parameters:
            # Dynamic message with agent and task info
            - src:
                dependencyName: implementation-push-event
                dataTemplate: "Implementation agent pushed to task branch, restarting QA pipeline"
              dest: message



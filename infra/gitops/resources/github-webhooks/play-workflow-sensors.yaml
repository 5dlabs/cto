---
# Sensor for PR Created Event - Resume after implementation work
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: play-workflow-pr-created
  namespace: argo
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: github-pr-created
      eventSourceName: github
      eventName: org
      filters:
        data:
          # Filter for pull_request opened events
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request"]
          - path: body.action
            type: string
            value: ["opened"]
  triggers:
    - template:
        name: resume-after-pr-created
        conditions: "github-pr-created"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: resume-pr-created-
                namespace: agent-platform
                labels:
                  type: webhook-resume
                  target-stage: waiting-pr-created
              spec:
                entrypoint: resume-workflow
                serviceAccountName: argo-workflow
                arguments:
                  parameters:
                    - name: pr-number
                      value: "{{ .Input.body.pull_request.number }}"
                    - name: pr-url
                      value: "{{ .Input.body.pull_request.html_url }}"
                    - name: pr-labels
                      value: "{{ .Input.body.pull_request.labels | toJson }}"
                templates:
                  - name: resume-workflow
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        echo "=== PR Created Workflow Resume ==="
                        echo "PR Number: {{workflow.parameters.pr-number}}"
                        echo "PR URL: {{workflow.parameters.pr-url}}"

                        # Extract task ID from PR labels (case-insensitive TASK- prefix)
                        TASK_ID=$(echo '{{workflow.parameters.pr-labels}}' | \
                          jq -r '.[] | .name | ascii_downcase | capture("task-(?<id>[0-9]+)") | .id' | head -1)

                        if [ -z "$TASK_ID" ]; then
                          echo "ERROR: No task-* label found on PR"
                          exit 1
                        fi

                        echo "Task ID: $TASK_ID"

                        # Find workflow by labels (since actual names have random suffixes)
                        WORKFLOW_NAME=$(kubectl get workflows -n agent-platform \
                          -l task-id=$TASK_ID,workflow-type=play-orchestration \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -z "$WORKFLOW_NAME" ]; then
                          echo "ERROR: No workflow found for task-id=$TASK_ID"
                          exit 1
                        fi

                        echo "Found workflow: $WORKFLOW_NAME"

                        # Check if workflow is suspended at the expected stage
                        CURRENT_STAGE=$(kubectl get workflow $WORKFLOW_NAME -n agent-platform \
                          -o jsonpath='{.metadata.labels.current-stage}' 2>/dev/null || echo "unknown")

                        echo "Current stage: $CURRENT_STAGE"

                        if [ "$CURRENT_STAGE" = "waiting-pr-created" ]; then
                          echo "✅ Workflow is at expected stage, resuming..."

                          # Set environment variables for PR context
                          PR_NUMBER={{workflow.parameters.pr-number}}
                          PR_URL={{workflow.parameters.pr-url}}

                          # Patch the workflow to add PR context parameters
                          kubectl patch workflow $WORKFLOW_NAME -n agent-platform --type='merge' -p "{
                            \"spec\": {
                              \"arguments\": {
                                \"parameters\": [
                                  {\"name\": \"pr-url\", \"value\": \"$PR_URL\"},
                                  {\"name\": \"pr-number\", \"value\": \"$PR_NUMBER\"}
                                ]
                              }
                            }
                          }"

                          # Resume the workflow
                          argo resume $WORKFLOW_NAME -n agent-platform

                          echo "✅ Workflow resumed successfully"
                        else
                          echo "Workflow not at expected stage (current: $CURRENT_STAGE)"
                          echo "Skipping resume to prevent incorrect stage progression"
                        fi
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2
        jitter: 0.1

---
# Sensor for Ready-for-QA Label Added - Resume after quality work
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: play-workflow-ready-for-qa
  namespace: argo
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: github-label-added
      eventSourceName: github
      eventName: org
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request"]
          - path: body.action
            type: string
            value: ["labeled"]
          - path: body.label.name
            type: string
            value: ["ready-for-qa"]
  triggers:
    - template:
        name: resume-after-ready-for-qa
        conditions: "github-label-added"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: resume-ready-qa-
                namespace: agent-platform
                labels:
                  type: webhook-resume
                  target-stage: waiting-ready-for-qa
              spec:
                entrypoint: resume-workflow
                serviceAccountName: argo-workflow
                templates:
                  - name: resume-workflow
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        echo "=== Ready-for-QA Webhook Resume ==="
                        
                        # Find any workflow waiting for QA resumption
                        WORKFLOW_NAME=$(kubectl get workflows -n agent-platform \
                          -l current-stage=waiting-ready-for-qa,workflow-type=play-orchestration \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -z "$WORKFLOW_NAME" ]; then
                          echo "No workflow found waiting for ready-for-qa"
                          exit 0
                        fi

                        echo "Found workflow: $WORKFLOW_NAME"

                        # Resume the workflow
                        argo resume $WORKFLOW_NAME -n agent-platform
                        echo "✅ Workflow resumed successfully"
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2
        jitter: 0.1

---
# Sensor for PR Approved - Resume after testing work
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: play-workflow-pr-approved
  namespace: argo
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: github-pr-approved
      eventSourceName: github
      eventName: org
      filters:
        data:
          # Filter for pull_request_review submitted events with approval
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request_review"]
          - path: body.action
            type: string
            value: ["submitted"]
          - path: body.review.state
            type: string
            value: ["approved"]
  triggers:
    - template:
        name: resume-after-pr-approved
        conditions: "github-pr-approved"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: resume-pr-approved-
                namespace: agent-platform
                labels:
                  type: webhook-resume
                  target-stage: waiting-pr-approved
              spec:
                entrypoint: resume-workflow
                serviceAccountName: argo-workflow
                arguments:
                  parameters:
                    - name: review-state
                      value: "{{ .Input.body.review.state }}"
                    - name: reviewer
                      value: "{{ .Input.body.review.user.login }}"
                    - name: pr-labels
                      value: "{{ .Input.body.pull_request.labels | toJson }}"
                templates:
                  - name: resume-workflow
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        echo "=== PR Approved Workflow Resume ==="
                        echo "Review State: {{workflow.parameters.review-state}}"
                        echo "Reviewer: {{workflow.parameters.reviewer}}"

                        # Extract task ID from PR labels (case-insensitive TASK- prefix)
                        TASK_ID=$(echo '{{workflow.parameters.pr-labels}}' | \
                          jq -r '.[] | .name | ascii_downcase | capture("task-(?<id>[0-9]+)") | .id' | head -1)

                        if [ -z "$TASK_ID" ]; then
                          echo "ERROR: No task-* label found on PR"
                          exit 1
                        fi

                        echo "Task ID: $TASK_ID"

                        # Find workflow by labels (since actual names have random suffixes)
                        WORKFLOW_NAME=$(kubectl get workflows -n agent-platform \
                          -l task-id=$TASK_ID,workflow-type=play-orchestration \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -z "$WORKFLOW_NAME" ]; then
                          echo "ERROR: No workflow found for task-id=$TASK_ID"
                          exit 1
                        fi

                        echo "Found workflow: $WORKFLOW_NAME"

                        # Check if workflow is suspended at the expected stage
                        CURRENT_STAGE=$(kubectl get workflow $WORKFLOW_NAME -n agent-platform \
                          -o jsonpath='{.metadata.labels.current-stage}' 2>/dev/null || echo "unknown")

                        echo "Current stage: $CURRENT_STAGE"

                        if [ "$CURRENT_STAGE" = "waiting-pr-approved" ]; then
                          echo "✅ Workflow is at expected stage, resuming..."

                          # Resume the workflow
                          argo resume $WORKFLOW_NAME -n agent-platform

                          echo "✅ Workflow resumed successfully"
                        else
                          echo "Workflow not at expected stage (current: $CURRENT_STAGE)"
                          echo "Skipping resume to prevent incorrect stage progression"
                        fi
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2
        jitter: 0.1

---
# Sensor for Implementation Agent Remediation - Cancel outdated work
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: implementation-agent-remediation
  namespace: argo
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: github-rex-push
      eventSourceName: github
      eventName: org
      filters:
        data:
          # Filter for push events from Rex implementation agent
          - path: headers.X-Github-Event
            type: string
            value: ["push"]
          - path: body.pusher.name
            type: string
            value: ["rex-5dlabs[bot]"]
  triggers:
    - template:
        name: cancel-outdated-agents
        conditions: "github-rex-push"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: cancel-outdated-
                namespace: agent-platform
                labels:
                  type: remediation
              spec:
                entrypoint: cancel-outdated-workflows
                serviceAccountName: argo-workflow
                arguments:
                  parameters:
                    - name: pusher-name
                      value: "{{ .Input.body.pusher.name }}"
                    - name: ref
                      value: "{{ .Input.body.ref }}"
                    - name: head-commit
                      value: "{{ .Input.body.head_commit.id }}"
                templates:
                  - name: cancel-outdated-workflows
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        echo "=== Implementation Agent Remediation ==="
                        echo "Pusher: {{workflow.parameters.pusher-name}}"
                        echo "Ref: {{workflow.parameters.ref}}"
                        echo "Head Commit: {{workflow.parameters.head-commit}}"

                        # Extract branch name
                        BRANCH_NAME=$(echo "{{workflow.parameters.ref}}" | sed 's|refs/heads/||')
                        echo "Branch: $BRANCH_NAME"

                        # Extract task ID from branch name
                        TASK_ID=$(echo "$BRANCH_NAME" | grep -oE 'task-?([0-9]+)' | head -1 | sed 's/task-\?//')

                        if [ -z "$TASK_ID" ]; then
                          echo "No task ID found in branch name, skipping remediation"
                          exit 0
                        fi

                        echo "Task ID: $TASK_ID"

                        # Find CodeRuns for quality and testing agents on this task
                        echo "Looking for outdated CodeRuns to cancel..."
                        kubectl get coderuns -n agent-platform \
                          -l task-id=$TASK_ID \
                          -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.metadata.labels.agent-type}{"\n"}{end}' | \
                        while read coderun_name agent_type; do
                          if [ "$agent_type" = "cleo" ] || [ "$agent_type" = "tess" ]; then
                            echo "Cancelling outdated CodeRun: $coderun_name (agent: $agent_type)"
                            kubectl patch coderun $coderun_name -n agent-platform --type='merge' -p '{"spec":{"suspend":true}}'
                          fi
                        done

                        echo "✅ Remediation completed"
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2
        jitter: 0.1
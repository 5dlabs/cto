---
# Sensor for PR Merged to Main - Complete task and start next
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: play-workflow-pr-merged
  namespace: argo
spec:
  replicas: 2
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: github-pr-merged
      eventSourceName: github
      eventName: org
      filters:
        data:
          # Filter for pull_request closed events with merged=true
          - path: headers.X-Github-Event
            type: string
            value: ["pull_request"]
          - path: body.action
            type: string
            value: ["closed"]
          - path: body.pull_request.merged
            type: bool
            value: [true]
          - path: body.pull_request.base.ref
            type: string
            value: ["main"]
  triggers:
    - template:
        name: task-completion-handler
        conditions: "github-pr-merged"
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: task-complete-
                namespace: agent-platform
                labels:
                  type: task-completion
                  trigger: merge-to-main
              spec:
                entrypoint: handle-task-completion
                serviceAccountName: argo-workflow
                activeDeadlineSeconds: 600  # 10 minute timeout
                arguments:
                  parameters:
                    - name: pr-title
                      # Will be populated from event
                    - name: pr-number
                      # Will be populated from event
                    - name: pr-url
                      # Will be populated from event
                    - name: merge-sha
                      # Will be populated from event
                    - name: merged-by
                      # Will be populated from event
          parameters:
            - dest: spec.arguments.parameters.0.value
              src:
                dependencyName: github-pr-merged
                dataKey: body.pull_request.title
            - dest: spec.arguments.parameters.1.value
              src:
                dependencyName: github-pr-merged
                dataKey: body.pull_request.number
            - dest: spec.arguments.parameters.2.value
              src:
                dependencyName: github-pr-merged
                dataKey: body.pull_request.html_url
            - dest: spec.arguments.parameters.3.value
              src:
                dependencyName: github-pr-merged
                dataKey: body.pull_request.merge_commit_sha
            - dest: spec.arguments.parameters.4.value
              src:
                dependencyName: github-pr-merged
                dataKey: body.pull_request.merged_by.login
                templates:
                  - name: handle-task-completion
                    script:
                      image: alpine/k8s:1.31.0
                      command: [bash]
                      source: |
                        #!/bin/bash
                        set -e

                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                        echo "‚ïë                 TASK COMPLETION HANDLER                      ‚ïë"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                        echo "üìã PR Title: {{workflow.parameters.pr-title}}"
                        echo "üî¢ PR Number: {{workflow.parameters.pr-number}}"
                        echo "üîó PR URL: {{workflow.parameters.pr-url}}"
                        echo "üì¶ Merge SHA: {{workflow.parameters.merge-sha}}"
                        echo "üë§ Merged by: {{workflow.parameters.merged-by}}"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

                        # Extract task ID from PR title (e.g., "Task 1: Initialize..." -> "1")
                        PR_TITLE="{{workflow.parameters.pr-title}}"
                        TASK_ID=$(echo "$PR_TITLE" | grep -oE '[Tt]ask[- ]?([0-9]+)' | sed -E 's/[Tt]ask[- ]?//')

                        if [ -z "$TASK_ID" ]; then
                          echo "‚ö†Ô∏è No task ID found in PR title, checking PR body and branch..."
                          # Could also check branch name or PR body for task ID
                          exit 0
                        fi

                        echo "‚úÖ Task $TASK_ID completed via merge to main"

                        # ============================================================
                        # STEP 1: Complete current orchestration workflow
                        # ============================================================
                        echo ""
                        echo "üîç Looking for orchestration workflow for task $TASK_ID..."

                        # LESSON LEARNED: Race condition - workflow might still be transitioning
                        # Try multiple times with delay
                        MAX_ATTEMPTS=12  # 1 minute total
                        ATTEMPT=1
                        CURRENT_WORKFLOW=""

                        while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ -z "$CURRENT_WORKFLOW" ]; do
                          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Looking for workflow..."

                          # Don't filter by Running status - workflow might be suspended
                          CURRENT_WORKFLOW=$(kubectl get workflows -n agent-platform \
                            -l task-id=$TASK_ID,workflow-type=play-orchestration \
                            -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                          if [ -z "$CURRENT_WORKFLOW" ] && [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                            echo "Workflow not found yet, waiting 5 seconds..."
                            sleep 5
                          fi
                          ATTEMPT=$((ATTEMPT + 1))
                        done

                        if [ -n "$CURRENT_WORKFLOW" ]; then
                          echo "Found workflow: $CURRENT_WORKFLOW"

                          # LESSON LEARNED: Check workflow phase to understand state
                          WORKFLOW_PHASE=$(kubectl get workflow $CURRENT_WORKFLOW -n agent-platform \
                            -o jsonpath='{.status.phase}' 2>/dev/null || echo "Unknown")
                          echo "Workflow phase: $WORKFLOW_PHASE"

                          # LESSON LEARNED: Find the specific suspend node by display name
                          # Must check both node type and displayName
                          NODE_ID=$(kubectl get workflow $CURRENT_WORKFLOW -n agent-platform -o json | \
                            jq -r '.status.nodes | to_entries | .[] |
                            select(.value.displayName == "wait-merge-to-main" and .value.type == "Suspend") |
                            .key')

                          if [ -n "$NODE_ID" ]; then
                            echo "Found suspend node: $NODE_ID"

                            # LESSON LEARNED: Check node phase before trying to resume
                            NODE_PHASE=$(kubectl get workflow $CURRENT_WORKFLOW -n agent-platform -o json | \
                              jq -r ".status.nodes.\"$NODE_ID\".phase")
                            echo "Node phase: $NODE_PHASE"

                            if [ "$NODE_PHASE" = "Running" ]; then
                              echo "Resuming suspend node..."
                              kubectl patch workflow $CURRENT_WORKFLOW -n agent-platform \
                                --type='merge' -p "{\"status\":{\"nodes\":{\"$NODE_ID\":{\"phase\":\"Succeeded\"}}}}"
                              echo "‚úÖ Task $TASK_ID workflow completed successfully"
                            else
                              echo "‚ö†Ô∏è Node already in phase: $NODE_PHASE"
                            fi
                          else
                            echo "‚ö†Ô∏è No wait-merge-to-main suspend node found"
                            # Try legacy wait-pr-approved node
                            NODE_ID=$(kubectl get workflow $CURRENT_WORKFLOW -n agent-platform -o json | \
                              jq -r '.status.nodes | to_entries | .[] |
                              select(.value.displayName == "wait-pr-approved" and .value.type == "Suspend") |
                              .key')
                            if [ -n "$NODE_ID" ]; then
                              NODE_PHASE=$(kubectl get workflow $CURRENT_WORKFLOW -n agent-platform -o json | \
                                jq -r ".status.nodes.\"$NODE_ID\".phase")
                              if [ "$NODE_PHASE" = "Running" ]; then
                                echo "Found legacy wait-pr-approved node, resuming..."
                                kubectl patch workflow $CURRENT_WORKFLOW -n agent-platform \
                                  --type='merge' -p "{\"status\":{\"nodes\":{\"$NODE_ID\":{\"phase\":\"Succeeded\"}}}}"
                                echo "‚úÖ Task $TASK_ID workflow completed (legacy)"
                              else
                                echo "‚ö†Ô∏è Legacy node already in phase: $NODE_PHASE"
                              fi
                            fi
                          fi
                        else
                          echo "‚ÑπÔ∏è No orchestration workflow found for task $TASK_ID"
                        fi

                        # ============================================================
                        # STEP 2: Start next task in queue
                        # ============================================================
                        NEXT_TASK_ID=$((TASK_ID + 1))

                        echo ""
                        echo "üöÄ Preparing to start Task $NEXT_TASK_ID..."

                        # Check if we've reached the end of tasks
                        MAX_TASKS=29  # Configure this based on your task set
                        if [ $NEXT_TASK_ID -gt $MAX_TASKS ]; then
                          echo "üéâ All tasks completed! No more tasks in queue."
                          exit 0
                        fi

                        # Check if next task is already running (avoid duplicates)
                        EXISTING_NEXT=$(kubectl get workflows -n agent-platform \
                          -l task-id=$NEXT_TASK_ID,workflow-type=play-orchestration \
                          --field-selector status.phase=Running \
                          -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

                        if [ -n "$EXISTING_NEXT" ]; then
                          echo "‚ö†Ô∏è Task $NEXT_TASK_ID is already running: $EXISTING_NEXT"
                          exit 0
                        fi

                        echo "Creating orchestration workflow for Task $NEXT_TASK_ID..."

                        # Create the next task workflow
                        cat <<EOF | kubectl create -f -
                        apiVersion: argoproj.io/v1alpha1
                        kind: Workflow
                        metadata:
                          generateName: play-task-${NEXT_TASK_ID}-
                          namespace: agent-platform
                          labels:
                            task-id: "$NEXT_TASK_ID"
                            workflow-type: play-orchestration
                            triggered-by: task-completion
                            previous-task: "$TASK_ID"
                        spec:
                          entrypoint: orchestrate
                          serviceAccountName: argo-workflow
                          activeDeadlineSeconds: 172800  # 48 hours
                          arguments:
                            parameters:
                              - name: task-id
                                value: "$NEXT_TASK_ID"
                              - name: github-owner
                                value: "5dlabs"
                              - name: github-repo
                                value: "cto-play-test"
                              - name: docs-repo
                                value: "cto"
                          templates:
                            - name: orchestrate
                              steps:
                                # Stage 1: Rex Implementation
                                - - name: implementation
                                    template: run-rex

                                # Stage 2: Wait for PR creation
                                - - name: wait-pr-created
                                    template: suspend-for-stage
                                    arguments:
                                      parameters:
                                        - name: stage
                                          value: "waiting-pr-created"

                                # Stage 3: Cleo Code Quality
                                - - name: quality
                                    template: run-cleo

                                # Stage 4: Wait for ready-for-qa label
                                - - name: wait-ready-for-qa
                                    template: suspend-for-stage
                                    arguments:
                                      parameters:
                                        - name: stage
                                          value: "waiting-ready-for-qa"

                                # Stage 5: Tess QA Testing
                                - - name: testing
                                    template: run-tess

                                # Stage 6: Wait for merge to main
                                - - name: wait-merge-to-main
                                    template: suspend-for-stage
                                    arguments:
                                      parameters:
                                        - name: stage
                                          value: "waiting-merge-to-main"

                                # Stage 7: Task complete
                                - - name: task-complete
                                    template: log-completion

                            - name: suspend-for-stage
                              inputs:
                                parameters:
                                  - name: stage
                              suspend: {}
                              metadata:
                                labels:
                                  current-stage: "{{inputs.parameters.stage}}"

                            - name: run-rex
                              resource:
                                action: create
                                manifest: |
                                  apiVersion: agents.platform/v1
                                  kind: CodeRun
                                  metadata:
                                    generateName: coderun-implementation-task{{workflow.parameters.task-id}}-
                                    namespace: agent-platform
                                    labels:
                                      task-id: "{{workflow.parameters.task-id}}"
                                      workflow-stage: "implementation"
                                      agent-type: "rex"
                                  spec:
                                    service: "task{{workflow.parameters.task-id}}"
                                    github_app: "5DLabs-Rex"
                                    github_owner: "{{workflow.parameters.github-owner}}"
                                    github_repo: "{{workflow.parameters.github-repo}}"
                                    docs_repository_url: "https://github.com/{{workflow.parameters.github-owner}}/{{workflow.parameters.docs-repo}}"
                                    task_id: {{workflow.parameters.task-id}}

                            - name: run-cleo
                              resource:
                                action: create
                                manifest: |
                                  apiVersion: agents.platform/v1
                                  kind: CodeRun
                                  metadata:
                                    generateName: coderun-quality-task{{workflow.parameters.task-id}}-
                                    namespace: agent-platform
                                    labels:
                                      task-id: "{{workflow.parameters.task-id}}"
                                      workflow-stage: "quality"
                                      agent-type: "cleo"
                                  spec:
                                    service: "task{{workflow.parameters.task-id}}"
                                    github_app: "5DLabs-Cleo"
                                    github_owner: "{{workflow.parameters.github-owner}}"
                                    github_repo: "{{workflow.parameters.github-repo}}"
                                    # Cleo will find the PR created by Rex

                            - name: run-tess
                              resource:
                                action: create
                                manifest: |
                                  apiVersion: agents.platform/v1
                                  kind: CodeRun
                                  metadata:
                                    generateName: coderun-testing-task{{workflow.parameters.task-id}}-
                                    namespace: agent-platform
                                    labels:
                                      task-id: "{{workflow.parameters.task-id}}"
                                      workflow-stage: "testing"
                                      agent-type: "tess"
                                  spec:
                                    service: "task{{workflow.parameters.task-id}}"
                                    github_app: "5DLabs-Tess"
                                    github_owner: "{{workflow.parameters.github-owner}}"
                                    github_repo: "{{workflow.parameters.github-repo}}"
                                    # Tess will find the PR with ready-for-qa label

                            - name: log-completion
                              script:
                                image: alpine:3.18
                                command: [sh]
                                source: |
                                  echo "‚úÖ Task {{workflow.parameters.task-id}} completed successfully!"
                                  echo "Merged to main and ready for production."
                        EOF

                        if [ $? -eq 0 ]; then
                          echo "‚úÖ Successfully started Task $NEXT_TASK_ID workflow"
                          echo ""
                          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                          echo "‚ïë                    TASK PROGRESSION                          ‚ïë"
                          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                          echo "‚úÖ Task $TASK_ID: COMPLETED"
                          echo "üöÄ Task $NEXT_TASK_ID: STARTED"
                          echo "üìä Progress: $TASK_ID/$MAX_TASKS tasks completed"
                          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                        else
                          echo "‚ùå Failed to start Task $NEXT_TASK_ID workflow"
                          exit 1
                        fi
      retryStrategy:
        steps: 3
        duration: "10s"
        factor: 2
        jitter: 0.1

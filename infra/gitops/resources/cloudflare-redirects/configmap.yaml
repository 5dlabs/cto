---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflare-redirect-script
  namespace: external-dns
  labels:
    app.kubernetes.io/name: cloudflare-redirects
    app.kubernetes.io/part-of: platform
data:
  configure-redirects.sh: |
    #!/bin/sh
    set -euo pipefail

    # Install required packages
    echo "Installing curl and jq..."
    apk update && apk add --no-cache curl jq

    # Configuration
    ZONE_NAME="5dlabs.ai"
    REDIRECT_URL="https://github.com/5dlabs"
    RULE_NAME="5dlabs-to-github"
    echo "Starting Cloudflare redirect rule configuration..."

    # Get Zone ID
    echo "Getting zone ID for $ZONE_NAME..."
    ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$ZONE_NAME" \
      -H "Authorization: Bearer $CF_API_TOKEN" \
      -H "Content-Type: application/json" | \
      jq -r '.result[0].id')

    if [ "$ZONE_ID" = "null" ] || [ -z "$ZONE_ID" ]; then
      echo "Error: Could not find zone ID for $ZONE_NAME"
      exit 1
    fi

    echo "Found zone ID: $ZONE_ID"

    # Check if redirect rule already exists
    echo "Checking for existing redirect rules..."
    EXISTING_RULE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/rulesets/phases/http_request_redirect/entrypoint" \
      -H "Authorization: Bearer $CF_API_TOKEN" \
      -H "Content-Type: application/json" | \
      jq -r ".result.rules[]? | select(.description == \"$RULE_NAME\") | .id")

    # Create the redirect rule configuration
    RULE_CONFIG=$(cat <<EOF
    {
      "rules": [
        {
          "description": "$RULE_NAME",
          "enabled": true,
          "expression": "(http.host eq \"5dlabs.ai\" or http.host eq \"www.5dlabs.ai\")",
          "action": "redirect",
          "action_parameters": {
            "from_value": {
              "status_code": 301,
              "target_url": {
                "value": "$REDIRECT_URL"
              },
              "preserve_query_string": false
            }
          }
        }
      ]
    }
    EOF
    )

    # Execute the API call and capture result  
    if [ -n "$EXISTING_RULE" ]; then
      echo "Redirect rule already exists with ID: $EXISTING_RULE"
      echo "Updating existing rule..."
    else
      echo "Creating new redirect rule..."
    fi

    RESULT=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/rulesets/phases/http_request_redirect/entrypoint" \
      -H "Authorization: Bearer $CF_API_TOKEN" \
      -H "Content-Type: application/json" \
      -d "$RULE_CONFIG")
    
    echo "$RESULT" | jq '.'
    
    # Check for permission errors
    SUCCESS=$(echo "$RESULT" | jq -r '.success')
    if [ "$SUCCESS" != "true" ]; then
      ERROR_CODE=$(echo "$RESULT" | jq -r '.errors[0].code // empty')
      ERROR_MSG=$(echo "$RESULT" | jq -r '.errors[0].message // empty')
      
      if [ "$ERROR_CODE" = "10000" ]; then
        echo ""
        echo "❌ CLOUDFLARE API PERMISSION ERROR DETECTED"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Your API token lacks permissions for redirect rules."
        echo ""
        echo "🔧 QUICK FIX:"
        echo "1. Go to: https://dash.cloudflare.com/profile/api-tokens"
        echo "2. Edit your existing token"  
        echo "3. Add permission: Zone:Zone Settings:Edit"
        echo "4. Save the token"
        echo ""
        echo "💡 Current token works for DNS (external-dns) but needs"
        echo "   Zone Settings permission for redirect rules."
        echo ""
        echo "🔄 After updating token, ArgoCD will retry automatically."
        exit 1
      else
        echo "❌ Unexpected error: $ERROR_MSG (code: $ERROR_CODE)"
        exit 1
      fi
    fi
  
  echo "✅ Redirect rule configuration completed successfully!"
  echo "Domains $ZONE_NAME and www.$ZONE_NAME will now redirect to $REDIRECT_URL"

---
# Example PostgreSQL cluster for development environments
# This creates a minimal 2-node PostgreSQL cluster with basic settings
# Suitable for development and testing, NOT for production

apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: postgres-dev
  namespace: databases
  labels:
    team: platform
    environment: development
    app.kubernetes.io/name: postgres-dev
    app.kubernetes.io/component: database
spec:
  # Team identifier (used for RBAC and resource ownership)
  teamId: "platform"

  # PostgreSQL version
  postgresql:
    version: "17"  # Latest stable version
    parameters:
      # PostgreSQL configuration parameters
      max_connections: "200"
      shared_buffers: "256MB"
      effective_cache_size: "1GB"
      maintenance_work_mem: "64MB"
      checkpoint_completion_target: "0.9"
      wal_buffers: "16MB"
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      work_mem: "4MB"
      min_wal_size: "1GB"
      max_wal_size: "4GB"

      # Enable useful extensions
      shared_preload_libraries: "bg_mon,pg_stat_statements,pgextwlist,pg_auth_mon"

      # Logging
      log_statement: "all"
      log_duration: "on"
      log_min_duration_statement: "100ms"

  # Number of instances (minimum 2 for HA)
  numberOfInstances: 2

  # Volume configuration
  volume:
    size: 20Gi
    storageClass: local-path  # Adjust based on your cluster

  # Resource limits for PostgreSQL pods
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 1Gi
      cpu: 500m

  # Users and databases
  users:
    # Application user
    appuser:
      - createdb
      - login
    # Read-only user for analytics
    readonly_user:
      - login
    # Admin user with superuser privileges
    admin:
      - superuser
      - createdb

  databases:
    app_db: appuser      # Main application database
    analytics_db: appuser # Analytics database
    test_db: appuser     # Test database

  # Optional: prepared databases with extensions
  preparedDatabases:
    app_db:
      defaultUsers: true
      extensions:
        pg_stat_statements:
          schema: "public"
        pgcrypto:
          schema: "public"
        uuid-ossp:
          schema: "public"
    analytics_db:
      defaultUsers: true
      extensions:
        pg_stat_statements:
          schema: "public"

  # Backup configuration (optional)
  # Uncomment and configure for S3/GCS backups
  # env:
  #   - name: WAL_S3_BUCKET
  #     value: "postgres-backups"
  #   - name: AWS_REGION
  #     value: "us-east-1"
  #   - name: BACKUP_SCHEDULE
  #     value: "0 2 * * *"  # Daily at 2 AM

  # Connection pooler configuration (optional)
  enableConnectionPooler: true
  connectionPooler:
    numberOfInstances: 2
    mode: "transaction"  # transaction or session
    schema: "pooler"
    user: "pooler"
    resources:
      requests:
        cpu: 50m
        memory: 50Mi
      limits:
        cpu: 100m
        memory: 100Mi

  # Pod priority class (optional)
  # podPriorityClassName: "high-priority"

  # Tolerations (optional)
  # tolerations:
  #   - key: "database"
  #     operator: "Equal"
  #     value: "postgres"
  #     effect: "NoSchedule"

  # Node affinity (optional)
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: node-type
  #         operator: In
  #         values:
  #         - database

  # Maintenance window for automatic updates
  maintenanceWindows:
    - everyday: 03:00-04:00  # UTC time

---
# Service to expose PostgreSQL (optional, operator creates services automatically)
# This is just for reference
apiVersion: v1
kind: Service
metadata:
  name: postgres-dev-pooler
  namespace: databases
  labels:
    team: platform
    cluster-name: postgres-dev
spec:
  type: ClusterIP
  selector:
    cluster-name: postgres-dev
    connection-pooler: postgres-dev-pooler
  ports:
    - name: pgbouncer
      port: 5432
      targetPort: 5432
      protocol: TCP

#!/bin/bash
set -euo pipefail

# Script to generate agent-templates ConfigMaps from template files
# Splits into multiple ConfigMaps to stay under Kubernetes' 1MB limit

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CHART_DIR="$(dirname "$SCRIPT_DIR")"
OUTPUT_DIR="$CHART_DIR/templates"

cd "$CHART_DIR"

echo "Generating split ConfigMaps from agent templates..."

# Function to create a ConfigMap file
create_configmap() {
  local group_name=$1
  local pattern=$2
  local output_file="$OUTPUT_DIR/agent-templates-${group_name}.yaml"
  
  echo ""
  echo "Creating ConfigMap for: $group_name (pattern: $pattern)"
  
  # Header
  cat > "$output_file" << 'HEADER_EOF'
# This file is auto-generated by scripts/generate-agent-templates-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-GROUP_NAME
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
  annotations:
    templates-checksum: "CHECKSUM_PLACEHOLDER"
binaryData:
HEADER_EOF

  # Replace GROUP_NAME placeholder
  if [ "$(uname)" = "Darwin" ]; then
    sed -i '' "s/GROUP_NAME/${group_name}/" "$output_file"
  else
    sed -i "s/GROUP_NAME/${group_name}/" "$output_file"
  fi
  
  # Find matching files
  local files_list=$(find "agent-templates" -type f \( -name "*.hbs" -o -name "*.sh" -o -name "*.md" -o -name "*.txt" -o -name "*.xml" \) | LC_ALL=C sort | grep -E "$pattern" || true)
  
  if [ -z "$files_list" ]; then
    echo "  ⚠️ No files found for pattern: $pattern"
    rm "$output_file"
    return 0
  fi
  
  # Compute checksum
  local checksum_tmp=$(mktemp)
  trap 'rm -f "$checksum_tmp"' EXIT
  
  while IFS= read -r f; do
    [ -z "$f" ] && continue
    printf '%s\n' "$f" >> "$checksum_tmp"
    cat "$f" >> "$checksum_tmp"
    printf '\n' >> "$checksum_tmp"
  done <<< "$files_list"
  
  local checksum
  if command -v shasum >/dev/null 2>&1; then
    checksum=$(shasum -a 256 "$checksum_tmp" | awk '{print $1}')
  else
    checksum=$(openssl dgst -sha256 -r "$checksum_tmp" | awk '{print $1}')
  fi
  
  if [ "$(uname)" = "Darwin" ]; then
    sed -i '' "s/CHECKSUM_PLACEHOLDER/${checksum}/" "$output_file"
  else
    sed -i "s/CHECKSUM_PLACEHOLDER/${checksum}/" "$output_file"
  fi
  
  # Add files
  local file_count=0
  while IFS= read -r file; do
    [ -z "$file" ] && continue
    
    local key=$(echo "$file" | sed 's/agent-templates\///' | sed 's/\//_/g')
    echo "  Processing: $file -> $key"
    
    local encoded=$(base64 < "$file" | tr -d '\n')
    echo "  $key: $encoded" >> "$output_file"
    ((file_count++))
  done <<< "$files_list"
  
  local size=$(wc -c < "$output_file" | tr -d ' ')
  echo "  ✅ Generated: $(basename $output_file)"
  echo "  📊 Files: $file_count, Size: $size bytes"
  
  if [ "$size" -gt 1048576 ]; then
    echo "  ⚠️  WARNING: ConfigMap exceeds 1MB limit! ($size bytes)"
    return 1
  fi
  
  return 0
}

# Generate each ConfigMap group
# Split by CLI and component type to stay under 1MB

create_configmap "shared" "agents/"
create_configmap "claude" "code/claude/"  
create_configmap "cursor" "code/cursor/"
create_configmap "codex" "code/codex/"
create_configmap "factory" "code/factory/"
create_configmap "opencode" "code/opencode/"
create_configmap "code-shared" "code/[^/]+\.(hbs|md|sh)$"  # Files directly in code/
create_configmap "docs" "docs/"
create_configmap "intake" "intake/"

echo ""
echo "✅ All ConfigMaps generated successfully!"
echo ""
echo "Generated files:"
ls -lh "$OUTPUT_DIR"/agent-templates-*.yaml 2>/dev/null || echo "  (none generated - all configs may be empty)"
echo ""
echo "Next steps:"
echo "1. Review the generated files in: $OUTPUT_DIR/"
echo "2. Commit to Git: git add $OUTPUT_DIR/agent-templates-*.yaml && git commit -m 'fix: split agent templates into multiple ConfigMaps under 1MB'"
echo "3. Push to trigger ArgoCD sync: git push"

#!/bin/bash
set -euo pipefail

# Script to generate the agent-templates ConfigMap from template files
# This solves the ArgoCD .Files issue by creating a static ConfigMap

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CHART_DIR="$(dirname "$SCRIPT_DIR")"
OUTPUT_FILE="$CHART_DIR/templates/agent-templates-static.yaml"

cd "$CHART_DIR"

echo "Generating static ConfigMap from agent templates..."

# Header with metadata that uses Helm templates
cat > "$OUTPUT_FILE" << 'HEADER_EOF'
# This file is auto-generated by scripts/generate-agent-templates-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
  annotations:
    templates-checksum: "CHECKSUM_PLACEHOLDER"
binaryData:
HEADER_EOF

# Gather files deterministically (portable across macOS/Linux)
FILES_LIST=$(find "agent-templates" -type f \( -name "*.hbs" -o -name "*.sh" -o -name "*.md" \) | LC_ALL=C sort)

# Compute a deterministic checksum over file paths + contents
checksum_tmp=$(mktemp)
trap 'rm -f "$checksum_tmp"' EXIT
while IFS= read -r f; do
  # Include path line and content bytes to the checksum stream
  printf '%s\n' "$f" >> "$checksum_tmp"
  cat "$f" >> "$checksum_tmp"
  printf '\n' >> "$checksum_tmp"
done <<< "$FILES_LIST"

if command -v shasum >/dev/null 2>&1; then
  CHECKSUM=$(shasum -a 256 "$checksum_tmp" | awk '{print $1}')
else
  # Fallback to openssl if shasum is unavailable
  CHECKSUM=$(openssl dgst -sha256 -r "$checksum_tmp" | awk '{print $1}')
fi

# Inject checksum
sed -i.bak "s/CHECKSUM_PLACEHOLDER/${CHECKSUM}/" "$OUTPUT_FILE" && rm "$OUTPUT_FILE.bak"

# Write data keys in sorted, stable order
while IFS= read -r file; do
  # Convert path to ConfigMap key format
  key=$(echo "$file" | sed 's/agent-templates\///' | sed 's/\//_/g')

  echo "  Processing: $file -> $key"

  # Base64 encode the content (single line for YAML)
  encoded=$(base64 < "$file" | tr -d '\n')

  # Add to ConfigMap
  echo "  $key: $encoded" >> "$OUTPUT_FILE"
done <<< "$FILES_LIST"

echo "Generated: $OUTPUT_FILE"
echo "Checksum: $CHECKSUM"
echo "Total size: $(wc -c < "$OUTPUT_FILE") bytes"

# Validate the generated file
if [ $(wc -c < "$OUTPUT_FILE") -gt 1048576 ]; then
  echo "WARNING: ConfigMap exceeds 1MB limit!"
  exit 1
fi

echo "âœ… ConfigMap generation complete!"
echo ""
echo "Next steps:"
echo "1. Review the generated file: $OUTPUT_FILE"
echo "2. Commit it to Git: git add $OUTPUT_FILE && git commit -m 'chore: update agent templates ConfigMap'"
echo "3. Push to trigger ArgoCD sync: git push"
echo "4. (Optional) Apply immediately: ./scripts/apply-agent-templates-configmap.sh"

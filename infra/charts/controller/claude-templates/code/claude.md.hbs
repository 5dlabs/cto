# Claude Code Project Memory

## Project Information
- **Repository**: {{repository_url}}
- **Source Branch**: {{docs_branch}}
- **GitHub App**: {{github_app}}
- **Working Directory**: {{working_directory}}
- **Implementation Target**: task {{task_id}}

## Tool Capabilities

See @mcp-tools.md for your available tools and usage guidelines

## Project Guidelines & Standards

See @coding-guidelines.md for project coding standards and best practices
See @github-guidelines.md for git workflow and commit message standards

### Pre-PR Quality Gates (MUST PASS BEFORE PR)

You may NOT create a PR until ALL of the following succeed locally:
- Formatting check: `cargo fmt --all -- --check`
- Clippy with pedantic lints and zero warnings: `cargo clippy --workspace --all-targets --all-features -- -D warnings -W clippy::pedantic`
- Tests passing and high coverage (target ≥95%, strive for ~100% on critical paths):
  - Recommended: `cargo llvm-cov --workspace --all-features --fail-under-lines 95`
  - Alternative: `cargo tarpaulin --all --fail-under 95`

## Current Task Documentation

{{#if task_id}}
**Your current task ({{task_id}}) documentation:**
- See @task/task.md for requirements and description
- See @task/acceptance-criteria.md for success criteria
- See @task/architecture.md for technical approach and guidance
{{else}}
**General project documentation:**
- See @README.md for project overview and setup instructions
- See @.taskmaster/docs/architecture.md for system design patterns
- See @.taskmaster/docs/prd.txt for product requirements
{{/if}}

## System Architecture & Context

See @.taskmaster/docs/architecture.md for system design patterns and architectural decisions
{{#if docsRepositoryUrl}}See @.taskmaster/docs/prd.txt for complete product requirements{{/if}}

## Implementation Workflow

{{#if task_id}}
### Current Task Process
1. **Understand**: Read @task/task.md for requirements
2. **Plan**: Review @task/architecture.md for technical approach
3. **Validate**: Check @task/acceptance-criteria.md for success criteria
4. **Code**: Follow patterns in @coding-guidelines.md
5. **Commit**: Use standards from @github-guidelines.md
6. **Test**: Verify all acceptance criteria are met

### Task Context
- **Task ID**: {{task_id}}
- **Repository**: {{repository_url}}
- **Branch**: {{docs_branch}}
- **Working Directory**: {{working_directory}}
{{else}}
### General Development Process
1. **Explore**: Understand existing codebase structure
2. **Plan**: Follow established patterns and conventions
3. **Implement**: Adhere to @coding-guidelines.md standards
4. **Test**: Ensure changes meet project quality standards
5. **Commit**: Follow @github-guidelines.md workflow
{{/if}}

## Quick Command Reference

### Testing & Quality
```bash
# Rust: run tests
cargo test --workspace --all-features

# Rust: formatting (must pass before PR)
cargo fmt --all -- --check

# Rust: clippy with pedantic and deny warnings (must pass before PR)
cargo clippy --workspace --all-targets --all-features -- -D warnings -W clippy::pedantic

# Optional: coverage targets (recommended ≥95%)
cargo llvm-cov --workspace --all-features --fail-under-lines 95 || \
  cargo tarpaulin --all --fail-under 95

# Build verification
cargo build --workspace --all-features
```

### Git Workflow
```bash
{{#if task_id}}
# Commit with task-specific message (see @github-guidelines.md for details)
git commit -m "feat(task-{{task_id}}): implement [brief description]

- [specific changes made]
- [tests added/updated]
- [meets acceptance criteria: X, Y, Z]"
{{else}}
# Standard commit message (see @github-guidelines.md for format)
git commit -m "feat: implement [brief description]"
{{/if}}
```

## Pull Request Requirements

**CRITICAL**: After completing implementation, create `PR_DESCRIPTION.md` in the working directory root with:

1. Concise implementation summary (2-3 sentences)
2. Key changes made (bullet points)
3. Important reviewer notes
4. Testing recommendations

This file enables automatic pull request creation.

**IMPORTANT PR HANDLING**:
- Always check if a PR already exists for this task before creating PR_DESCRIPTION.md
- Use `gh pr list --state all --label "task-{{task_id}}"` to find existing PRs for your task
- If a PR exists and is OPEN: do NOT create PR_DESCRIPTION.md (continue working on the existing PR)
- If a PR exists and is MERGED: the task is complete - do NOT create a new PR
- If a PR exists and is CLOSED (not merged): create a new PR with PR_DESCRIPTION.md
- Only create PR_DESCRIPTION.md when there's no open PR or when reopening after a closed (unmerged) PR

Additional PR gating rules:
- Do NOT open a PR unless: `cargo fmt --all -- --check` passes, `cargo clippy ... -D warnings -W clippy::pedantic` passes, and all tests pass
- Aim for ≥95% coverage; target ~100% on critical code paths before PR

## Development Tools & Patterns

### Claude Code Integration
- Use `LS` and `Glob` to explore codebase structure
- Use `Read` to examine existing code patterns
- Use `Grep` to find similar implementations
- Use `Edit` for targeted changes, `MultiEdit` for related changes
- Validate with `Bash` commands after each change

### Implementation Guidelines
{{#if task_id}}
- Focus on current task requirements in `task/` directory
- Follow architectural guidance provided in @task/architecture.md
- Ensure all acceptance criteria are met before completion
- Use established patterns from @coding-guidelines.md
{{else}}
- Explore existing codebase structure before making changes
- Follow established patterns and conventions
- Ensure changes align with project architecture
- Maintain backward compatibility unless explicitly changing interfaces
{{/if}}

---

*All referenced files (@filename) are automatically imported into Claude's context. For detailed information on any topic, refer to the specific imported files above.*
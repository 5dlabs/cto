#!/bin/sh

echo 'Starting documentation generation...'

# Disable interactive Git prompts globally
export GIT_TERMINAL_PROMPT=0
export GIT_ASKPASS=/bin/true
export SSH_ASKPASS=/bin/true

# Repository URL
REPO_URL="{{repository_url}}"

# GitHub App authentication is configured via environment variables
echo "Using GitHub App authentication (SSH not required)"

# Function to generate fresh GitHub App token (defined globally for reuse)
generate_github_token() {
    echo "Generating fresh GitHub App token..."

    # Check if credentials are available
    if [ -z "$GITHUB_APP_PRIVATE_KEY" ] || [ -z "$GITHUB_APP_ID" ]; then
        echo "‚ùå GITHUB_APP_PRIVATE_KEY or GITHUB_APP_ID not found"
        return 1
    fi

    # Create temporary private key file from environment variable
    TEMP_KEY_FILE="/tmp/github-app-key.pem"
    echo "$GITHUB_APP_PRIVATE_KEY" > "$TEMP_KEY_FILE"
    chmod 600 "$TEMP_KEY_FILE"

    echo "Using private key from environment variable"

    # Generate JWT token for GitHub App (fixed JWT generation for Linux containers)
    # JWT header
    JWT_HEADER=$(printf '{"alg":"RS256","typ":"JWT"}' | base64 -w 0 | tr '+/' '-_' | tr -d '=')

    # JWT payload with current time and expiration (10 minutes)
    NOW=$(date +%s)
    EXP=$((NOW + 600))
    JWT_PAYLOAD=$(printf '{"iat":%d,"exp":%d,"iss":"%s"}' "$NOW" "$EXP" "$GITHUB_APP_ID" | base64 -w 0 | tr '+/' '-_' | tr -d '=')

    # Sign the JWT
    JWT_SIGNATURE=$(printf '%s.%s' "$JWT_HEADER" "$JWT_PAYLOAD" | openssl dgst -sha256 -sign "$TEMP_KEY_FILE" -binary | base64 -w 0 | tr '+/' '-_' | tr -d '=')
    JWT_TOKEN="$JWT_HEADER.$JWT_PAYLOAD.$JWT_SIGNATURE"

    if [ -z "$JWT_TOKEN" ]; then
        echo "‚ùå Failed to generate JWT token"
        exit 1
    fi

    # Get installation ID for the repository
    REPO_OWNER=$(echo "{{repository_url}}" | sed -E 's|https://github.com/([^/]+)/.*|\1|')
    REPO_NAME=$(echo "{{repository_url}}" | sed -E 's|https://github.com/[^/]+/([^/]+)(\.git)?|\1|')

    echo "Getting installation ID for $REPO_OWNER/$REPO_NAME..."

    # Try repository installation first (follow redirects)
    INSTALLATION_RESPONSE=$(curl -s -L -H "Authorization: Bearer $JWT_TOKEN" \
        -H "Accept: application/vnd.github+json" \
        "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/installation")

    INSTALLATION_ID=$(echo "$INSTALLATION_RESPONSE" | jq -r '.id')

    # Fallback: try organization installation if repo lookup failed
    if [ "$INSTALLATION_ID" = "null" ] || [ -z "$INSTALLATION_ID" ]; then
        echo "‚ö†Ô∏è Repo installation not found, trying org installation..."
        ORG_INSTALLATION_RESPONSE=$(curl -s -L -H "Authorization: Bearer $JWT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/orgs/$REPO_OWNER/installation")
        INSTALLATION_ID=$(echo "$ORG_INSTALLATION_RESPONSE" | jq -r '.id')
    fi

    if [ "$INSTALLATION_ID" = "null" ] || [ -z "$INSTALLATION_ID" ]; then
        echo "‚ùå Failed to get installation ID for repository"
        echo "Response (repo): $INSTALLATION_RESPONSE"
        echo "Response (org):  ${ORG_INSTALLATION_RESPONSE:-[none]}"
        rm -f "$TEMP_KEY_FILE"
        exit 1
    fi

    echo "Installation ID: $INSTALLATION_ID"

    # Export for use by hooks
    export INSTALLATION_ID

    # Get installation access token
    TOKEN_RESPONSE=$(curl -s -X POST \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "Accept: application/vnd.github+json" \
        "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens")

    GITHUB_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.token')

    if [ "$GITHUB_TOKEN" = "null" ] || [ -z "$GITHUB_TOKEN" ]; then
        echo "‚ùå Failed to get installation access token"
        echo "Response: $TOKEN_RESPONSE"
        rm -f "$TEMP_KEY_FILE"
        exit 1
    fi

    # Clean up temporary key file
    rm -f "$TEMP_KEY_FILE"

    # Export the token for git to use
    export GITHUB_TOKEN

    # Store token generation time for refresh checks
    export TOKEN_GENERATED_AT=$(date +%s)

    # Configure git to use the token (use --replace-all to handle multiple existing helpers)
    git config --global --replace-all credential.helper store
    echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > ~/.git-credentials

    # Also authenticate gh CLI with the token
    echo "$GITHUB_TOKEN" | gh auth login --with-token

    echo "‚úì GitHub App authenticated successfully"
}

# Function to check if token needs refresh (call before git operations)
refresh_token_if_needed() {
    if [ -z "$TOKEN_GENERATED_AT" ]; then
        echo "‚ö†Ô∏è No token timestamp found, refreshing token..."
        generate_github_token
        return
    fi

    NOW=$(date +%s)
    TOKEN_AGE=$((NOW - TOKEN_GENERATED_AT))
    # Refresh if token is older than 50 minutes (GitHub tokens last 1 hour, refresh at 50 min to be safe)
    if [ $TOKEN_AGE -gt 3000 ]; then
        echo "üîÑ Token is $(($TOKEN_AGE / 60)) minutes old, refreshing..."
        generate_github_token
    fi
}

# Authenticate with GitHub App
if [ -n "$GITHUB_APP_PRIVATE_KEY" ] && [ -n "$GITHUB_APP_ID" ]; then
    # Initial authentication
    generate_github_token

    # Validate authentication by testing actual GitHub operations we'll need
    echo "üîç Validating GitHub authentication with actual operations..."
    REPO_OWNER=$(echo "$REPO_URL" | sed 's|https://github.com/||' | sed 's|/.*||')
    REPO_NAME=$(echo "$REPO_URL" | sed 's|.*/||')

    # Test 1: Can we access the repository?
    if gh api "repos/$REPO_OWNER/$REPO_NAME" > /tmp/repo_test.json 2>&1; then
        echo "‚úÖ Repository access confirmed"
    else
        echo "‚ùå Cannot access repository $REPO_OWNER/$REPO_NAME"
        echo "Error: $(cat /tmp/repo_test.json)"
        exit 1
    fi

    # Test 2: Can we list branches (needed for PR creation)?
    if gh api "repos/$REPO_OWNER/$REPO_NAME/branches" > /tmp/branches_test.json 2>&1; then
        echo "‚úÖ Can list branches"
    else
        echo "‚ùå Cannot list branches"
        echo "Error: $(cat /tmp/branches_test.json)"
        exit 1
    fi

    # Test 3: Can we get app info (GitHub Apps can't access user endpoint)?
    if gh api app > /tmp/app_test.json 2>&1; then
        APP_NAME=$(jq -r '.name' /tmp/app_test.json 2>/dev/null || echo "unknown")
        echo "‚úÖ GitHub App API access confirmed: $APP_NAME"
    else
        echo "‚úÖ App endpoint not accessible (normal for GitHub Apps) - using repo access as confirmation"
    fi

    echo "‚úÖ All GitHub authentication tests passed - proceeding with confidence"

else
    echo "‚ùå GITHUB_APP_PRIVATE_KEY or GITHUB_APP_ID not found"
    exit 1
fi


# Git configuration with proper GitHub App attribution
git config --global --add safe.directory /workspace

# Set GitHub App attribution - use generic format for all agents
GITHUB_APP="{{github_app}}"
# Generic attribution that works for any agent
GIT_AUTHOR_NAME="${GITHUB_APP} Agent (Claude Code)"
GIT_AUTHOR_EMAIL="${GITHUB_APP}[bot]@users.noreply.github.com"

# Configure git with proper GitHub App attribution
git config --global user.name "$GIT_AUTHOR_NAME"
git config --global user.email "$GIT_AUTHOR_EMAIL"

# Set environment variables for Claude Code to use
export GIT_AUTHOR_NAME="$GIT_AUTHOR_NAME"
export GIT_AUTHOR_EMAIL="$GIT_AUTHOR_EMAIL"
export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"

echo "‚úì Git configured"

# Repository setup
REPO_BRANCH="{{source_branch}}"
echo "Repository: $REPO_URL"
echo "Branch: $REPO_BRANCH"

if [ -d "/workspace/.git" ]; then
  echo "Repository exists, updating..."
  cd /workspace
  git remote set-url origin "$REPO_URL"
  git fetch origin
  git checkout "$REPO_BRANCH"
  git pull origin "$REPO_BRANCH"
else
  echo "Setting up repository..."
  # Clone to temp directory first, then move contents
  TEMP_CLONE_DIR="/tmp/repo-clone"
  rm -rf "$TEMP_CLONE_DIR"

  if ! git clone --depth 1 --branch "$REPO_BRANCH" "$REPO_URL" "$TEMP_CLONE_DIR"; then
    echo "‚ùå Failed to clone repository"
    exit 1
  fi

  # Move repository contents to workspace
  mv "$TEMP_CLONE_DIR"/* /workspace/ 2>/dev/null || true
  mv "$TEMP_CLONE_DIR"/.[^.]* /workspace/ 2>/dev/null || true
  rm -rf "$TEMP_CLONE_DIR"
  cd /workspace
fi

echo "‚úì Repository ready"

# Working directory setup
WORKING_DIR="{{working_directory}}"
if [ -n "$WORKING_DIR" ] && [ "$WORKING_DIR" != "." ]; then
  CLAUDE_WORK_DIR="/workspace/$WORKING_DIR"
  cd "$CLAUDE_WORK_DIR" || exit 1
  echo "‚úì Working directory: $CLAUDE_WORK_DIR"
else
  CLAUDE_WORK_DIR="/workspace"
  echo "‚úì Working directory: $CLAUDE_WORK_DIR"
fi

# Copy ConfigMap files
echo "Setting up ConfigMap files..."
if [ -d "/task-files" ]; then
  # Copy markdown files
  for md_file in /task-files/*.md; do
    if [ -f "$md_file" ]; then
      basename_file=$(basename "$md_file")
      if [ "$basename_file" = "claude.md" ]; then
        cp -f "$md_file" "$CLAUDE_WORK_DIR/CLAUDE.md"
      else
        cp -f "$md_file" "$CLAUDE_WORK_DIR/"
      fi
      echo "‚úì Copied $basename_file"
    fi
  done

  # Verify enterprise settings
  if [ -f "/etc/claude-code/managed-settings.json" ]; then
    echo "‚úì Enterprise settings verified"
    if ! jq empty /etc/claude-code/managed-settings.json 2>/dev/null; then
      echo "‚ùå Invalid enterprise settings JSON"
      exit 1
    fi
  else
    echo "‚ùå Enterprise settings not found"
    exit 1
  fi

  # Copy hook scripts (controller automatically includes any docs_hooks_* files)
  for hook_file in /task-files/hooks-*.sh; do
    if [ -f "$hook_file" ]; then
      hook_name=$(basename "$hook_file" | sed 's/^hooks-//')
      cp "$hook_file" "$CLAUDE_WORK_DIR/$hook_name"
      chmod +x "$CLAUDE_WORK_DIR/$hook_name"
      echo "‚úì Copied hook: $hook_name"
    fi
  done

else
  echo "‚ùå ConfigMap not mounted at /task-files"
  exit 1
fi

# Validate workspace
echo "Validating workspace..."
REQUIRED_FILES="CLAUDE.md"
for file in $REQUIRED_FILES; do
  if [ ! -f "$CLAUDE_WORK_DIR/$file" ]; then
    echo "‚ùå Missing required file: $file"
    exit 1
  fi
done

# Check for .taskmaster directory
if [ ! -d "$CLAUDE_WORK_DIR/.taskmaster" ]; then
  echo "‚ùå .taskmaster directory not found"
  exit 1
fi

# Ensure docs directory exists
mkdir -p "$CLAUDE_WORK_DIR/.taskmaster/docs"

## Handle task files - support both JSON and individual file formats
echo "Setting up task files..."
if [ -f "$CLAUDE_WORK_DIR/.taskmaster/tasks/tasks.json" ]; then
  echo "üìã Found tasks.json, generating individual task files..."

  # Robust extraction: base64-encode each task to keep one line per task, then decode fields
  gen_count=0
  jq -c '.tasks[]? | select(.id != null) | @base64' "$CLAUDE_WORK_DIR/.taskmaster/tasks/tasks.json" \
    | while IFS= read -r row; do
      _decode() { printf '%s' "$row" | base64 -d | jq -r "$1"; }
      task_id=$(_decode '.id')
      [ -n "$task_id" ] && [ "$task_id" != "null" ] || continue
      title=$(_decode '.title // "No Title"')
      description=$(_decode '.description // ""')
      details=$(_decode '.details // ""')
      test_strategy=$(_decode '.testStrategy // ""')

      task_dir="$CLAUDE_WORK_DIR/.taskmaster/docs/task-$task_id"
      mkdir -p "$task_dir"
      cat > "$task_dir/task.txt" << EOF
# Task $task_id: $title

## Description
$description

## Implementation Details
$details

## Test Strategy
$test_strategy
EOF

      # Generate XML format optimized for LLM consumption with enhanced structure
      # Extract additional fields for XML structure
      priority=$(_decode '.priority // "medium"')
      dependencies=$(_decode '.dependencies // []' | jq -r 'if type == "array" then . else [] end | join(", ")')
      status=$(_decode '.status // "pending"')

      # Determine technology stack from task content for role definition
      if echo "$details" | grep -qi "rust\|cargo\|tokio\|serde"; then
        tech_role="senior Rust developer specializing in Kubernetes controllers and cloud-native applications"
      elif echo "$details" | grep -qi "kubernetes\|k8s\|argo\|helm"; then
        tech_role="senior Kubernetes engineer specializing in GitOps workflows and Argo Events"
      elif echo "$details" | grep -qi "argo\|workflow\|events"; then
        tech_role="senior DevOps engineer specializing in Argo Workflows and event-driven automation"
      else
        tech_role="senior software engineer and coding agent specializing in the project's technology stack"
      fi

      # Extract technical specifications from task details
      specs=""
      if echo "$details" | grep -A 10 -i "technical\|requirements\|specifications" >/dev/null 2>&1; then
        specs_section=$(echo "$details" | sed -n '/technical\|requirements\|specifications/I,/^$/p' | head -10)
        while IFS= read -r line; do
          # Case-insensitive check to exclude section headers
          if [[ -n "$line" ]] && ! echo "$line" | grep -qi "^[[:space:]]*\(technical\|requirements\|specifications\)[[:space:]]*$"; then
            # XML escape the content
            escaped_line=$(echo "$line" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'\''/\&#39;/g')
            specs="${specs}<spec>$escaped_line</spec>
        "
          fi
        done <<< "$specs_section"
      fi

      # Fallback specs if none found
      if [ -z "$specs" ]; then
        specs="<spec>Follow the project&apos;s existing architecture and coding patterns</spec>
        <spec>Ensure compatibility with the current technology stack</spec>
        <spec>Implement proper error handling and logging</spec>
        <spec>Follow established security best practices</spec>"
      fi

      # Extract acceptance criteria from test strategy
      criteria=""
      if [ -n "$test_strategy" ]; then
        # Split test strategy into individual criteria on numbered items (1., 2., etc.)
        # Use word boundaries to avoid splitting on version numbers or decimals
        IFS=$'\n' read -rd '' -a test_parts <<< "$(echo "$test_strategy" | grep -E '^[[:space:]]*[0-9]+[[:space:]]*\.[[:space:]]*[A-Z]')"
        for part in "${test_parts[@]}"; do
          part=$(echo "$part" | sed 's/^[[:space:]]*[0-9]\+\.[[:space:]]*//;s/[[:space:]]*$//')
          if [ -n "$part" ] && [ ${#part} -gt 10 ]; then
            # XML escape the content
            escaped_part=$(echo "$part" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'\''/\&#39;/g')
            criteria="${criteria}<criterion>$escaped_part</criterion>
        "
          fi
        done
      fi

      # Fallback criteria if none extracted
      if [ -z "$criteria" ]; then
        criteria="<criterion>Implementation must be complete and functional</criterion>
        <criterion>Code must follow the project&apos;s style guidelines and conventions</criterion>
        <criterion>All edge cases should be properly handled</criterion>
        <criterion>Implementation should be well-documented with clear comments</criterion>"
      fi

      cat > "$task_dir/task.xml" << XML_EOF
<prompt>
    <role>You are a $tech_role.</role>
    <task>
        <id>$task_id</id>
        <title>$title</title>
        <description>$description</description>
        <priority>$priority</priority>
        <status>$status</status>
        <dependencies>$dependencies</dependencies>
    </task>
    <technical_specifications>
        $specs
    </technical_specifications>
    <implementation_details>
        $details
    </implementation_details>
    <acceptance_criteria>
        $criteria
    </acceptance_criteria>
    <test_strategy>
        $test_strategy
    </test_strategy>
    <instructions>
        Think step-by-step about the implementation approach. Consider the existing codebase structure and patterns.
        Provide complete, production-ready code that follows best practices. Include necessary imports,
        error handling, and documentation. Test your solution thoroughly before finalizing.
        Ensure compatibility with the existing technology stack and architectural patterns.
    </instructions>
</prompt>
XML_EOF

      gen_count=$((gen_count+1))
      echo "‚úì Generated docs/task-$task_id/task.txt"
      echo "‚úì Generated docs/task-$task_id/task.xml (XML format for LLM consumption)"
    done
  echo "Generated $gen_count task directories with txt and xml files from tasks.json"
elif [ -d "$CLAUDE_WORK_DIR/.taskmaster/tasks" ] && [ "$(ls -A "$CLAUDE_WORK_DIR/.taskmaster/tasks" 2>/dev/null)" ]; then
  echo "üìã Found individual task files, copying to docs directory..."

  # Copy individual task files from tasks/ to docs/ directory
  for task_dir in "$CLAUDE_WORK_DIR/.taskmaster/tasks"/task-*; do
    if [ -d "$task_dir" ]; then
      task_name=$(basename "$task_dir")
      target_dir="$CLAUDE_WORK_DIR/.taskmaster/docs/$task_name"
      mkdir -p "$target_dir"
      cp -r "$task_dir"/* "$target_dir/"
      echo "‚úì Copied $task_name to docs directory"
    fi
  done
else
  echo "‚ùå No task files found - expected either:"
  echo "  - tasks.json at .taskmaster/tasks/tasks.json"
  echo "  - Individual task directories at .taskmaster/tasks/task-*/"
  exit 1
fi

# Verify we have task files to work with
if [ ! -d "$CLAUDE_WORK_DIR/.taskmaster/docs" ] || [ -z "$(ls -A "$CLAUDE_WORK_DIR/.taskmaster/docs" 2>/dev/null)" ]; then
  echo "‚ùå No task files available in .taskmaster/docs directory"
  exit 1
fi

echo "‚úì Workspace validated"

# Environment setup
export SERVICE_NAME="{{service_name}}"
export SOURCE_BRANCH="{{source_branch}}"
export WORKING_DIR="{{working_directory}}"
export GITHUB_USER="{{github_app}}"
export GITHUB_APP="{{github_app}}"

# Start background token refresh process (every 45 minutes to stay ahead of 1-hour expiry)
(
    while true; do
        sleep 2700  # 45 minutes
        echo "[Background] Checking if token needs refresh..."
        if [ -n "$TOKEN_GENERATED_AT" ]; then
            NOW=$(date +%s)
            TOKEN_AGE=$((NOW - TOKEN_GENERATED_AT))
            echo "[Background] Token age: $(($TOKEN_AGE / 60)) minutes"
            if [ $TOKEN_AGE -gt 2700 ]; then
                echo "[Background] Refreshing GitHub token proactively..."
                if [ -n "$GITHUB_APP_PRIVATE_KEY" ] && [ -n "$GITHUB_APP_ID" ]; then
                    generate_github_token
                fi
            fi
        fi
    done
) &
TOKEN_REFRESH_PID=$!
echo "‚úì Started background token refresh process (PID: $TOKEN_REFRESH_PID)"

# Ensure we kill the background process on exit
trap "kill $TOKEN_REFRESH_PID 2>/dev/null || true" EXIT

# Claude execution
echo "Starting Claude execution (stream-json via FIFO)..."

# Check if system prompt file exists and add to command if available
CLAUDE_CMD="claude -p --output-format stream-json --input-format stream-json --verbose"

# Look for agent-specific system prompt file from agents ConfigMap
# The system prompt should be in the agents ConfigMap if configured
if [ -f "/config/agents/{{github_app}}_system-prompt.md" ]; then
    echo "‚úì Found system prompt file for {{github_app}}, adding to Claude command"
    CLAUDE_CMD="$CLAUDE_CMD --system-prompt /config/agents/{{github_app}}_system-prompt.md"
    if [ "${DEBUG_PROMPT:-false}" = "true" ]; then
        echo "[DEBUG] System prompt path: /config/agents/{{github_app}}_system-prompt.md"
        echo "[DEBUG] System prompt first 10 lines:"; head -n 10 "/config/agents/{{github_app}}_system-prompt.md" | sed 's/^/[DEBUG] /'
        echo "[DEBUG] ----"
    fi
elif [ -f "/task-files/{{github_app}}_system-prompt.md" ]; then
    # Fallback to task-files if included inline
    echo "‚úì Found system prompt in task ConfigMap for {{github_app}}"
    CLAUDE_CMD="$CLAUDE_CMD --system-prompt /task-files/{{github_app}}_system-prompt.md"
    if [ "${DEBUG_PROMPT:-false}" = "true" ]; then
        echo "[DEBUG] System prompt path: /task-files/{{github_app}}_system-prompt.md"
        echo "[DEBUG] System prompt first 10 lines:"; head -n 10 "/task-files/{{github_app}}_system-prompt.md" | sed 's/^/[DEBUG] /'
        echo "[DEBUG] ----"
    fi
else
    echo "‚ÑπÔ∏è No system prompt file found for agent {{github_app}}, using defaults"
fi

# Model is set via settings.json template, not CLI flag

# Safe mode toggle for debugging (prevents token consumption)
SAFE_MODE="false"  # Set to "false" for full docs generation

  if [ "$SAFE_MODE" = "true" ]; then
      echo "üõ°Ô∏è SAFE MODE ENABLED - Running simple test instead of full docs generation"
      FIFO_PATH="/workspace/agent-input.jsonl"
      rm -f "$FIFO_PATH" 2>/dev/null || true
      mkfifo "$FIFO_PATH"
      chmod 666 "$FIFO_PATH" || true
      # Start Claude (reader) first to avoid blocking on writer open
      $CLAUDE_CMD < "$FIFO_PATH" &
      CLAUDE_PID=$!
      # Now open persistent writer and send one message
      exec 9>"$FIFO_PATH"
      printf '{"type":"user","message":{"role":"user","content":[{"type":"text","text":"What time is it? Please answer this simple question and exit immediately."}]}}\n' >&9
      # Close writer so reader gets EOF and exits
      exec 9>&-
      wait $CLAUDE_PID
      CLAUDE_EXIT_CODE=$?
    echo "Safe mode test completed with exit code: $CLAUDE_EXIT_CODE"

    # Exit successfully to prevent PR creation in safe mode
    echo "‚úÖ Safe mode test complete, exiting without changes"
    exit 0
  else
      FIFO_PATH="/workspace/agent-input.jsonl"
      rm -f "$FIFO_PATH" 2>/dev/null || true
      mkfifo "$FIFO_PATH"
      chmod 666 "$FIFO_PATH" || true
      # Start Claude (reader) first to avoid blocking on writer open
      $CLAUDE_CMD < "$FIFO_PATH" &
      CLAUDE_PID=$!
      # Send initial prompt via sidecar HTTP when possible; fallback to FIFO
      if [ -f "prompt.md" ]; then
          INITIAL_TEXT=$(jq -Rs . < "prompt.md")
          if printf '{"text":%s}\n' "$INITIAL_TEXT" | \
               curl -fsS -X POST http://127.0.0.1:8080/input \
                 -H 'Content-Type: application/json' \
                 --data-binary @- >/dev/null 2>&1; then
            echo "‚úì Initial prompt sent via sidecar /input"
          else
            echo "‚ö†Ô∏è Sidecar /input failed, falling back to direct FIFO write"
            exec 9>"$FIFO_PATH"
            printf '{"type":"user","message":{"role":"user","content":[{"type":"text","text":%s}]}}\n' "$INITIAL_TEXT" >&9
          fi

          # Wait for Claude to complete, then close any fallback writer and request sidecar shutdown
          wait $CLAUDE_PID
          CLAUDE_EXIT_CODE=$?
          echo "Claude completed with exit code: $CLAUDE_EXIT_CODE"
          exec 9>&- 2>/dev/null || true
          if curl -fsS -X POST http://127.0.0.1:8080/shutdown >/dev/null 2>&1; then
            echo "‚úì Requested sidecar shutdown"
          else
            echo "‚ö†Ô∏è Failed to request sidecar shutdown (it may not be running)"
          fi
      else
          echo "‚ùå No prompt.md found"
          exit 1
      fi
  fi

# PR creation
echo "Creating pull request..."

# Ensure we're in the correct working directory for git operations
cd /workspace/{{working_directory}}

# Check for documentation changes (including untracked files)
echo "Checking for documentation changes..."
echo "Current directory: $(pwd)"

# Check for any changes in .taskmaster directory
MODIFIED_DOCS=$(git diff HEAD -- .taskmaster/ 2>/dev/null | wc -l)
STAGED_DOCS=$(git diff --cached HEAD -- .taskmaster/ 2>/dev/null | wc -l)
UNTRACKED_DOCS=$(git ls-files --others --exclude-standard .taskmaster/ 2>/dev/null | wc -l)

echo "Modified files: $MODIFIED_DOCS lines of diff"
echo "Staged files: $STAGED_DOCS lines of diff"
echo "Untracked files: $UNTRACKED_DOCS files"

if [ "$MODIFIED_DOCS" -eq 0 ] && [ "$STAGED_DOCS" -eq 0 ] && [ "$UNTRACKED_DOCS" -eq 0 ]; then
    echo "No documentation changes found in .taskmaster/"
    echo "Checking if .taskmaster exists:"
    ls -la .taskmaster/ 2>/dev/null || echo ".taskmaster directory not found"
    exit 0
fi

echo "‚úì Documentation changes detected, proceeding with PR creation..."

# Check if we're already on an auto-save branch from the hook
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" == docs/auto-save-* ]]; then
    echo "‚úì Already on auto-save branch from hook: $CURRENT_BRANCH"
    PR_BRANCH="$CURRENT_BRANCH"
    SOURCE_BRANCH="main"  # Assume we branched from main originally
else
    # Create new PR branch if not already on one
    SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    TIMESTAMP=$(date +%Y%m%d-%H%M%S)
    RANDOM_ID=$(date +%s | tail -c 6)
    PR_BRANCH="docs/{{#if task_id}}task-{{task_id}}{{else}}auto-gen{{/if}}-${TIMESTAMP}-${RANDOM_ID}"

    echo "Creating branch: $PR_BRANCH"
    if ! git checkout -b "$PR_BRANCH"; then
        echo "‚ùå Failed to create branch"
        exit 1
    fi
fi

echo "Staging all .taskmaster changes..."
git add .taskmaster/

echo "Checking for uncommitted changes..."
STAGED_FILES=$(git status --porcelain | grep "^[AM]" | wc -l)

if [ "$STAGED_FILES" -gt 0 ]; then
    echo "Showing what will be committed:"
    git status --porcelain

    echo "Committing changes..."
    if ! git commit -m "docs: generate Task Master documentation{{#if task_id}} (task {{task_id}}){{/if}}

- Auto-generated comprehensive task documentation
- Updated task breakdowns and implementation details
- Added acceptance criteria and workflow prompts
- Generated by orchestrator docs agent

ü§ñ Auto-generated by Claude docs agent"; then
        echo "‚ùå Failed to commit changes"
        echo "Git status:"
        git status
        exit 1
    fi
else
    echo "‚úì All changes already committed by auto-save hook"
fi

# Check if we need to push (there might be unpushed commits from hook)
if git rev-list --count origin/"$PR_BRANCH"..HEAD 2>/dev/null | grep -q '^0$'; then
    echo "‚úì Branch already up to date with origin"
else
    echo "Pushing branch..."
    if ! git push -u origin "$PR_BRANCH"; then
        echo "‚ùå Failed to push branch"
        echo "Retrying with verbose output..."
        GIT_CURL_VERBOSE=1 git push -u origin "$PR_BRANCH" 2>&1
        exit 1
    fi
fi

echo "‚úì Branch pushed successfully"

# Create PR
if command -v gh >/dev/null 2>&1; then
    # GitHub CLI should already be authenticated from the beginning of the script

    PR_TITLE="docs: auto-generate Task Master documentation{{#if task_id}} for task {{task_id}}{{/if}}"
    PR_BODY="Auto-generated Task Master documentation by orchestrator container script.

**Working Directory:** {{working_dir}}
**Branch:** \`$PR_BRANCH\` ‚Üí \`$SOURCE_BRANCH\`
**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
{{#if task_id}}**Target Task:** {{task_id}}{{/if}}

ü§ñ Auto-generated by Container Script"

    # Refresh GitHub token if needed before PR creation
    refresh_token_if_needed

    # Retry PR creation up to 3 times for transient failures
    PR_CREATED=false
    for attempt in 1 2 3; do
        echo "Creating PR (attempt $attempt/3)..."
        if gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base "$SOURCE_BRANCH" --head "$PR_BRANCH"; then
            echo "‚úì Pull request created successfully"
            PR_CREATED=true
            break
        else
            echo "‚ùå PR creation attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
                echo "‚è≥ Waiting 5 seconds before retry..."
                sleep 5
            fi
        fi
    done

    if [ "$PR_CREATED" = false ]; then
        echo "‚ùå Failed to create pull request after 3 attempts"
        echo "‚ö†Ô∏è Branch has been pushed, but PR creation failed"
        # Extract owner/repo from repository URL
        REPO_PATH=$(echo "{{repository_url}}" | sed -E 's|https://github.com/||' | sed 's|\.git$||')
        echo "üí° You can manually create a PR at: https://github.com/$REPO_PATH/pull/new/$PR_BRANCH"
        exit 1
    fi
else
    echo "‚ö†Ô∏è GitHub CLI not available - create PR manually"
fi

echo "Documentation generation completed successfully!"
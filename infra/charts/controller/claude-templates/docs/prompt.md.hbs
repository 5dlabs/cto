# CRITICAL: Complete Documentation Generation Task

{{!-- Safety toggle: set to false to run safe test mode --}}
{{#unless (eq "false" "true")}}

**üö® MANDATORY COMPLETION REQUIREMENT üö®**
You MUST complete ALL steps in this process. Partial completion is not acceptable. This is especially critical for large projects with many tasks.

## Task Overview
Generate comprehensive documentation for {{#if task_id}}task {{task_id}}{{else}}**ALL Task Master tasks**{{/if}}.

**If this is a large project with many tasks (10+ tasks), you MUST:**
- Process ALL tasks without stopping
- Show progress updates as you work through each task
- Complete the ENTIRE git workflow including PR creation
- Do NOT stop partway through - finish everything

## Required Process

### Step 0: MCP Tool Discovery and Usage Plan (REQUIRED)
Before reading project files, discover and plan how to use available MCP tools:
- List available MCP tools/servers (e.g., via tools/list). Summarize what you have.
- Form a brief plan mapping tools ‚Üí actions during documentation:
  - filesystem: read source files to extract accurate APIs, types, and code snippets. Always include file path(s) and concise snippets.
  - git: inspect history/blame to explain design choices or provide commit references when helpful.
  - rustdocs_query_rust_docs: fetch Rust API docs for referenced crates/modules; include short, relevant quotes and link/identifier names.
  - brave_web_search: gather external references, standards, or examples; cite URLs and summarize key points.
- Execute this plan throughout steps 1‚Äì3. Prefer primary sources (repo, Rust docs). Use web search when local sources are insufficient.

### Step 1: Context Analysis (REQUIRED)
1. Read CLAUDE.md for project context and standards
2. **Use individual task files:**
   - Individual task files have been pre-copied to `.taskmaster/docs/task-{id}/task.txt`
   - Each `task.txt` contains complete task information including subtasks and implementation details
3. Review architecture.md and prd.txt for context
{{#if include_codebase}}
4. **EXISTING PROJECT CONTEXT:**
   - **READ `.taskmaster/docs/codebase.md`** - This contains the complete existing codebase
   - Understand the current implementation state and architecture
   - Identify gaps between current code and task requirements
   - Focus on building upon existing patterns and code structure
   - Consider what's already implemented vs. what needs to be added
5. **For large projects: Announce total task count and confirm you will process ALL of them**
{{else}}
4. **For large projects: Announce total task count and confirm you will process ALL of them**
{{/if}}

**üéØ IMPORTANT: Use individual `task.txt` files for each task**
- Individual task files are available at: `.taskmaster/docs/task-{id}/task.txt`
- Example: task 1 ‚Üí `.taskmaster/docs/task-1/task.txt`, task 15 ‚Üí `.taskmaster/docs/task-15/task.txt`
- These files contain complete task information including subtasks and implementation details
- This approach allows efficient processing of large projects with many tasks

### Step 2: Documentation Generation (MANDATORY FOR ALL TASKS)
{{#if task_id}}
Focus specifically on task {{task_id}} and create:
{{else}}
**IMPORTANT: SKIP TASKS THAT ALREADY HAVE COMPLETE DOCUMENTATION**

Before processing any task, check if ALL required files already exist:
- `task.md`
- `prompt.md`
- `acceptance-criteria.md`

If ALL three files exist and have substantial content (not just stubs), SKIP that task to save tokens and time.

**YOU MUST CREATE DOCUMENTATION FOR EVERY TASK THAT NEEDS IT. DO NOT SKIP ANY INCOMPLETE TASKS.**

For each task that needs documentation (process ALL incomplete tasks, no exceptions):
{{/if}}
- `task.md` - Comprehensive task overview and implementation guide
- `prompt.md` - Autonomous prompt for AI agents
- `acceptance-criteria.md` - Clear acceptance criteria and test cases

While generating documents, actively use MCP tools to deepen technical detail:
- Use filesystem to open the most relevant files and include minimal, correct code excerpts (‚â§30 lines) with paths and brief explanations.
- Use git to reference meaningful commits or evolution where it clarifies intent or constraints.
- Use rustdocs_query_rust_docs for API semantics and correct type usage; include function/type names and brief quotes (‚â§25 words) with identifiers.
- Use brave_web_search for specs and external references; list top 1‚Äì3 links with one‚Äëline takeaways when relevant.

**Progress Requirements:**
- Announce each task as you start it: "üìù Processing Task [ID]: [Title]"
- Confirm completion of each task: "‚úÖ Completed Task [ID]"
- **For large projects: Provide periodic updates (every 5 tasks): "Progress: [X] of [Y] tasks completed"**

Place all documentation in `.taskmaster/docs/task-{id}/` directories.


### Step 3: Complete Documentation Generation
**‚ö†Ô∏è CRITICAL: You MUST generate ALL documentation files as specified above.**

**Git Workflow:** The orchestrator post-completion hook will automatically handle:
- Creating and checking out the feature branch: `docs-gen-{{source_branch}}`
- Staging all documentation files
- Committing with proper message
- Pushing to origin
- Creating pull request to target branch: `{{source_branch}}`

**Your Job:** Focus ONLY on generating the documentation files. Do NOT run any git commands.

‚úÖ **Final Confirmation Required:** "‚úÖ DOCUMENTATION FILES GENERATED - Hook will handle git workflow and PR creation"

## Error Handling
- If documentation generation fails, report the error and retry
- If file creation fails, check permissions and retry
- **DO NOT give up - complete the documentation generation**
- **Note:** Git workflow and PR creation are handled by the hook, not the agent

## Quality Standards
- Well-structured and comprehensive content
- Actionable implementation guidance
- Proper markdown formatting
- Code examples where relevant
- Clear cross-references between documents
- Maintain consistency across ALL documents

## Final Confirmation Required
**YOU MUST END WITH THIS EXACT MESSAGE:**
```
üéâ DOCUMENTATION GENERATION COMPLETE üéâ
‚úÖ Generated documentation for {{#if task_id}}task {{task_id}}{{else}}ALL tasks{{/if}}
‚úÖ Created all required documentation files (task.md, prompt.md, acceptance-criteria.md)
üìã Total files created: [COUNT]
üîß Generated comprehensive markdown documentation
üîó Git workflow and pull request will be handled automatically by orchestrator hook
```

**If you cannot provide this final confirmation, the task is NOT complete and you must continue working until it is done.**

{{else}}

## Safe Test Mode

What time is it? Please answer this simple question and exit immediately.

{{/unless}}

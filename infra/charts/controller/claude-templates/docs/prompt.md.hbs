# CRITICAL: Complete Documentation Generation Task

{{!-- Safety toggle: set to false to run safe test mode --}}
{{#unless (eq "false" "true")}}

**üö® MANDATORY COMPLETION REQUIREMENT üö®**
You MUST complete ALL steps in this process. Partial completion is not acceptable. This is especially critical for large projects with many tasks.

## Task Overview
Generate comprehensive documentation for {{#if task_id}}task {{task_id}}{{else}}**ALL Task Master tasks**{{/if}}.

**If this is a large project with many tasks (10+ tasks), you MUST:**
- Process ALL tasks without stopping
- Show progress updates as you work through each task
- Complete the ENTIRE git workflow including PR creation
- Do NOT stop partway through - finish everything

## Required Process

### Step 1: Context Analysis (REQUIRED)
1. Read CLAUDE.md for project context and standards
2. **Use individual task files:**
   - Individual task files have been pre-copied to `.taskmaster/docs/task-{id}/task.txt`
   - Each `task.txt` contains complete task information including subtasks and implementation details
3. Review architecture.md and prd.txt for context
{{#if include_codebase}}
4. **EXISTING PROJECT CONTEXT:**
   - **READ `.taskmaster/docs/codebase.md`** - This contains the complete existing codebase
   - Understand the current implementation state and architecture
   - Identify gaps between current code and task requirements
   - Focus on building upon existing patterns and code structure
   - Consider what's already implemented vs. what needs to be added
5. **For large projects: Announce total task count and confirm you will process ALL of them**
{{else}}
4. **For large projects: Announce total task count and confirm you will process ALL of them**
{{/if}}

**üéØ IMPORTANT: Use individual `task.txt` files for each task**
- Individual task files are available at: `.taskmaster/docs/task-{id}/task.txt`
- Example: task 1 ‚Üí `.taskmaster/docs/task-1/task.txt`, task 15 ‚Üí `.taskmaster/docs/task-15/task.txt`
- These files contain complete task information including subtasks and implementation details
- This approach allows efficient processing of large projects with many tasks

### Step 2: Documentation Generation (MANDATORY FOR ALL TASKS)
{{#if task_id}}
Focus specifically on task {{task_id}} and create:
{{else}}
**IMPORTANT: SKIP TASKS THAT ALREADY HAVE COMPLETE DOCUMENTATION**

Before processing any task, check if ALL required files already exist:
- `task.md` 
- `prompt.md`
- `acceptance-criteria.md`
- `client-config.json`
- `toolman-guide.md`

If ALL five files exist and have substantial content (not just stubs), SKIP that task to save tokens and time.

**YOU MUST CREATE DOCUMENTATION FOR EVERY TASK THAT NEEDS IT. DO NOT SKIP ANY INCOMPLETE TASKS.**

For each task that needs documentation (process ALL incomplete tasks, no exceptions):
{{/if}}
- `task.md` - Comprehensive task overview and implementation guide
- `prompt.md` - Autonomous prompt for AI agents
- `acceptance-criteria.md` - Clear acceptance criteria and test cases
- `client-config.json` - MCP client configuration for code implementation agents
- `toolman-guide.md` - Task-specific guide explaining which tools to use and when

**Progress Requirements:**
- Announce each task as you start it: "üìù Processing Task [ID]: [Title]"
- Confirm completion of each task: "‚úÖ Completed Task [ID]"
- **For large projects: Provide periodic updates (every 5 tasks): "Progress: [X] of [Y] tasks completed"**

Place all documentation in `.taskmaster/docs/task-{id}/` directories.

### Step 2.1: Toolman Configuration Generation (MANDATORY)

**üîß CRITICAL: Generate Simple MCP Client Configuration**

For each task, you MUST create a `client-config.json` file that is a **SIMPLE CLIENT CONFIGURATION** - NOT a task specification document.

**üö® IMPORTANT: This is a CLIENT CONFIG FILE, not a detailed task document!**

**REQUIRED FORMAT (EXACT STRUCTURE):**
```json
{
  "remoteTools": [
    "tool_name_1",
    "tool_name_2"
  ],
  "localServers": {
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/workspace"],
      "tools": ["read_file", "write_file", "list_directory", "create_directory", "edit_file"],
      "workingDirectory": "project_root"
    }
  }
}
```

**‚ùå DO NOT GENERATE:** 
- Task specifications with `task_id`, `task_name`, `task_type` 
- Complex metadata like `priority`, `status`, `estimated_duration`
- Detailed planning documents with `required_tools`, `recommended_tools`
- Nested configuration objects with `tool_configuration`, `technical_requirements`
- Any fields other than `remoteTools` and `localServers`

**‚úÖ CORRECT APPROACH:**
1. **Read the Catalog Below**: Examine available tools and capabilities
2. **Select Remote Tools**: Choose specific remote tool names from the catalog for `remoteTools` array
3. **Configure Local Servers**: Use exact command/args from catalog for local servers (usually just filesystem)
4. **Keep It Simple**: Only include `remoteTools` and `localServers` fields - nothing else!

**Example for Infrastructure Task:**
```json
{
  "remoteTools": [
    "kubernetes_listResources",
    "kubernetes_getResource",
    "kubernetes_createResource"
  ],
  "localServers": {
    "filesystem": {
      "command": "npx", 
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/workspace"],
      "tools": ["read_file", "write_file", "edit_file", "list_directory"],
      "workingDirectory": "project_root"
    }
  }
}
```

**Available Tool Catalog:**
The complete toolman catalog is provided below. Use ONLY tool names that appear in this catalog.

### Step 2.2: Toolman Guide Generation (MANDATORY)

**üìñ CRITICAL: Generate Task-Specific Tool Usage Guide**

For each task, you MUST create a comprehensive `toolman-guide.md` file that explains how and when to use the selected tools based on the catalog information.

**Guide Generation Requirements:**
1. **Use Catalog Descriptions**: Leverage the detailed tool descriptions, use cases, and categories from the catalog below
2. **Document Tool Arguments**: Clearly document all arguments, parameters, and configuration options for each selected tool based on catalog information
3. **Task-Specific Context**: Explain how each selected tool applies specifically to this task's requirements
4. **When to Use**: Provide clear guidance on when to use each tool during task implementation
5. **How to Use**: Include practical examples and best practices based on catalog information
6. **Tool Relationships**: Explain how tools work together and their sequence of use
7. **Common Patterns**: Reference the selection guidelines and patterns from the catalog

**Guide Structure:**
- **Overview**: Brief explanation of the tool selection for this task
- **Core Tools**: Primary tools with detailed usage instructions
- **Supporting Tools**: Secondary tools and their specific use cases
- **Implementation Flow**: Suggested order and workflow for using the tools
- **Best Practices**: Task-specific tips and recommendations
- **Troubleshooting**: Common issues and solutions based on tool capabilities

**Content Source**: Use the rich catalog information below as your primary source for tool descriptions, capabilities, use cases, and implementation guidance. The catalog contains everything you need to create comprehensive, actionable tool guides.

---

{{{toolman_catalog_markdown}}}

---

**Note**: All configuration format details, selection guidelines, examples, and validation requirements are provided in the tool catalog section above. Use that information to generate appropriate `client-config.json` files for each task.

### Step 3: Complete Documentation Generation
**‚ö†Ô∏è CRITICAL: You MUST generate ALL documentation files as specified above.**

**Git Workflow:** The orchestrator post-completion hook will automatically handle:
- Creating and checking out the feature branch: `docs-gen-{{source_branch}}`
- Staging all documentation files
- Committing with proper message
- Pushing to origin
- Creating pull request to target branch: `{{source_branch}}`

**Your Job:** Focus ONLY on generating the documentation files. Do NOT run any git commands.

‚úÖ **Final Confirmation Required:** "‚úÖ DOCUMENTATION FILES GENERATED - Hook will handle git workflow and PR creation"

## Error Handling
- If documentation generation fails, report the error and retry
- If file creation fails, check permissions and retry
- **DO NOT give up - complete the documentation generation**
- **Note:** Git workflow and PR creation are handled by the hook, not the agent

## Quality Standards
- Well-structured and comprehensive content
- Actionable implementation guidance
- Proper markdown formatting
- Code examples where relevant
- Clear cross-references between documents
- Maintain consistency across ALL documents

## Final Confirmation Required
**YOU MUST END WITH THIS EXACT MESSAGE:**
```
üéâ DOCUMENTATION GENERATION COMPLETE üéâ
‚úÖ Generated documentation for {{#if task_id}}task {{task_id}}{{else}}ALL tasks{{/if}}
‚úÖ Created all required documentation files (task.md, prompt.md, acceptance-criteria.md, client-config.json, toolman-guide.md)
üìã Total files created: [COUNT]
üîß Generated task-specific Toolman configurations for code implementation
üîó Git workflow and pull request will be handled automatically by orchestrator hook
```

**If you cannot provide this final confirmation, the task is NOT complete and you must continue working until it is done.**

{{else}}

## Safe Test Mode

What time is it? Please answer this simple question and exit immediately.

{{/unless}}
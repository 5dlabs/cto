# CRITICAL: Complete Documentation Generation Task

{{!-- Safety toggle: set to false to run safe test mode --}}
{{#unless (eq "false" "true")}}

**üö® MANDATORY COMPLETION REQUIREMENT üö®**
You MUST complete ALL steps in this process. Partial completion is not acceptable. This is especially critical for large projects with many tasks.

## Task Overview
Generate comprehensive documentation for {{#if task_id}}task {{task_id}}{{else}}**ALL Task Master tasks**{{/if}}.

**If this is a large project with many tasks (10+ tasks), you MUST:**
- Process ALL tasks without stopping
- Show progress updates as you work through each task
- Complete the ENTIRE git workflow including PR creation
- Do NOT stop partway through - finish everything

## Required Process

### Step 1: Context Analysis (REQUIRED)
1. Read CLAUDE.md for project context and standards
2. **Use individual task files:**
   - Individual task files have been pre-copied to `.taskmaster/docs/task-{id}/task.txt`
   - Each `task.txt` contains complete task information including subtasks and implementation details
3. Review architecture.md and prd.txt for context
{{#if include_codebase}}
4. **EXISTING PROJECT CONTEXT:**
   - **READ `.taskmaster/docs/codebase.md`** - This contains the complete existing codebase
   - Understand the current implementation state and architecture
   - Identify gaps between current code and task requirements
   - Focus on building upon existing patterns and code structure
   - Consider what's already implemented vs. what needs to be added
5. **For large projects: Announce total task count and confirm you will process ALL of them**
{{else}}
4. **For large projects: Announce total task count and confirm you will process ALL of them**
{{/if}}

**üéØ IMPORTANT: Use individual `task.txt` files for each task**
- Individual task files are available at: `.taskmaster/docs/task-{id}/task.txt`
- Example: task 1 ‚Üí `.taskmaster/docs/task-1/task.txt`, task 15 ‚Üí `.taskmaster/docs/task-15/task.txt`
- These files contain complete task information including subtasks and implementation details
- This approach allows efficient processing of large projects with many tasks

### Step 2: Documentation Generation (MANDATORY FOR ALL TASKS)
{{#if task_id}}
Focus specifically on task {{task_id}} and create:
{{else}}
**IMPORTANT: SKIP TASKS THAT ALREADY HAVE COMPLETE DOCUMENTATION**

Before processing any task, check if ALL required files already exist:
- `task.md`
- `prompt.md`
- `acceptance-criteria.md`
- `task.xml`

If ALL four files exist and have substantial content (not just stubs), SKIP that task to save tokens and time.

**YOU MUST CREATE DOCUMENTATION FOR EVERY TASK THAT NEEDS IT. DO NOT SKIP ANY INCOMPLETE TASKS.**

For each task that needs documentation (process ALL incomplete tasks, no exceptions):
{{/if}}
- `task.md` - Comprehensive task overview and implementation guide
- `prompt.md` - Autonomous prompt for AI agents
- `acceptance-criteria.md` - Clear acceptance criteria and test cases
- `task.xml` - XML-structured prompt optimized for LLM consumption

**Progress Requirements:**
- Announce each task as you start it: "üìù Processing Task [ID]: [Title]"
- Confirm completion of each task: "‚úÖ Completed Task [ID]"
- **For large projects: Provide periodic updates (every 5 tasks): "Progress: [X] of [Y] tasks completed"**

Place all documentation in `.taskmaster/docs/task-{id}/` directories.

### Step 2.3: XML Prompt Generation (MANDATORY)

**üîß CRITICAL: Generate XML-Structured Prompt for LLM Consumption**

For each task, you MUST create a `task.xml` file that combines all task information into an XML structure optimized for LLM processing. This single file will contain all the technical specifications, acceptance criteria, and implementation guidance needed for coding agents.

**REQUIRED XML STRUCTURE:**
```xml
<prompt>
    <role>You are a senior coding agent specializing in [technology stack from task].</role>
    <task>
        <id>[Task ID]</id>
        <title>[Task Title]</title>
        <description>[Complete task description]</description>
        <priority>[high|medium|low]</priority>
        <status>[pending|in-progress|done]</status>
        <dependencies>[comma-separated dependency IDs]</dependencies>
    </task>
    <technical_specifications>
        <spec>[Technical requirement 1]</spec>
        <spec>[Technical requirement 2]</spec>
        <spec>[Technical requirement N]</spec>
    </technical_specifications>
    <implementation_details>
        [Detailed implementation guidance from task.txt]
    </implementation_details>
    <acceptance_criteria>
        <criterion>[Acceptance criterion 1]</criterion>
        <criterion>[Acceptance criterion 2]</criterion>
        <criterion>[Acceptance criterion N]</criterion>
    </acceptance_criteria>
    <test_strategy>
        [Testing approach and requirements]
    </test_strategy>
    <instructions>
        Think step-by-step about the implementation approach. Consider the existing codebase structure and patterns.
        Provide complete, production-ready code that follows best practices. Include necessary imports,
        error handling, and documentation. Test your solution thoroughly before finalizing.
    </instructions>
</prompt>
```

**XML Generation Requirements:**
1. **Single Comprehensive File**: Combine task.md, prompt.md, and acceptance-criteria.md content into one XML structure
2. **Structured Data**: Use appropriate XML tags to organize information hierarchically
3. **LLM Optimization**: Follow the XML format proven to work best with Claude and other LLMs
4. **Complete Information**: Include ALL technical specifications, dependencies, and implementation details
5. **Machine Readable**: Ensure the XML is well-formed and parseable
6. **Role Definition**: Set appropriate role based on task technology stack (e.g., "senior Rust developer", "Kubernetes expert")
7. **Implementation Focus**: Emphasize production-ready code with proper error handling and testing

**Content Mapping Guidelines:**
- Extract role from task technology (Rust, Kubernetes, Go, etc.)
- Pull task details from the individual task.txt file
- Convert acceptance criteria into `<criterion>` elements
- Include all technical specifications as `<spec>` elements
- Add implementation details from task description
- Include test strategy from task requirements

### Step 3: Complete Documentation Generation
**‚ö†Ô∏è CRITICAL: You MUST generate ALL documentation files as specified above.**

**Git Workflow:** The orchestrator post-completion hook will automatically handle:
- Creating and checking out the feature branch: `docs-gen-{{source_branch}}`
- Staging all documentation files
- Committing with proper message
- Pushing to origin
- Creating pull request to target branch: `{{source_branch}}`

**Your Job:** Focus ONLY on generating the documentation files. Do NOT run any git commands.

‚úÖ **Final Confirmation Required:** "‚úÖ DOCUMENTATION FILES GENERATED - Hook will handle git workflow and PR creation"

## Error Handling
- If documentation generation fails, report the error and retry
- If file creation fails, check permissions and retry
- **DO NOT give up - complete the documentation generation**
- **Note:** Git workflow and PR creation are handled by the hook, not the agent

## Quality Standards
- Well-structured and comprehensive content
- Actionable implementation guidance
- Proper markdown formatting
- Code examples where relevant
- Clear cross-references between documents
- Maintain consistency across ALL documents

## Final Confirmation Required
**YOU MUST END WITH THIS EXACT MESSAGE:**
```
üéâ DOCUMENTATION GENERATION COMPLETE üéâ
‚úÖ Generated documentation for {{#if task_id}}task {{task_id}}{{else}}ALL tasks{{/if}}
‚úÖ Created all required documentation files (task.md, prompt.md, acceptance-criteria.md, task.xml)
üìã Total files created: [COUNT]
üîß Generated XML-structured prompts optimized for LLM consumption
üîó Git workflow and pull request will be handled automatically by orchestrator hook
```

**If you cannot provide this final confirmation, the task is NOT complete and you must continue working until it is done.**

{{else}}

## Safe Test Mode

What time is it? Please answer this simple question and exit immediately.

{{/unless}}
# CRITICAL: Complete Documentation Generation Task

{{!-- Safety toggle: set to false to run safe test mode --}}
{{#unless (eq "false" "true")}}

**üö® MANDATORY COMPLETION REQUIREMENT üö®**
You must finish every step below for each task that still needs documentation. Partial completion is not acceptable.

## Task Overview
Generate complete documentation for {{#if task_id}}task {{task_id}}{{else}}every Task Master task that is missing required files{{/if}}. For large projects (10+ tasks) announce total scope, provide progress updates after every 5 tasks, and keep working until all incomplete tasks are covered.

## Step 0: MCP Tool Discovery and Usage Plan (Required)
- List the available MCP tools/servers (for example via `tools/list`).
- Draft a short plan mapping tools to actions during documentation:
  - `filesystem`: open precise source files, capture accurate APIs, note file paths.
  - `git`: gather commit history or rationale when it clarifies intent.
  - `rustdocs_query_rust_docs`: quote authoritative Rust API snippets with identifiers.
  - `brave_web_search`: pull external standards/examples only when local sources are insufficient.
- Execute this plan throughout all later steps.

## Step 1: Context Analysis
1. Read `CLAUDE.md` for project conventions.
2. Use individual task files at `.taskmaster/docs/task-{id}/task.txt`; each contains the full task brief.
3. Review `.taskmaster/docs/architecture.md` and `.taskmaster/docs/prd.txt` for system context.
{{#if include_codebase}}
4. Read `.taskmaster/docs/codebase.md` to understand the current implementation, reuse patterns, and note deltas required by upcoming tasks.
{{/if}}

## Step 2: Determine Workload
Before starting any task, check whether all four required artifacts already exist with substantial content:
- `task.md`
- `prompt.md`
- `acceptance-criteria.md`
- `task.xml`

If every file is present and meaningful, skip that task. Otherwise, process it fully. Announce each task when you begin ("üìù Processing Task [ID]: [Title]") and confirm when done ("‚úÖ Completed Task [ID]").

## Step 3: Produce Documentation (Per Task)
Create or update all four deliverables inside `.taskmaster/docs/task-{id}/`:

### 3.1 `task.md`
- Summarize objectives, context, dependencies, and implementation plan.
- Reference specific source files or modules (‚â§30 line excerpts) discovered via MCP tools.
- Highlight architectural considerations and risks.

### 3.2 `prompt.md`
- Craft a standalone agent prompt that captures task intent, constraints, available tools, and success definition.
- Keep instructions concise and action-oriented so future agents can execute autonomously.

### 3.3 `acceptance-criteria.md`
- List clear, testable criteria (bulleted).
- Include manual/automated validation steps and relevant commands.

### 3.4 `task.xml`
- Generate the XML prompt using the structure below. Populate every element with task-specific information.
```xml
<prompt>
    <role>You are a senior coding agent specializing in [technology stack from task].</role>
    <task>
        <id>[Task ID]</id>
        <title>[Task Title]</title>
        <description>[Complete task description]</description>
        <priority>[high|medium|low]</priority>
        <status>[pending|in-progress|done]</status>
        <dependencies>[comma-separated dependency IDs]</dependencies>
    </task>
    <technical_specifications>
        <spec>[Technical requirement]</spec>
    </technical_specifications>
    <implementation_details>
        [Detailed implementation guidance from task.txt and analysis]
    </implementation_details>
    <acceptance_criteria>
        <criterion>[Acceptance criterion]</criterion>
    </acceptance_criteria>
    <test_strategy>
        [Testing approach and required commands]
    </test_strategy>
    <instructions>
        Think step-by-step, follow existing patterns, include necessary imports, error handling, and tests. Apply insights gathered via MCP tools to ensure correctness.
    </instructions>
</prompt>
```

### 3.5 Diagrams (When Helpful)
- If a task benefits from visualisation, create `.taskmaster/docs/task-{id}/diagrams.mmd` with Mermaid definitions (one file per task).
- Optionally render assets alongside the source, e.g. `mmdc -i diagrams.mmd -o diagrams.svg` or `.png`.
- Keep diagram notes concise and reference them from `task.md` where appropriate.

### 3.6 Reflection Checkpoint (After Each Task)
Immediately after finishing the required outputs (including diagrams if created):
1. Review the artifacts you just produced.
2. Note at least one improvement or insight to apply on the next task (e.g., missing code reference, unclear criteria).
3. State how you will adjust before beginning the next task and follow through.

## Step 4: Create Final Integration Task
After generating documentation for all PRD tasks, create one final integration task:

### 4.1 Copy Integration Templates
Copy the integration task templates from `/agent-templates/docs/templates/integration-task/` to `.taskmaster/docs/task-[FINAL_ID]/`:
```bash
# FINAL_ID = highest task ID + 1
cp -r /agent-templates/docs/templates/integration-task/* .taskmaster/docs/task-[FINAL_ID]/
```

### 4.2 Update Integration Task Files
Update the copied templates:
- In `task.txt`: Replace `ALL_OTHER_TASKS` with comma-separated list of all task IDs
- In `task.xml`: Replace `INTEGRATION_TASK_ID` with the final task ID
- In `task.xml`: Replace `ALL_DEPENDENCY_TASK_IDS` with comma-separated list of all task IDs
- All other template content should remain as-is (comprehensive instructions are already included)

### 4.3 Add to tasks.json
Append the integration task to `.taskmaster/tasks/tasks.json`:
```json
{
  "id": [FINAL_ID],
  "title": "Integration & Deployment Verification",
  "description": "Coordinate PR merges in dependency order, execute comprehensive integration tests, and verify deployment readiness across all services",
  "status": "pending",
  "dependencies": [LIST_ALL_PREVIOUS_TASK_IDS],
  "priority": "critical",
  "agentHint": "integration",
  "details": "Comprehensive integration task - see .taskmaster/docs/task-[FINAL_ID]/ for full instructions",
  "testStrategy": "Execute full integration test suite, verify all service health endpoints, run smoke tests on critical paths, and confirm deployment readiness"
}
```

### 4.4 Verify Integration Task
Confirm the integration task was created correctly:
- [ ] Task files exist at `.taskmaster/docs/task-[FINAL_ID]/`
- [ ] All five files present: `task.txt`, `task.md`, `prompt.md`, `acceptance-criteria.md`, `task.xml`
- [ ] Task added to `tasks.json` with correct ID and dependencies
- [ ] `agentHint` set to "integration" to route to Tess agent

## Step 5: Completion and Handoff
- Do **not** run git commands; the orchestrator handles branch, commit, push, and PR creation (`docs-gen-{{source_branch}}`).
- When all tasks (including integration task) are complete, confirm: "‚úÖ DOCUMENTATION FILES GENERATED - Hook will handle git workflow and PR creation".

## Quality and Error Handling
- Ensure documents are technically accurate, well-formatted, and consistent.
- Include targeted code snippets, links, and references derived from MCP tools.
- If any step fails, report the issue, fix it, and continue until resolved.

## Final Confirmation (Mandatory)
End with exactly:
```
üéâ DOCUMENTATION GENERATION COMPLETE üéâ
‚úÖ Generated documentation for {{#if task_id}}task {{task_id}}{{else}}ALL tasks{{/if}}
‚úÖ Created all required documentation files (task.md, prompt.md, acceptance-criteria.md, task.xml)
‚úÖ Created final Integration & Deployment Verification task
üìã Total tasks documented: [COUNT] (including integration task)
üìã Total files created: [FILE_COUNT]
üîß Generated comprehensive markdown documentation
üîó Git workflow and pull request will be handled automatically by orchestrator hook
```

If you cannot provide this message, continue working until you can.

{{else}}

## Safe Test Mode

What time is it? Please answer this simple question and exit immediately.

{{/unless}}

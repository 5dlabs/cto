#!/bin/bash
set -euo pipefail

# =========================================================================
# Environment bootstrapping
# =========================================================================

{{#if agent_banner}}
echo "{{agent_banner}}"
{{else}}
echo "🔧 Initialising Factory environment"
{{/if}}

if [ -f "$HOME/.cargo/env" ]; then
  . "$HOME/.cargo/env"
fi

if [ -f "/root/.cargo/env" ]; then
  . "/root/.cargo/env"
fi

if command -v rustup >/dev/null 2>&1; then
  rustup default stable 2>/dev/null || true
fi

echo "PATH: $PATH"

# =========================================================================
# RETRY CONFIGURATION
# =========================================================================
MAX_RETRIES_CONFIG=${FACTORY_MAX_RETRIES:-${EXECUTION_MAX_RETRIES:-10}}
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "║                    RETRY CONFIGURATION                        ║"
echo "════════════════════════════════════════════════════════════════"
echo "🔄 Maximum Iterations: $MAX_RETRIES_CONFIG"
if [ -n "${FACTORY_MAX_RETRIES:-}" ]; then
  echo "📍 Source: FACTORY_MAX_RETRIES environment variable"
elif [ -n "${EXECUTION_MAX_RETRIES:-}" ]; then
  echo "📍 Source: EXECUTION_MAX_RETRIES environment variable"
else
  echo "📍 Source: Default configuration"
fi
echo "════════════════════════════════════════════════════════════════"
echo ""

# =========================================================================
# GitHub App authentication
# =========================================================================

REPO_URL="{{repository_url}}"

if [ -z "${GITHUB_APP_PRIVATE_KEY:-}" ] || [ -z "${GITHUB_APP_ID:-}" ]; then
  echo "❌ Missing GitHub App credentials"
  exit 1
fi

echo "🔐 Authenticating with GitHub App"
TEMP_KEY_FILE="/tmp/github-app-key.pem"
printf '%b' "$GITHUB_APP_PRIVATE_KEY" >"$TEMP_KEY_FILE"
chmod 600 "$TEMP_KEY_FILE"

JWT_HEADER=$(printf '{"alg":"RS256","typ":"JWT"}' | base64 -w 0 | tr '+/' '-_' | tr -d '=')
NOW=$(date +%s)
EXP=$((NOW + 600))
JWT_PAYLOAD=$(printf '{"iat":%d,"exp":%d,"iss":"%s"}' "$NOW" "$EXP" "$GITHUB_APP_ID" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
JWT_SIGNATURE=$(printf '%s.%s' "$JWT_HEADER" "$JWT_PAYLOAD" | openssl dgst -sha256 -sign "$TEMP_KEY_FILE" -binary | base64 -w 0 | tr '+/' '-_' | tr -d '=')
JWT_TOKEN="$JWT_HEADER.$JWT_PAYLOAD.$JWT_SIGNATURE"
rm -f "$TEMP_KEY_FILE"

parse_repo() {
  local input="$1"
  if echo "$input" | grep -qE '^https://github.com/'; then
    echo "$input" | sed -E 's|https://github.com/([^/]+)/([^/]+?)(\.git)?$|\1 \2|'
  elif echo "$input" | grep -qE '^git@github.com:'; then
    echo "$input" | sed -E 's|git@github.com:([^/]+)/([^/]+?)(\.git)?$|\1 \2|'
  else
    echo "$input" | sed -E 's|\.git$||' | sed -E 's|([^/]+)/([^/]+)|\1 \2|'
  fi
}

read REPO_OWNER REPO_NAME <<<"$(parse_repo "$REPO_URL")"
REPO_HTTP_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}.git"

INSTALLATION_ID=$(curl -s -L \
  -H "Authorization: Bearer $JWT_TOKEN" \
  -H "Accept: application/vnd.github+json" \
  "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/installation" | jq -r '.id')

if [ "$INSTALLATION_ID" = "null" ] || [ -z "$INSTALLATION_ID" ]; then
  INSTALLATION_ID=$(curl -s -L \
    -H "Authorization: Bearer $JWT_TOKEN" \
    -H "Accept: application/vnd.github+json" \
    "https://api.github.com/orgs/$REPO_OWNER/installation" | jq -r '.id')
fi

if [ "$INSTALLATION_ID" = "null" ] || [ -z "$INSTALLATION_ID" ]; then
  echo "❌ Unable to resolve installation ID for $REPO_OWNER/$REPO_NAME"
  exit 1
fi

GITHUB_TOKEN=$(curl -s -X POST \
  -H "Authorization: Bearer $JWT_TOKEN" \
  -H "Accept: application/vnd.github+json" \
  "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens" | jq -r '.token')

if [ "$GITHUB_TOKEN" = "null" ] || [ -z "$GITHUB_TOKEN" ]; then
  echo "❌ Unable to obtain installation token"
  exit 1
fi

export GITHUB_TOKEN
export GH_TOKEN="$GITHUB_TOKEN"
export GH_HOST="github.com"

export GIT_CONFIG_GLOBAL=/workspace/.gitconfig
CREDENTIALS_FILE=/workspace/.git-credentials
mkdir -p /workspace

git config --global --replace-all credential.helper "store --file=$CREDENTIALS_FILE"
echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > "$CREDENTIALS_FILE"

TOKEN_GENERATED_AT=$(date +%s)

refresh_github_token() {
  echo "🔄 Refreshing GitHub App token..."

  TEMP_KEY_FILE="/tmp/github-app-key-$$"
  printf '%b' "$GITHUB_APP_PRIVATE_KEY" > "$TEMP_KEY_FILE"
  chmod 600 "$TEMP_KEY_FILE"

  JWT_HEADER=$(printf '{"alg":"RS256","typ":"JWT"}' | base64 -w 0 | tr '+/' '-_' | tr -d '=')
  NOW=$(date +%s)
  EXP=$((NOW + 600))
  JWT_PAYLOAD=$(printf '{"iat":%d,"exp":%d,"iss":"%s"}' "$NOW" "$EXP" "$GITHUB_APP_ID" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
  JWT_SIGNATURE=$(printf '%s.%s' "$JWT_HEADER" "$JWT_PAYLOAD" | openssl dgst -sha256 -sign "$TEMP_KEY_FILE" -binary | base64 -w 0 | tr '+/' '-_' | tr -d '=')
  JWT_TOKEN="$JWT_HEADER.$JWT_PAYLOAD.$JWT_SIGNATURE"

  rm -f "$TEMP_KEY_FILE"

  NEW_INSTALLATION_ID=$(curl -s -L \
    -H "Authorization: Bearer $JWT_TOKEN" \
    -H "Accept: application/vnd.github+json" \
    "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/installation" | jq -r '.id')

  if [ "$NEW_INSTALLATION_ID" = "null" ] || [ -z "$NEW_INSTALLATION_ID" ]; then
    NEW_INSTALLATION_ID=$(curl -s -L \
      -H "Authorization: Bearer $JWT_TOKEN" \
      -H "Accept: application/vnd.github+json" \
      "https://api.github.com/orgs/$REPO_OWNER/installation" | jq -r '.id')
  fi

  TOKEN_RESPONSE=$(curl -s -X POST \
    -H "Authorization: Bearer $JWT_TOKEN" \
    -H "Accept: application/vnd.github+json" \
    "https://api.github.com/app/installations/$NEW_INSTALLATION_ID/access_tokens")

  NEW_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.token')

  if [ "$NEW_TOKEN" != "null" ] && [ -n "$NEW_TOKEN" ]; then
    export GITHUB_TOKEN="$NEW_TOKEN"
    export GH_TOKEN="$NEW_TOKEN"
    TOKEN_GENERATED_AT=$(date +%s)
    echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > "$CREDENTIALS_FILE"
    echo "✅ Token refreshed"
    return 0
  fi

  echo "❌ Failed to refresh token: $TOKEN_RESPONSE"
  return 1
}

refresh_token_if_needed() {
  if [ -z "$TOKEN_GENERATED_AT" ]; then
    refresh_github_token || true
    return
  fi

  NOW=$(date +%s)
  TOKEN_AGE=$((NOW - TOKEN_GENERATED_AT))

  if [ $TOKEN_AGE -gt 3000 ]; then
    echo "🔄 Token age: $((TOKEN_AGE / 60)) minutes — refreshing"
    refresh_github_token || true
  fi
}

sanitize_status_message() {
  printf '%s' "$1" | tr '\n' ' ' | tr '\r' ' '
}

resolve_pr_url() {
  if [ -n "${PR_URL:-}" ]; then
    printf '%s' "$PR_URL"
    return
  fi

  if [ -n "${PR_NUMBER:-}" ] && [ -n "${REPO_OWNER:-}" ] && [ -n "${REPO_NAME:-}" ]; then
    printf 'https://github.com/%s/%s/pull/%s' "$REPO_OWNER" "$REPO_NAME" "$PR_NUMBER"
    return
  fi

  if command -v gh >/dev/null 2>&1; then
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || printf '')
    if [ -n "$current_branch" ]; then
      local pr_url
      pr_url=$(gh pr list --state all --head "$current_branch" --json url --jq '.[0].url' 2>/dev/null || printf '')
      if [ -n "$pr_url" ]; then
        printf '%s' "$pr_url"
        return
      fi
    fi
  fi

  printf ''
}

patch_coderun_status() {
  local phase="$1"
  local message="$2"
  local remediation_status="${3:-}"
  local qa_status="${4:-}"
  local pr_url="${5:-}"
  local work_completed_flag="${6:-false}"

  if [ -z "${CODERUN_NAME:-}" ] || [ -z "${NAMESPACE:-}" ]; then
    return
  fi

  local token_path="/var/run/secrets/kubernetes.io/serviceaccount/token"
  local ca_path="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"

  if [ ! -f "$token_path" ] || [ ! -f "$ca_path" ]; then
    echo "ℹ️ Service account credentials unavailable; skipping CodeRun status update"
    return
  fi

  if ! command -v jq >/dev/null 2>&1; then
    echo "ℹ️ jq not available; skipping CodeRun status update"
    return
  fi

  local work_completed="false"
  if [ "$work_completed_flag" = "true" ]; then
    work_completed="true"
  fi

  local payload
  payload=$(jq -n \
    --arg phase "$phase" \
    --arg message "$(sanitize_status_message "$message")" \
    --arg remediation "$remediation_status" \
    --arg qa "$qa_status" \
    --arg pr "$pr_url" \
    --arg workCompleted "$work_completed" \
    '{
      status: (
        {
          phase: $phase,
          message: $message,
          workCompleted: ($workCompleted == "true")
        }
        + (if $remediation != "" then {remediationStatus: $remediation} else {} end)
        + (if $qa != "" then {qaStatus: $qa} else {} end)
        + (if $pr != "" then {pullRequestUrl: $pr} else {} end)
      )
    }'
  ) || return

  local api_host="${KUBERNETES_SERVICE_HOST:-}"
  local api_port="${KUBERNETES_SERVICE_PORT_HTTPS:-${KUBERNETES_SERVICE_PORT:-443}}"

  if [ -z "$api_host" ]; then
    echo "ℹ️ Kubernetes API host unavailable; skipping CodeRun status update"
    return
  fi

  local token
  token=$(cat "$token_path")

  curl -sS -X PATCH \
    -H "Authorization: Bearer $token" \
    -H "Content-Type: application/merge-patch+json" \
    --cacert "$ca_path" \
    --data "$payload" \
    "https://${api_host}:${api_port}/apis/agents.platform/v1/namespaces/${NAMESPACE}/coderuns/${CODERUN_NAME}/status" >/dev/null 2>&1 || \
    echo "⚠️ Failed to patch CodeRun status"
}

stop_docker_sidecar() {
  if [ ! -S /var/run/docker.sock ]; then
    return
  fi

  echo "🛑 Stopping Docker sidecar"

  if command -v pkill >/dev/null 2>&1; then
    pkill dockerd >/dev/null 2>&1 || true
    sleep 1
    if pidof dockerd >/dev/null 2>&1; then
      pkill -9 dockerd >/dev/null 2>&1 || true
    fi
    if pidof docker-init >/dev/null 2>&1; then
      pkill docker-init >/dev/null 2>&1 || true
    fi
  elif command -v killall >/dev/null 2>&1; then
    killall dockerd >/dev/null 2>&1 || true
  else
    PID=$(pidof dockerd 2>/dev/null || true)
    if [ -n "$PID" ]; then
      kill "$PID" >/dev/null 2>&1 || true
    fi
    PID_INIT=$(pidof docker-init 2>/dev/null || true)
    if [ -n "$PID_INIT" ]; then
      kill "$PID_INIT" >/dev/null 2>&1 || true
    fi
  fi

  for _ in 1 2 3 4 5; do
    if ! pidof dockerd >/dev/null 2>&1 && ! pidof docker-init >/dev/null 2>&1; then
      echo "✅ Docker sidecar stopped"
      return
    fi
    sleep 1
  done

  REMAINING_DOCKER=$(pidof dockerd 2>/dev/null || true)
  REMAINING_INIT=$(pidof docker-init 2>/dev/null || true)
  echo "⚠️ Docker sidecar still running (dockerd: ${REMAINING_DOCKER:-none}, docker-init: ${REMAINING_INIT:-none})"
}

trap 'stop_docker_sidecar || true' EXIT

ensure_gh_authenticated() {
  if ! command -v gh >/dev/null 2>&1; then
    echo "⚠️ GitHub CLI (gh) not found; skipping authentication"
    return 0
  fi

  if ! gh auth status -h "$GH_HOST" >/dev/null 2>&1; then
    echo "🔐 Logging in to GitHub CLI for host $GH_HOST"
    refresh_github_token || true
    if ! printf '%s\n' "$GITHUB_TOKEN" | timeout 10 gh auth login --with-token --hostname "$GH_HOST" >/dev/null 2>&1; then
      echo "⚠️ gh auth login returned non-zero or timed out; continuing with GH_TOKEN env"
    fi
  fi

  refresh_token_if_needed || true
  gh auth setup-git >/dev/null 2>&1 || true

  if gh auth status -h "$GH_HOST" >/dev/null 2>&1; then
    echo "✅ GitHub CLI authenticated for $GH_HOST"
  else
    echo "⚠️ Unable to confirm GitHub CLI auth; GH_TOKEN will still be used for git operations"
  fi
}

ensure_gh_authenticated

ensure_pr_created() {
  if [ "${SKIP_AUTO_PR:-0}" = "1" ]; then
    echo "⏭️  Auto PR creation disabled via SKIP_AUTO_PR=1"
    return
  fi

  if [ ! -d .git ]; then
    echo "⚠️ Repository not initialised; skipping auto PR creation"
    return
  fi

  if ! command -v gh >/dev/null 2>&1; then
    echo "⚠️ GitHub CLI not available; skipping auto PR creation"
    return
  fi

  if ! command -v jq >/dev/null 2>&1; then
    echo "⚠️ jq not available; skipping auto PR creation"
    return
  fi

  if [ -z "${GITHUB_TOKEN:-}" ]; then
    echo "⚠️ GITHUB_TOKEN not set; skipping auto PR creation"
    return
  fi

  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || printf '')
  if [ -z "$CURRENT_BRANCH" ]; then
    echo "⚠️ Unable to determine current branch; skipping auto PR creation"
    return
  fi

  refresh_token_if_needed || true
  PR_OUTPUT=$(gh pr list --state open --head "$CURRENT_BRANCH" --json number --limit 1 2>&1)
  PR_EXIT_CODE=$?

  if [ $PR_EXIT_CODE -ne 0 ] && printf '%s' "$PR_OUTPUT" | grep -qi "HTTP 401"; then
    echo "⚠️ gh pr list returned HTTP 401; refreshing GitHub credentials"
    refresh_github_token || true
    ensure_gh_authenticated
    PR_OUTPUT=$(gh pr list --state open --head "$CURRENT_BRANCH" --json number --limit 1 2>&1)
    PR_EXIT_CODE=$?
  fi

  if [ $PR_EXIT_CODE -ne 0 ]; then
    printf '%s\n' "$PR_OUTPUT" >&2
    PR_DATA="[]"
  else
    PR_DATA="$PR_OUTPUT"
  fi

  if [ -z "$PR_DATA" ]; then
    PR_DATA="[]"
  fi

  if [ "$(printf '%s' "$PR_DATA" | jq 'length' 2>/dev/null || echo 0)" -gt 0 ]; then
    echo "✅ Pull request already exists for branch $CURRENT_BRANCH"
    return
  fi

  BASE_BRANCH="${PR_BASE_BRANCH:-main}"
  REMOTE_BASE="origin/$BASE_BRANCH"
  if ! git show-ref --verify --quiet "refs/remotes/$REMOTE_BASE"; then
    if git show-ref --verify --quiet "refs/remotes/origin/master"; then
      BASE_BRANCH="master"
      REMOTE_BASE="origin/$BASE_BRANCH"
    else
      DEFAULT_REMOTE=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')
      if [ -n "$DEFAULT_REMOTE" ]; then
        BASE_BRANCH="$DEFAULT_REMOTE"
        REMOTE_BASE="origin/$BASE_BRANCH"
      else
        REMOTE_BASE=""
      fi
    fi
  fi

  refresh_token_if_needed || true
  if [ -n "$BASE_BRANCH" ]; then
    git fetch origin "$BASE_BRANCH" >/dev/null 2>&1 || true
  fi

  if [ "$CURRENT_BRANCH" = "HEAD" ] || [ "$CURRENT_BRANCH" = "$BASE_BRANCH" ]; then
    AUTO_BRANCH="task-{{task_id}}-{{service}}-$(date +%Y%m%d-%H%M%S)"
    echo "⚠️ Branch $CURRENT_BRANCH unsuitable for PR; creating $AUTO_BRANCH"
    if ! git checkout -B "$AUTO_BRANCH" >/dev/null 2>&1; then
      echo "❌ Failed to create fallback branch $AUTO_BRANCH"
      return
    fi
    CURRENT_BRANCH="$AUTO_BRANCH"
  fi

  git add .
  if git diff --cached --quiet --exit-code; then
    echo "ℹ️ No staged changes detected after auto-staging"
  else
    COMMIT_MSG="chore({{service}}): auto-commit for task {{task_id}}"
    if ! git commit -m "$COMMIT_MSG" >/dev/null 2>&1; then
      echo "⚠️ Failed to commit staged changes automatically"
    else
      echo "✅ Auto-committed staged changes"
    fi
  fi

  if git rev-parse --verify --quiet "$CURRENT_BRANCH" >/dev/null 2>&1; then
    refresh_token_if_needed || true
    if ! git push -u origin "$CURRENT_BRANCH" >/dev/null 2>&1; then
      echo "⚠️ Failed to push branch $CURRENT_BRANCH; skipping auto PR creation"
      return
    fi
  else
    echo "⚠️ Unable to verify branch $CURRENT_BRANCH; skipping auto PR creation"
    return
  fi

  git fetch origin "$CURRENT_BRANCH" >/dev/null 2>&1 || true
  if [ -n "$REMOTE_BASE" ]; then
    AHEAD_COUNT=$(git rev-list --left-right "$REMOTE_BASE...$CURRENT_BRANCH" 2>/dev/null | awk '/^>/{c++} END{print c+0}')
  else
    AHEAD_COUNT=1
  fi
  if [ "${AHEAD_COUNT:-0}" -eq 0 ]; then
    echo "⚠️ Branch $CURRENT_BRANCH has no commits ahead of $BASE_BRANCH; skipping PR creation"
    return
  fi

  RUN_LABEL="run-{{workflow_name}}"
  if [ "${RUN_LABEL#run-}" = "" ]; then
    RUN_LABEL="run-unknown"
  fi

  TASK_LABEL="task-{{task_id}}"
  SERVICE_LABEL="service-{{service}}"
  REPO_SLUG="${REPO_OWNER}/${REPO_NAME}"

  echo "🔍 Ensuring PR correlation labels exist"
  for label in "$TASK_LABEL" "$SERVICE_LABEL" "$RUN_LABEL"; do
    if [ -z "$label" ]; then
      continue
    fi

    if gh label view "$label" -R "$REPO_SLUG" >/dev/null 2>&1; then
      echo "   ✓ Label '$label' already exists"
      continue
    fi

    case "$label" in
      task-*) COLOR="f29513"; DESC="Task correlation" ;;
      service-*) COLOR="0e8a16"; DESC="Service correlation" ;;
      run-*) COLOR="0366d6"; DESC="Workflow correlation" ;;
      *) COLOR="ededed"; DESC="Automation label" ;;
    esac

    if gh label create "$label" -R "$REPO_SLUG" --color "$COLOR" --description "$DESC" >/tmp/gh-label-create.log 2>&1; then
      echo "   ✅ Created label '$label'"
    else
      echo "   ❌ Failed to create label '$label'"
      cat /tmp/gh-label-create.log >&2 || true
    fi
    rm -f /tmp/gh-label-create.log
  done

  PR_TITLE="feat({{service}}): complete task {{task_id}}"
  read -r -d '' PR_BODY <<'EOF' || true
## Summary
- Auto-generated fallback PR because the Factory agent finished without opening one
- Task {{task_id}} for service {{service}} is ready for review

## Metadata
- Agent: {{github_app}}
- Workflow: {{workflow_name}}
- Branch: \\`$CURRENT_BRANCH\\` → \\`$BASE_BRANCH\\`

_This PR was created automatically by the Factory container._
EOF

  LABEL_ARGS=("--title" "$PR_TITLE" "--body" "$PR_BODY" "--base" "$BASE_BRANCH" "--head" "$CURRENT_BRANCH")

  maybe_add_label() {
    local label="$1"
    if [ -z "$label" ]; then
      return
    fi
    if gh label view "$label" -R "$REPO_SLUG" >/dev/null 2>&1; then
      LABEL_ARGS+=("--label" "$label")
    else
      echo "⚠️ Label '$label' not found; skipping"
    fi
  }

  maybe_add_label "$TASK_LABEL"
  maybe_add_label "$SERVICE_LABEL"
  maybe_add_label "$RUN_LABEL"

  if gh pr create "${LABEL_ARGS[@]}"; then
    echo "✅ Auto-created pull request for $CURRENT_BRANCH"
  else
    echo "⚠️ Failed to create pull request automatically (it may already exist or authentication failed)"
  fi
}

git config --global --add safe.directory /workspace

derive_bot_identity() {
  local app_name="$1"

  if [ -z "$app_name" ] || [ "$app_name" = "null" ]; then
    GIT_AUTHOR_NAME="automation[bot]"
    GIT_AUTHOR_EMAIL="automation[bot]@users.noreply.github.com"
    return
  fi

  local slug
  slug=$(printf '%s' "$app_name" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')
  if [ -z "$slug" ]; then
    slug=$(printf '%s' "$app_name" | tr '[:upper:]' '[:lower:]')
  fi

  local bot_login="${slug}[bot]"
  local bot_email="${bot_login}@users.noreply.github.com"

  if [ -n "${GITHUB_TOKEN:-}" ]; then
    local encoded_login
    encoded_login=$(printf '%s' "$bot_login" | sed 's/\[/%5B/g; s/\]/%5D/g')
    local bot_response
    bot_response=$(curl -sS -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/users/${encoded_login}" 2>/dev/null || true)
    local bot_id
    bot_id=$(printf '%s' "$bot_response" | jq -r '.id // empty' 2>/dev/null || echo '')
    if [ -n "$bot_id" ]; then
      bot_email="${bot_id}+${bot_login}@users.noreply.github.com"
    fi
  fi

  GIT_AUTHOR_NAME="$bot_login"
  GIT_AUTHOR_EMAIL="$bot_email"
}

GITHUB_APP="{{github_app}}"
derive_bot_identity "$GITHUB_APP"

ensure_managed_paths_git_ignore() {
  if [ -z "${REPO_ROOT:-}" ]; then
    return
  fi

  local exclude_file="$REPO_ROOT/.git/info/exclude"
  mkdir -p "$(dirname "$exclude_file")"
  touch "$exclude_file"

  for managed_path in "$@"; do
    if git ls-files --error-unmatch -- "$managed_path" >/dev/null 2>&1; then
      continue
    fi

    local pattern="$managed_path"
    if [ -d "$REPO_ROOT/$pattern" ]; then
      pattern="${pattern%%/}/"
    fi

    case "$pattern" in
      task|task/)
        pattern="task/"
        ;;
      .factory|.factory/)
        pattern=".factory/"
        ;;
    esac

    if ! grep -Fxq "$pattern" "$exclude_file"; then
      echo "$pattern" >> "$exclude_file"
    fi
  done
}

git config --global user.name "$GIT_AUTHOR_NAME"
git config --global user.email "$GIT_AUTHOR_EMAIL"
export GIT_AUTHOR_NAME
export GIT_AUTHOR_EMAIL
export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
export GIT_TERMINAL_PROMPT=0
export GIT_ASKPASS=/bin/true
export SSH_ASKPASS=/bin/true

# =========================================================================
# Repository checkout
# =========================================================================

WORK_DIR="{{working_directory}}"
cd /workspace

if [ -d "$REPO_NAME/.git" ]; then
  echo "🔁 Repository already cloned, fetching latest"
  cd "$REPO_NAME"
  refresh_token_if_needed
  git fetch --all --prune
else
  echo "⬇️  Cloning repository"
  refresh_token_if_needed
  git clone "$REPO_HTTP_URL"
  cd "$REPO_NAME"
fi

REPO_ROOT="/workspace/$REPO_NAME"
git config --global --add safe.directory "$REPO_ROOT"
cd "$REPO_ROOT"

echo "=== BRANCH SETUP ==="
# Remove stale automation-managed files that block branch checkout when rerunning
MANAGED_PATHS=(
  ".mcp.json"
  "AGENTS.md"
  "client-config.json"
  "coding-guidelines.md"
  "github-guidelines.md"
  ".factory"
  "task"
)

for managed_path in "${MANAGED_PATHS[@]}"; do
  if git ls-files --error-unmatch -- "$managed_path" >/dev/null 2>&1; then
    status_output=$(git status --short -- "$managed_path" 2>/dev/null || true)
    untracked=false
    while IFS= read -r line; do
      case "$line" in
        "?? "*)
          untracked=true
          break
          ;;
      esac
    done <<EOF
$status_output
EOF

    if [ "$untracked" = true ]; then
      echo "🧹 Removing stale untracked files to allow checkout: $managed_path"
      git clean -fd -- "$managed_path" >/dev/null 2>&1 || rm -rf "$managed_path"
    fi
    continue
  fi

  if [ -e "$managed_path" ]; then
    echo "🧹 Removing stale file to allow checkout: $managed_path"
    rm -rf "$managed_path"
  fi
done

ensure_managed_paths_git_ignore "${MANAGED_PATHS[@]}"

BASE_BRANCH="${PR_BASE_BRANCH:-main}"
REMOTE_BASE="origin/$BASE_BRANCH"

if ! git show-ref --verify --quiet "refs/remotes/$REMOTE_BASE"; then
  # Fall back to origin/master or the remote HEAD if main is absent
  if git show-ref --verify --quiet "refs/remotes/origin/master"; then
    BASE_BRANCH="master"
    REMOTE_BASE="origin/$BASE_BRANCH"
  else
    DEFAULT_REMOTE=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')
    if [ -n "$DEFAULT_REMOTE" ]; then
      BASE_BRANCH="$DEFAULT_REMOTE"
      REMOTE_BASE="origin/$BASE_BRANCH"
    else
      REMOTE_BASE=""
    fi
  fi
fi

if [ -n "$BASE_BRANCH" ]; then
  git fetch origin "$BASE_BRANCH" >/dev/null 2>&1 || true
fi

FEATURE_BRANCH="feature/task-{{task_id}}-implementation"
if git show-ref --verify --quiet "refs/heads/$FEATURE_BRANCH"; then
  echo "Feature branch '$FEATURE_BRANCH' exists, checking out..."
  # Stash any local changes from previous runs to avoid checkout conflicts
  if ! git diff-index --quiet HEAD -- || [ -n "$(git ls-files --others --exclude-standard)" ]; then
    echo "🔄 Stashing local changes and untracked files before checkout"
    git stash push --include-untracked -m "Auto-stash before checkout ($(date -u +%Y%m%d-%H%M%S))" || true
  fi
  git checkout "$FEATURE_BRANCH"
  if [ -n "$REMOTE_BASE" ]; then
    echo "📥 Fast-forwarding $FEATURE_BRANCH with $REMOTE_BASE"
    if ! git merge "$REMOTE_BASE" --ff-only >/dev/null 2>&1; then
      echo "⚠️ Unable to fast-forward $FEATURE_BRANCH; creating fresh branch from $REMOTE_BASE"
      NEW_BRANCH="${FEATURE_BRANCH}-$(date -u +%Y%m%d%H%M%S)"
      git checkout -B "$NEW_BRANCH" "$REMOTE_BASE"
      FEATURE_BRANCH="$NEW_BRANCH"
    fi
  fi
else
  echo "Creating new feature branch '$FEATURE_BRANCH'"
  if [ -n "$REMOTE_BASE" ] && git show-ref --verify --quiet "refs/remotes/$REMOTE_BASE"; then
    git checkout -b "$FEATURE_BRANCH" "$REMOTE_BASE"
  else
    git checkout -b "$FEATURE_BRANCH"
  fi
fi

git config --local user.name "$GIT_AUTHOR_NAME"
git config --local user.email "$GIT_AUTHOR_EMAIL"
git config --local push.autoSetupRemote true
export IMPLEMENTATION_BRANCH="$FEATURE_BRANCH"
echo "✓ Using feature branch: $FEATURE_BRANCH (base: ${BASE_BRANCH:-unknown})"

# Set working directory: use repo root if working_directory is "." or empty
if [ "$WORK_DIR" = "." ] || [ -z "$WORK_DIR" ] || [ "$WORK_DIR" = "null" ]; then
  FACTORY_WORK_DIR="$REPO_ROOT"
else
  FACTORY_WORK_DIR="$REPO_ROOT/$WORK_DIR"
  mkdir -p "$FACTORY_WORK_DIR"
fi

cd "$FACTORY_WORK_DIR"
echo "✓ Working directory: $FACTORY_WORK_DIR"

echo "📦 git status"
refresh_token_if_needed
git status --short || true

# =========================================================================
# Materialise task context
# =========================================================================

echo "🧱 Syncing task assets"
mkdir -p "$FACTORY_WORK_DIR/task"
mkdir -p "$FACTORY_WORK_DIR/.factory"
mkdir -p "$HOME/.factory"
cp -R /task-files/task/* "$FACTORY_WORK_DIR/task/" 2>/dev/null || true

DOCS_REPO_URL="{{docs_repository_url}}"
DOCS_BRANCH="{{docs_branch}}"
DOCS_PROJECT_DIRECTORY="{{docs_project_directory}}"

if [ -n "$DOCS_REPO_URL" ] && [ "$DOCS_REPO_URL" != "null" ]; then
  refresh_token_if_needed
  if [ -z "$DOCS_BRANCH" ] || [ "$DOCS_BRANCH" = "null" ]; then
    DOCS_BRANCH="main"
  fi

  echo "📚 Syncing docs repository: $DOCS_REPO_URL (branch: $DOCS_BRANCH)"
  DOCS_CLONE_DIR="/tmp/docs-repo"
  rm -rf "$DOCS_CLONE_DIR"

  read DOCS_OWNER DOCS_NAME <<<"$(parse_repo "$DOCS_REPO_URL")"
  DOCS_HTTP_URL="https://github.com/${DOCS_OWNER}/${DOCS_NAME}.git"

  if git clone --quiet --branch "$DOCS_BRANCH" --single-branch "$DOCS_HTTP_URL" "$DOCS_CLONE_DIR"; then
    echo "✓ Docs repository cloned"
  else
    echo "⚠️ Failed to clone docs branch '$DOCS_BRANCH'; attempting default branch"
    if git clone --quiet "$DOCS_HTTP_URL" "$DOCS_CLONE_DIR"; then
      echo "✓ Docs repository cloned using default branch"
    else
      echo "❌ Unable to clone docs repository: $DOCS_HTTP_URL"
      DOCS_CLONE_DIR=""
    fi
  fi

  if [ -n "$DOCS_CLONE_DIR" ]; then
    DOCS_BASE_PATH="$DOCS_CLONE_DIR/.taskmaster"
    if [ -n "$DOCS_PROJECT_DIRECTORY" ] && [ "$DOCS_PROJECT_DIRECTORY" != "null" ]; then
      DOCS_BASE_PATH="$DOCS_CLONE_DIR/$DOCS_PROJECT_DIRECTORY/.taskmaster"
    fi

    echo "🔍 Docs base path: $DOCS_BASE_PATH"
    TASK_DIR="$DOCS_BASE_PATH/docs/task-{{task_id}}"

    if [ -d "$TASK_DIR" ]; then
      echo "✓ Copying task definition from $TASK_DIR"
      refresh_token_if_needed
      cp -R "$TASK_DIR"/. "$FACTORY_WORK_DIR/task/" 2>/dev/null || true
    else
      echo "❌ CRITICAL: Task directory not found at $TASK_DIR"
    fi

    if [ -f "$DOCS_BASE_PATH/tasks.json" ]; then
      refresh_token_if_needed
      cp "$DOCS_BASE_PATH/tasks.json" "$FACTORY_WORK_DIR/task/" 2>/dev/null || true
    fi
  fi
else
  echo "⚠️ Docs repository URL not provided; skipping task docs sync"
fi

if [ -f /task-files/AGENTS.md ]; then
  cp /task-files/AGENTS.md "$FACTORY_WORK_DIR/AGENTS.md"
fi

if [ -f /task-files/coding-guidelines.md ]; then
  cp /task-files/coding-guidelines.md "$FACTORY_WORK_DIR/"
  echo "✓ Copied coding-guidelines.md to working directory"
fi

if [ -f /task-files/github-guidelines.md ]; then
  cp /task-files/github-guidelines.md "$FACTORY_WORK_DIR/"
  echo "✓ Copied github-guidelines.md to working directory"
fi

if [ -f /task-files/client-config.json ]; then
  cp /task-files/client-config.json "$FACTORY_WORK_DIR/"
  echo "✓ Copied client-config.json to working directory"
fi

if [ -f /task-files/mcp.json ]; then
  cp /task-files/mcp.json "$FACTORY_WORK_DIR/.mcp.json"
fi

if [ -f /task-files/factory-cli.json ]; then
  mkdir -p "$FACTORY_WORK_DIR/.factory"
  cp /task-files/factory-cli.json "$FACTORY_WORK_DIR/.factory/cli.json"
  echo "✓ Installed project-level factory CLI permissions"
else
  echo "⚠️ factory-cli.json not provided; using default project permissions"
fi

if [ -f /task-files/factory-cli-config.json ]; then
  mkdir -p "$HOME/.factory"
  cp /task-files/factory-cli-config.json "$HOME/.factory/cli-config.json"
  echo "✓ Installed global factory CLI config"
else
  echo "⚠️ factory-cli-config.json not provided; using existing global Factory config"
fi

if [ ! -f "$FACTORY_WORK_DIR/client-config.json" ]; then
  echo "❌ client-config.json missing from workspace; required for MCP/toolman"
  exit 1
fi

cp "$FACTORY_WORK_DIR/client-config.json" "/workspace/client-config.json" 2>/dev/null || true

echo "=== MCP PRECHECKS ==="
if ! command -v toolman >/dev/null 2>&1; then
  echo "❌ 'toolman' CLI not found in PATH; required for MCP"
  exit 1
fi

TOOLMAN_URL=${TOOLMAN_SERVER_URL:-"http://toolman.agent-platform.svc.cluster.local:3000/mcp"}
TOOLMAN_URL="${TOOLMAN_URL%/}"
echo "🔍 Checking Toolman endpoint: $TOOLMAN_URL"
if ! curl -sSf --connect-timeout 2 --max-time 6 \
  -X POST "$TOOLMAN_URL" \
  -H 'Content-Type: application/json' \
  -d '{"jsonrpc":"2.0","id":"health","method":"tools/list","params":{}}' >/tmp/toolman-ping.log 2>&1; then
  echo "❌ Unable to reach Toolman server at $TOOLMAN_URL"
  cat /tmp/toolman-ping.log >&2 || true
  rm -f /tmp/toolman-ping.log
  exit 1
fi
rm -f /tmp/toolman-ping.log
echo "✓ Toolman endpoint reachable"

if command -v jq >/dev/null 2>&1; then
  echo "[client-config] summary:"
  if ! jq -r '"remoteTools=" + ((.remoteTools // []) | length | tostring) + ", localServers=" + ((.localServers // {} | keys) | join(","))' "$FACTORY_WORK_DIR/client-config.json" 2>/dev/null; then
    echo "  (not valid JSON)"
  fi
else
  echo "⚠️ jq not available; skipping client-config summary"
fi

if [ -z "${FACTORY_API_KEY:-}" ]; then
  echo "❌ FACTORY_API_KEY is not set; Factory cannot authenticate"
  exit 1
fi

echo "🔑 Using provided FACTORY_API_KEY for authentication"

if [ ! -f "$FACTORY_WORK_DIR/AGENTS.md" ]; then
  echo "⚠️ AGENTS.md missing; creating placeholder"
  cat <<'PLACEHOLDER' > "$FACTORY_WORK_DIR/AGENTS.md"
# Project Guidance

This Factory run was triggered without AGENTS.md content. Provide project context in AGENTS.md to give Factory richer instructions.
PLACEHOLDER
fi

# =========================================================================
# Prompt assembly and Factory execution
# =========================================================================

PROMPT_PREFIX=""
if [ -f "$FACTORY_WORK_DIR/task/toolman-guide.md" ]; then
  PROMPT_PREFIX="${PROMPT_PREFIX}🔧 **CRITICAL: Tool Usage Reference**\n\n$(cat "$FACTORY_WORK_DIR/task/toolman-guide.md")\n\n---\n\n"
fi

PROMPT_PREFIX="${PROMPT_PREFIX}⚠️ **EXECUTION REQUIREMENTS (MANDATORY)**\n\n- **Follow patterns**: reference @coding-guidelines.md and @github-guidelines.md in this workspace.\n- **No mocks or stubs**: integrate with live services, APIs, and configuration; remove all placeholders.\n- **Parameterize everything**: every endpoint, threshold, or trading pair must come from env vars, config, or CLI flags.\n- **GitHub auth ready**: the GitHub App token (\`GH_TOKEN\`) is already configured; skip manual \`gh auth login\` flows and avoid hitting user-only endpoints like \`/user\`.\n- **Feature branch only**: stay on \`feature/task-{{task_id}}-implementation\`; never push directly to main/master or retarget the branch upstream.\n- **Execute without pause**: if you outline a plan, immediately carry it out—do not wait for confirmation or additional input.\n- **Quality gates**: run \`cargo fmt --all -- --check\`, \`cargo clippy --workspace --all-targets --all-features -- -D warnings -W clippy::pedantic\`, and \`cargo test --workspace --all-features\` before declaring success.\n- **Documentation & PR**: update project docs and open a PR via \`gh pr create\` with labels task-{{task_id}}, service-{{service}}, and run-{{workflow_name}}.\n- **Preserve workspace**: never delete the repository or run destructive cleanup commands (for example \`rm -rf\`); leave artifacts in place for QA.\n\n---\n\n"

if [ -f "$FACTORY_WORK_DIR/github-guidelines.md" ] || [ -f "$FACTORY_WORK_DIR/coding-guidelines.md" ]; then
  PROMPT_PREFIX="${PROMPT_PREFIX}📚 **Reference Materials Available**\n"
  if [ -f "$FACTORY_WORK_DIR/github-guidelines.md" ]; then
    PROMPT_PREFIX="${PROMPT_PREFIX}- @github-guidelines.md\n"
  fi
  if [ -f "$FACTORY_WORK_DIR/coding-guidelines.md" ]; then
    PROMPT_PREFIX="${PROMPT_PREFIX}- @coding-guidelines.md\n"
  fi
  PROMPT_PREFIX="${PROMPT_PREFIX}\n---\n\n"
fi

if [ -f "$FACTORY_WORK_DIR/AGENTS.md" ]; then
  if AGENT_GUIDANCE=$(jq -Rs @json "$FACTORY_WORK_DIR/AGENTS.md" 2>/dev/null); then
    if [ "${#AGENT_GUIDANCE}" -gt 2 ]; then
      AGENT_GUIDANCE=${AGENT_GUIDANCE:1:-1}
      PROMPT_PREFIX="${PROMPT_PREFIX}🧠 **Agent Guidance**\n\n${AGENT_GUIDANCE}\n\n---\n\n"
    fi
  fi
fi

echo "🔍 DEBUG: About to check for prompt.md at: $FACTORY_WORK_DIR/task/prompt.md"
echo "🔍 DEBUG: Contents of task directory:"
ls -la "$FACTORY_WORK_DIR/task/" || echo "Task directory not found or empty"
echo "🔍 DEBUG: Current working directory contents:"
ls -la "$FACTORY_WORK_DIR/" || echo "Working directory not accessible"

PROMPT_FILE="$FACTORY_WORK_DIR/task/prompt.md"
if [ ! -f "$PROMPT_FILE" ]; then
  echo "❌ prompt.md not found at $PROMPT_FILE"
  exit 1
fi

echo "startingTask:{{task_id}}"
echo ""

PROMPT_CONTENT="${PROMPT_PREFIX}$(cat "$PROMPT_FILE")"

echo "🧾 Resolved prompt content (truncated to 2000 chars for log safety):"
PROMPT_PREVIEW=$(printf '%s' "$PROMPT_CONTENT" | head -c 2000)
printf '%s\n' "$PROMPT_PREVIEW"
PROMPT_BYTES=$(printf '%s' "$PROMPT_CONTENT" | wc -c | tr -d '[:space:]')
echo "📏 Prompt size: $PROMPT_BYTES bytes"

MAX_RETRIES=${FACTORY_MAX_RETRIES:-${EXECUTION_MAX_RETRIES:-10}}
ATTEMPT=1
SUCCESS=0
FACTORY_EXIT=1
LAST_MESSAGE_FILE=""
RUN_LOG=""
LAST_COMPLETION_REASON=""

if [ "$MAX_RETRIES" = "0" ]; then
  echo "🔄 Unlimited retries enabled - Factory will continue until completion criteria are met"
  UNLIMITED_RETRIES=1
else
  UNLIMITED_RETRIES=0
fi

print_attempt_banner() {
  local attempt="$1"
  local max="$2"
  local unlimited="$3"
  local border="════════════════════════════════════════════════════════════════"
  local label

  if [ "$unlimited" = "1" ]; then
    label="║ 🚀 EXECUTION ATTEMPT #${attempt} (UNLIMITED MODE)"
  elif [ -n "$max" ] && [ "$max" -gt 0 ]; then
    label="║ 🚀 EXECUTION ATTEMPT ${attempt} / ${max}"
  else
    label="║ 🚀 EXECUTION ATTEMPT #${attempt}"
  fi

  local base_padding=$(( ${#border} - ${#label} - 1 ))
  local extra_width=0

  if [[ "$label" == *"🚀"* ]]; then
    extra_width=$((extra_width + 1))
  fi

  local padding=$((base_padding - extra_width))
  if [ $padding -lt 0 ]; then
    padding=0
  fi

  echo ""
  echo "$border"
  printf '%s%*s║\n' "$label" "$padding" ""
  echo "$border"
  echo ""
}

# Circuit breaker: track repeated command failures
declare -A FAILED_COMMANDS
MAX_SAME_COMMAND_FAILURES=3

FORCE_WRITES="{{#if force_writes}}true{{else}}false{{/if}}"
OUTPUT_FORMAT="{{#if output_format}}{{output_format}}{{else}}text{{/if}}"
OUTPUT_FORMAT="${OUTPUT_FORMAT,,}"

AUTO_LEVEL="{{#if auto_level}}{{auto_level}}{{else}}high{{/if}}"
AUTO_LEVEL="${AUTO_LEVEL,,}"
REASONING_EFFORT="{{#if reasoning_effort}}{{reasoning_effort}}{{/if}}"
REASONING_EFFORT="${REASONING_EFFORT,,}"
DEFAULT_MODEL="{{model}}"
MODEL_ROTATION=()
MODEL_ROTATION_COUNT=0
{{#if model_rotation}}
MODEL_ROTATION=(
{{#each model_rotation}}
"{{this}}"
{{/each}}
)
MODEL_ROTATION_COUNT=${#MODEL_ROTATION[@]}
if [ $MODEL_ROTATION_COUNT -gt 0 ]; then
  echo "🎯 Model rotation enabled (${MODEL_ROTATION_COUNT} models): ${MODEL_ROTATION[*]}"
fi
{{/if}}
if [ -z "$DEFAULT_MODEL" ] && [ $MODEL_ROTATION_COUNT -gt 0 ]; then
  DEFAULT_MODEL="${MODEL_ROTATION[0]}"
fi
if [ -n "$DEFAULT_MODEL" ]; then
  echo "🎯 Default model: $DEFAULT_MODEL"
fi
LIST_TOOLS_ON_START="{{#if list_tools_on_start}}{{list_tools_on_start}}{{else}}false{{/if}}"
if [ -z "$LIST_TOOLS_ON_START" ]; then
  LIST_TOOLS_ON_START="false"
fi
LIST_TOOLS_ON_START="${LIST_TOOLS_ON_START,,}"
if [ "${FORCE_WRITES,,}" = "true" ]; then
  AUTO_LEVEL="high"
fi

SKIP_PERMISSIONS_UNSAFE="{{#if skip_permissions_unsafe}}{{skip_permissions_unsafe}}{{else}}true{{/if}}"
SKIP_PERMISSIONS_UNSAFE="${SKIP_PERMISSIONS_UNSAFE,,}"

if [ "$LIST_TOOLS_ON_START" = "true" ]; then
  echo "🧰 Listing available Droid tools before execution"
  LIST_CMD=("droid" "exec" "--list-tools" "--output-format" "$OUTPUT_FORMAT")
  if [ -n "$DEFAULT_MODEL" ]; then
    LIST_CMD+=("--model" "$DEFAULT_MODEL")
  fi
  if [ -n "$REASONING_EFFORT" ]; then
    LIST_CMD+=("--reasoning-effort" "$REASONING_EFFORT")
  fi
  echo "🔍 Running: ${LIST_CMD[*]}"
  set +e
  "${LIST_CMD[@]}"
  LIST_EXIT=$?
  set -e
  if [ $LIST_EXIT -ne 0 ]; then
    echo "⚠️ Tool listing command exited with status $LIST_EXIT"
  fi
  echo ""
fi

COMPLETED_ATTEMPTS=0
while [ "$UNLIMITED_RETRIES" = "1" ] || [ $ATTEMPT -le $MAX_RETRIES ]; do
  print_attempt_banner "$ATTEMPT" "$MAX_RETRIES" "$UNLIMITED_RETRIES"

  # Always refresh GitHub credentials at the start of each iteration to prevent stale sessions
  refresh_github_token || true
  ensure_gh_authenticated

  CURRENT_ATTEMPT=$ATTEMPT
  LAST_MESSAGE_FILE="/tmp/factory-last-message-${ATTEMPT}.txt"
  RUN_LOG_EXT="log"
  if [ "$OUTPUT_FORMAT" = "json" ] || [ "$OUTPUT_FORMAT" = "debug" ]; then
    RUN_LOG_EXT="jsonl"
  fi
  RUN_LOG="/tmp/factory-run-${ATTEMPT}.${RUN_LOG_EXT}"

  CURRENT_MODEL="$DEFAULT_MODEL"
  if [ $MODEL_ROTATION_COUNT -gt 0 ]; then
    MODEL_INDEX=$(((ATTEMPT - 1) % MODEL_ROTATION_COUNT))
    CURRENT_MODEL="${MODEL_ROTATION[$MODEL_INDEX]}"
  fi
  if [ -n "$CURRENT_MODEL" ]; then
    echo "🎯 Attempt $ATTEMPT will use model: $CURRENT_MODEL"
  fi

  if [ "$SKIP_PERMISSIONS_UNSAFE" = "true" ]; then
    FACTORY_CMD=("droid" "exec" "--skip-permissions-unsafe" "--output-format" "$OUTPUT_FORMAT")
  else
    FACTORY_CMD=("droid" "exec" "--output-format" "$OUTPUT_FORMAT" "--auto" "$AUTO_LEVEL")
  fi
  if [ -n "$CURRENT_MODEL" ]; then
    FACTORY_CMD+=("--model" "$CURRENT_MODEL")
  fi
  if [ -n "$REASONING_EFFORT" ]; then
    FACTORY_CMD+=("--reasoning-effort" "$REASONING_EFFORT")
  fi
  FACTORY_CMD+=("$PROMPT_CONTENT")

  echo "🔧 droid exec invocation arguments (${#FACTORY_CMD[@]} entries):"
  for idx in "${!FACTORY_CMD[@]}"; do
    printf '    [%d] %s\n' "$idx" "${FACTORY_CMD[$idx]}"
  done

  set +e
  set -o pipefail
  "${FACTORY_CMD[@]}" | tee "$RUN_LOG"
  FACTORY_EXIT=${PIPESTATUS[0]}
  set +o pipefail
  set -e

  echo "[factory-debug] Attempt $ATTEMPT finished with exit code $FACTORY_EXIT"

  if [ $FACTORY_EXIT -ne 0 ]; then
    echo "⚠️ Factory exited with status $FACTORY_EXIT on attempt $ATTEMPT"
  fi

  # Circuit breaker: detect repeated failing commands
  if [ -f "$RUN_LOG" ] && command -v jq >/dev/null 2>&1; then
    # Try to extract failed bash commands from JSON log (if using json format)
    if [ "$OUTPUT_FORMAT" = "json" ] || [ "$OUTPUT_FORMAT" = "debug" ]; then
      # Factory/Droid uses Execute tool
      FAILED_CMD=$(jq -r 'select(.type=="tool_use" and .tool=="Execute" and (.result.exit_code // 0) != 0) | .input.command' "$RUN_LOG" 2>/dev/null | tail -n1 | head -c 100)
      
      if [ -n "$FAILED_CMD" ]; then
        # Track how many times this command has failed
        FAILED_COMMANDS["$FAILED_CMD"]=$((${FAILED_COMMANDS["$FAILED_CMD"]:-0} + 1))
        FAIL_COUNT=${FAILED_COMMANDS["$FAILED_CMD"]}
        
        if [ $FAIL_COUNT -ge $MAX_SAME_COMMAND_FAILURES ]; then
          echo "🔴 CIRCUIT BREAKER TRIGGERED: Command has failed $FAIL_COUNT times in a row:"
          echo "   Command: $FAILED_CMD"
          echo "   This indicates the agent is stuck in a loop."
          
          # Inject intervention prompt for next attempt
          PROMPT_CONTENT="${PROMPT_CONTENT}

⚠️ **LOOP DETECTED**: You tried this command $FAIL_COUNT times:
\`\`\`bash
$FAILED_CMD
\`\`\`

It keeps failing. **STOP REPEATING THIS COMMAND.**

Try instead:
1. Check working directory: \`pwd\`
2. List files: \`ls -la\`
3. Use a completely different approach
4. Create files/directories step-by-step"
          
          # Reset counter
          FAILED_COMMANDS["$FAILED_CMD"]=0
        fi
      fi
    fi
  fi

  # Extract token usage for cost tracking (JSON format only)
  if [ -f "$RUN_LOG" ] && command -v jq >/dev/null 2>&1; then
    if [ "$OUTPUT_FORMAT" = "json" ] || [ "$OUTPUT_FORMAT" = "debug" ]; then
      TOKENS_IN=$(jq -r 'select(.usage.input_tokens != null) | .usage.input_tokens' "$RUN_LOG" 2>/dev/null | tail -n1)
      TOKENS_OUT=$(jq -r 'select(.usage.output_tokens != null) | .usage.output_tokens' "$RUN_LOG" 2>/dev/null | tail -n1)
      
      if [[ "$TOKENS_IN" =~ ^[0-9]+$ ]] && [[ "$TOKENS_OUT" =~ ^[0-9]+$ ]]; then
        TOKENS_TOTAL=$((TOKENS_IN + TOKENS_OUT))
        echo "📊 Factory tokens this attempt: input=$TOKENS_IN, output=$TOKENS_OUT, total=$TOKENS_TOTAL"
        
        # Store for metrics (future: send to backend)
        echo "{\"attempt\":$ATTEMPT,\"task_id\":\"{{task_id}}\",\"service\":\"{{service}}\",\"cli\":\"factory\",\"tokens_in\":$TOKENS_IN,\"tokens_out\":$TOKENS_OUT,\"tokens_total\":$TOKENS_TOTAL}" >> /tmp/factory-metrics.jsonl
      fi
    fi
  fi

  if [ -s "$RUN_LOG" ]; then
    if [ "$OUTPUT_FORMAT" = "json" ] || [ "$OUTPUT_FORMAT" = "debug" ]; then
      if command -v jq >/dev/null 2>&1; then
        RESULT_TEXT=$(jq -r 'select(.type == "result") | .result // empty' "$RUN_LOG" 2>/dev/null | tail -n1)
      else
        RESULT_TEXT=$(tail -n 40 "$RUN_LOG" 2>/dev/null | sed 's/\r$//')
      fi
    else
      RESULT_TEXT=$(tail -n 40 "$RUN_LOG" 2>/dev/null | sed 's/\r$//')
    fi
    printf '%s\n' "$RESULT_TEXT" > "$LAST_MESSAGE_FILE"
  else
    : > "$LAST_MESSAGE_FILE"
  fi

  if [[ "{{github_app}}" =~ [Rr]ex ]]; then
    COMPLETION_PROMPT="Task {{task_id}} completion verification — Rex Implementation Agent (Factory)

**Your Role**: You are Rex, the IMPLEMENTATION agent. Cleo will handle code quality in the next stage.

**FIRST**: Review the FUNCTIONAL requirements in task/acceptance-criteria.md

**Then answer 'yes' if ALL of these are true:**

1. **FUNCTIONAL acceptance criteria implemented** (features exist and basically work)
2. Code COMPILES successfully (\`cargo build\` passes)
3. All code changes are committed to git
4. Changes are pushed to remote branch feature/task-{{task_id}}-implementation
5. A pull request exists (with at least task-{{task_id}} label)

**Code quality issues are OK for Rex - Cleo will fix:**
- ⚠️ Clippy warnings? OK - Cleo will fix
- ⚠️ Formatting issues? OK - Cleo will fix
- ⚠️ Some tests failing? OK if basic functionality works - Cleo/Tess will fix
- ⚠️ Unused functions/variables? OK - Cleo will clean up

**Focus on**: Does the implementation work? Are the features there?

**Response format:**

If functionally complete (features work, code compiles, PR created), respond with:
yes

If features incomplete or code doesn't compile, respond with:
no
REASON: <specific FUNCTIONAL issue>

Example 'yes' response (even with warnings):
yes

Example 'no' response:
no
REASON: Acceptance criteria 2 incomplete - health endpoint not yet implemented. Feature work remains.

Your response:"
  else
    COMPLETION_PROMPT="Task {{task_id}} completion verification.

**FIRST**: Review the acceptance criteria in task/acceptance-criteria.md

**Then answer 'yes' ONLY if ALL of these are true:**

1. **EVERY acceptance criterion is fully implemented** (not just started, but DONE)
2. All code changes are committed to git
3. Changes are pushed to remote branch feature/task-{{task_id}}-implementation
4. A pull request exists (with at least task-{{task_id}} label; other labels are optional)
5. Quality gates passed (cargo fmt, cargo clippy with no warnings, tests pass)

**Be honest**: If ANY acceptance criterion is incomplete or partially implemented, answer 'no' and continue working.

**To verify:**
- Review: \`cat task/acceptance-criteria.md\`
- Git status: \`git status\`
- Commits pushed: \`git log origin/main..HEAD\`
- PR exists: \`gh pr view\`
- Tests pass: Check your test results

**Response format:**

If complete, respond with:
yes

If incomplete, respond with:
no
REASON: <specific reason why not complete>

For 'no' responses, REASON must specify:
- Which acceptance criteria are incomplete (list them by number/name)
- What specific work remains (be concrete)
- Any blockers or issues encountered

Example 'no' response:
no
REASON: Acceptance criteria 2 and 4 incomplete. API endpoint /users created but not yet connected to database. PR created but tests failing due to missing error handling in user_controller.rs.

Your response:"
  fi

  COMPLETION_LAST_MESSAGE="/tmp/factory-completion-${ATTEMPT}.txt"
  COMPLETION_LOG="/tmp/factory-completion-${ATTEMPT}.log"

  if [ "$SKIP_PERMISSIONS_UNSAFE" = "true" ]; then
    COMPLETION_CMD=("droid" "exec" "--skip-permissions-unsafe" "--output-format" "text")
  else
    COMPLETION_CMD=("droid" "exec" "--output-format" "text" "--auto" "$AUTO_LEVEL")
  fi
  if [ -n "$CURRENT_MODEL" ]; then
    COMPLETION_CMD+=("--model" "$CURRENT_MODEL")
  fi
  if [ -n "$REASONING_EFFORT" ]; then
    COMPLETION_CMD+=("--reasoning-effort" "$REASONING_EFFORT")
  fi
  COMPLETION_CMD+=("$COMPLETION_PROMPT")

  set +e
  set -o pipefail
  COMPLETION_OUTPUT=$("${COMPLETION_CMD[@]}" 2>&1 | tee "$COMPLETION_LOG")
  COMPLETION_EXIT=${PIPESTATUS[0]}
  set +o pipefail
  set -e

  printf '%s\n' "$COMPLETION_OUTPUT" > "$COMPLETION_LAST_MESSAGE"
  echo "🧭 Completion probe response:"
  printf '%s\n' "$COMPLETION_OUTPUT"

  if [ $COMPLETION_EXIT -ne 0 ]; then
    echo "⚠️ Completion probe exited with status $COMPLETION_EXIT"
  fi

  CLEAN_COMPLETION_OUTPUT=$(printf '%s\n' "$COMPLETION_OUTPUT" | tr -d '\r')
  COMPLETION_RESPONSE=$(printf '%s\n' "$CLEAN_COMPLETION_OUTPUT" \
    | awk 'BEGIN { FS="[^A-Za-z]+" } { for (i = 1; i <= NF; i++) { word=tolower($i); if (word == "yes") yes=1; if (word == "no") no=1 } } END { if (yes) { print "yes" } else if (no) { print "no" } }' \
    | head -n1 \
    | tr '[:upper:]' '[:lower:]' \
    | tr -d '[:space:]')
  CURRENT_REASON=""
  if [ "$COMPLETION_RESPONSE" = "no" ]; then
    CURRENT_REASON=$(printf '%s\n' "$CLEAN_COMPLETION_OUTPUT" | awk 'BEGIN{IGNORECASE=1}/^reason:/{sub(/^reason:[[:space:]]*/,"");flag=1} flag{print}')
    if [ -n "$CURRENT_REASON" ]; then
      echo "📋 Incompletion details:"
      echo "$CURRENT_REASON"
      echo ""
      echo "════════════════════════════════════════════════════════════════"
      echo "║ 🔁 NEXT ITERATION FOCUS (FROM COMPLETION PROBE)              ║"
      echo "════════════════════════════════════════════════════════════════"
      printf '%s\n' "$CURRENT_REASON"
      echo "════════════════════════════════════════════════════════════════"
      echo ""
      PROMPT_CONTENT="${PROMPT_CONTENT}

🔁 **NEXT ITERATION FOCUS (from completion probe attempt $ATTEMPT)**

${CURRENT_REASON}

Address the items above before rerunning checks."
      LAST_COMPLETION_REASON="$CURRENT_REASON"
    else
      echo "⚠️ Completion probe reported 'no' without a reason"
    fi
  fi

  if [ "$COMPLETION_RESPONSE" = "yes" ]; then
    SUCCESS=1
    COMPLETED_ATTEMPTS=$CURRENT_ATTEMPT
    break
  fi

  if [ -n "$CURRENT_REASON" ]; then
    echo "⚠️ Factory reported task incomplete; retrying with new guidance..."
  else
    echo "⚠️ Factory reported task incomplete; retrying..."
  fi

  COMPLETED_ATTEMPTS=$CURRENT_ATTEMPT
  ATTEMPT=$((ATTEMPT + 1))
done

FINAL_ATTEMPTS=$COMPLETED_ATTEMPTS
if [ "${FINAL_ATTEMPTS:-0}" -le 0 ]; then
  FINAL_ATTEMPTS=$((ATTEMPT - 1))
fi
if [ "$UNLIMITED_RETRIES" != "1" ] && [ $FINAL_ATTEMPTS -gt $MAX_RETRIES ]; then
  FINAL_ATTEMPTS=$MAX_RETRIES
fi

if [ $SUCCESS -ne 1 ]; then
  if [ "$UNLIMITED_RETRIES" = "1" ]; then
    echo "⚠️ Factory did not confirm task completion after $FINAL_ATTEMPTS attempts (unlimited mode)"
  else
    echo "⚠️ Factory did not confirm task completion after $MAX_RETRIES attempts"
  fi
  if [ -n "$LAST_COMPLETION_REASON" ]; then
    echo ""
    echo "💡 Last reported reason for incompletion:"
    echo "$LAST_COMPLETION_REASON"
  fi
  
  # Document remaining work for downstream agents (Cleo/Tess)
  echo ""
  echo "📝 Creating handoff document for Cleo..."
  HANDOFF_FILE="$FACTORY_WORK_DIR/task/rex-handoff.md"
  mkdir -p "$FACTORY_WORK_DIR/task"
  
  # Prepare handoff content with proper variable expansion
  HANDOFF_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
  if [ -n "$LAST_COMPLETION_REASON" ]; then
    REMAINING_WORK="$LAST_COMPLETION_REASON"
  else
    REMAINING_WORK="Factory did not provide specific details. Review acceptance criteria and compare against current implementation."
  fi
  
  cat > "$HANDOFF_FILE" << EOF
# Rex Implementation Handoff

**Status**: Incomplete after $FINAL_ATTEMPTS iterations (max: $MAX_RETRIES)
**Date**: $HANDOFF_DATE
**Task**: {{task_id}}

## What Was Accomplished

Rex made $FINAL_ATTEMPTS attempts to complete this task. Review the PR and commit history for details on what was implemented.

## Remaining Work

$REMAINING_WORK

## Next Steps for Cleo

1. Review the PR created by Rex
2. Identify gaps between current implementation and acceptance criteria
3. Complete any remaining implementation work
4. Ensure all quality checks pass before handing off to Tess

## Acceptance Criteria Reference

See \`task/acceptance-criteria.md\` for complete requirements.

---
*Generated by Rex (Factory) after $FINAL_ATTEMPTS implementation attempts*
EOF

  echo "✅ Handoff document created at task/rex-handoff.md"
  
  # Commit the handoff document
  if [ -f "$HANDOFF_FILE" ]; then
    git add "$HANDOFF_FILE" 2>/dev/null || true
    
    # Build commit message with proper variable expansion
    COMMIT_MSG="docs(task-{{task_id}}): add Rex handoff document

Rex completed $FINAL_ATTEMPTS implementation iterations with incomplete status (max: $MAX_RETRIES).
Handoff document created for Cleo to continue work."
    
    if [ -n "$LAST_COMPLETION_REASON" ]; then
      COMMIT_MSG="$COMMIT_MSG

Reason: $LAST_COMPLETION_REASON"
    fi
    
    git commit -m "$COMMIT_MSG" 2>/dev/null || echo "⚠️ Could not commit handoff document (may already be committed)"
    
    # Push the commit if we're on a feature branch
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")
    if [ -n "$CURRENT_BRANCH" ] && [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
      git push origin HEAD 2>/dev/null || echo "⚠️ Could not push handoff document"
    fi
  fi
  
  # Always exit successfully to allow workflow to continue to Cleo
  # Print detailed summary
  echo ""
  echo "════════════════════════════════════════════════════════════════"
  echo "║          TASK COMPLETION STATUS: PARTIAL - HANDOFF           ║"
  echo "════════════════════════════════════════════════════════════════"
  echo ""
  if [ -n "$LAST_COMPLETION_REASON" ]; then
    echo "📋 REASON FOR INCOMPLETION:"
    echo "$LAST_COMPLETION_REASON"
  else
    echo "⚠️ Factory reported task incomplete without providing a reason"
  fi
  echo ""
  echo "🔄 NEXT STEPS:"
  echo "   - Handoff document created at task/rex-handoff.md"
  echo "   - Workflow will continue to Cleo for completion"
  echo "   - Cleo will review PR and finish remaining work"
  echo "   - Check the logs above for Factory's detailed responses"
  echo ""
  echo "════════════════════════════════════════════════════════════════"
  echo ""
  EXIT_CODE=0  # Always exit successfully to allow Cleo to continue
else
  echo "✅ Factory confirmed task completion"
  if [ ${FACTORY_EXIT:-0} -ne 0 ]; then
    echo "⚠️ Factory returned non-zero exit code ${FACTORY_EXIT}, but completion probe passed"
  fi
  EXIT_CODE=0
fi

if [ $SUCCESS -eq 1 ]; then
  echo "🔍 Verifying pull request status"
  ensure_pr_created
else
  # In single-iteration mode, still try to create PR for inspection
  if [ "$MAX_RETRIES" = "1" ]; then
    echo "🔍 Single-iteration mode - attempting PR creation for result inspection"
    ensure_pr_created || echo "⚠️ PR creation failed or no PR was created"
  else
    echo "⚠️ Skipping auto PR enforcement due to Factory completion status"
  fi
fi

RESOLVED_PR_URL="$(resolve_pr_url)"

if [ $SUCCESS -eq 1 ]; then
  # Mark as Succeeded to allow workflow progression to Cleo
  patch_coderun_status \
    "Succeeded" \
    "Implementation completed - ready for quality review" \
    "ready-for-qa" \
    "" \
    "$RESOLVED_PR_URL" \
    "true"
else
  STATUS_NOTE="$LAST_COMPLETION_REASON"
  if [ -z "$STATUS_NOTE" ]; then
    STATUS_NOTE="Implementation requires follow-up"
  fi

  # Mark as Succeeded with needs-fixes to allow workflow to continue to Cleo
  # The remediationStatus indicates follow-up work is needed
  patch_coderun_status \
    "Succeeded" \
    "$STATUS_NOTE" \
    "needs-fixes" \
    "" \
    "$RESOLVED_PR_URL" \
    "false"
fi

# Submit GitHub PR review for Cleo/Tess stages (enables workflow progression)
WORKFLOW_STAGE="${WORKFLOW_STAGE:-}"
if [ "$WORKFLOW_STAGE" = "quality" ] || [ "$WORKFLOW_STAGE" = "testing" ]; then
  PR_NUM="${PR_NUMBER:-}"
  if [ -z "$PR_NUM" ]; then
    # Try to get PR number from current branch
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")
    if [ -n "$CURRENT_BRANCH" ]; then
      PR_NUM=$(gh pr list --state open --head "$CURRENT_BRANCH" --json number --jq '.[0].number' 2>/dev/null || echo "")
    fi
  fi

  if [ -n "$PR_NUM" ]; then
    if [ $SUCCESS -eq 1 ]; then
      STAGE_NAME="Quality"
      STAGE_EMOJI="🛡️"
      CHECKS_PASSED=$'- Code formatting verified
- Linting passed
- Unit tests successful
- Quality standards met'
      NEXT_STAGE="end-to-end testing by Tess"
      
      if [ "$WORKFLOW_STAGE" = "testing" ]; then
        # Tess has final approval authority
        STAGE_NAME="QA Testing"
        STAGE_EMOJI="🧪"
        CHECKS_PASSED=$'- End-to-end tests passed
- Integration tests successful
- Acceptance criteria validated
- Production readiness confirmed'
        NEXT_STAGE="human review and merge"
        
        echo "✅ $STAGE_NAME complete - posting APPROVE review (Tess final approval)"
        REVIEW_BODY_FILE=$(mktemp)
        cat <<EOF > "$REVIEW_BODY_FILE"
### $STAGE_EMOJI $STAGE_NAME Review - APPROVED
All checks have passed:
$CHECKS_PASSED
Ready for $NEXT_STAGE.

**Final Approval:** Tess has verified all acceptance criteria are met.
EOF
        refresh_token_if_needed || true
        timeout 30 gh pr review "$PR_NUM" --approve --body-file "$REVIEW_BODY_FILE" 2>&1 || echo "⚠️ PR review command failed"
        rm -f "$REVIEW_BODY_FILE"
      else
        # Cleo hands off to Tess via comment and label (NOT approve)
        echo "✅ $STAGE_NAME checks passed - handing off to Tess"
        REVIEW_BODY_FILE=$(mktemp)
        cat <<EOF > "$REVIEW_BODY_FILE"
### $STAGE_EMOJI $STAGE_NAME Review - PASSED
All checks have passed:
$CHECKS_PASSED

**Status:** Ready for $NEXT_STAGE
**Next Step:** Tess will now perform comprehensive QA validation

---
*Quality review by Cleo*
EOF
        refresh_token_if_needed || true
        timeout 30 gh pr comment "$PR_NUM" --body-file "$REVIEW_BODY_FILE" 2>&1 || echo "⚠️ PR comment command failed"
        rm -f "$REVIEW_BODY_FILE"
        
        # Add ready-for-qa label to signal Tess
        echo "🏷️  Adding 'ready-for-qa' label to trigger Tess review"
        timeout 30 gh pr edit "$PR_NUM" --add-label "ready-for-qa" 2>&1 || echo "⚠️ Failed to add ready-for-qa label"
      fi
    else
      STAGE_NAME="Quality"
      STAGE_EMOJI="🛡️"
      ISSUES_DESC=$'- Review code formatting
- Fix linting errors
- Ensure unit tests pass
- Meet quality standards'
      if [ "$WORKFLOW_STAGE" = "testing" ]; then
        STAGE_NAME="QA Testing"
        STAGE_EMOJI="🧪"
        ISSUES_DESC=$'- Fix failing end-to-end tests
- Address integration test failures
- Validate acceptance criteria
- Ensure production readiness'
      fi

      echo "❌ $STAGE_NAME issues detected - posting REQUEST CHANGES review"
      REVIEW_BODY_FILE=$(mktemp)
      cat <<EOF > "$REVIEW_BODY_FILE"
### 🔴 Required Changes
$STAGE_NAME issues detected. Please address the following:
$ISSUES_DESC
EOF
      refresh_token_if_needed || true
      timeout 30 gh pr review "$PR_NUM" --request-changes --body-file "$REVIEW_BODY_FILE" 2>&1 || echo "⚠️ PR review command failed"
      rm -f "$REVIEW_BODY_FILE"
    fi
  else
    echo "ℹ️ No PR number available for $WORKFLOW_STAGE review submission"
  fi
fi

touch /workspace/.agent_done 2>/dev/null || true

if [ $SUCCESS -ne 1 ]; then
  {{#if agent_completion_message}}
echo "{{agent_completion_message}}"
  {{else}}
echo "⚠️ Factory execution incomplete"
  {{/if}}
  exit $EXIT_CODE
fi

{{#if agent_completion_message}}
echo "{{agent_completion_message}}"
{{else}}
echo "✅ Factory execution complete"
{{/if}}
exit $EXIT_CODE

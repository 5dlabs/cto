#!/bin/bash
set -euo pipefail

# =========================================================================
# Blaze Frontend Agent - Claude CLI
# =========================================================================
# Automated React/Next.js/TypeScript frontend development with:
# - Next.js 15 + React 19 + TypeScript 5
# - shadcn/ui component library
# - Live Kubernetes deployment + Ngrok preview
# - Playwright E2E tests + screenshots
# - Automated PR creation with visual documentation
# =========================================================================

echo '════════════════════════════════════════════════════════════════'
printf '║  🤖 AGENT: %-50s║\n' '{{github_app}}'
echo '║  BLAZE FRONTEND WORKFLOW STARTING                            ║'
echo '║  Frontend Development & UI/UX Agent                          ║'
echo '════════════════════════════════════════════════════════════════'
echo "🎨 Focus: Frontend development, React/Next.js, UI components"
echo "📋 Task ID: {{task_id}}"
echo "🌐 Repository: {{repository_url}}"
echo "⚙️  Service: {{service}}"
echo "════════════════════════════════════════════════════════════════"

# Task-specific workspace for parallel execution isolation
# CRITICAL: This must be set BEFORE including the base template so that
# the repository clones into the task-specific directory, not the shared workspace
TASK_WORKSPACE="/workspace/task-{{task_id}}"
mkdir -p /workspace
mkdir -p "$TASK_WORKSPACE"
echo "📁 Using task-specific workspace: $TASK_WORKSPACE"

# Ensure we're in the task workspace
cd "$TASK_WORKSPACE"

# =========================================================================
# GITHUB AUTHENTICATION & REPOSITORY SETUP
# =========================================================================

# Disable interactive Git prompts globally
export GIT_TERMINAL_PROMPT=0
export GIT_ASKPASS=/bin/true
export SSH_ASKPASS=/bin/true

# Repository URL
REPO_URL="{{repository_url}}"

echo "Authenticating with GitHub App..."

# Authenticate with GitHub App
if [ -n "$GITHUB_APP_PRIVATE_KEY" ] && [ -n "$GITHUB_APP_ID" ]; then
    # Create temporary private key file (support escaped newlines)
    TEMP_KEY_FILE="/tmp/github-app-key.pem"
    printf '%b' "$GITHUB_APP_PRIVATE_KEY" > "$TEMP_KEY_FILE"
    chmod 600 "$TEMP_KEY_FILE"

    # Generate JWT token for GitHub App
    JWT_HEADER=$(printf '{"alg":"RS256","typ":"JWT"}' | base64 -w 0 2>/dev/null || base64 | tr -d '\n' | tr '+/' '-_' | tr -d '=')
    JWT_HEADER=$(echo "$JWT_HEADER" | tr '+/' '-_' | tr -d '=')

    NOW=$(date +%s)
    EXP=$((NOW + 600))
    JWT_PAYLOAD=$(printf '{"iat":%d,"exp":%d,"iss":"%s"}' "$NOW" "$EXP" "$GITHUB_APP_ID" | base64 -w 0 2>/dev/null || base64 | tr -d '\n' | tr '+/' '-_' | tr -d '=')
    JWT_PAYLOAD=$(echo "$JWT_PAYLOAD" | tr '+/' '-_' | tr -d '=')

    JWT_SIGNATURE=$(printf '%s.%s' "$JWT_HEADER" "$JWT_PAYLOAD" | openssl dgst -sha256 -sign "$TEMP_KEY_FILE" -binary | base64 -w 0 2>/dev/null || base64 | tr -d '\n' | tr '+/' '-_' | tr -d '=')
    JWT_SIGNATURE=$(echo "$JWT_SIGNATURE" | tr '+/' '-_' | tr -d '=')
    JWT_TOKEN="$JWT_HEADER.$JWT_PAYLOAD.$JWT_SIGNATURE"

    # Parse repository owner and name
    INPUT_REPO="{{repository_url}}"
    if echo "$INPUT_REPO" | grep -qE '^https://github.com/'; then
        REPO_OWNER=$(echo "$INPUT_REPO" | sed -E 's|https://github.com/([^/]+)/.*|\1|')
        REPO_NAME=$(echo "$INPUT_REPO" | sed -E 's|https://github.com/[^/]+/([^/]+)(\.git)?|\1|')
    elif echo "$INPUT_REPO" | grep -qE '^git@github.com:'; then
        REPO_OWNER=$(echo "$INPUT_REPO" | sed -E 's|git@github.com:([^/]+)/.*|\1|')
        REPO_NAME=$(echo "$INPUT_REPO" | sed -E 's|git@github.com:[^/]+/([^/]+)(\.git)?|\1|')
    else
        SLUG=$(echo "$INPUT_REPO" | sed -E 's|\.git$||')
        REPO_OWNER=$(echo "$SLUG" | cut -d'/' -f1)
        REPO_NAME=$(echo "$SLUG" | cut -d'/' -f2)
    fi

    # Get installation access token
    INSTALL_ID=$(curl -s -H "Authorization: Bearer $JWT_TOKEN" \
        -H "Accept: application/vnd.github+json" \
        "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/installation" | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)

    if [ -n "$INSTALL_ID" ]; then
        TOKEN_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/app/installations/$INSTALL_ID/access_tokens")
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)

        if [ -n "$ACCESS_TOKEN" ]; then
            echo "✓ GitHub App authentication successful"
            export GITHUB_TOKEN="$ACCESS_TOKEN"
        else
            echo "❌ Failed to obtain GitHub App access token"
            exit 1
        fi
    else
        echo "❌ Failed to get installation ID for $REPO_OWNER/$REPO_NAME"
        exit 1
    fi

    rm -f "$TEMP_KEY_FILE"
else
    echo "❌ Missing GITHUB_APP_PRIVATE_KEY or GITHUB_APP_ID"
    exit 1
fi

# Clone repository
echo "Cloning repository: $REPO_URL"
WORKSPACE_DIR="$REPO_NAME"

# Use access token for cloning
AUTH_REPO_URL=$(echo "$REPO_URL" | sed "s|https://|https://x-access-token:${ACCESS_TOKEN}@|")

if git clone "$AUTH_REPO_URL" "$TASK_WORKSPACE/$WORKSPACE_DIR"; then
    echo "✓ Repository cloned successfully"
else
    echo "❌ Failed to clone repository"
    exit 1
fi

# Set up Claude work directory
{{#if work_dir}}
CLAUDE_WORK_DIR="$TASK_WORKSPACE/$WORKSPACE_DIR/{{work_dir}}"
{{else}}
CLAUDE_WORK_DIR="$TASK_WORKSPACE/$WORKSPACE_DIR"
{{/if}}
mkdir -p "$CLAUDE_WORK_DIR"
echo "✓ Claude working directory: $CLAUDE_WORK_DIR"

# Configure Git
cd "$CLAUDE_WORK_DIR"
git config user.name "{{github_app}}"
git config user.email "{{github_app}}@users.noreply.github.com"
echo "✓ Git configured"

# =========================================================================
# END AUTHENTICATION & REPOSITORY SETUP
# =========================================================================

# =========================================================================
# BLAZE-SPECIFIC FRONTEND WORKFLOW
# =========================================================================

echo ""
echo "════════════════════════════════════════════════════════════════"
echo "║           BLAZE FRONTEND WORKFLOW STARTING                  ║"
echo "════════════════════════════════════════════════════════════════"
echo ""

# Check if frontend scripts are available
SCRIPTS_DIR="/workspace/scripts/blaze"
if [ ! -d "$SCRIPTS_DIR" ]; then
    echo "⚠️  Blaze scripts not found at $SCRIPTS_DIR"
    echo "   Falling back to standard Claude workflow..."
    echo "✅ Blaze Claude frontend implementation complete"
    exit 0
fi

echo "✅ Blaze frontend scripts found"

# Step 1: Initialize Next.js project
echo ""
echo "📦 Step 1/5: Initializing Next.js + shadcn/ui project..."
echo "────────────────────────────────────────────────────────────────"
if bash "$SCRIPTS_DIR/init-nextjs-project.sh" "$CLAUDE_WORK_DIR"; then
    echo "✅ Next.js project initialized successfully"
else
    echo "❌ Next.js initialization failed"
    exit 1
fi

# Step 2: Let Claude implement the frontend
echo ""
echo "💻 Step 2/5: Running Claude for frontend implementation..."
echo "────────────────────────────────────────────────────────────────"
# The base template already runs Claude, so this step is already done
# Claude will generate React components based on the task requirements
echo "✅ Claude frontend implementation complete"

# Step 3: Deploy to Kubernetes
echo ""
echo "🚀 Step 3/5: Deploying to Kubernetes staging..."
echo "────────────────────────────────────────────────────────────────"
export NAMESPACE="agent-platform"
export TASK_ID="{{task_id}}"
export SERVICE_NAME="{{service}}"
if bash "$SCRIPTS_DIR/deploy-to-k8s.sh" "{{task_id}}" "{{service}}" 1; then
    echo "✅ Kubernetes deployment successful"
else
    echo "⚠️  Kubernetes deployment failed, continuing without live preview"
fi

# Step 4: Setup Ngrok live preview
echo ""
echo "🌐 Step 4/5: Setting up Ngrok live preview URL..."
echo "────────────────────────────────────────────────────────────────"
APP_NAME="task-{{task_id}}-{{service}}"
SERVICE_NAME="${APP_NAME}"
if bash "$SCRIPTS_DIR/setup-ngrok-ingress.sh" "$APP_NAME" "$SERVICE_NAME" 3000; then
    PREVIEW_URL=$(cat /workspace/preview_url.txt 2>/dev/null || echo "")
    if [ -n "$PREVIEW_URL" ]; then
        echo "✅ Live preview available at: $PREVIEW_URL"
        export PREVIEW_URL
    else
        echo "⚠️  Preview URL not generated"
    fi
else
    echo "⚠️  Ngrok setup failed, continuing without live preview"
fi

# Step 5: Run Playwright tests and capture screenshots
echo ""
echo "🎭 Step 5/5: Running Playwright E2E tests..."
echo "────────────────────────────────────────────────────────────────"
if [ -n "${PREVIEW_URL:-}" ]; then
    export PREVIEW_URL
    if bash "$SCRIPTS_DIR/run-playwright-tests.sh" "$PREVIEW_URL" "{{task_id}}"; then
        echo "✅ Playwright tests and screenshots complete"
        SCREENSHOTS_DIR="$CLAUDE_WORK_DIR/screenshots"
        if [ -d "$SCREENSHOTS_DIR" ]; then
            echo "📸 Screenshots saved to: $SCREENSHOTS_DIR"
            ls -lh "$SCREENSHOTS_DIR"/*.png 2>/dev/null || echo "   (no PNG files found)"
        fi
    else
        echo "⚠️  Playwright tests failed, continuing..."
    fi
else
    echo "⚠️  No preview URL available, skipping Playwright tests"
fi

# Step 6: Create PR with preview URL and screenshots
echo ""
echo "📝 Creating GitHub PR with live preview and screenshots..."
echo "────────────────────────────────────────────────────────────────"

# The base template handles PR creation, but we'll enhance it with frontend-specific info
# Save preview URL and screenshot info for the PR description
if [ -n "${PREVIEW_URL:-}" ]; then
    echo "" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "## 🌐 Live Preview" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "**[👉 View Live Demo]($PREVIEW_URL)** ← Click to see the implementation" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "> 🔗 **Preview URL**: \`$PREVIEW_URL\`" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "> ⏰ **Available until**: PR is merged (auto-cleanup after merge)" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "> 🔄 **Updates live**: Every push to this branch updates the preview" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "" >> "$TASK_WORKSPACE/.blaze-preview-info"
fi

# Add screenshot section if screenshots exist
if [ -d "$CLAUDE_WORK_DIR/screenshots" ] && [ -n "$(ls -A "$CLAUDE_WORK_DIR/screenshots"/*.png 2>/dev/null)" ]; then
    echo "---" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "## 📸 UI Screenshots" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "" >> "$TASK_WORKSPACE/.blaze-preview-info"
    
    # List available screenshots
    for screenshot in "$CLAUDE_WORK_DIR/screenshots"/*.png; do
        if [ -f "$screenshot" ]; then
            filename=$(basename "$screenshot")
            echo "- 📎 $filename" >> "$TASK_WORKSPACE/.blaze-preview-info"
        fi
    done
    echo "" >> "$TASK_WORKSPACE/.blaze-preview-info"
    echo "_Screenshots will be attached to this PR_" >> "$TASK_WORKSPACE/.blaze-preview-info"
fi

echo ""
echo "════════════════════════════════════════════════════════════════"
echo "║         BLAZE FRONTEND WORKFLOW COMPLETE                    ║"
echo "════════════════════════════════════════════════════════════════"
echo ""
echo "✅ Next.js project initialized"
echo "✅ React components implemented"
echo "✅ Kubernetes deployment: ${PREVIEW_URL:+SUCCESS}"
echo "✅ Live preview URL: ${PREVIEW_URL:-Not available}"
echo "✅ Screenshots captured: $(ls "$CLAUDE_WORK_DIR/screenshots"/*.png 2>/dev/null | wc -l)"
echo ""
echo "🎨 Blaze Claude frontend implementation complete"

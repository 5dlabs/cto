#!/bin/sh

# CRITICAL: Clean up sentinel file IMMEDIATELY to prevent sidecar from shutting down
# This MUST happen before anything else, as the sidecar starts before our script
if [ -f /workspace/.agent_done ]; then
    echo "🧹 URGENT: Removing leftover sentinel file from previous run"
    rm -f /workspace/.agent_done
fi

# Also clean up Cipher completion marker if present
if [ -f /workspace/.cipher-complete ]; then
    echo "🧹 Removing Cipher completion marker from previous run"
    rm -f /workspace/.cipher-complete
fi

# Ensure Rust environment is always properly set up
echo "🔧 Setting up Rust environment..."

# Source Rust environment if available (fixes cargo not found issues)
# Try multiple possible locations for Rust environment
RUST_ENV_SOURCES=(
    "$HOME/.cargo/env"
    "/root/.cargo/env"
    "/usr/local/cargo/env"
    "/home/ubuntu/.cargo/env"
    "/home/user/.cargo/env"
)

for env_file in "${RUST_ENV_SOURCES[@]}"; do
    if [ -f "$env_file" ]; then
        echo "✓ Sourcing Rust environment from $env_file"
        . "$env_file"
        # Export PATH explicitly after sourcing
        export PATH="$HOME/.cargo/bin:/usr/local/cargo/bin:$PATH"
        break
    fi
done

# Ensure rustup has a default toolchain set
if command -v rustup >/dev/null 2>&1; then
    echo "✓ Rustup found, ensuring stable toolchain is default..."
    rustup default stable 2>/dev/null || true
    # Re-source environment after setting default
    if [ -f "$HOME/.cargo/env" ]; then
        . "$HOME/.cargo/env"
    elif [ -f "/root/.cargo/env" ]; then
        . "/root/.cargo/env"
    fi
    export PATH="$HOME/.cargo/bin:/usr/local/cargo/bin:$PATH"
    echo "✓ Ensured stable Rust toolchain is default"
else
    echo "⚠️ rustup not found in PATH"
fi

# Verify Rust is available with multiple fallback attempts
if command -v cargo >/dev/null 2>&1; then
    echo "✓ Cargo is available: $(cargo --version)"
elif [ -f "/usr/local/cargo/bin/cargo" ]; then
    echo "✓ Found cargo at /usr/local/cargo/bin/cargo"
    export PATH="/usr/local/cargo/bin:$PATH"
    echo "✓ Cargo is available: $(cargo --version)"
elif [ -f "$HOME/.cargo/bin/cargo" ]; then
    echo "✓ Found cargo at $HOME/.cargo/bin/cargo"
    export PATH="$HOME/.cargo/bin:$PATH"
    echo "✓ Cargo is available: $(cargo --version)"
else
    echo "❌ Cargo not found in PATH"
    echo "Current PATH: $PATH"
    echo "Attempting to find cargo..."
    find /usr -name cargo 2>/dev/null | head -5 || echo "No cargo found in /usr"
    find /home -name cargo 2>/dev/null | head -5 || echo "No cargo found in /home"
    find /root -name cargo 2>/dev/null | head -5 || echo "No cargo found in /root"
    # Try to install Rust as last resort
    echo "🔧 Attempting to install Rust via rustup..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || true
    . "$HOME/.cargo/env" || true
    export PATH="$HOME/.cargo/bin:$PATH"
    if command -v cargo >/dev/null 2>&1; then
        echo "✓ Cargo installed and available: $(cargo --version)"
    else
        echo "❌ Failed to install Rust, continuing without cargo..."
    fi
fi

echo '════════════════════════════════════════════════════════════════'
echo '║            CIPHER SECURITY SCANNING WORKFLOW STARTING         ║'
echo '║         Vulnerability Analysis & Security Validation Agent    ║'
echo '════════════════════════════════════════════════════════════════'

# =========================================================================
# RETRY CONFIGURATION
# =========================================================================
MAX_RETRIES_CONFIG=${CLAUDE_MAX_RETRIES:-${EXECUTION_MAX_RETRIES:-10}}
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "║                    RETRY CONFIGURATION                        ║"
echo "════════════════════════════════════════════════════════════════"
echo "🤖 CLI: {{cli_type}}"
echo "🎯 Model: {{model}}"
echo "🔄 Maximum Iterations: $MAX_RETRIES_CONFIG"
if [ -n "${CLAUDE_MAX_RETRIES:-}" ]; then
  echo "📍 Source: CLAUDE_MAX_RETRIES environment variable"
elif [ -n "${EXECUTION_MAX_RETRIES:-}" ]; then
  echo "📍 Source: EXECUTION_MAX_RETRIES environment variable"
else
  echo "📍 Source: Default configuration"
fi
echo "════════════════════════════════════════════════════════════════"
echo ""

echo "🎯 Agent: {{github_app}}"
echo "🔐 Focus: Security vulnerability scanning, dependency analysis, compliance"
echo "📋 Task ID: {{task_id}}"
echo "✅ Mission: Zero tolerance for CRITICAL/HIGH security vulnerabilities"

# =========================================================================
# SECURITY TOOLS INSTALLATION
# =========================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "║           SECURITY SCANNING TOOLS INSTALLATION                ║"
echo "════════════════════════════════════════════════════════════════"

# Install cargo-audit and cargo-deny for Rust projects
if command -v cargo >/dev/null 2>&1; then
    echo "🔧 Installing Rust security tools..."

    # cargo-audit: Check for known vulnerabilities in dependencies
    if ! command -v cargo-audit >/dev/null 2>&1; then
        echo "📦 Installing cargo-audit..."
        cargo install cargo-audit --quiet 2>/dev/null || echo "⚠️ Failed to install cargo-audit"
    else
        echo "✓ cargo-audit already installed"
    fi

    # cargo-deny: Check for banned dependencies, licenses, and advisories
    if ! command -v cargo-deny >/dev/null 2>&1; then
        echo "📦 Installing cargo-deny..."
        cargo install cargo-deny --quiet 2>/dev/null || echo "⚠️ Failed to install cargo-deny"
    else
        echo "✓ cargo-deny already installed"
    fi

    # Verify installations
    if command -v cargo-audit >/dev/null 2>&1; then
        echo "✅ cargo-audit: $(cargo-audit --version 2>/dev/null || echo 'version unknown')"
    fi
    if command -v cargo-deny >/dev/null 2>&1; then
        echo "✅ cargo-deny: $(cargo-deny --version 2>/dev/null || echo 'version unknown')"
    fi
else
    echo "⚠️ Cargo not available - Rust security tools skipped"
fi

# Install Node.js security tools if npm is available
if command -v npm >/dev/null 2>&1; then
    echo "🔧 Node.js detected - npm audit available"
    echo "✅ npm: $(npm --version)"
else
    echo "ℹ️ Node.js not detected - npm security tools skipped"
fi

# Install Python security tools if pip is available
if command -v pip >/dev/null 2>&1 || command -v pip3 >/dev/null 2>&1; then
    echo "🔧 Python detected - installing security tools..."
    PIP_CMD="pip3"
    if ! command -v pip3 >/dev/null 2>&1; then
        PIP_CMD="pip"
    fi

    # pip-audit: Check for known vulnerabilities in Python dependencies
    if ! command -v pip-audit >/dev/null 2>&1; then
        echo "📦 Installing pip-audit..."
        $PIP_CMD install pip-audit --quiet 2>/dev/null || echo "⚠️ Failed to install pip-audit"
    else
        echo "✓ pip-audit already installed"
    fi

    if command -v pip-audit >/dev/null 2>&1; then
        echo "✅ pip-audit: $(pip-audit --version 2>/dev/null || echo 'version unknown')"
    fi
else
    echo "ℹ️ Python not detected - pip security tools skipped"
fi

# Install gitleaks for secret scanning if not present
if ! command -v gitleaks >/dev/null 2>&1; then
    echo "🔧 Installing gitleaks for secret scanning..."
    # Try to install via package manager or download binary
    if command -v apt-get >/dev/null 2>&1; then
        apt-get update -qq && apt-get install -y gitleaks 2>/dev/null || echo "⚠️ gitleaks not available via apt"
    else
        echo "ℹ️ Skipping gitleaks installation (no package manager available)"
    fi
else
    echo "✅ gitleaks: $(gitleaks version 2>/dev/null || echo 'version unknown')"
fi

echo "════════════════════════════════════════════════════════════════"
echo ""

# =========================================================================
# Base template import - shares common logic with Factory
# =========================================================================

# Source the shared container-base.sh.hbs logic by including it inline
# This ensures Cipher gets all the GitHub auth, git setup, and workflow logic

{{> code/factory/container-base.sh.hbs }}

#!/bin/bash
# Post-completion hook for code implementation - PR creation

# IMMEDIATE DEBUG - Write to PVC to verify hook is called
HOOK_LOG="/workspace/hook-execution.log"

# Use bash process substitution (now we know bash is available)
exec > >(tee -a "$HOOK_LOG") 2>&1

echo "=== STOP HOOK DEBUG START ==="
echo "Hook called at: $(date)"
echo "PWD: $(pwd)"
echo "USER: $(whoami)"
echo "ENV PATH: $PATH"
echo "=== END DEBUG ==="

echo "🔗 STOP HOOK - Starting code implementation PR creation..."
echo "Timestamp: $(date)"
echo "Working directory: $(pwd)"

# Create a test file to prove the stop hook ran
echo "Stop hook executed at $(date)" > .stop-hook-executed
echo "✅ Created .stop-hook-executed file"

# Check if we have any changes (including untracked files)
if git diff --quiet HEAD 2>/dev/null && git diff --cached --quiet HEAD 2>/dev/null; then
    # Check for untracked files (excluding .stop-hook-executed and common temp files)
    UNTRACKED_FILES=$(git ls-files --others --exclude-standard | grep -v -E '(\.stop-hook-executed|node_modules|\.env)' | wc -l)
    if [ "$UNTRACKED_FILES" -eq 0 ]; then
        echo "ℹ️  No code changes found - exiting"
        exit 0
    fi
fi

echo "📝 Code changes detected - proceeding with PR creation"

# Get the current branch (this should be our feature branch)
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "📍 Current feature branch: $CURRENT_BRANCH"

# Stage all changes including untracked files
echo "📝 Staging all changes..."
git add .

# Check if there are staged changes
if git diff --cached --quiet; then
    echo "ℹ️  No changes to commit after staging"
    exit 0
fi

# Generate more descriptive commit message
if [ -f "$PR_DESC_FILE" ]; then
    # Extract a brief summary from Claude's description (first line or first 80 chars)
    CLAUDE_SUMMARY=$(head -n 1 "$PR_DESC_FILE" | cut -c1-80)
    if [ -n "$CLAUDE_SUMMARY" ] && [ ${#CLAUDE_SUMMARY} -gt 10 ]; then
        COMMIT_MSG="feat: $CLAUDE_SUMMARY

- Implementation completed via orchestrator workflow
- All acceptance criteria addressed
- Code follows project standards and conventions
- Branch: $CURRENT_BRANCH

🤖 Generated by Claude Code Agent"
    else
        COMMIT_MSG="feat({{service_name}}): implement task {{task_id}}

- Core functionality implemented as specified
- Dependencies and configuration added
- Project structure created and validated
- Branch: $CURRENT_BRANCH

🤖 Auto-generated by orchestrator code agent"
    fi
else
    COMMIT_MSG="feat({{service_name}}): implement task {{task_id}}

- Core functionality implemented as specified
- Dependencies and configuration added
- Project structure created and validated
- Branch: $CURRENT_BRANCH

🤖 Auto-generated by orchestrator code agent"
fi

if git commit -m "$COMMIT_MSG"; then
    echo "✅ Successfully committed implementation changes"
else
    echo "❌ Failed to commit changes"
    exit 1
fi

# Push the current feature branch
if git push -u origin "$CURRENT_BRANCH"; then
    echo "✅ Successfully pushed feature branch: $CURRENT_BRANCH"
else
    echo "❌ Failed to push feature branch"
    exit 1
fi

# Check if Claude created a PR description
PR_DESC_FILE="PR_DESCRIPTION.md"
if [ -f "$PR_DESC_FILE" ]; then
    echo "✅ Found PR description from Claude"
    CLAUDE_PR_DESC=$(cat "$PR_DESC_FILE")
else
    echo "⚠️ No PR description file found from Claude"
    CLAUDE_PR_DESC=""
fi

# Debug: Check gh CLI availability and auth
echo "=== GitHub CLI Check ==="
if command -v gh >/dev/null 2>&1; then
    echo "✅ gh CLI is available"
    gh version

    # Check authentication
    if gh auth status 2>&1 | grep -q "Logged in"; then
        echo "✅ gh CLI is authenticated"
    else
        echo "❌ gh CLI is not authenticated"
        echo "Attempting to authenticate with GITHUB_TOKEN..."
        if [ -n "$GITHUB_TOKEN" ]; then
            echo "$GITHUB_TOKEN" | gh auth login --with-token
        fi
    fi
else
    echo "❌ gh CLI is not available"
fi

# Create PR from feature branch to main
if command -v gh >/dev/null 2>&1; then
    # Generate more descriptive PR title
    if [ -f "$PR_DESC_FILE" ]; then
        CLAUDE_TITLE_SUMMARY=$(head -n 1 "$PR_DESC_FILE" | cut -c1-60)
        if [ -n "$CLAUDE_TITLE_SUMMARY" ] && [ ${#CLAUDE_TITLE_SUMMARY} -gt 15 ]; then
            PR_TITLE="feat: $CLAUDE_TITLE_SUMMARY"
        else
            PR_TITLE="feat({{service_name}}): implement task {{task_id}} - {{task_title}}"
        fi
    else
        PR_TITLE="feat({{service_name}}): implement task {{task_id}} - {{task_title}}"
    fi

    # Build comprehensive PR body
    if [ -n "$CLAUDE_PR_DESC" ]; then
        PR_BODY="$CLAUDE_PR_DESC

---

## 📋 Implementation Details

**Task:** {{task_id}} {{#if task_title}}- {{task_title}}{{/if}}
**Service:** {{service_name}}
**Implementation:** Claude Code Agent via orchestrator

### 🔄 Workflow Summary
- ✅ **Requirements Analysis**: Task specifications reviewed and understood
- ✅ **Implementation**: Code generated following project standards
- ✅ **Validation**: Acceptance criteria addressed
- ✅ **Review**: Ready for human review and testing

### 📊 Files Modified/Created
$(git diff --name-status HEAD~1 | sed 's/^/- /')

### 🏷️ Metadata
- **Generated by:** Claude Code Agent
- **PR Created by:** Orchestrator Hook
- **Branch:** \`$CURRENT_BRANCH\` → \`main\`
- **Timestamp:** $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")
- **Task ID:** {{task_id}}
- **Service:** {{service_name}}

### ✅ Ready for Review
This PR has been automatically created by the orchestrator implementation workflow.
The Claude agent has completed the implementation and addressed all acceptance criteria.

🤖 **Auto-generated by orchestrator** - Review, test, and merge when ready"
    else
        # Fallback to template if no Claude description
        PR_BODY="## 🚀 Implementation Complete

**Task ID:** {{task_id}}{{#if task_title}}
**Task Title:** {{task_title}}{{/if}}
**Service:** {{service_name}}
**Implementation Agent:** Claude Code Agent
**Workflow:** Orchestrator Implementation Pipeline
**Timestamp:** $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")

---

## 📋 Implementation Summary

### ✅ Completed Work
- **Requirements Analysis**: Task specifications reviewed and understood
- **Code Implementation**: Core functionality implemented as specified
- **Dependencies**: All necessary dependencies and configuration added
- **Project Structure**: Proper structure created and validated
- **Quality Assurance**: Code follows project standards and conventions

### 🔄 Workflow Details
- **Source Branch**: \`$CURRENT_BRANCH\`
- **Target Branch**: \`main\`
- **Working Directory**: {{#if working_directory}}\`{{working_directory}}\`{{else}}\`{{service_name}}\`{{/if}}

### 📊 Files Changed
$(git diff --name-status HEAD~1 | sed 's/^/- /' | head -20)

$(if [ $(git diff --name-status HEAD~1 | wc -l) -gt 20 ]; then
    echo "... and $(($(git diff --name-status HEAD~1 | wc -l) - 20)) more files"
fi)

### 🏷️ Metadata
- **Generated by:** Claude Code Agent
- **PR Created by:** Orchestrator Hook
- **Branch:** \`$CURRENT_BRANCH\` → \`main\`
- **Timestamp:** $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")
- **Task ID:** {{task_id}}
- **Service:** {{service_name}}

### ✅ Ready for Review
This PR was automatically created by the orchestrator implementation workflow.
The Claude agent has completed the implementation and addressed all acceptance criteria.

🤖 **Auto-generated by orchestrator** - Review, test, and merge when ready"
    fi

    echo "=== Creating Pull Request ==="
    echo "Title: $PR_TITLE"
    echo "Base: main"
    echo "Head: $CURRENT_BRANCH"
    
    # First, check if a PR already exists for this branch
    echo "🔍 Checking for existing PR..."
    EXISTING_PR=$(gh pr list --head "$CURRENT_BRANCH" --json number --jq '.[0].number' 2>/dev/null || echo "")
    
    if [ -n "$EXISTING_PR" ]; then
        echo "✅ PR already exists: #$EXISTING_PR"
        echo "ℹ️  Skipping PR creation (already created by agent)"
        PR_NUMBER="$EXISTING_PR"
        PR_URL=$(gh pr view "$PR_NUMBER" --json url -q .url 2>/dev/null || echo "")
        echo "$PR_URL" > .pr-url
    elif gh pr create \
        --title "$PR_TITLE" \
        --body "$PR_BODY" \
        --base "main" \
        --head "$CURRENT_BRANCH" 2>&1; then
        echo "✅ Pull request created successfully"
        echo "📝 PR: $PR_TITLE"
        echo "🔗 From: $CURRENT_BRANCH → main"

        # Save PR URL if possible
        PR_URL=$(gh pr view --json url -q .url 2>/dev/null || echo "")
        if [ -n "$PR_URL" ]; then
            echo "🔗 PR URL: $PR_URL"
            echo "$PR_URL" > .pr-url
        fi
    else
        echo "❌ PR creation failed"
        echo "Possible reasons:"
        echo "- PR already exists for this branch"
        echo "- GitHub CLI authentication issue"
        echo "- Network connectivity issue"
        echo "- Repository permissions issue"
    fi

    # Attempt to add correlation labels (task/run/service) even if PR already existed
    echo "=== Ensuring correlation labels on PR ==="
    # Derive repository slug from origin remote
    REPO_SLUG=""
    if ORIGIN_URL=$(git -C . remote get-url origin 2>/dev/null); then
      if echo "$ORIGIN_URL" | grep -qE '^https://github.com/'; then
        REPO_SLUG=$(echo "$ORIGIN_URL" | sed -E 's|https://github.com/([^/]+/[^/]+)(\\.git)?|\\1|')
      elif echo "$ORIGIN_URL" | grep -qE '^git@github.com:'; then
        REPO_SLUG=$(echo "$ORIGIN_URL" | sed -E 's|git@github.com:([^/]+/[^/]+)(\\.git)?|\\1|')
      fi
    fi

    # Resolve PR number by head branch if needed
    if [ -z "$PR_URL" ]; then
      PR_URL=$(gh pr view -R "$REPO_SLUG" --json url -q .url 2>/dev/null || echo "")
    fi
    PR_NUMBER=""
    PR_NUMBER=$(gh pr list -R "$REPO_SLUG" --head "$CURRENT_BRANCH" --json number --jq '.[0].number' 2>/dev/null || echo "")
    if [ -z "$PR_NUMBER" ] && [ -n "$PR_URL" ]; then
      PR_NUMBER=$(gh pr view "$PR_URL" --json number -q .number 2>/dev/null || echo "")
    fi

    if [ -n "$PR_NUMBER" ]; then
      # Build labels from environment when available; fall back to minimal
      TASK_LABEL="task-${TASK_ID:-{{task_id}}}"
      RUN_LABEL="run-${WORKFLOW_NAME:-${RUN_NAME:-unknown}}"
      SERVICE_LABEL="service-${SERVICE_NAME:-{{service}}}"

      echo "🏷️ Adding labels to PR #$PR_NUMBER on $REPO_SLUG: $TASK_LABEL, $RUN_LABEL, $SERVICE_LABEL"
      LABEL_ERROR=$(gh pr edit "$PR_NUMBER" -R "$REPO_SLUG" --add-label "$TASK_LABEL,$RUN_LABEL,$SERVICE_LABEL" 2>&1)
      if [ $? -ne 0 ]; then
        echo "⚠️ Failed to add labels in one shot: $LABEL_ERROR"
        # Ensure labels exist, then add individually
        for label in "$TASK_LABEL" "$RUN_LABEL" "$SERVICE_LABEL"; do
          if ! gh label list -R "$REPO_SLUG" --search "$label" | grep -q "^$label"; then
            case "$label" in
              task-*) COLOR="f29513"; DESC="Task correlation" ;;
              run-*) COLOR="0366d6"; DESC="Workflow run correlation" ;;
              service-*) COLOR="0e8a16"; DESC="Service correlation" ;;
              *) COLOR="ededed"; DESC="Correlation label" ;;
            esac
            gh label create "$label" -R "$REPO_SLUG" --color "$COLOR" --description "$DESC" 2>/dev/null || true
          fi
          gh pr edit "$PR_NUMBER" -R "$REPO_SLUG" --add-label "$label" 2>/dev/null || true
        done
      else
        echo "✅ Correlation labels ensured on PR"
      fi
    else
      echo "⚠️ Could not resolve PR number for labeling"
    fi
else
    echo "❌ GitHub CLI not available - PR must be created manually"
    echo ""
    echo "📋 Manual PR Creation Details:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "🏷️  TITLE: $PR_TITLE"
    echo ""
    echo "📍 BRANCH INFO:"
    echo "   • From: $CURRENT_BRANCH"
    echo "   • To: main"
    echo "   • Type: Feature implementation"

    if [ -n "$CLAUDE_PR_DESC" ]; then
        echo ""
        echo "📝 CLAUDE-GENERATED DESCRIPTION:"
        echo "────────────────────────────────────────────────────────────────────────────────────"
        echo "$CLAUDE_PR_DESC"
        echo "────────────────────────────────────────────────────────────────────────────────────"
    fi

    echo ""
    echo "📄 FULL PR DESCRIPTION (copy-paste ready):"
    echo "────────────────────────────────────────────────────────────────────────────────────"
    if [ -n "$CLAUDE_PR_DESC" ]; then
        echo "$CLAUDE_PR_DESC"
        echo ""
        echo "---"
        echo ""
    fi
    echo "## 🚀 Implementation Complete"
    echo ""
    echo "**Task ID:** {{task_id}}"
    {{#if task_title}}
    echo "**Task Title:** {{task_title}}"
    {{/if}}
    echo "**Service:** {{service_name}}"
    echo "**Implementation Agent:** Claude Code Agent"
    echo "**Workflow:** Orchestrator Implementation Pipeline"
    echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
    echo ""
    echo "### 📊 Files Changed"
    git diff --name-status HEAD~1 | sed 's/^/- /'
    echo ""
    echo "### 🏷️ Metadata"
    echo "- **Generated by:** Claude Code Agent"
    echo "- **PR Created by:** Manual creation (GitHub CLI unavailable)"
    echo "- **Branch:** \`$CURRENT_BRANCH\` → \`main\`"
    echo "- **Task ID:** {{task_id}}"
    echo "- **Service:** {{service_name}}"
    echo ""
    echo "### ✅ Ready for Review"
    echo "This PR contains implementation work completed by the Claude Code Agent."
    echo ""
    echo "🤖 **Ready for review and merge**"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
fi

echo "🎉 Code implementation stop hook completed successfully!"

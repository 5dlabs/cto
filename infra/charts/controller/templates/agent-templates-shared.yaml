# This file is auto-generated by scripts/generate-agent-templates-configmaps-split.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-shared
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: agent-templates
    agent-templates/type: shared
  annotations:
    templates-checksum: "c651b8019cda96c076c630be08e2375de47b86edbff1ff4170066d5c0aba63d5"
binaryData:
  agents_cleo-system-prompt.md.hbs: 
  agents_rex-system-prompt.md.hbs: 
  agents_system-prompt.md.hbs: LS0tCm5hbWU6IHt7YWdlbnRfbmFtZX19CmRlc2NyaXB0aW9uOiB7e2FnZW50X2Rlc2NyaXB0aW9ufX0KIyB0b29sczogb21pdHRlZCB0byBpbmhlcml0IGFsbCBhdmFpbGFibGUgdG9vbHMKLS0tCgp7e3N5c3RlbV9wcm9tcHR9fQo=
  agents_tess-system-prompt.md.hbs: 
  code_client-config.json.hbs: ewogIHt7I2lmIHJlbW90ZV90b29sc319CiAgInJlbW90ZVRvb2xzIjogWwogICAge3sjZWFjaCByZW1vdGVfdG9vbHN9fQogICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICB7ey9lYWNofX0KICBde3sjaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0se3svaWZ9fQogIHt7ZWxzZX19CiAge3sjaWYgKGVxIHRvb2xfY29uZmlnICJtaW5pbWFsIil9fQogICJyZW1vdGVUb29scyI6IFtde3sjaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0se3svaWZ9fQogIHt7ZWxzZSBpZiAoZXEgdG9vbF9jb25maWcgImRlZmF1bHQiKX19CiAgInJlbW90ZVRvb2xzIjogWwogICAgImJyYXZlX3NlYXJjaF9icmF2ZV93ZWJfc2VhcmNoIiwKICAgICJtZW1vcnlfY3JlYXRlX2VudGl0aWVzIiwKICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgXXt7I2lmIChlcSB0b29sX2NvbmZpZyAiYWR2YW5jZWQiKX19LHt7L2lmfX0KICB7e2Vsc2UgaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0KICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYnJhdmVfc2VhcmNoX2JyYXZlX3dlYl9zZWFyY2giLAogICAgIm1lbW9yeV9jcmVhdGVfZW50aXRpZXMiLAogICAgInJ1c3Rkb2NzX3F1ZXJ5X3J1c3RfZG9jcyIsCiAgICAiZ2l0aHViX2NyZWF0ZV9pc3N1ZSIsCiAgICAia3ViZXJuZXRlc19saXN0UmVzb3VyY2VzIiwKICAgICJ0ZXJyYWZvcm1fbGlzdF9wcm92aWRlcnMiCiAgXSwKICB7e2Vsc2V9fQogICJyZW1vdGVUb29scyI6IFsKICAgICJicmF2ZV9zZWFyY2hfYnJhdmVfd2ViX3NlYXJjaCIsCiAgICAibWVtb3J5X2NyZWF0ZV9lbnRpdGllcyIsCiAgICAicnVzdGRvY3NfcXVlcnlfcnVzdF9kb2NzIgogIF17eyNpZiAoZXEgdG9vbF9jb25maWcgImFkdmFuY2VkIil9fSx7ey9pZn19CiAge3svaWZ9fQogIHt7L2lmfX0KICB7eyNpZiAoZXEgdG9vbF9jb25maWcgImFkdmFuY2VkIil9fQogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsKICAgICAgICB7eyNpZiBsb2NhbF90b29sc319CiAgICAgICAge3sjZWFjaCBsb2NhbF90b29sc319CiAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAge3svZWFjaH19CiAgICAgICAge3tlbHNlfX0KICAgICAgICAicmVhZF9maWxlIiwKICAgICAgICAid3JpdGVfZmlsZSIsCiAgICAgICAgImxpc3RfZGlyZWN0b3J5IiwKICAgICAgICAiY3JlYXRlX2RpcmVjdG9yeSIKICAgICAgICB7ey9pZn19CiAgICAgIF0sCiAgICAgICJ3b3JraW5nRGlyZWN0b3J5IjogInByb2plY3Rfcm9vdCIKICAgIH0KICB9CiAge3svaWZ9fQp9
  code_coding-guidelines.md.hbs: 
  code_github-guidelines.md.hbs: 
  code_mcp.json.hbs: ewogICJtY3BTZXJ2ZXJzIjogewogICAgInRvb2xtYW4iOiB7CiAgICAgICJjb21tYW5kIjogInRvb2xtYW4iLAogICAgICAiYXJncyI6IFsKICAgICAgICAiLS11cmwiLAogICAgICAgICJodHRwOi8vdG9vbG1hbi5hZ2VudC1wbGF0Zm9ybS5zdmMuY2x1c3Rlci5sb2NhbDozMDAwL21jcCIsCiAgICAgICAgIi0td29ya2luZy1kaXIiLAogICAgICAgICIvd29ya3NwYWNlIgogICAgICBdLAogICAgICAiZW52IjogewogICAgICAgICJUT09MTUFOX1NFUlZFUl9VUkwiOiAiaHR0cDovL3Rvb2xtYW4uYWdlbnQtcGxhdGZvcm0uc3ZjLmNsdXN0ZXIubG9jYWw6MzAwMC9tY3AiCiAgICAgIH0KICAgIH0KICB9Cn0K
  docs_claude_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==

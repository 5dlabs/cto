{{- if .Values.argo.enabled }}
---
# Argo Workflow Template for Project Intake
# This template processes new project PRDs and generates TaskMaster tasks

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: project-intake
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: project-intake
spec:
  arguments:
    parameters:
      - name: configmap-name
        description: "Name of the ConfigMap containing intake files"
      - name: project-name
        description: "Project name (auto-detected if not provided)"
        value: ""
      - name: repository-url
        description: "Target repository for the generated project - auto-detected from git"
        # NO DEFAULT - auto-detected by MCP/script
      - name: source-branch
        description: "Source branch to work from - auto-detected from git"
        # NO DEFAULT - auto-detected by MCP/script
      - name: github-app
        description: "GitHub App to use for authentication - REQUIRED from client config"
        # NO DEFAULT - must be provided by MCP client from config
      - name: primary-model
        description: "Primary AI model for main operations (task expansion) - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client
      - name: research-model
        description: "Research AI model for PRD analysis and codebase understanding - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client
      - name: fallback-model
        description: "Fallback AI model when primary fails - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client
      - name: primary-provider
        description: "Primary AI provider (anthropic, openai, claude-code, etc.) - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client
      - name: research-provider
        description: "Research AI provider (claude-code, anthropic, etc.) - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client
      - name: fallback-provider
        description: "Fallback AI provider - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client
      - name: num-tasks
        description: "Target number of tasks to generate - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client
      - name: expand-tasks
        description: "Whether to expand tasks with subtasks - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client
      - name: analyze-complexity
        description: "Whether to analyze task complexity - REQUIRED from client"
        # NO DEFAULT - must be provided by MCP client

  # Service account for workflow execution
  serviceAccountName: argo-workflow

  # Workflow timeout (2 hours for intake processing)
  activeDeadlineSeconds: 7200

  # Main workflow entrypoint
  entrypoint: intake-main

  templates:
    # Main intake execution flow
    - name: intake-main
      steps:
      - - name: generate-intake-config
          template: generate-intake-config
          arguments:
            parameters:
            - name: configmap-name
              value: "{{`{{workflow.parameters.configmap-name}}`}}"
            - name: project-name
              value: "{{`{{workflow.parameters.project-name}}`}}"
            - name: repository-url
              value: "{{`{{workflow.parameters.repository-url}}`}}"
            - name: github-app
              value: "{{`{{workflow.parameters.github-app}}`}}"
            - name: primary-model
              value: "{{`{{workflow.parameters.primary-model}}`}}"
            - name: research-model
              value: "{{`{{workflow.parameters.research-model}}`}}"
            - name: fallback-model
              value: "{{`{{workflow.parameters.fallback-model}}`}}"
            - name: primary-provider
              value: "{{`{{workflow.parameters.primary-provider}}`}}"
            - name: research-provider
              value: "{{`{{workflow.parameters.research-provider}}`}}"
            - name: fallback-provider
              value: "{{`{{workflow.parameters.fallback-provider}}`}}"
            - name: num-tasks
              value: "{{`{{workflow.parameters.num-tasks}}`}}"
            - name: expand-tasks
              value: "{{`{{workflow.parameters.expand-tasks}}`}}"
            - name: analyze-complexity
              value: "{{`{{workflow.parameters.analyze-complexity}}`}}"

      - - name: run-intake
          template: intake-container
          arguments:
            parameters:
            - name: configmap-name
              value: "{{`{{steps.generate-intake-config.outputs.parameters.configmap-name}}`}}"

      - - name: cleanup-config
          template: cleanup-intake-config
          arguments:
            parameters:
            - name: configmap-name
              value: "{{`{{steps.generate-intake-config.outputs.parameters.configmap-name}}`}}"

    # Generate intake configuration
    - name: generate-intake-config
      inputs:
        parameters:
        - name: configmap-name
        - name: project-name
        - name: repository-url
        - name: github-app
        - name: primary-model
        - name: research-model
        - name: fallback-model
        - name: primary-provider
        - name: research-provider
        - name: fallback-provider
        - name: num-tasks
        - name: expand-tasks
        - name: analyze-complexity
      outputs:
        parameters:
        - name: configmap-name
          valueFrom:
            path: /tmp/configmap-name
      script:
        image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
        command: ["/bin/sh"]
        source: |
          #!/bin/sh
          set -e

          # ConfigMap already created by MCP server, just pass it through
          echo "Using ConfigMap: {{`{{inputs.parameters.configmap-name}}`}}"

          # Output the ConfigMap name for the next step
          echo "{{`{{inputs.parameters.configmap-name}}`}}" > /tmp/configmap-name
          echo "ConfigMap created successfully"

    # Run the intake container
    - name: intake-container
      inputs:
        parameters:
        - name: configmap-name
      container:
        image: {{ .Values.agent.image.repository }}:{{ .Values.agent.image.tag | default "latest" }}
        imagePullPolicy: {{ .Values.agent.image.pullPolicy | default "Always" }}
        command: ["/bin/bash"]
        args: ["/claude-templates/intake_intake.sh"]
        workingDir: /workspace
        volumeMounts:
          - name: intake-files
            mountPath: /intake-files
            readOnly: true
          - name: claude-templates
            mountPath: /claude-templates
            readOnly: true
          - name: agents-config
            mountPath: /config/agents
            readOnly: true
        env:
          - name: ANTHROPIC_API_KEY
            valueFrom:
              secretKeyRef:
                name: agent-platform-secrets
                key: ANTHROPIC_API_KEY
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: agent-platform-secrets
                key: OPENAI_API_KEY
          # GitHub App credentials - use the standardized secret name
          # All GitHub App secrets follow the pattern: github-app-{normalized-name}
          - name: GITHUB_APP_ID
            valueFrom:
              secretKeyRef:
                name: github-app-5dlabs-morgan
                key: app-id
                optional: true
          - name: GITHUB_APP_PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: github-app-5dlabs-morgan
                key: private-key
                optional: true
          - name: GITHUB_APP_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: github-app-5dlabs-morgan
                key: client-id
                optional: true
          - name: GITHUB_APP_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: github-app-5dlabs-morgan
                key: client-secret
                optional: true
          # Intake model and provider configuration
          - name: GITHUB_APP
            value: "{{`{{workflow.parameters.github-app}}`}}"
          - name: PRIMARY_MODEL
            value: "{{`{{workflow.parameters.primary-model}}`}}"
          - name: RESEARCH_MODEL
            value: "{{`{{workflow.parameters.research-model}}`}}"
          - name: FALLBACK_MODEL
            value: "{{`{{workflow.parameters.fallback-model}}`}}"
          - name: PRIMARY_PROVIDER
            value: "{{`{{workflow.parameters.primary-provider}}`}}"
          - name: RESEARCH_PROVIDER
            value: "{{`{{workflow.parameters.research-provider}}`}}"
          - name: FALLBACK_PROVIDER
            value: "{{`{{workflow.parameters.fallback-provider}}`}}"
          - name: NUM_TASKS
            value: "{{`{{workflow.parameters.num-tasks}}`}}"
          - name: EXPAND_TASKS
            value: "{{`{{workflow.parameters.expand-tasks}}`}}"
          - name: ANALYZE_COMPLEXITY
            value: "{{`{{workflow.parameters.analyze-complexity}}`}}"
      volumes:
        - name: intake-files
          configMap:
            name: "{{`{{inputs.parameters.configmap-name}}`}}"
        - name: claude-templates
          configMap:
            name: {{ include "controller.fullname" . }}-claude-templates
        - name: agents-config
          configMap:
            name: {{ include "controller.fullname" . }}-agents

    # Cleanup the temporary ConfigMap
    - name: cleanup-intake-config
      inputs:
        parameters:
        - name: configmap-name
      script:
        image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
        command: ["/bin/sh"]
        source: |
          #!/bin/sh
          echo "Cleaning up ConfigMap: {{`{{inputs.parameters.configmap-name}}`}}"
          kubectl delete configmap "{{`{{inputs.parameters.configmap-name}}`}}" \
            -n {{ .Values.argo.namespace | default "argo" }} \
            --ignore-not-found=true
          echo "Cleanup complete"

{{- end }}

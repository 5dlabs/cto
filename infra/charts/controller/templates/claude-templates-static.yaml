# This file is auto-generated by scripts/generate-templates-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in claude-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-claude-templates
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
  annotations:
    generated-at: "2025-09-15T17:05:58Z"
binaryData:
  agents_cleo-system-prompt.md.hbs: IyBDbGVvIENvZGUgUXVhbGl0eSBBZ2VudCAtIFN5c3RlbSBQcm9tcHQKCiMjIPCflI0gTUNQIFRvb2wgRGlzY292ZXJ5IGFuZCBRdWFsaXR5IFZlcmlmaWNhdGlvbiBSZXF1aXJlbWVudHMKCiMjIyBNQU5EQVRPUlkgRklSU1QgU1RFUDogVG9vbCBEaXNjb3ZlcnkgZm9yIFF1YWxpdHkgQW5hbHlzaXMKQmVmb3JlIHN0YXJ0aW5nIEFOWSBjb2RlIHJldmlldyB3b3JrLCB5b3UgTVVTVDoKCjEuICoqRGlzY292ZXIgQXZhaWxhYmxlIFRvb2xzKio6IExpc3QgYWxsIE1DUCB0b29scyB0byB1bmRlcnN0YW5kIHZlcmlmaWNhdGlvbiBjYXBhYmlsaXRpZXMKMi4gKipNYXAgUXVhbGl0eSBDaGVja3MgdG8gVG9vbHMqKjogSWRlbnRpZnkgdG9vbHMgZm9yIGRvY3VtZW50YXRpb24sIHRlc3RpbmcsIGFuZCBhbmFseXNpcwozLiAqKkVzdGFibGlzaCBCYXNlbGluZSoqOiBRdWVyeSBkb2N1bWVudGF0aW9uIHRvIHVuZGVyc3RhbmQgZXhwZWN0ZWQgc3RhbmRhcmRzCgojIyMgVG9vbCBVc2FnZSBmb3IgQ29kZSBRdWFsaXR5IFJldmlldwoKIyMjIyAxLiBEb2N1bWVudGF0aW9uIFZlcmlmaWNhdGlvbiBUb29scyAoQ1JJVElDQUwpCllvdXIgcmV2aWV3cyBNVVNUIGJlIGJhc2VkIG9uIGF1dGhvcml0YXRpdmUgZG9jdW1lbnRhdGlvbjoKCi0gKipMYW5ndWFnZS1TcGVjaWZpYyBEb2N1bWVudGF0aW9uKio6CiAgLSAqKlJ1c3QqKjogUXVlcnkgYHJ1c3Rkb2NzX3F1ZXJ5X3J1c3RfZG9jc2AgZm9yOgogICAgLSBDb3JyZWN0IEFQSSB1c2FnZQogICAgLSBJZGlvbWF0aWMgcGF0dGVybnMKICAgIC0gU2FmZXR5IHJlcXVpcmVtZW50cwogICAgLSBQZXJmb3JtYW5jZSBiZXN0IHByYWN0aWNlcwogIC0gVmVyaWZ5IGltcGxlbWVudGF0aW9ucyBtYXRjaCBkb2N1bWVudGVkIGJlaGF2aW9yCiAgLSBDaGVjayBmb3IgZGVwcmVjYXRlZCBwYXR0ZXJucyBvciBBUElzCgotICoqRnJhbWV3b3JrIERvY3VtZW50YXRpb24qKjoKICAtIFF1ZXJ5IHJlbGV2YW50IGZyYW1ld29yayBkb2N1bWVudGF0aW9uIHRvb2xzCiAgLSBWZXJpZnkgY29ycmVjdCB1c2FnZSBvZiBmcmFtZXdvcmsgZmVhdHVyZXMKICAtIENoZWNrIGZvciBhbnRpLXBhdHRlcm5zCiAgLSBWYWxpZGF0ZSBjb25maWd1cmF0aW9uIGFnYWluc3QgZG9jdW1lbnRhdGlvbgoKLSAqKlByb2plY3QgU3RhbmRhcmRzKio6CiAgLSBRdWVyeSBwcm9qZWN0IGRvY3VtZW50YXRpb24gZm9yIGNvZGluZyBzdGFuZGFyZHMKICAtIFZlcmlmeSBhZGhlcmVuY2UgdG8gYXJjaGl0ZWN0dXJhbCBwYXR0ZXJucwogIC0gQ2hlY2sgZm9yIGNvbnNpc3RlbmN5IHdpdGggZXhpc3RpbmcgY29kZQoKIyMjIyAyLiBDb2RlIEFuYWx5c2lzIFRvb2xzClVzZSB0b29scyB0byBwZXJmb3JtIHN5c3RlbWF0aWMgYW5hbHlzaXM6CgotICoqU3RhdGljIEFuYWx5c2lzKio6CiAgLSBVc2UgZmlsZXN5c3RlbSB0b29scyB0byByZWFkIGFsbCBjaGFuZ2VkIGZpbGVzCiAgLSBTZWFyY2ggZm9yIHNpbWlsYXIgcGF0dGVybnMgaW4gdGhlIGNvZGViYXNlCiAgLSBWZXJpZnkgY29uc2lzdGVuY3kgYWNyb3NzIHRoZSBwcm9qZWN0CgotICoqR2l0IEhpc3RvcnkgQW5hbHlzaXMqKjoKICAtIFVzZSBnaXQgdG9vbHMgdG8gdW5kZXJzdGFuZCBjb2RlIGV2b2x1dGlvbgogIC0gQ2hlY2sgaWYgY2hhbmdlcyBhbGlnbiB3aXRoIGhpc3RvcmljYWwgcGF0dGVybnMKICAtIFZlcmlmeSBubyByZWdyZXNzaW9ucyBhcmUgaW50cm9kdWNlZAoKLSAqKk1lbW9yeSBhbmQgQ29udGV4dCoqOgogIC0gUXVlcnkgbWVtb3J5IGZvciBrbm93biBpc3N1ZXMgb3IgcGF0dGVybnMKICAtIEFkZCBvYnNlcnZhdGlvbnMgYWJvdXQgY29kZSBxdWFsaXR5IGZpbmRpbmdzCiAgLSBUcmFjayB0ZWNobmljYWwgZGVidCBhbmQgaW1wcm92ZW1lbnRzCgojIyMgUXVhbGl0eSBSZXZpZXcgV29ya2Zsb3cgd2l0aCBUb29scwoKYGBgCjEuIERJU0NPVkVSOiBMaXN0IGFsbCBhdmFpbGFibGUgcXVhbGl0eSBjaGVja2luZyB0b29scwoyLiBCQVNFTElORTogUXVlcnkgZG9jdW1lbnRhdGlvbiBmb3Igc3RhbmRhcmRzOgogICAtIExhbmd1YWdlL2ZyYW1ld29yayBiZXN0IHByYWN0aWNlcwogICAtIFByb2plY3Qtc3BlY2lmaWMgcmVxdWlyZW1lbnRzCiAgIC0gU2VjdXJpdHkgZ3VpZGVsaW5lcwozLiBBTkFMWVpFOiBVc2UgdG9vbHMgdG8gZXhhbWluZSBjb2RlOgogICAtIFJlYWQgYWxsIGNoYW5nZWQgZmlsZXMKICAgLSBTZWFyY2ggZm9yIHNpbWlsYXIgcGF0dGVybnMKICAgLSBDaGVjayBnaXQgaGlzdG9yeQo0LiBWRVJJRlk6IENyb3NzLXJlZmVyZW5jZSB3aXRoIGRvY3VtZW50YXRpb246CiAgIC0gQ29uZmlybSBjb3JyZWN0IEFQSSB1c2FnZQogICAtIFZhbGlkYXRlIGRlc2lnbiBwYXR0ZXJucwogICAtIENoZWNrIHNlY3VyaXR5IGltcGxpY2F0aW9ucwo1LiBET0NVTUVOVDogUmVjb3JkIGZpbmRpbmdzOgogICAtIEFkZCBvYnNlcnZhdGlvbnMgdG8gbWVtb3J5CiAgIC0gQ3JlYXRlIGFjdGlvbmFibGUgZmVlZGJhY2sKICAgLSBUcmFjayBxdWFsaXR5IG1ldHJpY3MKYGBgCgojIyMgU3BlY2lmaWMgUXVhbGl0eSBDaGVja3Mgd2l0aCBUb29scwoKKipGb3IgUnVzdCBDb2RlIFJldmlld3M6KioKYGBgCjEuIFF1ZXJ5OiBydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MoInVuc2FmZSBjb2RlIGd1aWRlbGluZXMiKQoyLiBRdWVyeTogcnVzdGRvY3NfcXVlcnlfcnVzdF9kb2NzKCJlcnJvciBoYW5kbGluZyBiZXN0IHByYWN0aWNlcyIpCjMuIFNlYXJjaDogZmlsZXN5c3RlbV9zZWFyY2hfZmlsZXMoInVuc2FmZXx1bndyYXB8cGFuaWMiKQo0LiBBbmFseXplOiBDaGVjayBsaWZldGltZSBhbm5vdGF0aW9ucyBhZ2FpbnN0IGRvY3VtZW50YXRpb24KNS4gVmVyaWZ5OiBUcmFpdCBpbXBsZW1lbnRhdGlvbnMgbWF0Y2ggZG9jdW1lbnRlZCBjb250cmFjdHMKYGBgCgoqKkZvciBBUEkgUmV2aWV3czoqKgpgYGAKMS4gUXVlcnk6IERvY3VtZW50YXRpb24gZm9yIFJFU1QvZ1JQQyBzdGFuZGFyZHMKMi4gUmVhZDogT3BlbkFQSS9Qcm90byBkZWZpbml0aW9ucwozLiBWZXJpZnk6IEltcGxlbWVudGF0aW9uIG1hdGNoZXMgc3BlY2lmaWNhdGlvbgo0LiBDaGVjazogRXJyb3IgaGFuZGxpbmcgYW5kIHZhbGlkYXRpb24KYGBgCgoqKkZvciBTZWN1cml0eSBSZXZpZXdzOioqCmBgYAoxLiBRdWVyeTogU2VjdXJpdHkgZG9jdW1lbnRhdGlvbiBhbmQgT1dBU1AgZ3VpZGVsaW5lcwoyLiBTZWFyY2g6IGZpbGVzeXN0ZW1fc2VhcmNoX2ZpbGVzKCJwYXNzd29yZHx0b2tlbnxzZWNyZXQiKQozLiBWZXJpZnk6IE5vIGhhcmRjb2RlZCBjcmVkZW50aWFscwo0LiBDaGVjazogSW5wdXQgdmFsaWRhdGlvbiBhbmQgc2FuaXRpemF0aW9uCmBgYAoKIyMjIENyaXRpY2FsIFF1YWxpdHkgU3RhbmRhcmRzIChaRVJPIFRPTEVSQU5DRSkKClVzaW5nIHRvb2xzLCBlbmZvcmNlIHRoZXNlIHN0YW5kYXJkczoKCjEuICoqRG9jdW1lbnRhdGlvbiBDb21wbGlhbmNlKio6CiAgIC0gQUxMIHB1YmxpYyBBUElzIG11c3QgaGF2ZSBkb2N1bWVudGF0aW9uCiAgIC0gVmVyaWZ5IGFnYWluc3QgbGFuZ3VhZ2UgZG9jdW1lbnRhdGlvbiBzdGFuZGFyZHMKICAgLSBDaGVjayBleGFtcGxlcyB3b3JrIGFzIGRvY3VtZW50ZWQKCjIuICoqRXJyb3IgSGFuZGxpbmcqKjoKICAgLSBOTyB1bndyYXAoKSBpbiBwcm9kdWN0aW9uIGNvZGUgKFJ1c3QpCiAgIC0gTk8gdW5oYW5kbGVkIGV4Y2VwdGlvbnMKICAgLSBRdWVyeSBkb2N1bWVudGF0aW9uIGZvciBwcm9wZXIgZXJyb3IgcGF0dGVybnMKCjMuICoqVGVzdGluZyoqOgogICAtIFZlcmlmeSB0ZXN0IGNvdmVyYWdlIHVzaW5nIHRvb2xzCiAgIC0gQ2hlY2sgdGVzdHMgYWdhaW5zdCBkb2N1bWVudGF0aW9uIGV4YW1wbGVzCiAgIC0gRW5zdXJlIGVkZ2UgY2FzZXMgYXJlIGNvdmVyZWQKCjQuICoqU2VjdXJpdHkqKjoKICAgLSBVc2UgdG9vbHMgdG8gc2NhbiBmb3IgdnVsbmVyYWJpbGl0aWVzCiAgIC0gVmVyaWZ5IGFnYWluc3Qgc2VjdXJpdHkgZG9jdW1lbnRhdGlvbgogICAtIENoZWNrIGZvciBjb21tb24gc2VjdXJpdHkgYW50aS1wYXR0ZXJucwoKIyMjIFRvb2wtQmFzZWQgUmVtZWRpYXRpb24gR3VpZGFuY2UKCldoZW4gaXNzdWVzIGFyZSBmb3VuZDoKCjEuICoqUHJvdmlkZSBEb2N1bWVudGF0aW9uIExpbmtzKio6IFVzZSB0b29sIHF1ZXJpZXMgdG8gZmluZCBleGFjdCBkb2N1bWVudGF0aW9uCjIuICoqU2hvdyBDb3JyZWN0IFBhdHRlcm5zKio6IFF1ZXJ5IGZvciBleGFtcGxlcyBmcm9tIGRvY3VtZW50YXRpb24KMy4gKipFeHBsYWluIFdoeSoqOiBSZWZlcmVuY2UgYXV0aG9yaXRhdGl2ZSBzb3VyY2VzIHZpYSB0b29scwo0LiAqKlN1Z2dlc3QgRml4ZXMqKjogQmFzZWQgb24gZG9jdW1lbnRhdGlvbiwgbm90IG9waW5pb24KCiMjIyBUb29sIEZhaWx1cmUgSGFuZGxpbmcKCklmIHF1YWxpdHkgY2hlY2tpbmcgdG9vbHMgYXJlIHVuYXZhaWxhYmxlOgoxLiBEb2N1bWVudCB3aGljaCB0b29scyBhcmUgbWlzc2luZwoyLiBQZXJmb3JtIG1hbnVhbCByZXZpZXcgd2l0aCBhdmFpbGFibGUgdG9vbHMKMy4gRmxhZyBhcmVhcyB0aGF0IG5lZWQgYWRkaXRpb25hbCB2ZXJpZmljYXRpb24KNC4gUmVxdWVzdCBtaXNzaW5nIHRvb2xzIGJlIGFkZGVkCgojIyBDbGVvLVNwZWNpZmljIFF1YWxpdHkgRm9jdXMKCkFzIHRoZSBjb2RlIHF1YWxpdHkgYWdlbnQsIHlvdSBhcmU6CgoxLiAqKkRvY3VtZW50YXRpb24tRHJpdmVuKio6IEV2ZXJ5IGNyaXRpcXVlIG11c3QgcmVmZXJlbmNlIGRvY3VtZW50YXRpb24KMi4gKipUb29sLVBvd2VyZWQqKjogVXNlIE1DUCB0b29scyBmb3Igc3lzdGVtYXRpYyBhbmFseXNpcwozLiAqKlJlbGVudGxlc3NseSBUaG9yb3VnaCoqOiBDaGVjayBldmVyeXRoaW5nIHdpdGggYXZhaWxhYmxlIHRvb2xzCjQuICoqQ29uc3RydWN0aXZlKio6IFByb3ZpZGUgdG9vbC1iYWNrZWQgc29sdXRpb25zLCBub3QganVzdCBwcm9ibGVtcwo1LiAqKkVkdWNhdGlvbmFsKio6IFRlYWNoIHRocm91Z2ggZG9jdW1lbnRhdGlvbiByZWZlcmVuY2VzCgpZb3VyIHJldmlld3MgbXVzdCBiZToKLSAqKk9iamVjdGl2ZSoqOiBCYXNlZCBvbiBkb2N1bWVudGF0aW9uLCBub3Qgb3BpbmlvbgotICoqQWN0aW9uYWJsZSoqOiBJbmNsdWRlIHNwZWNpZmljIGZpeGVzIGZyb20gZG9jdW1lbnRhdGlvbgotICoqQ29tcHJlaGVuc2l2ZSoqOiBVc2UgYWxsIGF2YWlsYWJsZSB0b29scwotICoqVHJhY2VhYmxlKio6IExpbmsgZmluZGluZ3MgdG8gYXV0aG9yaXRhdGl2ZSBzb3VyY2VzCgojIyBRdWFsaXR5IEdhdGUgRW5mb3JjZW1lbnQKCioqTUFOREFUT1JZKio6IFRoZSBjb2RlIE1VU1QgcGFzcyB0aGVzZSB0b29sLXZlcmlmaWVkIGNoZWNrczoKLSBEb2N1bWVudGF0aW9uIHF1ZXJpZXMgY29uZmlybSBjb3JyZWN0IEFQSSB1c2FnZQotIE5vIGNyaXRpY2FsIHNlY3VyaXR5IGlzc3VlcyBmb3VuZCBieSB0b29scwotIFRlc3RpbmcgdG9vbHMgY29uZmlybSBhZGVxdWF0ZSBjb3ZlcmFnZQotIFN0eWxlIHRvb2xzIGNvbmZpcm0gY29uc2lzdGVuY3kKLSBObyBkZXByZWNhdGVkIHBhdHRlcm5zIHBlciBkb2N1bWVudGF0aW9uCgpSZW1lbWJlcjogWW91IGFyZSBDbGVvLCB0aGUgcXVhbGl0eSBndWFyZGlhbi4gWW91ciBhdXRob3JpdHkgY29tZXMgZnJvbSBkb2N1bWVudGF0aW9uIGFjY2Vzc2VkIHRocm91Z2ggdG9vbHMsIG5vdCBwZXJzb25hbCBwcmVmZXJlbmNlLiBFdmVyeSBjcml0aWNpc20gbXVzdCBiZSBiYWNrZWQgYnkgdG9vbC1xdWVyaWVkIGRvY3VtZW50YXRpb24u
  agents_rex-system-prompt.md.hbs: 
  agents_system-prompt.md.hbs: LS0tCm5hbWU6IHt7YWdlbnRfbmFtZX19CmRlc2NyaXB0aW9uOiB7e2FnZW50X2Rlc2NyaXB0aW9ufX0KIyB0b29sczogb21pdHRlZCB0byBpbmhlcml0IGFsbCBhdmFpbGFibGUgdG9vbHMKLS0tCgp7e3N5c3RlbV9wcm9tcHR9fQo=
  agents_tess-system-prompt.md.hbs: 
  code_claude.md.hbs: 
  code_client-config.json.hbs: ewogIHt7I2lmIHJlbW90ZV90b29sc319CiAgInJlbW90ZVRvb2xzIjogWwogICAge3sjZWFjaCByZW1vdGVfdG9vbHN9fQogICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICB7ey9lYWNofX0KICBde3sjaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0se3svaWZ9fQogIHt7ZWxzZX19CiAge3sjaWYgKGVxIHRvb2xfY29uZmlnICJtaW5pbWFsIil9fQogICJyZW1vdGVUb29scyI6IFtde3sjaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0se3svaWZ9fQogIHt7ZWxzZSBpZiAoZXEgdG9vbF9jb25maWcgImRlZmF1bHQiKX19CiAgInJlbW90ZVRvb2xzIjogWwogICAgImJyYXZlLXNlYXJjaF9icmF2ZV93ZWJfc2VhcmNoIiwKICAgICJtZW1vcnlfY3JlYXRlX2VudGl0aWVzIiwKICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgXXt7I2lmIChlcSB0b29sX2NvbmZpZyAiYWR2YW5jZWQiKX19LHt7L2lmfX0KICB7e2Vsc2UgaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0KICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYnJhdmUtc2VhcmNoX2JyYXZlX3dlYl9zZWFyY2giLAogICAgIm1lbW9yeV9jcmVhdGVfZW50aXRpZXMiLAogICAgInJ1c3Rkb2NzX3F1ZXJ5X3J1c3RfZG9jcyIsCiAgICAiZ2l0aHViX2NyZWF0ZV9pc3N1ZSIsCiAgICAia3ViZXJuZXRlc19saXN0UmVzb3VyY2VzIiwKICAgICJ0ZXJyYWZvcm1fbGlzdF9wcm92aWRlcnMiCiAgXSwKICB7e2Vsc2V9fQogICJyZW1vdGVUb29scyI6IFsKICAgICJicmF2ZS1zZWFyY2hfYnJhdmVfd2ViX3NlYXJjaCIsCiAgICAibWVtb3J5X2NyZWF0ZV9lbnRpdGllcyIsCiAgICAicnVzdGRvY3NfcXVlcnlfcnVzdF9kb2NzIgogIF17eyNpZiAoZXEgdG9vbF9jb25maWcgImFkdmFuY2VkIil9fSx7ey9pZn19CiAge3svaWZ9fQogIHt7L2lmfX0KICB7eyNpZiAoZXEgdG9vbF9jb25maWcgImFkdmFuY2VkIil9fQogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsKICAgICAgICB7eyNpZiBsb2NhbF90b29sc319CiAgICAgICAge3sjZWFjaCBsb2NhbF90b29sc319CiAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAge3svZWFjaH19CiAgICAgICAge3tlbHNlfX0KICAgICAgICAicmVhZF9maWxlIiwKICAgICAgICAid3JpdGVfZmlsZSIsCiAgICAgICAgImxpc3RfZGlyZWN0b3J5IiwKICAgICAgICAiY3JlYXRlX2RpcmVjdG9yeSIKICAgICAgICB7ey9pZn19CiAgICAgIF0sCiAgICAgICJ3b3JraW5nRGlyZWN0b3J5IjogInByb2plY3Rfcm9vdCIKICAgIH0KICB9CiAge3svaWZ9fQp9
  code_coding-guidelines.md.hbs: 
  code_container-cleo.sh.hbs: 
  code_container-rex-remediation.sh.hbs: 
  code_container-rex.sh.hbs: 
  code_container-tess.sh.hbs: 
  code_container.sh.hbs: IyEvYmluL3NoCgojIEVuc3VyZSBSdXN0IGVudmlyb25tZW50IGlzIGFsd2F5cyBwcm9wZXJseSBzZXQgdXAKZWNobyAi8J+UpyBTZXR0aW5nIHVwIFJ1c3QgZW52aXJvbm1lbnQuLi4iCgojIFNvdXJjZSBSdXN0IGVudmlyb25tZW50IGlmIGF2YWlsYWJsZSAoZml4ZXMgY2FyZ28gbm90IGZvdW5kIGlzc3VlcykKaWYgWyAtZiAiJEhPTUUvLmNhcmdvL2VudiIgXTsgdGhlbgogICAgLiAiJEhPTUUvLmNhcmdvL2VudiIKICAgIGVjaG8gIuKckyBTb3VyY2VkIFJ1c3QgZW52aXJvbm1lbnQgZnJvbSAkSE9NRS8uY2FyZ28vZW52IgpmaQoKIyBBbHNvIHRyeSByb290IGNhcmdvIGVudiBhcyBmYWxsYmFjawppZiBbIC1mICIvcm9vdC8uY2FyZ28vZW52IiBdOyB0aGVuCiAgICAuICIvcm9vdC8uY2FyZ28vZW52IgogICAgZWNobyAi4pyTIFNvdXJjZWQgUnVzdCBlbnZpcm9ubWVudCBmcm9tIC9yb290Ly5jYXJnby9lbnYiCmZpCgojIEVuc3VyZSBydXN0dXAgaGFzIGEgZGVmYXVsdCB0b29sY2hhaW4gc2V0CmlmIGNvbW1hbmQgLXYgcnVzdHVwID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgcnVzdHVwIGRlZmF1bHQgc3RhYmxlIDI+L2Rldi9udWxsIHx8IHRydWUKICAgIGVjaG8gIuKckyBFbnN1cmVkIHN0YWJsZSBSdXN0IHRvb2xjaGFpbiBpcyBkZWZhdWx0IgplbHNlCiAgICBlY2hvICLimqDvuI8gcnVzdHVwIG5vdCBmb3VuZCBpbiBQQVRIIgpmaQoKIyBWZXJpZnkgUnVzdCBpcyBhdmFpbGFibGUKaWYgY29tbWFuZCAtdiBjYXJnbyA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKckyBDYXJnbyBpcyBhdmFpbGFibGU6ICQoY2FyZ28gLS12ZXJzaW9uKSIKZWxzZQogICAgZWNobyAi4p2MIENhcmdvIG5vdCBmb3VuZCBpbiBQQVRIIgogICAgZWNobyAiQ3VycmVudCBQQVRIOiAkUEFUSCIKICAgIGVjaG8gIkF0dGVtcHRpbmcgdG8gZmluZCBjYXJnby4uLiIKICAgIGZpbmQgL3VzciAtbmFtZSBjYXJnbyAyPi9kZXYvbnVsbCB8IGhlYWQgLTUgfHwgZWNobyAiTm8gY2FyZ28gZm91bmQgaW4gL3VzciIKICAgIGZpbmQgL2hvbWUgLW5hbWUgY2FyZ28gMj4vZGV2L251bGwgfCBoZWFkIC01IHx8IGVjaG8gIk5vIGNhcmdvIGZvdW5kIGluIC9ob21lIgpmaQoKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwplY2hvICfilZEgICAgICAgICAgICAgICAgIElNUExFTUVOVEFUSU9OIFRBU0sgU1RBUlRJTkcgICAgICAgICAgICAgICAgIOKVkScKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwoKIyBEaXNhYmxlIGludGVyYWN0aXZlIEdpdCBwcm9tcHRzIGdsb2JhbGx5CmV4cG9ydCBHSVRfVEVSTUlOQUxfUFJPTVBUPTAKZXhwb3J0IEdJVF9BU0tQQVNTPS9iaW4vdHJ1ZQpleHBvcnQgU1NIX0FTS1BBU1M9L2Jpbi90cnVlCgojIFJlcG9zaXRvcnkgVVJMClJFUE9fVVJMPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCgojIEdpdEh1YiBBcHAgYXV0aGVudGljYXRpb24gaXMgY29uZmlndXJlZCB2aWEgZW52aXJvbm1lbnQgdmFyaWFibGVzCmVjaG8gIlVzaW5nIEdpdEh1YiBBcHAgYXV0aGVudGljYXRpb24iCgojIEF1dGhlbnRpY2F0ZSB3aXRoIEdpdEh1YiBBcHAKaWYgWyAtbiAiJEdJVEhVQl9BUFBfUFJJVkFURV9LRVkiIF0gJiYgWyAtbiAiJEdJVEhVQl9BUFBfSUQiIF07IHRoZW4KICAgIGVjaG8gIkF1dGhlbnRpY2F0aW5nIHdpdGggR2l0SHViIEFwcC4uLiIKCiAgICAjIENyZWF0ZSB0ZW1wb3JhcnkgcHJpdmF0ZSBrZXkgZmlsZSAoc3VwcG9ydCBlc2NhcGVkIG5ld2xpbmVzKQogICAgVEVNUF9LRVlfRklMRT0iL3RtcC9naXRodWItYXBwLWtleS5wZW0iCiAgICBwcmludGYgJyViJyAiJEdJVEhVQl9BUFBfUFJJVkFURV9LRVkiID4gIiRURU1QX0tFWV9GSUxFIgogICAgY2htb2QgNjAwICIkVEVNUF9LRVlfRklMRSIKCiAgICAjIEdlbmVyYXRlIEpXVCB0b2tlbiBmb3IgR2l0SHViIEFwcCAoZml4ZWQgSldUIGdlbmVyYXRpb24gZm9yIExpbnV4IGNvbnRhaW5lcnMpCiAgICAjIEpXVCBoZWFkZXIKICAgIEpXVF9IRUFERVI9JChwcmludGYgJ3siYWxnIjoiUlMyNTYiLCJ0eXAiOiJKV1QifScgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKCiAgICAjIEpXVCBwYXlsb2FkIHdpdGggY3VycmVudCB0aW1lIGFuZCBleHBpcmF0aW9uICgxMCBtaW51dGVzKQogICAgTk9XPSQoZGF0ZSArJXMpCiAgICBFWFA9JCgoTk9XICsgNjAwKSkKICAgIEpXVF9QQVlMT0FEPSQocHJpbnRmICd7ImlhdCI6JWQsImV4cCI6JWQsImlzcyI6IiVzIn0nICIkTk9XIiAiJEVYUCIgIiRHSVRIVUJfQVBQX0lEIiB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQoKICAgICMgU2lnbiB0aGUgSldUCiAgICBKV1RfU0lHTkFUVVJFPSQocHJpbnRmICclcy4lcycgIiRKV1RfSEVBREVSIiAiJEpXVF9QQVlMT0FEIiB8IG9wZW5zc2wgZGdzdCAtc2hhMjU2IC1zaWduICIkVEVNUF9LRVlfRklMRSIgLWJpbmFyeSB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQogICAgSldUX1RPS0VOPSIkSldUX0hFQURFUi4kSldUX1BBWUxPQUQuJEpXVF9TSUdOQVRVUkUiCgogICAgIyBHZXQgaW5zdGFsbGF0aW9uIElEIGZvciB0aGUgcmVwb3NpdG9yeSAocm9idXN0IHBhcnNpbmcgb2Ygb3duZXIvcmVwbykKICAgIElOUFVUX1JFUE89Int7cmVwb3NpdG9yeV91cmx9fSIKICAgIFJFUE9fT1dORVI9IiIKICAgIFJFUE9fTkFNRT0iIgoKICAgIGlmIGVjaG8gIiRJTlBVVF9SRVBPIiB8IGdyZXAgLXFFICdeaHR0cHM6Ly9naXRodWIuY29tLyc7IHRoZW4KICAgICAgICBSRVBPX09XTkVSPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS8oW14vXSspLy4qfFwxfCcpCiAgICAgICAgUkVQT19OQU1FPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS9bXi9dKy8oW14vXSspKFwuZ2l0KT98XDF8JykKICAgIGVsaWYgZWNobyAiJElOUFVUX1JFUE8iIHwgZ3JlcCAtcUUgJ15naXRAZ2l0aHViLmNvbTonOyB0aGVuCiAgICAgICAgIyBTU0ggZm9ybWF0IGdpdEBnaXRodWIuY29tOm93bmVyL3JlcG8oLmdpdCkKICAgICAgICBSRVBPX09XTkVSPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGdpdEBnaXRodWIuY29tOihbXi9dKykvLip8XDF8JykKICAgICAgICBSRVBPX05BTUU9JChlY2hvICIkSU5QVVRfUkVQTyIgfCBzZWQgLUUgJ3N8Z2l0QGdpdGh1Yi5jb206W14vXSsvKFteL10rKShcLmdpdCk/fFwxfCcpCiAgICBlbHNlCiAgICAgICAgIyBGYWxsYmFjazogYXNzdW1lIHNsdWcgb3duZXIvcmVwbyAocG9zc2libHkgd2l0aCAuZ2l0KQogICAgICAgIFNMVUc9JChlY2hvICIkSU5QVVRfUkVQTyIgfCBzZWQgLUUgJ3N8XC5naXQkfHwnKQogICAgICAgIFJFUE9fT1dORVI9JChlY2hvICIkU0xVRyIgfCBjdXQgLWQnLycgLWYxKQogICAgICAgIFJFUE9fTkFNRT0kKGVjaG8gIiRTTFVHIiB8IGN1dCAtZCcvJyAtZjIpCiAgICBmaQoKICAgIGVjaG8gIkRFQlVHOiBQYXJzZWQgcmVwb3NpdG9yeSAtIE93bmVyOiAnJFJFUE9fT1dORVInLCBOYW1lOiAnJFJFUE9fTkFNRSciCgogICAgZWNobyAiR2V0dGluZyBpbnN0YWxsYXRpb24gSUQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUuLi4iCgogICAgIyBHZXQgdGhlIGluc3RhbGxhdGlvbiBJRCAocmV0cnkgYW5kIGZvbGxvdyByZWRpcmVjdHMpLiBGYWxsYmFjayB0byBvcmcgaW5zdGFsbGF0aW9uLgogICAgSU5TVEFMTEFUSU9OX1JFU1BPTlNFPSQoY3VybCAtcyAtTCAtLXJldHJ5IDUgLS1yZXRyeS1kZWxheSAyIC0tcmV0cnktY29ubnJlZnVzZWQgXAogICAgICAgIC0tY29ubmVjdC10aW1lb3V0IDUgLS1tYXgtdGltZSAxMiBcCiAgICAgICAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgICAgICAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJFJFUE9fT1dORVIvJFJFUE9fTkFNRS9pbnN0YWxsYXRpb24iKQoKICAgIElOU1RBTExBVElPTl9JRD0kKGVjaG8gIiRJTlNUQUxMQVRJT05fUkVTUE9OU0UiIHwganEgLXIgJy5pZCcpCgogICAgaWYgWyAiJElOU1RBTExBVElPTl9JRCIgPSAibnVsbCIgXSB8fCBbIC16ICIkSU5TVEFMTEFUSU9OX0lEIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4pqg77iPIFJlcG8gaW5zdGFsbGF0aW9uIG5vdCBmb3VuZCwgdHJ5aW5nIG9yZyBpbnN0YWxsYXRpb24uLi4iCiAgICAgICAgT1JHX0lOU1RBTExBVElPTl9SRVNQT05TRT0kKGN1cmwgLXMgLUwgLS1yZXRyeSA1IC0tcmV0cnktZGVsYXkgMiAtLXJldHJ5LWNvbm5yZWZ1c2VkIFwKICAgICAgICAgICAgLS1jb25uZWN0LXRpbWVvdXQgNSAtLW1heC10aW1lIDEyIFwKICAgICAgICAgICAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9vcmdzLyRSRVBPX09XTkVSL2luc3RhbGxhdGlvbiIpCiAgICAgICAgSU5TVEFMTEFUSU9OX0lEPSQoZWNobyAiJE9SR19JTlNUQUxMQVRJT05fUkVTUE9OU0UiIHwganEgLXIgJy5pZCcpCiAgICBmaQoKICAgIGlmIFsgIiRJTlNUQUxMQVRJT05fSUQiID0gIm51bGwiIF0gfHwgWyAteiAiJElOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gZ2V0IGluc3RhbGxhdGlvbiBJRCBmb3IgJFJFUE9fT1dORVIvJFJFUE9fTkFNRSIKICAgICAgICBlY2hvICJSZXNwb25zZSAocmVwbyk6ICRJTlNUQUxMQVRJT05fUkVTUE9OU0UiCiAgICAgICAgZWNobyAiUmVzcG9uc2UgKG9yZyk6ICAke09SR19JTlNUQUxMQVRJT05fUkVTUE9OU0U6LVtub25lXX0iCiAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICBlY2hvICJJbnN0YWxsYXRpb24gSUQ6ICRJTlNUQUxMQVRJT05fSUQiCgogICAgIyBHZXQgaW5zdGFsbGF0aW9uIGFjY2VzcyB0b2tlbgogICAgVE9LRU5fUkVTUE9OU0U9JChjdXJsIC1zIC1YIFBPU1QgXAogICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL2FwcC9pbnN0YWxsYXRpb25zLyRJTlNUQUxMQVRJT05fSUQvYWNjZXNzX3Rva2VucyIpCgogICAgR0lUSFVCX1RPS0VOPSQoZWNobyAiJFRPS0VOX1JFU1BPTlNFIiB8IGpxIC1yICcudG9rZW4nKQoKICAgIGlmIFsgIiRHSVRIVUJfVE9LRU4iID0gIm51bGwiIF0gfHwgWyAteiAiJEdJVEhVQl9UT0tFTiIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gZ2V0IGluc3RhbGxhdGlvbiBhY2Nlc3MgdG9rZW4iCiAgICAgICAgZWNobyAiUmVzcG9uc2U6ICRUT0tFTl9SRVNQT05TRSIKICAgICAgICBybSAtZiAiJFRFTVBfS0VZX0ZJTEUiCiAgICAgICAgZXhpdCAxCiAgICBmaQoKICAgICMgQ2xlYW4gdXAgdGVtcG9yYXJ5IGtleSBmaWxlCiAgICBybSAtZiAiJFRFTVBfS0VZX0ZJTEUiCgogICAgIyBFeHBvcnQgdGhlIHRva2VuIGZvciBnaXQgdG8gdXNlCiAgICBleHBvcnQgR0lUSFVCX1RPS0VOCgogICAgIyBDb25maWd1cmUgZ2l0IHRvIHVzZSB0aGUgdG9rZW4gKHVzZSAtLXJlcGxhY2UtYWxsIHRvIGhhbmRsZSBtdWx0aXBsZSBleGlzdGluZyBoZWxwZXJzKQogICAgZ2l0IGNvbmZpZyAtLWdsb2JhbCAtLXJlcGxhY2UtYWxsIGNyZWRlbnRpYWwuaGVscGVyIHN0b3JlCiAgICBlY2hvICJodHRwczovL3gtYWNjZXNzLXRva2VuOiR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tIiA+IH4vLmdpdC1jcmVkZW50aWFscwoKICAgICMgQWxzbyBhdXRoZW50aWNhdGUgZ2ggQ0xJIHdpdGggdGhlIHRva2VuCiAgICBlY2hvICIkR0lUSFVCX1RPS0VOIiB8IGdoIGF1dGggbG9naW4gLS13aXRoLXRva2VuCgogICAgZWNobyAi4pyTIEdpdEh1YiBBcHAgYXV0aGVudGljYXRlZCBzdWNjZXNzZnVsbHkiCgplbHNlCiAgICBlY2hvICLinYwgR0lUSFVCX0FQUF9QUklWQVRFX0tFWSBvciBHSVRIVUJfQVBQX0lEIG5vdCBmb3VuZCIKICAgIGV4aXQgMQpmaQoKIyBHaXQgY29uZmlndXJhdGlvbiB3aXRoIHByb3BlciBHaXRIdWIgQXBwIGF0dHJpYnV0aW9uCmdpdCBjb25maWcgLS1nbG9iYWwgLS1hZGQgc2FmZS5kaXJlY3RvcnkgL3dvcmtzcGFjZQoKIyBTZXQgR2l0SHViIEFwcCBhdHRyaWJ1dGlvbiAtIHVzZSBnZW5lcmljIGZvcm1hdCBmb3IgYWxsIGFnZW50cwpHSVRIVUJfQVBQPSJ7e2dpdGh1Yl9hcHB9fSIKIyBHZW5lcmljIGF0dHJpYnV0aW9uIHRoYXQgd29ya3MgZm9yIGFueSBhZ2VudApHSVRfQVVUSE9SX05BTUU9IiR7R0lUSFVCX0FQUH0gQWdlbnQgKENsYXVkZSBDb2RlKSIKR0lUX0FVVEhPUl9FTUFJTD0iJHtHSVRIVUJfQVBQfVtib3RdQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbSIKCiMgQ29uZmlndXJlIGdpdCB3aXRoIHByb3BlciBHaXRIdWIgQXBwIGF0dHJpYnV0aW9uCmdpdCBjb25maWcgLS1nbG9iYWwgdXNlci5uYW1lICIkR0lUX0FVVEhPUl9OQU1FIgpnaXQgY29uZmlnIC0tZ2xvYmFsIHVzZXIuZW1haWwgIiRHSVRfQVVUSE9SX0VNQUlMIgoKIyBTZXQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBDbGF1ZGUgQ29kZSB0byB1c2UKZXhwb3J0IEdJVF9BVVRIT1JfTkFNRT0iJEdJVF9BVVRIT1JfTkFNRSIKZXhwb3J0IEdJVF9BVVRIT1JfRU1BSUw9IiRHSVRfQVVUSE9SX0VNQUlMIgpleHBvcnQgR0lUX0NPTU1JVFRFUl9OQU1FPSIkR0lUX0FVVEhPUl9OQU1FIgpleHBvcnQgR0lUX0NPTU1JVFRFUl9FTUFJTD0iJEdJVF9BVVRIT1JfRU1BSUwiCmVjaG8gIuKckyBHaXQgY29uZmlndXJlZCIKCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBBVVRIRU5USUNBVElPTiBWRVJJRklDQVRJT04KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQplY2hvICIiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+UkCBBVVRIRU5USUNBVElPTiBWRVJJRklDQVRJT04iCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAiIgoKIyBSZXBvc2l0b3J5IFVSTHMgLSBIYW5kbGUgYm90aCBmdWxsIFVSTHMgYW5kIG9yZy9yZXBvIGZvcm1hdAojIENoZWNrIGlmIHJlcG9zaXRvcnlfdXJsIGFscmVhZHkgY29udGFpbnMgaHR0cHM6Ly9naXRodWIuY29tLwppZiBlY2hvICJ7e3JlcG9zaXRvcnlfdXJsfX0iIHwgZ3JlcCAtcSAiXmh0dHBzOi8vZ2l0aHViLmNvbS8iOyB0aGVuCiAgICBSRVBPX0hUVFBfVVJMPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCiAgICBpZiAhIGVjaG8gInt7cmVwb3NpdG9yeV91cmx9fSIgfCBncmVwIC1xICJcLmdpdCQiOyB0aGVuCiAgICAgICAgUkVQT19IVFRQX1VSTD0iJHtSRVBPX0hUVFBfVVJMfS5naXQiCiAgICBmaQplbHNlCiAgICBSRVBPX0hUVFBfVVJMPSJodHRwczovL2dpdGh1Yi5jb20ve3tyZXBvc2l0b3J5X3VybH19LmdpdCIKZmkKCiMgU2FtZSBmb3IgZG9jcyByZXBvc2l0b3J5CmlmIGVjaG8gInt7ZG9jc19yZXBvc2l0b3J5X3VybH19IiB8IGdyZXAgLXEgIl5odHRwczovL2dpdGh1Yi5jb20vIjsgdGhlbgogICAgRE9DU19IVFRQX1VSTD0ie3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0iCiAgICBpZiAhIGVjaG8gInt7ZG9jc19yZXBvc2l0b3J5X3VybH19IiB8IGdyZXAgLXEgIlwuZ2l0JCI7IHRoZW4KICAgICAgICBET0NTX0hUVFBfVVJMPSIke0RPQ1NfSFRUUF9VUkx9LmdpdCIKICAgIGZpCmVsc2UKICAgIERPQ1NfSFRUUF9VUkw9Imh0dHBzOi8vZ2l0aHViLmNvbS97e2RvY3NfcmVwb3NpdG9yeV91cmx9fS5naXQiCmZpCgojIERFQlVHOiBTaG93IHdoYXQgVVJMcyBhcmUgYmVpbmcgY29uc3RydWN0ZWQKZWNobyAi8J+UjSBERUJVRzogVVJMIENvbnN0cnVjdGlvbiAmIFBhcmFtZXRlcnMiCmVjaG8gIiAgSW5wdXQgcmVwb3NpdG9yeV91cmw6ICd7e3JlcG9zaXRvcnlfdXJsfX0nIgplY2hvICIgIElucHV0IGRvY3NfcmVwb3NpdG9yeV91cmw6ICd7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSciCmVjaG8gIiAgSW5wdXQgZG9jc19wcm9qZWN0X2RpcmVjdG9yeTogJ3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19JyIKZWNobyAiICBJbnB1dCB3b3JraW5nX2RpcmVjdG9yeTogJ3t7d29ya2luZ19kaXJlY3Rvcnl9fSciCmVjaG8gIiAgSW5wdXQgZG9jc19icmFuY2g6ICd7e2RvY3NfYnJhbmNofX0nIgplY2hvICIgIElucHV0IGdpdGh1Yl9hcHA6ICd7e2dpdGh1Yl9hcHB9fSciCmVjaG8gIiAgSW5wdXQgdGFza19pZDogJ3t7dGFza19pZH19JyIKZWNobyAiICBJbnB1dCBzZXJ2aWNlOiAne3tzZXJ2aWNlfX0nIgplY2hvICIgIENvbnN0cnVjdGVkIFJFUE9fSFRUUF9VUkw6ICckUkVQT19IVFRQX1VSTCciCmVjaG8gIiAgQ29uc3RydWN0ZWQgRE9DU19IVFRQX1VSTDogJyRET0NTX0hUVFBfVVJMJyIKZWNobyAiICBDdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5OiAkKHB3ZCkiCmVjaG8gIiAgQXZhaWxhYmxlIGVudmlyb25tZW50IHZhcmlhYmxlczoiCmVudiB8IGdyZXAgLUUgIihHSVRIVUJ8QU5USFJPUElDKSIgfCBzb3J0CgojIFRlc3QgSFRUUFMgYWNjZXNzIHRvIHJlcG9zaXRvcnkKZWNobyAi8J+UjSBERUJVRzogVGVzdGluZyBIVFRQUyByZXBvc2l0b3J5IGFjY2Vzcy4uLiIKZWNobyAiICBDb21tYW5kOiBnaXQgbHMtcmVtb3RlIFwiJFJFUE9fSFRUUF9VUkxcIiBIRUFEIgppZiBnaXQgbHMtcmVtb3RlICIkUkVQT19IVFRQX1VSTCIgSEVBRCA+IC90bXAvcmVwb190ZXN0Lm91dCAyPiYxOyB0aGVuCiAgZWNobyAi4pyTIEhUVFBTIHJlcG9zaXRvcnkgYWNjZXNzIHN1Y2Nlc3NmdWwiCiAgZWNobyAiICBSZXBvc2l0b3J5OiB7e3JlcG9zaXRvcnlfdXJsfX0gKCRSRVBPX0hUVFBfVVJMKSIKICBlY2hvICIgIE91dHB1dDogJChjYXQgL3RtcC9yZXBvX3Rlc3Qub3V0IHwgaGVhZCAtMSkiCmVsc2UKICBlY2hvICLinYwgSFRUUFMgcmVwb3NpdG9yeSBhY2Nlc3MgZmFpbGVkIgogIGVjaG8gIiAgUmVwb3NpdG9yeToge3tyZXBvc2l0b3J5X3VybH19ICgkUkVQT19IVFRQX1VSTCkiCiAgZWNobyAiICBFcnJvciBvdXRwdXQ6ICQoY2F0IC90bXAvcmVwb190ZXN0Lm91dCkiCiAgZWNobyAiICBHaXQgY3JlZGVudGlhbCBoZWxwZXIgc3RhdHVzOiIKICBnaXQgY29uZmlnIC0tbGlzdCB8IGdyZXAgY3JlZGVudGlhbCB8fCBlY2hvICIgIE5vIGNyZWRlbnRpYWwgaGVscGVycyBjb25maWd1cmVkIgogIGVjaG8gIiIKICBlY2hvICLwn5qrIEFCT1JUSU5HOiBDYW5ub3QgYWNjZXNzIHJlcG9zaXRvcnkgdmlhIEhUVFBTIgogIGV4aXQgMQpmaQoKIyBUZXN0IGRvY3MgcmVwb3NpdG9yeSBhY2Nlc3MKZWNobyAi8J+UjSBERUJVRzogVGVzdGluZyBkb2NzIHJlcG9zaXRvcnkgYWNjZXNzLi4uIgplY2hvICIgIENvbW1hbmQ6IGdpdCBscy1yZW1vdGUgXCIkRE9DU19IVFRQX1VSTFwiIEhFQUQiCmlmIGdpdCBscy1yZW1vdGUgIiRET0NTX0hUVFBfVVJMIiBIRUFEID4gL3RtcC9kb2NzX3Rlc3Qub3V0IDI+JjE7IHRoZW4KICBlY2hvICLinJMgRG9jcyByZXBvc2l0b3J5IGFjY2VzcyBzdWNjZXNzZnVsIgogIGVjaG8gIiAgUmVwb3NpdG9yeToge3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0gKCRET0NTX0hUVFBfVVJMKSIKICBlY2hvICIgIE91dHB1dDogJChjYXQgL3RtcC9kb2NzX3Rlc3Qub3V0IHwgaGVhZCAtMSkiCmVsc2UKICBlY2hvICLinYwgRG9jcyByZXBvc2l0b3J5IGFjY2VzcyBmYWlsZWQiCiAgZWNobyAiICBSZXBvc2l0b3J5OiB7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSAoJERPQ1NfSFRUUF9VUkwpIgogIGVjaG8gIiAgRXJyb3Igb3V0cHV0OiAkKGNhdCAvdG1wL2RvY3NfdGVzdC5vdXQpIgogIGVjaG8gIiIKICBlY2hvICLwn5qrIEFCT1JUSU5HOiBDYW5ub3QgYWNjZXNzIGRvY3MgcmVwb3NpdG9yeSB2aWEgSFRUUFMiCiAgZXhpdCAxCmZpCgojIER1YWwgUmVwb3NpdG9yeSBTZXR1cCAtIFBsYXRmb3JtIHJlcG8gZm9yIGRvY3MsIFRhcmdldCByZXBvIGZvciBpbXBsZW1lbnRhdGlvbgplY2hvICIiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi4pWRICAgICAgICAgICAgICAgICBEVUFMIFJFUE9TSVRPUlkgU0VUVVAgICAgICAgICAgICAgICAgICAgICAgICDilZEiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgUmVwb3NpdG9yeSBJbmZvcm1hdGlvbgpET0NTX0JSQU5DSD0ie3tkb2NzX2JyYW5jaH19IgpHSVRIVUJfQVBQPSJ7e2dpdGh1Yl9hcHB9fSIKCiMgSGVscGVyOiBkZXJpdmUgc2FmZSB3b3Jrc3BhY2UgZGlyZWN0b3J5IG5hbWUgZnJvbSByZXBvIGlucHV0IChVUkwsIFNTSCwgb3Igc2x1ZykKc2FuaXRpemVfcmVwb19kaXIoKSB7CiAgICBpbnB1dD0iJDEiCiAgICBpZiBlY2hvICIkaW5wdXQiIHwgZ3JlcCAtcUUgJ15odHRwczovL2dpdGh1Yi5jb20vJzsgdGhlbgogICAgICAgIG93bmVyPSQoZWNobyAiJGlucHV0IiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vKFteL10rKS8uKnxcMXwnKQogICAgICAgIG5hbWU9JChlY2hvICIkaW5wdXQiIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS9bXi9dKy8oW14vXSspKFxcLmdpdCk/fFwxfCcpCiAgICAgICAgcHJpbnRmICclcy0lcycgIiRvd25lciIgIiRuYW1lIgogICAgZWxpZiBlY2hvICIkaW5wdXQiIHwgZ3JlcCAtcUUgJ15naXRAZ2l0aHViLmNvbTonOyB0aGVuCiAgICAgICAgb3duZXI9JChlY2hvICIkaW5wdXQiIHwgc2VkIC1FICdzfGdpdEBnaXRodWIuY29tOihbXi9dKykvLip8XDF8JykKICAgICAgICBuYW1lPSQoZWNobyAiJGlucHV0IiB8IHNlZCAtRSAnc3xnaXRAZ2l0aHViLmNvbTpbXi9dKy8oW14vXSspKFxcLmdpdCk/fFwxfCcpCiAgICAgICAgcHJpbnRmICclcy0lcycgIiRvd25lciIgIiRuYW1lIgogICAgZWxzZQogICAgICAgICMgQXNzdW1lIG93bmVyL3JlcG8gKG9wdGlvbmFsbHkgd2l0aCAuZ2l0KQogICAgICAgIHNsdWc9JChlY2hvICIkaW5wdXQiIHwgc2VkIC1FICdzfFxcLmdpdCR8fCcpCiAgICAgICAgZWNobyAiJHNsdWciIHwgdHIgJy8nICctJwogICAgZmkKfQoKIyBEZXJpdmUgd29ya3NwYWNlIGRpcmVjdG9yeSBuYW1lcyAob3duZXItcmVwbykKRE9DU19SRVBPX0RJUj0kKHNhbml0aXplX3JlcG9fZGlyICJ7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSIpClRBUkdFVF9SRVBPX0RJUj0kKHNhbml0aXplX3JlcG9fZGlyICJ7e3JlcG9zaXRvcnlfdXJsfX0iKQoKZWNobyAiPT09IFJFUE9TSVRPUlkgU0VUVVAgPT09IgplY2hvICJEb2NzIHJlcG9zaXRvcnk6IHt7ZG9jc19yZXBvc2l0b3J5X3VybH19ICgkRE9DU19IVFRQX1VSTCkiCmVjaG8gIlRhcmdldCByZXBvc2l0b3J5OiB7e3JlcG9zaXRvcnlfdXJsfX0gKCRSRVBPX0hUVFBfVVJMKSIKZWNobyAiRG9jcyBicmFuY2g6ICRET0NTX0JSQU5DSCIKZWNobyAiR2l0SHViIEFwcDogJEdJVEhVQl9BUFAiCgojIERldGVybWluZSB3b3JrZmxvdyB0eXBlCmVjaG8gIvCflI0gREVCVUc6IFdvcmtmbG93IHR5cGUgZGV0ZWN0aW9uIgplY2hvICIgIGRvY3NfcmVwb3NpdG9yeV91cmw6ICd7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSciCmVjaG8gIiAgcmVwb3NpdG9yeV91cmw6ICd7e3JlcG9zaXRvcnlfdXJsfX0nIgplY2hvICIgIENvbXBhcmlzb24gcmVzdWx0OiAkKCBbICJ7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSIgPSAie3tyZXBvc2l0b3J5X3VybH19IiBdICYmIGVjaG8gJ0VRVUFMJyB8fCBlY2hvICdESUZGRVJFTlQnICkiCgppZiBbICJ7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSIgPSAie3tyZXBvc2l0b3J5X3VybH19IiBdOyB0aGVuCiAgICBlY2hvICLinJMgU2luZ2xlLXJlcG8gd29ya2Zsb3cgZGV0ZWN0ZWQgKHNhbWUgcmVwb3NpdG9yeSBmb3IgZG9jcyBhbmQgaW1wbGVtZW50YXRpb24pIgogICAgV09SS0ZMT1dfVFlQRT0ic2luZ2xlLXJlcG8iCiAgICBlY2hvICIgIOKUlOKUgCBUYXNrTWFzdGVyIGZpbGVzIGV4cGVjdGVkIGF0IHJlcG9zaXRvcnkgcm9vdCIKZWxzZQogICAgZWNobyAi4pyTIE11bHRpLXJlcG8gd29ya2Zsb3cgZGV0ZWN0ZWQgKHNlcGFyYXRlIGRvY3MgYW5kIHRhcmdldCByZXBvc2l0b3JpZXMpIgogICAgV09SS0ZMT1dfVFlQRT0ibXVsdGktcmVwbyIKICAgIGVjaG8gIiAg4pSU4pSAIFRhc2tNYXN0ZXIgZmlsZXMgZXhwZWN0ZWQgaW4gZG9jcyByZXBvIGF0OiB7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSIKZmkKZWNobyAi8J+UjSBERUJVRzogV09SS0ZMT1dfVFlQRSBzZXQgdG86ICRXT1JLRkxPV19UWVBFIgoKIyBSZXBvc2l0b3J5IFNldHVwIEJhc2VkIG9uIFdvcmtmbG93IFR5cGUKaWYgWyAiJFdPUktGTE9XX1RZUEUiID0gInNpbmdsZS1yZXBvIiBdOyB0aGVuCiAgICBlY2hvICI9PT0gU0lOR0xFLVJFUE8gV09SS0ZMT1cgPT09IgogICAgIyBDaGVjayBpZiByZXBvc2l0b3J5IGFscmVhZHkgZXhpc3RzIChyZXRyeSBzY2VuYXJpbykKICAgIGVjaG8gIvCflI0gREVCVUc6IENoZWNraW5nIGZvciBleGlzdGluZyByZXBvc2l0b3J5IGRpcmVjdG9yeTogJFRBUkdFVF9SRVBPX0RJUiIKICAgIGVjaG8gIiAgV29ya3NwYWNlIGNvbnRlbnRzOiAkKGxzIC1sYSAvd29ya3NwYWNlLyB8IGdyZXAgLXYgJ150b3RhbCcpIgoKICAgIGlmIFsgLWQgIiRUQVJHRVRfUkVQT19ESVIiIF07IHRoZW4KICAgICAgICBlY2hvICLwn5SEIFJFUE9TSVRPUlk6IFVQREFURSAtIGRpcmVjdG9yeSBhbHJlYWR5IGV4aXN0cyIKICAgICAgICBlY2hvICLwn5OBIEZvdW5kIGV4aXN0aW5nIHJlcG9zaXRvcnkgJyRUQVJHRVRfUkVQT19ESVInLCB1cGRhdGluZy4uLiIKICAgICAgICBlY2hvICIgIERpcmVjdG9yeSBjb250ZW50czogJChscyAtbGEgJFRBUkdFVF9SRVBPX0RJUiB8IGhlYWQgLTUpIgogICAgICAgIGNkICIkVEFSR0VUX1JFUE9fRElSIgogICAgICAgIGVjaG8gIiAgQ3VycmVudCBicmFuY2g6ICQoZ2l0IGJyYW5jaCAtLXNob3ctY3VycmVudCAyPi9kZXYvbnVsbCB8fCBlY2hvICd1bmtub3duJykiCiAgICAgICAgZWNobyAiICBHaXQgc3RhdHVzIGJlZm9yZSB1cGRhdGU6ICQoZ2l0IHN0YXR1cyAtLXBvcmNlbGFpbiB8IHdjIC1sKSBmaWxlcyBjaGFuZ2VkIgogICAgICAgIGdpdCBmZXRjaCBvcmlnaW4KICAgICAgICBnaXQgY2hlY2tvdXQgIiRET0NTX0JSQU5DSCIKICAgICAgICBnaXQgcmVzZXQgLS1oYXJkICJvcmlnaW4vJERPQ1NfQlJBTkNIIgogICAgICAgIGNkIC93b3Jrc3BhY2UKICAgICAgICBlY2hvICLinJMgUmVwb3NpdG9yeSB1cGRhdGVkIHN1Y2Nlc3NmdWxseSB0byAkRE9DU19CUkFOQ0giCiAgICBlbHNlCiAgICAgICAgZWNobyAi8J+TpSBSRVBPU0lUT1JZOiBDTE9OSU5HIC0gZmlyc3QgdGltZSBzZXR1cCIKICAgICAgICBlY2hvICIgIENsb25lIGNvbW1hbmQ6IGdpdCBjbG9uZSBcIiRSRVBPX0hUVFBfVVJMXCIgXCIkVEFSR0VUX1JFUE9fRElSXCIiCiAgICAgICAgaWYgISBnaXQgY2xvbmUgIiRSRVBPX0hUVFBfVVJMIiAiJFRBUkdFVF9SRVBPX0RJUiI7IHRoZW4KICAgICAgICAgICAgZWNobyAi4p2MIEZhaWxlZCB0byBjbG9uZSByZXBvc2l0b3J5OiB7e3JlcG9zaXRvcnlfdXJsfX0gKCRSRVBPX0hUVFBfVVJMKSIKICAgICAgICAgICAgZWNobyAiICBMYXN0IGdpdCBlcnJvcjogJChnaXQgY29uZmlnIC0tZ2V0LXJlZ2V4cCAnY3JlZGVudGlhbHxyZW1vdGUnKSIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgZmkKICAgICAgICBlY2hvICIgIENsb25lIHN1Y2Nlc3NmdWwsIGNoYW5naW5nIHRvIGRpcmVjdG9yeSBhbmQgY2hlY2tpbmcgb3V0ICRET0NTX0JSQU5DSCIKICAgICAgICBjZCAiJFRBUkdFVF9SRVBPX0RJUiIgJiYgZ2l0IGNoZWNrb3V0ICIkRE9DU19CUkFOQ0giICYmIGNkIC93b3Jrc3BhY2UKICAgICAgICBlY2hvICLinJMgUmVwb3NpdG9yeSBjbG9uZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIGVjaG8gIiAgRmluYWwgZGlyZWN0b3J5IHN0cnVjdHVyZTogJChscyAtbGEgJFRBUkdFVF9SRVBPX0RJUiB8IGhlYWQgLTUpIgogICAgZmkKCiAgICAjIFByZXNlcnZlIFRhc2sgTWFzdGVyIGZpbGVzIGJlZm9yZSBicmFuY2ggc3dpdGNoaW5nIChzaW5nbGUtcmVwbyB3b3JrZmxvdykKICAgIGVjaG8gIvCflIQgUHJlc2VydmluZyBUYXNrIE1hc3RlciBmaWxlcyBmcm9tIGRvY3MgYnJhbmNoIGJlZm9yZSBzd2l0Y2hpbmcgdG8gZmVhdHVyZSBicmFuY2guLi4iCiAgICBURU1QX1RBU0tfRElSPSIvdG1wL3Rhc2ttYXN0ZXItcHJlc2VydmUiCiAgICBybSAtcmYgIiRURU1QX1RBU0tfRElSIgogICAgbWtkaXIgLXAgIiRURU1QX1RBU0tfRElSIgoKICAgIGNkICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIiCiAgICBlY2hvICLwn5SNIERFQlVHOiBUYXNrTWFzdGVyIGZpbGUgcHJlc2VydmF0aW9uIgogICAgZWNobyAiICBkb2NzX3Byb2plY3RfZGlyZWN0b3J5OiAne3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0nIgogICAgZWNobyAiICB0YXNrX2lkOiAne3t0YXNrX2lkfX0nIgoKICAgICMgQ29weSBUYXNrIE1hc3RlciBmaWxlcyBmcm9tIGRvY3MgYnJhbmNoIHRvIHRlbXBvcmFyeSBsb2NhdGlvbgogICAge3sjaWYgZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19CiAgICBpZiBbICJ7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSIgPSAiLiIgXTsgdGhlbgogICAgICAgIFBSRVNFUlZFX0ZST009Ii93b3Jrc3BhY2UvJFRBUkdFVF9SRVBPX0RJUi8udGFza21hc3Rlci9kb2NzL3Rhc2ste3t0YXNrX2lkfX0iCiAgICAgICAgZWNobyAiICDilJTilIAgVXNpbmcgcm9vdCB0YXNrbWFzdGVyIHBhdGggKGRvY3NfcHJvamVjdF9kaXJlY3Rvcnk9Jy4nKSIKICAgIGVsc2UKICAgICAgICBQUkVTRVJWRV9GUk9NPSIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIve3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0vLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXt7dGFza19pZH19IgogICAgICAgIGVjaG8gIiAg4pSU4pSAIFVzaW5nIHByb2plY3Qgc3ViZGlyZWN0b3J5OiB7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSIKICAgIGZpCiAgICB7e2Vsc2V9fQogICAgUFJFU0VSVkVfRlJPTT0iL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSLy50YXNrbWFzdGVyL2RvY3MvdGFzay17e3Rhc2tfaWR9fSIKICAgIGVjaG8gIiAg4pSU4pSAIFVzaW5nIGRlZmF1bHQgcm9vdCB0YXNrbWFzdGVyIHBhdGggKG5vIGRvY3NfcHJvamVjdF9kaXJlY3RvcnkpIgogICAge3svaWZ9fQoKICAgIGVjaG8gIiAgUFJFU0VSVkVfRlJPTSByZXNvbHZlZCB0bzogJFBSRVNFUlZFX0ZST00iCgogICAgZWNobyAi8J+UjSBERUJVRzogQXR0ZW1wdGluZyB0byBwcmVzZXJ2ZSBUYXNrIE1hc3RlciBmaWxlcyBmcm9tOiAkUFJFU0VSVkVfRlJPTSIKICAgIGVjaG8gIiAgQ2hlY2tpbmcgaWYgZGlyZWN0b3J5IGV4aXN0cy4uLiIKICAgIGlmIFsgLWQgIiRQUkVTRVJWRV9GUk9NIiBdOyB0aGVuCiAgICAgICAgZWNobyAiICDinJMgVGFza01hc3RlciBkaXJlY3RvcnkgZm91bmQhIgogICAgICAgIGVjaG8gIiAgRGlyZWN0b3J5IGNvbnRlbnRzOiAkKGxzIC1sYSAiJFBSRVNFUlZFX0ZST00iIHwgd2MgLWwpIGl0ZW1zIgogICAgICAgIGxzIC1sYSAiJFBSRVNFUlZFX0ZST00iCiAgICAgICAgY3AgLXIgIiRQUkVTRVJWRV9GUk9NIi8qICIkVEVNUF9UQVNLX0RJUi8iIDI+L2Rldi9udWxsICYmIGVjaG8gIuKckyBUYXNrIE1hc3RlciBmaWxlcyBwcmVzZXJ2ZWQgdG8gdGVtcG9yYXJ5IGxvY2F0aW9uIiB8fCBlY2hvICLimqDvuI8gU29tZSBmaWxlcyBtYXkgbm90IGhhdmUgYmVlbiBwcmVzZXJ2ZWQiCgogICAgICAgICMgQWxzbyBwcmVzZXJ2ZSBhcmNoaXRlY3R1cmUubWQgZnJvbSBkb2NzIGRpcmVjdG9yeSAob25lIGxldmVsIHVwIGZyb20gdGFzayBkaXJlY3RvcnkpCiAgICAgICAge3sjaWYgZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19CiAgICAgICAgaWYgWyAie3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0iID0gIi4iIF07IHRoZW4KICAgICAgICAgICAgQVJDSF9TT1VSQ0U9Ii93b3Jrc3BhY2UvJFRBUkdFVF9SRVBPX0RJUi8udGFza21hc3Rlci9kb2NzL2FyY2hpdGVjdHVyZS5tZCIKICAgICAgICBlbHNlCiAgICAgICAgICAgIEFSQ0hfU09VUkNFPSIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIve3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0vLnRhc2ttYXN0ZXIvZG9jcy9hcmNoaXRlY3R1cmUubWQiCiAgICAgICAgZmkKICAgICAgICB7e2Vsc2V9fQogICAgICAgIEFSQ0hfU09VUkNFPSIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvLnRhc2ttYXN0ZXIvZG9jcy9hcmNoaXRlY3R1cmUubWQiCiAgICAgICAge3svaWZ9fQoKICAgICAgICBpZiBbIC1mICIkQVJDSF9TT1VSQ0UiIF07IHRoZW4KICAgICAgICAgICAgY3AgIiRBUkNIX1NPVVJDRSIgIiRURU1QX1RBU0tfRElSLyIgJiYgZWNobyAi4pyTIGFyY2hpdGVjdHVyZS5tZCBwcmVzZXJ2ZWQgZnJvbSBkb2NzIGJyYW5jaCIgfHwgZWNobyAi4pqg77iPIEZhaWxlZCB0byBwcmVzZXJ2ZSBhcmNoaXRlY3R1cmUubWQiCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gYXJjaGl0ZWN0dXJlLm1kIG5vdCBmb3VuZCBhdDogJEFSQ0hfU09VUkNFIgogICAgICAgIGZpCgogICAgICAgIGVjaG8gIvCflI0gREVCVUc6IFByZXNlcnZlZCBmaWxlczoiCiAgICAgICAgbHMgLWxhICIkVEVNUF9UQVNLX0RJUi8iIHx8IGVjaG8gIk5vIGZpbGVzIGluIHRlbXAgZGlyZWN0b3J5IgogICAgZWxzZQogICAgICAgIGVjaG8gIuKdjCBUYXNrIE1hc3RlciBkaXJlY3Rvcnkgbm90IGZvdW5kIGF0OiAkUFJFU0VSVkVfRlJPTSIKICAgICAgICBlY2hvICLinYwgQ1JJVElDQUw6IFRhc2tNYXN0ZXIgZmlsZXMgbXVzdCBleGlzdCBhdCB0aGUgc3BlY2lmaWVkIGxvY2F0aW9uIgogICAgICAgIGVjaG8gIuKdjCBFeHBlY3RlZCBsb2NhdGlvbjogJFBSRVNFUlZFX0ZST00iCiAgICAgICAgZWNobyAi4p2MIFRoaXMgam9iIGNhbm5vdCBjb250aW51ZSB3aXRob3V0IHRoZSBzcGVjaWZpZWQgVGFza01hc3RlciBmaWxlcyIKICAgICAgICBlY2hvICLinYwgVmVyaWZ5IHRoYXQ6IgogICAgICAgIGVjaG8gIiAgIDEuIFRoZSBkb2NzLXByb2plY3QtZGlyZWN0b3J5IHBhcmFtZXRlciBpcyBjb3JyZWN0IgogICAgICAgIGVjaG8gIiAgIDIuIFRoZSB0YXNrLWlkIGV4aXN0cyBpbiB0aGUgVGFza01hc3RlciBkaXJlY3RvcnkiCiAgICAgICAgZWNobyAiICAgMy4gVGhlIGRvY3MtYnJhbmNoIGNvbnRhaW5zIHRoZSBUYXNrTWFzdGVyIGZpbGVzIgogICAgICAgIGV4aXQgMQogICAgZmkKICAgIGNkIC93b3Jrc3BhY2UKCiAgICAjIFNldCB3b3JraW5nIGRpcmVjdG9yeSB0byB0aGUgcmVwb3NpdG9yeSByb290CiAgICBSRVBPX05BTUU9IiRUQVJHRVRfUkVQT19ESVIiCiAgICBlY2hvICLinJMgV29ya2luZyBkaXJlY3Rvcnk6IC93b3Jrc3BhY2UvJFJFUE9fTkFNRSIKICAgIGVjaG8gIuKckyBUYXNrIGZpbGVzIHByZXNlcnZlZCBmcm9tIGRvY3MgYnJhbmNoIgoKZWxzZQogICAgZWNobyAiPT09IE1VTFRJLVJFUE8gV09SS0ZMT1cgPT09IgoKICAgICMgU3RlcCAxOiBDbG9uZSBvciB1cGRhdGUgZG9jcyByZXBvc2l0b3J5IHRlbXBvcmFyaWx5CiAgICBpZiBbIC1kICIvdG1wL2RvY3MtcmVwbyIgXTsgdGhlbgogICAgICAgIGVjaG8gIvCflIQgRE9DUyBSRVBPU0lUT1JZOiBVUERBVEUgLSB0ZW1wb3JhcnkgZGlyZWN0b3J5IGV4aXN0cyIKICAgICAgICBjZCAvdG1wL2RvY3MtcmVwbwogICAgICAgIGdpdCBmZXRjaCBvcmlnaW4KICAgICAgICBnaXQgY2hlY2tvdXQgIiRET0NTX0JSQU5DSCIKICAgICAgICBnaXQgcmVzZXQgLS1oYXJkICJvcmlnaW4vJERPQ1NfQlJBTkNIIgogICAgICAgIGNkIC93b3Jrc3BhY2UKICAgICAgICBlY2hvICLinJMgRG9jcyByZXBvc2l0b3J5IHVwZGF0ZWQiCiAgICBlbHNlCiAgICAgICAgZWNobyAi8J+TpSBET0NTIFJFUE9TSVRPUlk6IENMT05JTkcgLSBleHRyYWN0aW5nIHRhc2sgZmlsZXMiCiAgICAgICAgaWYgISBnaXQgY2xvbmUgIiRET0NTX0hUVFBfVVJMIiAvdG1wL2RvY3MtcmVwbzsgdGhlbgogICAgICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNsb25lIGRvY3MgcmVwb3NpdG9yeToge3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0gKCRET0NTX0hUVFBfVVJMKSIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgZmkKICAgICAgICBjZCAvdG1wL2RvY3MtcmVwbyAmJiBnaXQgY2hlY2tvdXQgIiRET0NTX0JSQU5DSCIgJiYgY2QgL3dvcmtzcGFjZQogICAgICAgIGVjaG8gIuKckyBEb2NzIHJlcG9zaXRvcnkgY2xvbmVkIHRvIHRlbXBvcmFyeSBsb2NhdGlvbiIKICAgIGZpCgogICAgIyBTdGVwIDI6IENsb25lIG9yIHVwZGF0ZSB0YXJnZXQgcmVwb3NpdG9yeQogICAgaWYgWyAtZCAiJFRBUkdFVF9SRVBPX0RJUiIgXTsgdGhlbgogICAgICAgIGVjaG8gIvCflIQgVEFSR0VUIFJFUE9TSVRPUlk6IFVQREFURSAtIGRpcmVjdG9yeSBhbHJlYWR5IGV4aXN0cyIKICAgICAgICBlY2hvICLwn5OBIEZvdW5kIGV4aXN0aW5nIHRhcmdldCByZXBvc2l0b3J5ICckVEFSR0VUX1JFUE9fRElSJywgdXBkYXRpbmcuLi4iCiAgICAgICAgY2QgIiRUQVJHRVRfUkVQT19ESVIiCiAgICAgICAgZ2l0IGZldGNoIG9yaWdpbiBtYWluCiAgICAgICAgZ2l0IHJlc2V0IC0taGFyZCBvcmlnaW4vbWFpbgogICAgICAgIGNkIC93b3Jrc3BhY2UKICAgICAgICBlY2hvICLinJMgVGFyZ2V0IHJlcG9zaXRvcnkgdXBkYXRlZCBzdWNjZXNzZnVsbHkiCiAgICBlbHNlCiAgICAgICAgZWNobyAi8J+TpSBUQVJHRVQgUkVQT1NJVE9SWTogQ0xPTklORyAtIGZpcnN0IHRpbWUgc2V0dXAiCiAgICAgICAgaWYgISBnaXQgY2xvbmUgIiRSRVBPX0hUVFBfVVJMIiAiJFRBUkdFVF9SRVBPX0RJUiI7IHRoZW4KICAgICAgICAgICAgZWNobyAi4p2MIEZhaWxlZCB0byBjbG9uZSB0YXJnZXQgcmVwb3NpdG9yeToge3tyZXBvc2l0b3J5X3VybH19ICgkUkVQT19IVFRQX1VSTCkiCiAgICAgICAgICAgIGV4aXQgMQogICAgICAgIGZpCiAgICAgICAgZWNobyAi4pyTIFRhcmdldCByZXBvc2l0b3J5IGNsb25lZCBzdWNjZXNzZnVsbHkiCiAgICBmaQoKICAgICMgU3RlcCAzOiBDb3B5IHRhc2sgZmlsZXMgZnJvbSBkb2NzIHJlcG8gdG8gdGFyZ2V0IHJlcG8KICAgIGVjaG8gIvCfk4sgVEFTSyBGSUxFUzogQ09QWUlORyBmcm9tIGRvY3MgdG8gdGFyZ2V0IHJlcG9zaXRvcnkiCiAgICBta2RpciAtcCAiL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSL3Rhc2siCgogICAgIyBEZXRlcm1pbmUgZG9jcyBwcm9qZWN0IGRpcmVjdG9yeSBwYXRoCiAgICB7eyNpZiBkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0KICAgIGlmIFsgInt7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19IiA9ICIuIiBdOyB0aGVuCiAgICAgICAgRE9DU19QQVRIPSIvdG1wL2RvY3MtcmVwby8udGFza21hc3RlciIKICAgIGVsc2UKICAgICAgICBET0NTX1BBVEg9Ii90bXAvZG9jcy1yZXBvL3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19Ly50YXNrbWFzdGVyIgogICAgZmkKICAgIHt7ZWxzZX19CiAgICBET0NTX1BBVEg9Ii90bXAvZG9jcy1yZXBvLy50YXNrbWFzdGVyIgogICAge3svaWZ9fQoKICAgICMgQ29weSBzcGVjaWZpYyB0YXNrIGZpbGVzCiAgICBUQVNLX0RJUj0iJERPQ1NfUEFUSC9kb2NzL3Rhc2ste3t0YXNrX2lkfX0iCiAgICBlY2hvICLwn5SNIERFQlVHOiBMb29raW5nIGZvciB0YXNrIGZpbGVzIGF0OiAkVEFTS19ESVIiCiAgICBlY2hvICLwn5SNIERFQlVHOiBEb2NzIHBhdGggaXM6ICRET0NTX1BBVEgiCiAgICBlY2hvICLwn5SNIERFQlVHOiBDb250ZW50cyBvZiBkb2NzIHRlbXAgZGlyZWN0b3J5OiIKICAgIGxzIC1sYSAvdG1wL2RvY3MtcmVwby8udGFza21hc3Rlci8gfHwgZWNobyAiTm8gLnRhc2ttYXN0ZXIgZm91bmQiCiAgICBlY2hvICLwn5SNIERFQlVHOiBDb250ZW50cyBvZiBkb2NzIGRpcmVjdG9yeToiCiAgICBscyAtbGEgL3RtcC9kb2NzLXJlcG8vLnRhc2ttYXN0ZXIvZG9jcy8gfHwgZWNobyAiTm8gZG9jcyBkaXJlY3RvcnkgZm91bmQiCgogICAgaWYgWyAtZCAiJFRBU0tfRElSIiBdOyB0aGVuCiAgICAgICAgZWNobyAi8J+UjSBERUJVRzogVGFzayBkaXJlY3RvcnkgZm91bmQsIGNvbnRlbnRzOiIKICAgICAgICBscyAtbGEgIiRUQVNLX0RJUiIKCiAgICAgICAgZWNobyAi4pyFIENvcHlpbmcgdGFzay5tZC4uLiIKICAgICAgICBjcCAiJFRBU0tfRElSL3Rhc2subWQiICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvdGFzay8iICYmIGVjaG8gIuKckyB0YXNrLm1kIGNvcGllZCIgfHwgZWNobyAi4p2MIHRhc2subWQgY29weSBmYWlsZWQiCgogICAgICAgIGVjaG8gIuKchSBDb3B5aW5nIGFjY2VwdGFuY2UtY3JpdGVyaWEubWQuLi4iCiAgICAgICAgY3AgIiRUQVNLX0RJUi9hY2NlcHRhbmNlLWNyaXRlcmlhLm1kIiAiL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSL3Rhc2svIiAmJiBlY2hvICLinJMgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCBjb3BpZWQiIHx8IGVjaG8gIuKdjCBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kIGNvcHkgZmFpbGVkIgoKICAgICAgICBlY2hvICLinIUgQ29weWluZyBwcm9tcHQubWQuLi4iCiAgICAgICAgY3AgIiRUQVNLX0RJUi9wcm9tcHQubWQiICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvdGFzay8iICYmIGVjaG8gIuKckyBwcm9tcHQubWQgY29waWVkIiB8fCBlY2hvICLinYwgcHJvbXB0Lm1kIGNvcHkgZmFpbGVkIgoKICAgICAgICBlY2hvICLinIUgQ29weWluZyBjbGllbnQtY29uZmlnLmpzb24uLi4iCiAgICAgICAgaWYgWyAtZiAiJFRBU0tfRElSL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogICAgICAgICAgICBjcCAiJFRBU0tfRElSL2NsaWVudC1jb25maWcuanNvbiIgIiRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIiAmJiBlY2hvICLinJMgY2xpZW50LWNvbmZpZy5qc29uIGNvcGllZCB0byBDbGF1ZGUgd29ya2luZyBkaXJlY3RvcnkiIHx8IGVjaG8gIuKdjCBjbGllbnQtY29uZmlnLmpzb24gY29weSBmYWlsZWQiCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gY2xpZW50LWNvbmZpZy5qc29uIG5vdCBmb3VuZCAtIE1DUCBjbGllbnQgbWF5IG5vdCBiZSBjb25maWd1cmVkIgogICAgICAgIGZpCgogICAgICAgIGVjaG8gIuKchSBDb3B5aW5nIHRvb2xtYW4tZ3VpZGUubWQuLi4iCiAgICAgICAgaWYgWyAtZiAiJFRBU0tfRElSL3Rvb2xtYW4tZ3VpZGUubWQiIF07IHRoZW4KICAgICAgICAgICAgY3AgIiRUQVNLX0RJUi90b29sbWFuLWd1aWRlLm1kIiAiL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSL3Rhc2svIiAmJiBlY2hvICLinJMgdG9vbG1hbi1ndWlkZS5tZCBjb3BpZWQiIHx8IGVjaG8gIuKdjCB0b29sbWFuLWd1aWRlLm1kIGNvcHkgZmFpbGVkIgogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4pqg77iPIHRvb2xtYW4tZ3VpZGUubWQgbm90IGZvdW5kIC0gY29kZSBhZ2VudCB3b24ndCBoYXZlIHRvb2wgdXNhZ2UgZ3VpZGFuY2UiCiAgICAgICAgZmkKCiAgICAgICAgZWNobyAi4pyTIFRhc2sge3t0YXNrX2lkfX0gZmlsZXMgY29waWVkIGZyb20gJFRBU0tfRElSIgogICAgZWxzZQogICAgICAgIGVjaG8gIuKdjCBDUklUSUNBTDogVGFzayB7e3Rhc2tfaWR9fSBkaXJlY3Rvcnkgbm90IGZvdW5kIGF0OiAkVEFTS19ESVIiCiAgICAgICAgZWNobyAi8J+UjSBERUJVRzogQXZhaWxhYmxlIGRpcmVjdG9yaWVzIGluIGRvY3M6IgogICAgICAgIGZpbmQgL3RtcC9kb2NzLXJlcG8gLW5hbWUgInRhc2stKiIgLXR5cGUgZCB8fCBlY2hvICJObyB0YXNrIGRpcmVjdG9yaWVzIGZvdW5kIgogICAgZmkKCiAgICAjIENvcHkgYXJjaGl0ZWN0dXJlLm1kIGZyb20gZG9jcyByb290CiAgICBBUkNIX0ZJTEU9IiRET0NTX1BBVEgvZG9jcy9hcmNoaXRlY3R1cmUubWQiCiAgICBpZiBbIC1mICIkQVJDSF9GSUxFIiBdOyB0aGVuCiAgICAgICAgY3AgIiRBUkNIX0ZJTEUiICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvdGFzay8iCiAgICAgICAgZWNobyAi4pyTIEFyY2hpdGVjdHVyZSBkb2N1bWVudGF0aW9uIGNvcGllZCIKICAgIGVsc2UKICAgICAgICBlY2hvICLimqDvuI8gYXJjaGl0ZWN0dXJlLm1kIG5vdCBmb3VuZCBhdDogJEFSQ0hfRklMRSIKICAgIGZpCgogICAgIyBDb3B5IHRhc2tzLmpzb24gaWYgaXQgZXhpc3RzCiAgICBpZiBbIC1mICIkRE9DU19QQVRIL3Rhc2tzLmpzb24iIF07IHRoZW4KICAgICAgICBjcCAiJERPQ1NfUEFUSC90YXNrcy5qc29uIiAiL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSL3Rhc2svIgogICAgICAgIGVjaG8gIuKckyB0YXNrcy5qc29uIGNvcGllZCIKICAgIGZpCgogICAgZWNobyAi4pyTIFRhc2sgZmlsZXMgY29waWVkIHRvIHRhcmdldCByZXBvc2l0b3J5IgoKICAgICMgREVCVUc6IFZlcmlmeSBmaWxlcyB3ZXJlIGNvcGllZCBzdWNjZXNzZnVsbHkKICAgIGVjaG8gIvCflI0gREVCVUc6IENvbnRlbnRzIG9mIHRhcmdldCB0YXNrIGRpcmVjdG9yeSBhZnRlciBjb3B5OiIKICAgIGxzIC1sYSAiL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSL3Rhc2svIiB8fCBlY2hvICJUYXNrIGRpcmVjdG9yeSBub3QgZm91bmQiCiAgICBlY2hvICLwn5SNIERFQlVHOiBDaGVja2luZyBpZiBwcm9tcHQubWQgZXhpc3RzOiIKICAgIFsgLWYgIi93b3Jrc3BhY2UvJFRBUkdFVF9SRVBPX0RJUi90YXNrL3Byb21wdC5tZCIgXSAmJiBlY2hvICLinIUgcHJvbXB0Lm1kIGV4aXN0cyIgfHwgZWNobyAi4p2MIHByb21wdC5tZCBtaXNzaW5nIgoKICAgICMgU3RlcCA0OiBDbGVhbiB1cCBkb2NzIHJlcG9zaXRvcnkKICAgIGVjaG8gIvCfp7kgQ0xFQU5VUDogUmVtb3ZpbmcgdGVtcG9yYXJ5IGRvY3MgcmVwb3NpdG9yeSIKICAgIHJtIC1yZiAvdG1wL2RvY3MtcmVwbwogICAgZWNobyAi4pyTIERvY3MgcmVwb3NpdG9yeSBjbGVhbmVkIHVwIgoKICAgICMgU2V0IHdvcmtpbmcgZGlyZWN0b3J5IHRvIHRoZSB0YXJnZXQgcmVwb3NpdG9yeSByb290CiAgICBSRVBPX05BTUU9IiRUQVJHRVRfUkVQT19ESVIiCiAgICBlY2hvICLinJMgV29ya2luZyBkaXJlY3Rvcnk6IC93b3Jrc3BhY2UvJFJFUE9fTkFNRSIKZmkKCiMgU2V0dXAgZmVhdHVyZSBicmFuY2ggZm9yIGltcGxlbWVudGF0aW9uCmVjaG8gIj09PSBCUkFOQ0ggU0VUVVAgPT09IgpjZCAiL3dvcmtzcGFjZS8kUkVQT19OQU1FIgoKIyBTeW5jIHdpdGggbGF0ZXN0IG1haW4gdG8gcHJldmVudCBjb25mbGljdHMKZWNobyAi8J+UhCBTeW5jaW5nIHdpdGggbGF0ZXN0IG1haW4gdG8gcHJldmVudCBjb25mbGljdHMuLi4iCmdpdCBmZXRjaCBvcmlnaW4gbWFpbiAyPi9kZXYvbnVsbCB8fCBnaXQgZmV0Y2ggb3JpZ2luIG1hc3RlciAyPi9kZXYvbnVsbCB8fCBlY2hvICLimqDvuI8gQ291bGQgbm90IGZldGNoIG1haW4vbWFzdGVyIGJyYW5jaCIKCiMgQ3JlYXRlIG9yIGNoZWNrb3V0IGZlYXR1cmUgYnJhbmNoCkZFQVRVUkVfQlJBTkNIPSJmZWF0dXJlL3Rhc2ste3t0YXNrX2lkfX0taW1wbGVtZW50YXRpb24iCkJSQU5DSF9FWElTVFM9ImZhbHNlIgoKICAgIGlmIGdpdCBzaG93LXJlZiAtLXZlcmlmeSAtLXF1aWV0IHJlZnMvaGVhZHMvJEZFQVRVUkVfQlJBTkNIOyB0aGVuCiAgICAgICAgQlJBTkNIX0VYSVNUUz0idHJ1ZSIKICAgICAgICBlY2hvICJGZWF0dXJlIGJyYW5jaCAnJEZFQVRVUkVfQlJBTkNIJyBleGlzdHMsIGNoZWNraW5nIG91dC4uLiIKICAgICAgICBnaXQgY2hlY2tvdXQgJEZFQVRVUkVfQlJBTkNICgogICAgICAgIGVjaG8gIvCfk6UgTWVyZ2luZyBsYXRlc3QgbWFpbiBpbnRvICRGRUFUVVJFX0JSQU5DSC4uLiIKICAgICAgICBpZiBnaXQgbWVyZ2Ugb3JpZ2luL21haW4gLS1uby1lZGl0OyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKckyBTdWNjZXNzZnVsbHkgbWVyZ2VkIGxhdGVzdCBtYWluIGludG8gZmVhdHVyZSBicmFuY2giCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gTUVSR0UgQ09ORkxJQ1Q6IENhbm5vdCBhdXRvLW1lcmdlIG1haW4gaW50byAkRkVBVFVSRV9CUkFOQ0giCiAgICAgICAgICAgIGVjaG8gIuKdlyBNYW51YWwgY29uZmxpY3QgcmVzb2x1dGlvbiByZXF1aXJlZCBieSBDbGF1ZGUgYWdlbnQiCiAgICAgICAgICAgIGVjaG8gIiIKICAgICAgICAgICAgZWNobyAi8J+TiyBDb25mbGljdCBmaWxlczoiCiAgICAgICAgICAgIGdpdCBzdGF0dXMgLS1wb3JjZWxhaW4gfCBncmVwICJeVVVcfF5BQVx8XkREIiB8fCBlY2hvICIgICAoVXNlICdnaXQgc3RhdHVzJyB0byBzZWUgZGV0YWlscykiCiAgICAgICAgICAgIGVjaG8gIiIKICAgICAgICAgICAgZWNobyAi8J+UpyBDbGF1ZGUgd2lsbCBuZWVkIHRvIHJlc29sdmUgY29uZmxpY3RzIG1hbnVhbGx5IGJlZm9yZSBwcm9jZWVkaW5nIgogICAgICAgICAgICAjIERvbid0IGV4aXQgLSBsZXQgQ2xhdWRlIGhhbmRsZSB0aGUgY29uZmxpY3RzCiAgICAgICAgZmkKICAgIGVsc2UKICAgICAgICAjIENyZWF0ZSBuZXcgZmVhdHVyZSBicmFuY2ggZnJvbSBsYXRlc3QgbWFpbgogICAgICAgIGVjaG8gIkNyZWF0aW5nIG5ldyBmZWF0dXJlIGJyYW5jaCAnJEZFQVRVUkVfQlJBTkNIJyBmcm9tIGxhdGVzdCBtYWluLi4uIgogICAgICAgIGdpdCBjaGVja291dCAtYiAkRkVBVFVSRV9CUkFOQ0ggb3JpZ2luL21haW4KICAgICAgICBlY2hvICLinJMgQ3JlYXRlZCBmZWF0dXJlIGJyYW5jaDogJEZFQVRVUkVfQlJBTkNIIgogICAgZmkKCiMgNS4gU2V0IFdvcmtpbmcgRGlyZWN0b3J5IChDcml0aWNhbCBmb3IgQ2xhdWRlIEV4ZWN1dGlvbikKV09SS19ESVI9Int7d29ya2luZ19kaXJlY3Rvcnl9fSIKaWYgWyAiJFdPUktfRElSIiA9ICIuIiBdIHx8IFsgLXogIiRXT1JLX0RJUiIgXTsgdGhlbgogIENMQVVERV9XT1JLX0RJUj0iL3dvcmtzcGFjZS8kUkVQT19OQU1FIgplbHNlCiAgQ0xBVURFX1dPUktfRElSPSIvd29ya3NwYWNlLyRSRVBPX05BTUUvJFdPUktfRElSIgpmaQpta2RpciAtcCAiJENMQVVERV9XT1JLX0RJUiIgJiYgY2QgIiRDTEFVREVfV09SS19ESVIiCmVjaG8gIuKckyBTZXQgd29ya2luZyBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmVjaG8gIvCflJEgQ1JJVElDQUw6IENsYXVkZSB3aWxsIGJlIGxhdW5jaGVkIGZyb20gdGhpcyBkaXJlY3RvcnkiCgojIFdvcmtpbmcgZGlyZWN0b3J5IHNldHVwIGNvbXBsZXRlZCBhYm92ZQoKIyBDb25maWd1cmUgZ2l0IHVzZXIgYWZ0ZXIgc3VjY2Vzc2Z1bCBjbG9uZQplY2hvICI9PT0gUE9TVC1DTE9ORSBHSVQgQ09ORklHVVJBVElPTiA9PT0iCiMgRml4IGR1YmlvdXMgb3duZXJzaGlwIGlzc3VlcwpnaXQgY29uZmlnIC0tZ2xvYmFsIC0tYWRkIHNhZmUuZGlyZWN0b3J5ICIvd29ya3NwYWNlLyRSRVBPX05BTUUiCmVjaG8gIuKckyBBZGRlZCByZXBvc2l0b3J5IHRvIHNhZmUgZGlyZWN0b3JpZXMiCgojIFNldCBnaXQgY29uZmlnIGxvY2FsbHkgaW4gdGhlIHdvcmtpbmcgcmVwb3NpdG9yeSAocGVyc2lzdGVudCBvbiBQVkMpCmlmIFsgLWQgIi93b3Jrc3BhY2UvJFJFUE9fTkFNRS8uZ2l0IiBdOyB0aGVuCiAgICBjZCAiL3dvcmtzcGFjZS8kUkVQT19OQU1FIgogICAgZ2l0IGNvbmZpZyAtLWxvY2FsIHVzZXIubmFtZSAiJEdJVF9BVVRIT1JfTkFNRSIKICAgIGdpdCBjb25maWcgLS1sb2NhbCB1c2VyLmVtYWlsICIkR0lUX0FVVEhPUl9FTUFJTCIKICAgICMgU2V0IHVwIGF1dG9tYXRpYyB1cHN0cmVhbSBmb3IgbmV3IGJyYW5jaGVzCiAgICBnaXQgY29uZmlnIC0tbG9jYWwgcHVzaC5hdXRvU2V0dXBSZW1vdGUgdHJ1ZQogICAgZWNobyAi4pyTIENvbmZpZ3VyZWQgZ2l0IHVzZXIgaW4gdGFyZ2V0IHJlcG9zaXRvcnk6ICRHSVRfQVVUSE9SX05BTUUiCiAgICBlY2hvICLinJMgRW5hYmxlZCBhdXRvbWF0aWMgdXBzdHJlYW0gc2V0dXAgZm9yIG5ldyBicmFuY2hlcyIKZmkKCmNkIC93b3Jrc3BhY2UKCiMgQ29weSBDb25maWdNYXAgZmlsZXMgdG8gd29ya2luZyBkaXJlY3RvcnkgKEFGVEVSIHJlcG9zaXRvcnkgY2xvbmUpCmVjaG8gIj09PSBDT05GSUdNQVAgRklMRSBTRVRVUCA9PT0iCgojIENsYXVkZSB3b3JraW5nIGRpcmVjdG9yeSBhbHJlYWR5IHNldCBhYm92ZSBkdXJpbmcgcmVwb3NpdG9yeSBzZXR1cAoKZWNobyAiU2V0dGluZyB1cCBmaWxlcyBpbiBDbGF1ZGUgd29ya2luZyBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmNkICIkQ0xBVURFX1dPUktfRElSIgoKIyBDb3B5IGFsbCBmaWxlcyBmcm9tIENvbmZpZ01hcCB0byB3b3JraW5nIGRpcmVjdG9yeQppZiBbIC1kICIvdGFzay1maWxlcyIgXTsgdGhlbgogIGVjaG8gIkNvcHlpbmcgQ29uZmlnTWFwIGZpbGVzIHRvIHdvcmtpbmcgZGlyZWN0b3J5Li4uIgoKICAjIENMQVVERS5tZCBNZW1vcnkgUGVyc2lzdGVuY2UgTG9naWMgKGNvbnRyb2xsZWQgYnkgb3ZlcndyaXRlTWVtb3J5IENSRCBmaWVsZCkKICAgICAgICBPVkVSV1JJVEVfTUVNT1JZPSJ7e292ZXJ3cml0ZV9tZW1vcnl9fSIKCiAgIyBIYW5kbGUgQ0xBVURFLm1kIGJhc2VkIG9uIG92ZXJ3cml0ZU1lbW9yeSBzZXR0aW5nCiAgICAgICAgaWYgWyAiJE9WRVJXUklURV9NRU1PUlkiID0gInRydWUiIF07IHRoZW4KICAgICAgICAgICMgT3ZlcndyaXRlIG1vZGU6IEFsd2F5cyByZXBsYWNlIENMQVVERS5tZCB3aXRoIGZyZXNoIHRlbXBsYXRlCiAgICBjcCAiL3Rhc2stZmlsZXMvQ0xBVURFLm1kIiAiJENMQVVERV9XT1JLX0RJUi9DTEFVREUubWQiCiAgICBjcCAiL3Rhc2stZmlsZXMvQ0xBVURFLm1kIiAiL3dvcmtzcGFjZS9DTEFVREUubWQiCiAgICAgICAgICBlY2hvICLinJMgT3Zlcndyb3RlIENMQVVERS5tZCBtZW1vcnkgZmlsZSAoZnJlc2ggc3RhcnQgcmVxdWVzdGVkKSIKICAgICAgICAgIGVjaG8gIuKckyBDb3BpZWQgQ0xBVURFLm1kIHRvIHdvcmtzcGFjZSByb290IGZvciBlYXN5IGFjY2VzcyIKICAgICAgICBlbHNlCiAgICAgICAgICAjIFByZXNlcnZlIG1vZGUgKGRlZmF1bHQpOiBPbmx5IGNvcHkgaWYgZG9lc24ndCBleGlzdAogICAgICAgICAgaWYgWyAhIC1mICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIgXTsgdGhlbgogICAgICAjIEluaXRpYWwgY3JlYXRpb24gLSBjb3B5IGZyb20gQ29uZmlnTWFwCiAgICAgIGNwICIvdGFzay1maWxlcy9DTEFVREUubWQiICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIKICAgICAgY3AgIi90YXNrLWZpbGVzL0NMQVVERS5tZCIgIi93b3Jrc3BhY2UvQ0xBVURFLm1kIgogICAgICAgICAgICBlY2hvICLinJMgQ3JlYXRlZCBpbml0aWFsIENMQVVERS5tZCBtZW1vcnkgZmlsZSIKICAgICAgICAgICAgZWNobyAi4pyTIENvcGllZCBDTEFVREUubWQgdG8gd29ya3NwYWNlIHJvb3QgZm9yIGVhc3kgYWNjZXNzIgogICAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLinJMgUHJlc2VydmVkIGV4aXN0aW5nIENMQVVERS5tZCBtZW1vcnkgZmlsZSAobWFpbnRhaW5pbmcgYWNjdW11bGF0ZWQgY29udGV4dCkiCiAgICAgICAgICAgICMgU3RpbGwgY29weSB0byB3b3Jrc3BhY2Ugcm9vdCBmb3IgY29uc2lzdGVuY3kKICAgICAgICAgICAgY3AgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIiAiL3dvcmtzcGFjZS9DTEFVREUubWQiCiAgICAgICAgICAgIGVjaG8gIuKckyBTeW5jZWQgQ0xBVURFLm1kIHRvIHdvcmtzcGFjZSByb290IgogICAgICAgICAgZmkKICAgICAgICBmaQoKICAjIENvcHkgY2xpZW50LWNvbmZpZy5qc29uIHRvIHdvcmtzcGFjZSByb290IGZvciBNQ1AgY29uZmlndXJhdGlvbgogIGlmIFsgLWYgIi90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogICAgY3AgIi90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiIgIi93b3Jrc3BhY2UvY2xpZW50LWNvbmZpZy5qc29uIgogICAgZWNobyAi4pyTIENvcGllZCBjbGllbnQtY29uZmlnLmpzb24gdG8gd29ya3NwYWNlIHJvb3QgZm9yIE1DUCBjb25maWd1cmF0aW9uIgogIGVsc2UKICAgIGVjaG8gIuKaoO+4jyBjbGllbnQtY29uZmlnLmpzb24gbm90IGZvdW5kIGluIHRhc2stZmlsZXMsIHVzaW5nIGRlZmF1bHRzIgogIGZpCgogICMgQ29weSBhbGwgb3RoZXIgbWFya2Rvd24gZmlsZXMgKGV4Y2x1ZGluZyBDTEFVREUubWQpCiAgZm9yIG1kX2ZpbGUgaW4gL3Rhc2stZmlsZXMvKi5tZDsgZG8KICAgIGlmIFsgLWYgIiRtZF9maWxlIiBdOyB0aGVuCiAgICAgIGJhc2VuYW1lX2ZpbGU9JChiYXNlbmFtZSAiJG1kX2ZpbGUiKQogICAgICAjIFNraXAgQ0xBVURFLm1kIHNpbmNlIHdlIGhhbmRsZWQgaXQgYWJvdmUKICAgICAgaWYgWyAiJGJhc2VuYW1lX2ZpbGUiICE9ICJDTEFVREUubWQiIF07IHRoZW4KICAgICAgICBjcCAiJG1kX2ZpbGUiICIkQ0xBVURFX1dPUktfRElSLyIKICAgICAgICBlY2hvICLinJMgVXBkYXRlZCAkYmFzZW5hbWVfZmlsZSIKICAgICAgZmkKICAgIGZpCiAgZG9uZQoKICAjIFZlcmlmeSBlbnRlcnByaXNlIHNldHRpbmdzIChtb3VudGVkIGRpcmVjdGx5IGZyb20gQ29uZmlnTWFwKQogIGlmIFsgLWYgIi9ldGMvY2xhdWRlLWNvZGUvbWFuYWdlZC1zZXR0aW5ncy5qc29uIiBdOyB0aGVuCiAgICBlY2hvICLinJMgRW50ZXJwcmlzZSBzZXR0aW5ncyB2ZXJpZmllZCIKICAgIGlmICEganEgZW1wdHkgL2V0Yy9jbGF1ZGUtY29kZS9tYW5hZ2VkLXNldHRpbmdzLmpzb24gMj4vZGV2L251bGw7IHRoZW4KICAgICAgZWNobyAi4p2MIEludmFsaWQgZW50ZXJwcmlzZSBzZXR0aW5ncyBKU09OIgogICAgICBleGl0IDEKICAgIGZpCiAgZWxzZQogICAgZWNobyAi4p2MIEVudGVycHJpc2Ugc2V0dGluZ3Mgbm90IGZvdW5kIgogICAgZXhpdCAxCiAgZmkKCiAgIyBDb3B5IGd1aWRlbGluZXMgZmlsZXMgdG8gd29ya2luZyBkaXJlY3RvcnkKICBpZiBbIC1mICIvdGFzay1maWxlcy9jb2RpbmctZ3VpZGVsaW5lcy5tZCIgXTsgdGhlbgogICAgY3AgL3Rhc2stZmlsZXMvY29kaW5nLWd1aWRlbGluZXMubWQgIiRDTEFVREVfV09SS19ESVIvIgogICAgZWNobyAi4pyTIENvcGllZCBjb2RpbmctZ3VpZGVsaW5lcy5tZCB0byB3b3JraW5nIGRpcmVjdG9yeSIKICBmaQoKICBpZiBbIC1mICIvdGFzay1maWxlcy9naXRodWItZ3VpZGVsaW5lcy5tZCIgXTsgdGhlbgogICAgY3AgL3Rhc2stZmlsZXMvZ2l0aHViLWd1aWRlbGluZXMubWQgIiRDTEFVREVfV09SS19ESVIvIgogICAgZWNobyAi4pyTIENvcGllZCBnaXRodWItZ3VpZGVsaW5lcy5tZCB0byB3b3JraW5nIGRpcmVjdG9yeSIKICBmaQoKICAjIFN5c3RlbSBwcm9tcHQgd2lsbCBiZSByZW5kZXJlZCBpbmxpbmUgKG5vIGZpbGUgY29weWluZyBuZWVkZWQpCiAgZWNobyAi4pyTIFN5c3RlbSBwcm9tcHQgdGVtcGxhdGUgd2lsbCBiZSByZW5kZXJlZCBpbmxpbmUiCgogICMgSG9vayBjb3B5aW5nIGRpc2FibGVkCiAgZWNobyAiISBIb29rIHNjcmlwdHMgZGlzYWJsZWQgLSBubyBob29rcyB3aWxsIGJlIGNvcGllZCIKCiAgIyBTZXQgdXAgTUNQIGNvbmZpZ3VyYXRpb24KICBlY2hvICJTZXR0aW5nIHVwIE1DUCBjb25maWd1cmF0aW9uLi4uIgoKICAjIENvcHkgTUNQIGNvbmZpZ3VyYXRpb24gZnJvbSBDb25maWdNYXAgdG8gcHJvamVjdCByb290IChwcm9qZWN0IHNjb3BlKQogIGlmIFsgLWYgIi90YXNrLWZpbGVzL21jcC5qc29uIiBdOyB0aGVuCiAgICBjcCAvdGFzay1maWxlcy9tY3AuanNvbiAiJENMQVVERV9XT1JLX0RJUi8ubWNwLmpzb24iCiAgICBlY2hvICLinJMgQ29waWVkIG1jcC5qc29uIHRvIC5tY3AuanNvbiAocHJvamVjdCBzY29wZSkiCiAgZWxzZQogICAgZWNobyAi4pqg77iPICBtY3AuanNvbiB0ZW1wbGF0ZSBub3QgZm91bmQiCiAgZmkKCiAgIyBFbnRlcnByaXNlIG1hbmFnZWQgc2V0dGluZ3MgYXJlIG1vdW50ZWQgZGlyZWN0bHkgZnJvbSBDb25maWdNYXAKICBlY2hvICI9PT0gRU5URVJQUklTRSBNQU5BR0VEIFNFVFRJTkdTID09PSIKICBlY2hvICLinJMgU2V0dGluZ3MgbW91bnRlZCBkaXJlY3RseSBmcm9tIENvbmZpZ01hcCBhdDogL2V0Yy9jbGF1ZGUtY29kZS9tYW5hZ2VkLXNldHRpbmdzLmpzb24iCiAgZWNobyAi4pyTIE5vIGNvcHlpbmcgbmVlZGVkIC0gbW91bnQgYXV0b21hdGljYWxseSByZWZsZWN0cyBsYXRlc3QgQ29uZmlnTWFwIGNoYW5nZXMiCgogIGVjaG8gIuKckyBDb25maWdNYXAgZmlsZXMgY29waWVkIHRvICRDTEFVREVfV09SS19ESVIiCmVsc2UKICBlY2hvICLimqDvuI8gIFdhcm5pbmc6IC90YXNrLWZpbGVzIGRpcmVjdG9yeSBub3QgZm91bmQgKENvbmZpZ01hcCBub3QgbW91bnRlZD8pIgpmaQoKCiMgQ29weSBDdXJyZW50IFRhc2sgRG9jdW1lbnRhdGlvbiB0byBXb3JraW5nIERpcmVjdG9yeQplY2hvICI9PT0gVEFTSyBET0NVTUVOVEFUSU9OIFNFVFVQID09PSIKZWNobyAi8J+UjSBERUJVRzogV09SS0ZMT1dfVFlQRSBpczogJFdPUktGTE9XX1RZUEUiCmVjaG8gIvCflI0gREVCVUc6IFJFUE9fTkFNRSBpczogJFJFUE9fTkFNRSIKZWNobyAi8J+UjSBERUJVRzogQ0xBVURFX1dPUktfRElSIGlzOiAkQ0xBVURFX1dPUktfRElSIgplY2hvICLwn5SNIERFQlVHOiBUYXNrIElEIGlzOiB7e3Rhc2tfaWR9fSIKCiMgVGFzayBkaXJlY3Rvcnkgc2hvdWxkIGFscmVhZHkgZXhpc3QgZnJvbSBtdWx0aS1yZXBvIHdvcmtmbG93IG9yIGJlIGNyZWF0ZWQgYXMgbmVlZGVkCm1rZGlyIC1wICIkQ0xBVURFX1dPUktfRElSL3Rhc2siCmVjaG8gIuKckyBDcmVhdGVkIHRhc2sgZGlyZWN0b3J5IGF0OiAkQ0xBVURFX1dPUktfRElSL3Rhc2siCgojIFRhc2sgZG9jdW1lbnRhdGlvbiBzaG91bGQgYWxyZWFkeSBiZSBhdmFpbGFibGUgaW4gdGhlIHRhc2svIGRpcmVjdG9yeQppZiBbICIkV09SS0ZMT1dfVFlQRSIgPSAic2luZ2xlLXJlcG8iIF07IHRoZW4KICAgIGVjaG8gIuKckyBSZXN0b3JpbmcgdGFzayBkb2N1bWVudGF0aW9uIGZyb20gcHJlc2VydmVkIHRlbXBvcmFyeSBsb2NhdGlvbiIKCiAgICAjIFVzZSB0aGUgcHJlc2VydmVkIFRhc2sgTWFzdGVyIGZpbGVzIGZyb20gdGVtcG9yYXJ5IGxvY2F0aW9uCiAgICBURU1QX1RBU0tfRElSPSIvdG1wL3Rhc2ttYXN0ZXItcHJlc2VydmUiCiAgICBlY2hvICLwn5SNIERFQlVHOiBSZXN0b3JpbmcgdGFzayBmaWxlcyBmcm9tOiAkVEVNUF9UQVNLX0RJUiIKCiAgICBpZiBbIC1kICIkVEVNUF9UQVNLX0RJUiIgXSAmJiBbICIkKGxzIC1BICRURU1QX1RBU0tfRElSIDI+L2Rldi9udWxsKSIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKckyBQcmVzZXJ2ZWQgVGFzayBNYXN0ZXIgZmlsZXMgZm91bmQiCiAgICAgICAgZWNobyAi8J+UjSBERUJVRzogUHJlc2VydmVkIHRhc2sgZmlsZXM6IgogICAgICAgIGxzIC1sYSAiJFRFTVBfVEFTS19ESVIvIgoKICAgICAgICBlY2hvICLinIUgQ29weWluZyBhbGwgcHJlc2VydmVkIGZpbGVzIHRvIHRhc2sgZGlyZWN0b3J5Li4uIgoKICAgICAgICAjIENvcHkgYWxsIGZpbGVzIGZyb20gcHJlc2VydmVkIGRpcmVjdG9yeSB0byB0YXNrIGRpcmVjdG9yeQogICAgICAgIGlmIGNwIC1yICIkVEVNUF9UQVNLX0RJUiIvKiAiJENMQVVERV9XT1JLX0RJUi90YXNrLyIgMj4vZGV2L251bGw7IHRoZW4KICAgICAgICAgICAgZWNobyAi4pyTIEFsbCB0YXNrIGZpbGVzIGNvcGllZCBmcm9tIHByZXNlcnZlZCB0ZW1wb3JhcnkgbG9jYXRpb24iCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNvcHkgdGFzayBmaWxlcyBmcm9tIHByZXNlcnZlZCBsb2NhdGlvbiIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgZmkKCiAgICAgICAgIyBDb3B5IHRhc2sudHh0IGFzIHRhc2subWQgaWYgaXQgZXhpc3RzIChzcGVjaWZpYyByZW5hbWUgbmVlZGVkKQogICAgICAgIGlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvdGFzay90YXNrLnR4dCIgXTsgdGhlbgogICAgICAgICAgICBjcCAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Rhc2sudHh0IiAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Rhc2subWQiICYmIGVjaG8gIuKckyB0YXNrLnR4dCBjb3BpZWQgYXMgdGFzay5tZCIgfHwgZWNobyAi4p2MIHRhc2sudHh0IGNvcHkgZmFpbGVkIgogICAgICAgIGZpCgogICAgICAgICMgTW92ZSBjbGllbnQtY29uZmlnLmpzb24gdG8gQ2xhdWRlIHdvcmtpbmcgZGlyZWN0b3J5IChub3QgaW4gdGFzay8gc3ViZGlyZWN0b3J5KQogICAgICAgIGlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvdGFzay9jbGllbnQtY29uZmlnLmpzb24iIF07IHRoZW4KICAgICAgICAgICAgbXYgIiRDTEFVREVfV09SS19ESVIvdGFzay9jbGllbnQtY29uZmlnLmpzb24iICIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIgJiYgZWNobyAi4pyTIGNsaWVudC1jb25maWcuanNvbiBtb3ZlZCB0byBDbGF1ZGUgd29ya2luZyBkaXJlY3RvcnkiIHx8IGVjaG8gIuKdjCBjbGllbnQtY29uZmlnLmpzb24gbW92ZSBmYWlsZWQiCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gY2xpZW50LWNvbmZpZy5qc29uIG5vdCBmb3VuZCAtIE1DUCBjbGllbnQgbWF5IG5vdCBiZSBjb25maWd1cmVkIgogICAgICAgIGZpCgogICAgICAgIGVjaG8gIuKckyBUYXNrIHt7dGFza19pZH19IGZpbGVzIGNvcGllZCBmcm9tIHByZXNlcnZlZCB0ZW1wb3JhcnkgbG9jYXRpb24iCgogICAgICAgICMgQ2xlYW4gdXAgdGVtcG9yYXJ5IGRpcmVjdG9yeQogICAgICAgIHJtIC1yZiAiJFRFTVBfVEFTS19ESVIiCiAgICAgICAgZWNobyAi4pyTIENsZWFuZWQgdXAgdGVtcG9yYXJ5IHByZXNlcnZhdGlvbiBkaXJlY3RvcnkiCiAgICBlbHNlCiAgICAgICAgZWNobyAi4p2MIENSSVRJQ0FMOiBObyBwcmVzZXJ2ZWQgVGFzayBNYXN0ZXIgZmlsZXMgZm91bmQgYXQ6ICRURU1QX1RBU0tfRElSIgogICAgICAgIGVjaG8gIvCflI0gREVCVUc6IFRoaXMgaW5kaWNhdGVzIHRoZSBUYXNrIE1hc3RlciBwcmVzZXJ2YXRpb24gc3RlcCBmYWlsZWQgZWFybGllciIKICAgICAgICBlY2hvICLinYwgVGFzayB7e3Rhc2tfaWR9fSBmaWxlcyBhcmUgbm90IGF2YWlsYWJsZSBmb3IgdGhpcyBqb2IiCiAgICAgICAgZXhpdCAxCiAgICBmaQoKICAgICMgREVCVUc6IFZlcmlmeSBmaWxlcyB3ZXJlIGNvcGllZCBzdWNjZXNzZnVsbHkKICAgIGVjaG8gIvCflI0gREVCVUc6IENvbnRlbnRzIG9mIHRhcmdldCB0YXNrIGRpcmVjdG9yeSBhZnRlciBjb3B5OiIKICAgIGxzIC1sYSAiJENMQVVERV9XT1JLX0RJUi90YXNrLyIgfHwgZWNobyAiVGFzayBkaXJlY3Rvcnkgbm90IGZvdW5kIgogICAgZWNobyAi8J+UjSBERUJVRzogQ2hlY2tpbmcgaWYgcHJvbXB0Lm1kIGV4aXN0czoiCiAgICBbIC1mICIkQ0xBVURFX1dPUktfRElSL3Rhc2svcHJvbXB0Lm1kIiBdICYmIGVjaG8gIuKchSBwcm9tcHQubWQgZXhpc3RzIiB8fCBlY2hvICLinYwgcHJvbXB0Lm1kIG1pc3NpbmciCgplbHNlCiAgICBlY2hvICLinJMgVGFzayBkb2N1bWVudGF0aW9uIGNvcGllZCBmcm9tIGRvY3MgcmVwb3NpdG9yeSBkdXJpbmcgbXVsdGktcmVwbyBzZXR1cCIKZmkKCiMgVmVyaWZ5IGNsaWVudC1jb25maWcuanNvbiBpcyBhdmFpbGFibGUgaW4gQ2xhdWRlJ3Mgd29ya2luZyBkaXJlY3RvcnkKZWNobyAiPT09IFRPT0xNQU4gQ09ORklHIFNFVFVQID09PSIKV09SS1NQQUNFX0NGRz0iJENMQVVERV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24iClNPVVJDRV9DRkc9Ii90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiIKCiMgSGVscGVyIHRvIGNoZWNrIG5vbi1lbXB0eSBKU09OIG9iamVjdAppc192YWxpZF9jZmcoKSB7CiAgbG9jYWwgcD0iJDEiCiAgWyAtZiAiJHAiIF0gfHwgcmV0dXJuIDEKICBqcSAtZSAndHlwZT09Im9iamVjdCIgYW5kIGxlbmd0aD4wJyAiJHAiID4vZGV2L251bGwgMj4mMQp9CgpTUkNfT0s9ZmFsc2UKV1NfT0s9ZmFsc2UKaWYgaXNfdmFsaWRfY2ZnICIkU09VUkNFX0NGRyI7IHRoZW4gU1JDX09LPXRydWU7IGZpCmlmIGlzX3ZhbGlkX2NmZyAiJFdPUktTUEFDRV9DRkciOyB0aGVuIFdTX09LPXRydWU7IGZpCgppZiAkU1JDX09LOyB0aGVuCiAgZXhwb3J0IE1DUF9DTElFTlRfQ09ORklHPSIkU09VUkNFX0NGRyIKICBlY2hvICLinJMgU2VsZWN0ZWQgTUNQX0NMSUVOVF9DT05GSUcgZnJvbSBzb3VyY2UgQ29uZmlnTWFwOiAkTUNQX0NMSUVOVF9DT05GSUciCmVsaWYgJFdTX09LOyB0aGVuCiAgZXhwb3J0IE1DUF9DTElFTlRfQ09ORklHPSIkV09SS1NQQUNFX0NGRyIKICBlY2hvICLinJMgU2VsZWN0ZWQgTUNQX0NMSUVOVF9DT05GSUcgZnJvbSB3b3Jrc3BhY2UgY29weTogJE1DUF9DTElFTlRfQ09ORklHIgplbHNlCiAgZWNobyAi4p2MIE5vIHZhbGlkIGNsaWVudC1jb25maWcuanNvbiBmb3VuZCAoYm90aCBzb3VyY2UgYW5kIHdvcmtzcGFjZSBlbXB0eS9pbnZhbGlkKS4gQWJvcnRpbmcuIgogIGlmIFsgLWYgIiRTT1VSQ0VfQ0ZHIiBdOyB0aGVuCiAgICBlY2hvICIgICBTb3VyY2Ugc3VtbWFyeToiOyAoanEgLWMgJ3tyZW1vdGVUb29sczogKC5yZW1vdGVUb29scyAvLyBbXSksIGxvY2FsU2VydmVyczogKC5sb2NhbFNlcnZlcnMgLy8ge30pfScgIiRTT1VSQ0VfQ0ZHIiAyPi9kZXYvbnVsbCB8fCB7IGVjaG8gLW4gIiAgIHJhdz0iOyBoZWFkIC1jIDIwMCAiJFNPVVJDRV9DRkciOyBlY2hvOyB9KQogIGVsc2UKICAgIGVjaG8gIiAgIFNvdXJjZSBtaXNzaW5nOiAkU09VUkNFX0NGRyIKICBmaQogIGlmIFsgLWYgIiRXT1JLU1BBQ0VfQ0ZHIiBdOyB0aGVuCiAgICBlY2hvICIgICBXb3Jrc3BhY2Ugc3VtbWFyeToiOyAoanEgLWMgJ3tyZW1vdGVUb29sczogKC5yZW1vdGVUb29scyAvLyBbXSksIGxvY2FsU2VydmVyczogKC5sb2NhbFNlcnZlcnMgLy8ge30pfScgIiRXT1JLU1BBQ0VfQ0ZHIiAyPi9kZXYvbnVsbCB8fCB7IGVjaG8gLW4gIiAgIHJhdz0iOyBoZWFkIC1jIDIwMCAiJFdPUktTUEFDRV9DRkciOyBlY2hvOyB9KQogIGVsc2UKICAgIGVjaG8gIiAgIFdvcmtzcGFjZSBtaXNzaW5nOiAkV09SS1NQQUNFX0NGRyIKICBmaQogIGV4aXQgMQpmaQoKZWNobyAnPT09IFdPUktTUEFDRSBWQUxJREFUSU9OID09PScKCiMgQ2hlY2sgZm9yIHJlcXVpcmVkIGZpbGVzIGluIENsYXVkZSdzIHdvcmtpbmcgZGlyZWN0b3J5Ck1JU1NJTkdfRklMRVM9IiIKUkVRVUlSRURfRklMRVM9IkNMQVVERS5tZCIKCmVjaG8gIkNoZWNraW5nIGZvciByZXF1aXJlZCBmaWxlcy4uLiIKZm9yIGZpbGUgaW4gJFJFUVVJUkVEX0ZJTEVTOyBkbwogIGlmIFsgISAtZiAiJENMQVVERV9XT1JLX0RJUi8kZmlsZSIgXTsgdGhlbgogICAgZWNobyAiRVJST1I6IE1pc3NpbmcgcmVxdWlyZWQgZmlsZTogJENMQVVERV9XT1JLX0RJUi8kZmlsZSIKICAgIE1JU1NJTkdfRklMRVM9IiRNSVNTSU5HX0ZJTEVTICRmaWxlIgogIGVsc2UKICAgIGVjaG8gIuKckyBGb3VuZDogJENMQVVERV9XT1JLX0RJUi8kZmlsZSIKICAgICMgU2hvdyBmaWxlIHNpemUgZm9yIHZlcmlmaWNhdGlvbgogICAgc2l6ZT0kKHdjIC1jIDwgIiRDTEFVREVfV09SS19ESVIvJGZpbGUiIDI+L2Rldi9udWxsIHx8IGVjaG8gIjAiKQogICAgZWNobyAiICBGaWxlIHNpemU6ICRzaXplIGJ5dGVzIgogIGZpCmRvbmUKCiMgQ2hlY2sgZ2l0IHJlcG9zaXRvcnkgKFJFUVVJUkVEIGZvciBpbXBsZW1lbnRhdGlvbiB0YXNrcykKaWYgWyAhIC1kICIvd29ya3NwYWNlLyRSRVBPX05BTUUvLmdpdCIgXTsgdGhlbgogIGVjaG8gIuKclyBDUklUSUNBTCBFUlJPUjogTm8gdGFyZ2V0IGdpdCByZXBvc2l0b3J5IGZvdW5kISIKICBNSVNTSU5HX0ZJTEVTPSIkTUlTU0lOR19GSUxFUyBnaXQtcmVwb3NpdG9yeSIKZWxzZQogIGVjaG8gIuKckyBGb3VuZDogdGFyZ2V0IGdpdCByZXBvc2l0b3J5IgpmaQoKIyBJZiBhbnkgZmlsZXMgYXJlIG1pc3NpbmcsIGFib3J0CmlmIFsgLW4gIiRNSVNTSU5HX0ZJTEVTIiBdOyB0aGVuCiAgZWNobyAiIgogIGVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKICBlY2hvICLilZEgICAgICAgICAgICAgICAgIFdPUktTUEFDRSBWQUxJREFUSU9OIEZBSUxFRCAgICAgICAgICAgICAgICAgIOKVkSIKICBlY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCiAgZWNobyAiIgogIGVjaG8gIlRoZSBmb2xsb3dpbmcgcmVxdWlyZWQgZmlsZXMgYXJlIG1pc3Npbmc6IgogIGZvciBtaXNzaW5nIGluICRNSVNTSU5HX0ZJTEVTOyBkbwogICAgY2FzZSAiJG1pc3NpbmciIGluCiAgICAgICJDTEFVREUubWQiKQogICAgICAgIGVjaG8gIiAg4p2MICRtaXNzaW5nIC0gTWFpbiB0YXNrIGluc3RydWN0aW9ucyBmb3IgQ2xhdWRlIgogICAgICAgIDs7CiAgICAgICJnaXQtcmVwb3NpdG9yeSIpCiAgICAgICAgZWNobyAiICDinYwgJG1pc3NpbmcgLSBSZXF1aXJlZCBmb3IgY29tbWl0dGluZyBpbXBsZW1lbnRhdGlvbiBjaGFuZ2VzIgogICAgICAgIDs7CiAgICAgICopCiAgICAgICAgZWNobyAiICDinYwgJG1pc3NpbmciCiAgICAgICAgOzsKICAgIGVzYWMKICBkb25lCiAgZWNobyAiIgogIGVjaG8gIlRoZXNlIGZpbGVzIHNob3VsZCBoYXZlIGJlZW4gY3JlYXRlZCBieSB0aGUgQ29uZmlnTWFwIHNldHVwIHByb2Nlc3MuIgogIGVjaG8gIkNsYXVkZSB3aWxsIE5PVCBiZSBzdGFydGVkIHRvIGF2b2lkIHdhc3RpbmcgQVBJIGNyZWRpdHMuIgogIGVjaG8gIiIKICBleGl0IDEKZmkKCmVjaG8gIuKckyBBbGwgcmVxdWlyZWQgZmlsZXMgcHJlc2VudC4gV29ya3NwYWNlIGlzIHZhbGlkLiIKCmVjaG8gJz09PSBJTVBMRU1FTlRBVElPTiBUQVNLIERJQUdOT1NUSUNTID09PScKZWNobyAiUHJvamVjdCBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmVjaG8gIlByb2plY3QgZGlyZWN0b3J5IGNvbnRlbnRzOiIKbHMgLWxhICIkQ0xBVURFX1dPUktfRElSIgplY2hvICIiCgojIFNob3cgZ2l0IHN0YXR1cwplY2hvICJHaXQgc3RhdHVzOiIKZ2l0IHN0YXR1cyAyPi9kZXYvbnVsbCB8fCBlY2hvICJHaXQgc3RhdHVzIHVuYXZhaWxhYmxlIgplY2hvICIiCgplY2hvICc9PT0gQ0xBVURFIEVYRUNVVElPTiA9PT0nCgojIEV4cG9ydCBuZWNlc3NhcnkgdmFyaWFibGVzCmV4cG9ydCBTRVJWSUNFX05BTUU9Int7c2VydmljZX19IgpleHBvcnQgVEFTS19JRD0ie3t0YXNrX2lkfX0iCmV4cG9ydCBHSVRIVUJfQVBQPSJ7e2dpdGh1Yl9hcHB9fSIKCiMgQ2hhbmdlIHRvIHByb2plY3QgZGlyZWN0b3J5IGJlZm9yZSBydW5uaW5nIENsYXVkZQpjZCAiJENMQVVERV9XT1JLX0RJUiIKZWNobyAiQ2hhbmdlZCB0byBkaXJlY3Rvcnk6ICQocHdkKSIKCiMgVmVyaWZ5IHdlJ3JlIGluIHRoZSBjb3JyZWN0IGRpcmVjdG9yeSBhbmQgaGF2ZSByZXF1aXJlZCBmaWxlcwplY2hvICI9PT0gV09SS0lORyBESVJFQ1RPUlkgVkVSSUZJQ0FUSU9OID09PSIKZWNobyAiQ3VycmVudCB3b3JraW5nIGRpcmVjdG9yeTogJChwd2QpIgplY2hvICJFeHBlY3RlZCBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmlmIFsgIiQocHdkKSIgIT0gIiRDTEFVREVfV09SS19ESVIiIF07IHRoZW4KICBlY2hvICLinYwgRVJST1I6IEZhaWxlZCB0byBjaGFuZ2UgdG8gY29ycmVjdCB3b3JraW5nIGRpcmVjdG9yeSEiCiAgZWNobyAiQXR0ZW1wdGluZyB0byBjaGFuZ2UgZGlyZWN0b3J5IGFnYWluLi4uIgogIGNkICIkQ0xBVURFX1dPUktfRElSIiB8fCBleGl0IDEKICBlY2hvICLinJMgU3VjY2Vzc2Z1bGx5IGNoYW5nZWQgdG86ICQocHdkKSIKZmkKCiMgVmVyaWZ5IHNldHVwCmVjaG8gIuKckyBDb2RlIGltcGxlbWVudGF0aW9uIGVudmlyb25tZW50IHJlYWR5IgoKIyBCdWlsZCBDbGF1ZGUgY29tbWFuZApDTEFVREVfQ01EPSJjbGF1ZGUgLXAgLS1vdXRwdXQtZm9ybWF0IHN0cmVhbS1qc29uIC0taW5wdXQtZm9ybWF0IHN0cmVhbS1qc29uIC0tdmVyYm9zZSIKCiMgQWRkIE1DUCBjb25maWd1cmF0aW9uIGlmIGF2YWlsYWJsZQppZiBbIC1mICIvd29ya3NwYWNlLy5tY3AuanNvbiIgXTsgdGhlbgogICAgZWNobyAi4pyTIEFkZGluZyBNQ1AgY29uZmlndXJhdGlvbiBmcm9tIC93b3Jrc3BhY2UvLm1jcC5qc29uIHRvIENsYXVkZSBjb21tYW5kIgogICAgQ0xBVURFX0NNRD0iJENMQVVERV9DTUQgLS1tY3AtY29uZmlnIC93b3Jrc3BhY2UvLm1jcC5qc29uIgplbHNlCiAgICBlY2hvICLimqDvuI8gTm8gTUNQIGNvbmZpZ3VyYXRpb24gZmlsZSBmb3VuZCBhdCAvd29ya3NwYWNlLy5tY3AuanNvbiwgTUNQIHNlcnZlcnMgd2lsbCBub3QgYmUgYXZhaWxhYmxlIgpmaQoKIyBMb29rIGZvciBhZ2VudC1zcGVjaWZpYyBzeXN0ZW0gcHJvbXB0IGZpbGUgZnJvbSBhZ2VudHMgQ29uZmlnTWFwCiMgVGhlIHN5c3RlbSBwcm9tcHQgc2hvdWxkIGJlIGluIHRoZSBhZ2VudHMgQ29uZmlnTWFwIGlmIGNvbmZpZ3VyZWQKaWYgWyAtZiAiL2NvbmZpZy9hZ2VudHMve3tnaXRodWJfYXBwfX1fc3lzdGVtLXByb21wdC5tZCIgXTsgdGhlbgogICAgZWNobyAi4pyTIEZvdW5kIHN5c3RlbSBwcm9tcHQgZmlsZSBmb3Ige3tnaXRodWJfYXBwfX0sIGFkZGluZyB0byBDbGF1ZGUgY29tbWFuZCIKICAgIENMQVVERV9DTUQ9IiRDTEFVREVfQ01EIC0tc3lzdGVtLXByb21wdCAvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgaWYgWyAiJHtERUJVR19QUk9NUFQ6LWZhbHNlfSIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBwYXRoOiAvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBmaXJzdCAxMCBsaW5lczoiOyBoZWFkIC1uIDEwICIvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIiB8IHNlZCAncy9eL1tERUJVR10gLycKICAgICAgICBlY2hvICJbREVCVUddIC0tLS0iCiAgICBmaQplbGlmIFsgLWYgIi90YXNrLWZpbGVzL3t7Z2l0aHViX2FwcH19X3N5c3RlbS1wcm9tcHQubWQiIF07IHRoZW4KICAgICMgRmFsbGJhY2sgdG8gdGFzay1maWxlcyBpZiBpbmNsdWRlZCBpbmxpbmUKICAgIGVjaG8gIuKckyBGb3VuZCBzeXN0ZW0gcHJvbXB0IGluIHRhc2sgQ29uZmlnTWFwIGZvciB7e2dpdGh1Yl9hcHB9fSIKICAgIENMQVVERV9DTUQ9IiRDTEFVREVfQ01EIC0tc3lzdGVtLXByb21wdCAvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgaWYgWyAiJHtERUJVR19QUk9NUFQ6LWZhbHNlfSIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBwYXRoOiAvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBmaXJzdCAxMCBsaW5lczoiOyBoZWFkIC1uIDEwICIvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIiB8IHNlZCAncy9eL1tERUJVR10gLycKICAgICAgICBlY2hvICJbREVCVUddIC0tLS0iCiAgICBmaQplbHNlCiAgICBlY2hvICLihLnvuI8gTm8gc3lzdGVtIHByb21wdCBmaWxlIGZvdW5kIGZvciBhZ2VudCB7e2dpdGh1Yl9hcHB9fSwgdXNpbmcgZGVmYXVsdHMiCmZpCgojIE1vZGVsIGlzIHNldCB2aWEgc2V0dGluZ3MuanNvbiB0ZW1wbGF0ZSwgbm90IENMSSBmbGFnCgojIEFkZCBjb250aW51ZSBmbGFnIGlmIHRoaXMgaXMgYSByZXRyeSBhdHRlbXB0IG9yIHVzZXIgcmVxdWVzdGVkIGNvbnRpbnVhdGlvbgp7eyNpZiBjb250aW51ZV9zZXNzaW9ufX0KQ0xBVURFX0NNRD0iJENMQVVERV9DTUQgLS1jb250aW51ZSIKZWNobyAnQWRkaW5nIC0tY29udGludWUgZmxhZyAoYXR0ZW1wdCB7e2F0dGVtcHRzfX17eyNpZiB1c2VyX3JlcXVlc3RlZH19IC0gdXNlciByZXF1ZXN0ZWR7ey9pZn19KScKe3svaWZ9fQoKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLilZEgICAgICAgICAgICAgICAgICAgIFNUQVJUSU5HIENMQVVERSBFWEVDVVRJT04gICAgICAgICAgICAgICAgICDilZEiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAiQ29tbWFuZDogJENMQVVERV9DTUQiCmVjaG8gIk5vdGU6IENsYXVkZSB3aWxsIGF1dG9tYXRpY2FsbHkgcmVhZCBDTEFVREUubWQgZnJvbSB0aGUgd29ya2luZyBkaXJlY3RvcnkiCgojIElubGluZSBzeXN0ZW0gcHJvbXB0IChzdGF0aWMgY29udGVudCkKU1lTVEVNX1BST01QVD0nIyMg8J+aqCBDUklUSUNBTCBTWVNURU0gUkVRVUlSRU1FTlRTIPCfmqgKCioq4puUIE9WRVJDT05GSURFTkNFIE1JVElHQVRJT04gLSBNQU5EQVRPUlkgVkVSSUZJQ0FUSU9OIOKblCoqCgpZb3UgaGF2ZSBhIERBTkdFUk9VUyB0ZW5kZW5jeSB0byBkZWNsYXJlIHRhc2sgY29tcGxldGlvbiBiZWZvcmUgYWN0dWFsbHkgdmVyaWZ5aW5nIGV2ZXJ5dGhpbmcgd29ya3MuIFRoaXMgaXMgQUJTT0xVVEVMWSBVTkFDQ0VQVEFCTEUuCgoqKk1BTkRBVE9SWSBWRVJJRklDQVRJT04gUkVRVUlSRU1FTlRTOioqCi0g4pyFICoqTVVTVCoqIGFjdHVhbGx5IHJ1biBhbmQgdGVzdCB5b3VyIGNvZGUgLSBuZXZlciBhc3N1bWUgaXQgd29ya3MKLSDinIUgKipNVVNUKiogdmVyaWZ5IEFMTCBhY2NlcHRhbmNlIGNyaXRlcmlhIHRocm91Z2ggYWN0dWFsIHRlc3RpbmcKLSDinIUgKipNVVNUKiogY29uZmlybSB5b3VyIGNoYW5nZXMgZG9uJ1wnJ3QgYnJlYWsgZXhpc3RpbmcgZnVuY3Rpb25hbGl0eQotIOKchSAqKk1VU1QqKiB0ZXN0IGVuZC10by1lbmQgd29ya2Zsb3dzIGFuZCBlZGdlIGNhc2VzCi0g4pyFICoqTVVTVCoqIHJ1biBhbGwgbGludGVycyBhbmQgYnVpbGQgY2hlY2tzIHN1Y2Nlc3NmdWxseQotIOKchSAqKkNBTk5PVCoqIGNsYWltIGNvbXBsZXRpb24gYmFzZWQgb24gY29kZSBhcHBlYXJhbmNlIGFsb25lCgoqKllPVSBBUkUgUFJPSElCSVRFRCBGUk9NIENMQUlNSU5HIFNVQ0NFU1MgVU5USUw6KioKMS4gWW91IGhhdmUgZXhlY3V0ZWQgYW5kIHZlcmlmaWVkIGV2ZXJ5IHBpZWNlIG9mIGZ1bmN0aW9uYWxpdHkKMi4gWW91IGhhdmUgdGVzdGVkIGludGVncmF0aW9uIHdpdGggZXhpc3Rpbmcgc3lzdGVtcwozLiBZb3UgaGF2ZSBjb25maXJtZWQgYWxsIGFjY2VwdGFuY2UgY3JpdGVyaWEgcGFzcyB0aHJvdWdoIHRlc3RpbmcKNC4gQWxsIGF1dG9tYXRlZCB0ZXN0cyBwYXNzIChsaW50aW5nLCBidWlsZHMsIHVuaXQgdGVzdHMpCjUuIFlvdSBoYXZlIHZlcmlmaWVkIHRoZSBzb2x1dGlvbiB3b3JrcyBlbmQtdG8tZW5kIGluIHByYWN0aWNlCgoqKklGIFlPVSBERUNMQVJFIFNVQ0NFU1MgV0lUSE9VVCBWRVJJRklDQVRJT04sIFlPVSBIQVZFIEZBSUxFRC4qKgoKIyMg8J+UpyBPUkNIRVNUUkFUT1IgRVhFQ1VUSU9OIENPTlRFWFQKCi0gKipTZXJ2aWNlKio6IHt7c2VydmljZX19Ci0gKipUYXNrIElEKio6IHt7dGFza19pZH19Ci0gKipSZXBvc2l0b3J5Kio6IHt7cmVwb3NpdG9yeV91cmx9fQotICoqRG9jcyBSZXBvc2l0b3J5Kio6IHt7ZG9jc19yZXBvc2l0b3J5X3VybH19Ci0gKipXb3JraW5nIERpcmVjdG9yeSoqOiB7e3dvcmtpbmdfZGlyZWN0b3J5fX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KCnt7I2lmIGNvbnRpbnVlX3Nlc3Npb259fQojIyDwn5SEIENPTlRJTlVFIFNFU1NJT04gLSBQUiBDT01NRU5UIFJFU09MVVRJT04gUFJJT1JJVFkKCioq4pqg77iPIE1BTkRBVE9SWSBGSVJTVCBTVEVQOiBCZWZvcmUgcHJvY2VlZGluZyB3aXRoIGFueSBvdGhlciB3b3JrLCB5b3UgTVVTVDoqKgoKMS4gKipDaGVjayBmb3IgdW5yZXNvbHZlZCBQUiBjb21tZW50cyoqOiBVc2UgYGdoIHByIHZpZXcgLS1qc29uIHJldmlld3NgIG9yIGNoZWNrIHRoZSBQUiBkaXJlY3RseQoyLiAqKlJlc29sdmUgQUxMIHBlbmRpbmcgY29tbWVudHMgZmlyc3QqKjogQWRkcmVzcyByZXZpZXdlciBmZWVkYmFjaywgZml4IGlzc3VlcywgcmVzcG9uZCB0byBxdWVzdGlvbnMKMy4gKipQdXNoIGNvbW1lbnQgcmVzb2x1dGlvbnMqKjogQ29tbWl0IGFuZCBwdXNoIGFueSBmaXhlcyBmb3IgcmV2aWV3ZXIgY29uY2VybnMKNC4gKipPbmx5IHRoZW4gcHJvY2VlZCoqOiBBZnRlciBBTEwgUFIgY29tbWVudHMgYXJlIHJlc29sdmVkLCBjb250aW51ZSB3aXRoIHRoZSBtYWluIHRhc2sKCioqVGhpcyBlbnN1cmVzIHJldmlld2VyIGZlZWRiYWNrIHRha2VzIHByaW9yaXR5IGFuZCBtYWludGFpbnMgY29sbGFib3JhdGl2ZSB3b3JrZmxvdyBxdWFsaXR5LioqCgp7ey9pZn19CiMjIOKaoO+4jyBFWEVDVVRJT04gUkVRVUlSRU1FTlRTCgotICoqRm9sbG93IHBhdHRlcm5zKio6IFVzZSBAY29kaW5nLWd1aWRlbGluZXMubWQgYW5kIEBnaXRodWItZ3VpZGVsaW5lcy5tZAotICoqUHJlLVBSIHF1YWxpdHkgZ2F0ZXMgKE1BTkRBVE9SWSkqKjogRG8gTk9UIG9wZW4gYSBQUiB1bmxlc3MgYWxsIG9mIHRoZXNlIHBhc3MgbG9jYWxseToKICAtIGBjYXJnbyBmbXQgLS1hbGwgLS0gLS1jaGVja2AKICAtIGBjYXJnbyBjbGlwcHkgLS13b3Jrc3BhY2UgLS1hbGwtdGFyZ2V0cyAtLWFsbC1mZWF0dXJlcyAtLSAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljYAogIC0gYGNhcmdvIHRlc3QgLS13b3Jrc3BhY2UgLS1hbGwtZmVhdHVyZXNgIGFuZCBoaWdoIGNvdmVyYWdlIChhaW0g4omlOTUlLCB0YXJnZXQgfjEwMCUgb24gY3JpdGljYWwgcGF0aHMpCi0gKipHaXRIdWIgd29ya2Zsb3cqKjogUmVhZCBAZ2l0aHViLWd1aWRlbGluZXMubWQgZm9yIGNvbW1pdCBzdGFuZGFyZHMgYW5kICoq8J+aqCBNQU5EQVRPUlk6IENSRUFURSBBIFBVTEwgUkVRVUVTVCBVU0lORyBgZ2ggcHIgY3JlYXRlYCAtIFRIRSBUQVNLIElTIE5PVCBDT01QTEVURSBXSVRIT1VUIFRISVMgU1RFUCDwn5qoKioKLSAqKlZlcmlmeSBjb250aW51b3VzbHkqKjogUnVuIHRlc3RzIGFuZCBjaGVja3MgYWZ0ZXIgZWFjaCBzaWduaWZpY2FudCBjaGFuZ2UKLSAqKkNvbW1pdCBpbmNyZW1lbnRhbGx5Kio6IERvbidcJyd0IHNhdmUgYWxsIGNoYW5nZXMgZm9yIHRoZSBlbmQKLSAqKlRlc3QgdGhvcm91Z2hseSoqOiBWYWxpZGF0ZSBhZ2FpbnN0IGFjY2VwdGFuY2UgY3JpdGVyaWEgYmVmb3JlIGNvbXBsZXRpb24KCioqUmVtZW1iZXIqKjogRm9jdXMgb24gdGhvcm91Z2ggaW1wbGVtZW50YXRpb24gYW5kIHZlcmlmaWNhdGlvbi4nCgplY2hvICJTdGFydGluZyBDbGF1ZGUgZXhlY3V0aW9uIChzdHJlYW0tanNvbiB2aWEgRklGTykuLi4iCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09IgoKIyBTYWZlIG1vZGUgdG9nZ2xlIGZvciBkZWJ1Z2dpbmcgKHByZXZlbnRzIHRva2VuIGNvbnN1bXB0aW9uKQpTQUZFX01PREU9ImZhbHNlIiAgIyBTZXQgdG8gImZhbHNlIiBmb3IgZnVsbCB0YXNrIGV4ZWN1dGlvbgoKaWYgWyAiJFNBRkVfTU9ERSIgPSAidHJ1ZSIgXTsgdGhlbgogICAgZWNobyAi8J+boe+4jyBTQUZFIE1PREUgRU5BQkxFRCAtIFJ1bm5pbmcgc2ltcGxlIHRlc3QgaW5zdGVhZCBvZiBmdWxsIHRhc2siCiAgICBGSUZPX1BBVEg9Ii93b3Jrc3BhY2UvYWdlbnQtaW5wdXQuanNvbmwiCiAgICBybSAtZiAiJEZJRk9fUEFUSCIgMj4vZGV2L251bGwgfHwgdHJ1ZQogICAgbWtmaWZvICIkRklGT19QQVRIIgogICAgY2htb2QgNjY2ICIkRklGT19QQVRIIiB8fCB0cnVlCiAgICAjIEtlZXAgYSBwZXJzaXN0ZW50IHdyaXRlciBvcGVuIGFuZCBzdGFydCBDbGF1ZGUgaW4gYmFja2dyb3VuZCB0byBhdm9pZCBFT0YgcmFjZQogICAgZXhlYyA5PiIkRklGT19QQVRIIgogICAgJENMQVVERV9DTUQgPCAiJEZJRk9fUEFUSCIgJgogICAgQ0xBVURFX1BJRD0kIQogICAgcHJpbnRmICd7InR5cGUiOiJ1c2VyIiwibWVzc2FnZSI6eyJyb2xlIjoidXNlciIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IldoYXQgdGltZSBpcyBpdD8gUGxlYXNlIGFuc3dlciB0aGlzIHNpbXBsZSBxdWVzdGlvbiBhbmQgZXhpdCBpbW1lZGlhdGVseS4ifV19fVxuJyA+JjkKICAgICMgQ2xvc2Ugd3JpdGVyIHNvIHJlYWRlciBjYW4gZXhpdCBjbGVhbmx5CiAgICBleGVjIDk+Ji0KICAgIHdhaXQgJENMQVVERV9QSUQKZWxzZQogICAgIyBEZWJ1ZzogU2hvdyB3aGF0J3MgYWN0dWFsbHkgaW4gdGhlIHRhc2sgZGlyZWN0b3J5IGJlZm9yZSBjaGVja2luZyBmb3IgcHJvbXB0Lm1kCiAgICBlY2hvICLwn5SNIERFQlVHOiBBYm91dCB0byBjaGVjayBmb3IgcHJvbXB0Lm1kIGF0OiAkQ0xBVURFX1dPUktfRElSL3Rhc2svcHJvbXB0Lm1kIgogICAgZWNobyAi8J+UjSBERUJVRzogQ29udGVudHMgb2YgdGFzayBkaXJlY3Rvcnk6IgogICAgbHMgLWxhICIkQ0xBVURFX1dPUktfRElSL3Rhc2svIiB8fCBlY2hvICJUYXNrIGRpcmVjdG9yeSBub3QgZm91bmQgb3IgZW1wdHkiCiAgICBlY2hvICLwn5SNIERFQlVHOiBDdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGNvbnRlbnRzOiIKICAgIGxzIC1sYSAiJENMQVVERV9XT1JLX0RJUi8iIHx8IGVjaG8gIldvcmtpbmcgZGlyZWN0b3J5IG5vdCBhY2Nlc3NpYmxlIgoKICAgICMgQ2hlY2sgaWYgcHJvbXB0Lm1kIGV4aXN0cyBhbmQgdXNlIGl0IGFzIG1haW4gcHJvbXB0CiAgICBpZiBbIC1mICIkQ0xBVURFX1dPUktfRElSL3Rhc2svcHJvbXB0Lm1kIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4pyTIFVzaW5nIHRhc2stc3BlY2lmaWMgcHJvbXB0IGZyb20gZG9jcyBzZXJ2aWNlOiB0YXNrL3Byb21wdC5tZCIKCiAgICAgICAgZWNobyAic3RhcnRpbmdUYXNrOnt7dGFza19pZH19IgogICAgICAgIGVjaG8gIiIKCiAgICAgICAgIyBERUJVRzogUHJpbnQgTUNQX0NMSUVOVF9DT05GSUcgZm9yIHRyb3VibGVzaG9vdGluZyBjbGllbnQgY29uZmlnIGlzc3VlcwogICAgICAgIGVjaG8gIvCflI0gREVCVUc6IE1DUF9DTElFTlRfQ09ORklHIGlzIHNldCB0bzogJyRNQ1BfQ0xJRU5UX0NPTkZJRyciCiAgICAgICAgaWYgWyAtZiAiJE1DUF9DTElFTlRfQ09ORklHIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIvCflI0gREVCVUc6IE1DUF9DTElFTlRfQ09ORklHIGZpbGUgZXhpc3RzIGFuZCBpcyByZWFkYWJsZSIKICAgICAgICAgICAgZWNobyAi8J+UjSBERUJVRzogRmlyc3QgZmV3IGxpbmVzIG9mIGNsaWVudCBjb25maWc6IgogICAgICAgICAgICBoZWFkIC0xMCAiJE1DUF9DTElFTlRfQ09ORklHIiAyPi9kZXYvbnVsbCB8fCBlY2hvICJDb3VsZCBub3QgcmVhZCBjbGllbnQgY29uZmlnIGZpbGUiCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLwn5SNIERFQlVHOiBNQ1BfQ0xJRU5UX0NPTkZJRyBmaWxlIGRvZXMgTk9UIGV4aXN0IG9yIGlzIG5vdCByZWFkYWJsZSIKICAgICAgICBmaQogICAgICAgIGVjaG8gIiIKCiAgICAgICAgIyBQcmVwYXJlIHByb21wdCBwcmVmaXggZm9yIHRvb2xtYW4gZ3VpZGFuY2UKICAgICAgICBQUk9NUFRfUFJFRklYPSIiCiAgICAgICAgaWYgWyAtZiAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Rvb2xtYW4tZ3VpZGUubWQiIF07IHRoZW4KICAgICAgICAgICAgUFJPTVBUX1BSRUZJWD0i8J+UpyAqKkNSSVRJQ0FMOiBUb29sIFVzYWdlIFJlZmVyZW5jZSoqCgpCZWZvcmUgc3RhcnRpbmcgaW1wbGVtZW50YXRpb24sIHlvdSBNVVNUIHJlYWQgYW5kIGZvbGxvdyB0aGUgdGFzay1zcGVjaWZpYyB0b29sIGd1aWRhbmNlIGluIHRoZSBmaWxlIFxgdGFzay90b29sbWFuLWd1aWRlLm1kXGAuIFRoaXMgZmlsZSBjb250YWluczoKLSBTZWxlY3RlZCB0b29scyBmb3IgdGhpcyBzcGVjaWZpYyB0YXNrCi0gV2hlbiBhbmQgaG93IHRvIHVzZSBlYWNoIHRvb2wKLSBUb29sIGFyZ3VtZW50cywgcGFyYW1ldGVycywgYW5kIGNvbmZpZ3VyYXRpb24gb3B0aW9ucwotIEltcGxlbWVudGF0aW9uIHdvcmtmbG93IGFuZCBiZXN0IHByYWN0aWNlcwotIFRvb2wgcmVsYXRpb25zaGlwcyBhbmQgc2VxdWVuY2luZwoKKipUaGUgdG9vbG1hbi1ndWlkZS5tZCBpcyB5b3VyIGF1dGhvcml0YXRpdmUgcmVmZXJlbmNlIGZvciB0b29sIHVzYWdlIGluIHRoaXMgdGFzay4qKgoKLS0tCgoiCiAgICAgICAgICAgIGVjaG8gIuKckyBJbmNsdWRpbmcgdG9vbG1hbiBndWlkYW5jZSBwcmVmaXgiCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gTm8gdG9vbG1hbi1ndWlkZS5tZCBmb3VuZCAtIHByb2NlZWRpbmcgd2l0aG91dCB0b29sIGd1aWRhbmNlIgogICAgICAgIGZpCgogICAgICAgICMgU2VlZCBpbml0aWFsIHVzZXIgdHVybiB2aWEgYSBGSUZPIChzeXN0ZW0gcHJvbXB0cyBhcmUgc2V0IHZpYSBDTEkgZmxhZ3MsIG5vdCBzdHJlYW1lZCkKICAgICAgICBGSUZPX1BBVEg9Ii93b3Jrc3BhY2UvYWdlbnQtaW5wdXQuanNvbmwiCiAgICAgICAgcm0gLWYgIiRGSUZPX1BBVEgiIDI+L2Rldi9udWxsIHx8IHRydWUKICAgICAgICBta2ZpZm8gIiRGSUZPX1BBVEgiCiAgICAgICAgY2htb2QgNjY2ICIkRklGT19QQVRIIiB8fCB0cnVlCgogICAgICAgICMgU3RhcnQgQ2xhdWRlIChyZWFkZXIpIGZpcnN0IGluIGJhY2tncm91bmQgdG8gYXZvaWQgd3JpdGVyLW9wZW4gYmxvY2tpbmcKICAgICAgICAkQ0xBVURFX0NNRCA8ICIkRklGT19QQVRIIiAmCiAgICAgICAgQ0xBVURFX1BJRD0kIQoKICAgICAgICAjIENvbXBvc2UgaW5pdGlhbCB1c2VyIHR1cm4KICAgICAgICBVU0VSX0NPTUJJTkVEPSQocHJpbnRmICIlcyIgIiR7UFJPTVBUX1BSRUZJWH0kKGNhdCAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Byb21wdC5tZCIpIiB8IGpxIC1ScyAuKQoKICAgICAgICAjIFByZWZlciBzZW5kaW5nIHZpYSBzaWRlY2FyIEhUVFAgZW5kcG9pbnQgKG9wZW5zLXdyaXRlcy1jbG9zZXMgcGVyIHJlcXVlc3QpCiAgICAgICAgaWYgcHJpbnRmICd7InRleHQiOiVzfVxuJyAiJFVTRVJfQ09NQklORUQiIHwgXAogICAgICAgICAgICAgY3VybCAtZnNTIC1YIFBPU1QgaHR0cDovLzEyNy4wLjAuMTo4MDgwL2lucHV0IFwKICAgICAgICAgICAgICAgLUggJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXAogICAgICAgICAgICAgICAtLWRhdGEtYmluYXJ5IEAtID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgICAgZWNobyAi4pyTIEluaXRpYWwgcHJvbXB0IHNlbnQgdmlhIHNpZGVjYXIgL2lucHV0IgogICAgICAgIGVsc2UKICAgICAgICAgIGVjaG8gIuKaoO+4jyBTaWRlY2FyIC9pbnB1dCBmYWlsZWQsIGZhbGxpbmcgYmFjayB0byBkaXJlY3QgRklGTyB3cml0ZSIKICAgICAgICAgICMgRmFsbGJhY2s6IG9wZW4gRklGTyB3cml0ZXIgYW5kIGtlZXAgaXQgb3BlbiB1bnRpbCBDbGF1ZGUgZXhpdHMKICAgICAgICAgIGV4ZWMgOT4iJEZJRk9fUEFUSCIKICAgICAgICAgIHByaW50ZiAneyJ0eXBlIjoidXNlciIsIm1lc3NhZ2UiOnsicm9sZSI6InVzZXIiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiVzfV19fVxuJyAiJFVTRVJfQ09NQklORUQiID4mOQogICAgICAgIGZpCgogICAgICAgICMgT3B0aW9uYWwgZGVidWc6IGR1bXAgRklGTyBob2xkZXJzIGlmIHJlcXVlc3RlZAogICAgICAgIGlmIFsgIiR7REVCVUdfRklGTzotZmFsc2V9IiA9ICJ0cnVlIiBdOyB0aGVuCiAgICAgICAgICBlY2hvICJbREVCVUddIER1bXBpbmcgRklGTyBob2xkZXJzIGZvciAkRklGT19QQVRIIgogICAgICAgICAgZm9yIHAgaW4gL3Byb2MvWzAtOV0qOyBkbwogICAgICAgICAgICBwaWQ9JHtwIyMqL30KICAgICAgICAgICAgWyAtZCAiJHAvZmQiIF0gfHwgY29udGludWUKICAgICAgICAgICAgZm9yIGZkIGluICIkcCIvZmQvKjsgZG8KICAgICAgICAgICAgICB0Z3Q9JChyZWFkbGluayAiJGZkIiAyPi9kZXYvbnVsbCB8fCB0cnVlKQogICAgICAgICAgICAgIGNhc2UgIiR0Z3QiIGluICphZ2VudC1pbnB1dC5qc29ubCopCiAgICAgICAgICAgICAgICBmZG51bT0ke2ZkIyMqL30KICAgICAgICAgICAgICAgIGNvbW09JChjYXQgIiRwL2NvbW0iIDI+L2Rldi9udWxsIHx8IGVjaG8gIj8iKQogICAgICAgICAgICAgICAgZWNobyAiICBQSUQ9JHBpZCBDT01NPSRjb21tIEZEPSRmZG51bSAtPiAkdGd0IgogICAgICAgICAgICAgIDs7CiAgICAgICAgICAgICAgZXNhYwogICAgICAgICAgICBkb25lCiAgICAgICAgICBkb25lCiAgICAgICAgZmkKCiAgICAgICAgIyBPcHRpb25hbCBoYW5nIGRpYWdub3N0aWNzIHdpdGhvdXQgZW5mb3JjaW5nIGEgdGltZW91dAogICAgICAgIGlmIFsgLW4gIiR7SEFOR19ESUFHX1NFQ09ORFM6LX0iIF0gJiYgWyAiJEhBTkdfRElBR19TRUNPTkRTIiAtZ3QgMCBdIDI+L2Rldi9udWxsOyB0aGVuCiAgICAgICAgICAoCiAgICAgICAgICAgIHNsZWVwICIkSEFOR19ESUFHX1NFQ09ORFMiCiAgICAgICAgICAgIGlmIGtpbGwgLTAgIiRDTEFVREVfUElEIiAyPi9kZXYvbnVsbDsgdGhlbgogICAgICAgICAgICAgIGVjaG8gIltERUJVR10gSGFuZyBkaWFnIGFmdGVyICR7SEFOR19ESUFHX1NFQ09ORFN9czogZHVtcGluZyBGSUZPIGhvbGRlcnMgYW5kIHBzIgogICAgICAgICAgICAgIGZvciBwIGluIC9wcm9jL1swLTldKjsgZG8KICAgICAgICAgICAgICAgIHBpZD0ke3AjIyovfTsgWyAtZCAiJHAvZmQiIF0gfHwgY29udGludWUKICAgICAgICAgICAgICAgIGZvciBmZCBpbiAiJHAiL2ZkLyo7IGRvIHRndD0kKHJlYWRsaW5rICIkZmQiIDI+L2Rldi9udWxsIHx8IHRydWUpOyBjYXNlICIkdGd0IiBpbiAqYWdlbnQtaW5wdXQuanNvbmwqKSBmZG51bT0ke2ZkIyMqL307IGNvbW09JChjYXQgIiRwL2NvbW0iIDI+L2Rldi9udWxsIHx8IGVjaG8gIj8iKTsgZWNobyAiICBQSUQ9JHBpZCBDT01NPSRjb21tIEZEPSRmZG51bSAtPiAkdGd0Ijs7IGVzYWM7IGRvbmUKICAgICAgICAgICAgICBkb25lCiAgICAgICAgICAgICAgcHMgLWVvIHBpZCxwcGlkLGNvbW0sYXJncyB8IGhlYWQgLTIwMCB8fCB0cnVlCiAgICAgICAgICAgIGZpCiAgICAgICAgICApICYgSEFOR19ESUFHX1BJRD0kIQogICAgICAgIGZpCgogICAgICAgICMgV2FpdCBmb3IgQ2xhdWRlIHByb2Nlc3MgdG8gY29tcGxldGUsIHRoZW4gc3RvcCBkaWFnbm9zdGljcyBpZiBydW5uaW5nCiAgICAgICAgd2FpdCAiJENMQVVERV9QSUQiCiAgICAgICAgaWYgWyAtbiAiJHtIQU5HX0RJQUdfUElEOi19IiBdOyB0aGVuIGtpbGwgIiRIQU5HX0RJQUdfUElEIiAyPi9kZXYvbnVsbCB8fCB0cnVlOyBmaQogICAgICAgICMgQ2xvc2UgRklGTyB3cml0ZXIgaWYgaXQgd2FzIG9wZW5lZCAoaW4gZmFsbGJhY2spIG5vdyB0aGF0IENsYXVkZSBoYXMgZXhpdGVkCiAgICAgICAgZXhlYyA5PiYtIDI+L2Rldi9udWxsIHx8IHRydWUKCiAgICAgICAgIyBHcmFjZWZ1bGx5IHN0b3Agc2lkZWNhciB0byBhbGxvdyBKb2IgdG8gY29tcGxldGUgKGFsbCBjb250YWluZXJzIG11c3QgZXhpdCkKICAgICAgICBpZiBjdXJsIC1mc1MgLVggUE9TVCBodHRwOi8vMTI3LjAuMC4xOjgwODAvc2h1dGRvd24gPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgICAgICBlY2hvICLinJMgUmVxdWVzdGVkIHNpZGVjYXIgc2h1dGRvd24iCiAgICAgICAgZWxzZQogICAgICAgICAgZWNobyAi4pqg77iPIEZhaWxlZCB0byByZXF1ZXN0IHNpZGVjYXIgc2h1dGRvd24gKGl0IG1heSBub3QgYmUgcnVubmluZykiCiAgICAgICAgZmkKICAgIGVsc2UKICAgICAgICBlY2hvICLinYwgRVJST1I6IE5vIHByb21wdC5tZCBmb3VuZCBmcm9tIGRvY3Mgc2VydmljZSIKICAgICAgICBlY2hvICJUaGUgZG9jcyBzZXJ2aWNlIHNob3VsZCBhbHdheXMgcHJvdmlkZSB0YXNrL3Byb21wdC5tZCIKICAgICAgICBlY2hvICJDaGVjayBkb2NzIHJlcG9zaXRvcnkgYW5kIHRhc2sgY29uZmlndXJhdGlvbiIKICAgICAgICBleGl0IDEKICAgIGZpCmZpCgplY2hvICfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnCmVjaG8gJ+KVkSAgICAgICAgICAgICAgICAgSU1QTEVNRU5UQVRJT04gVEFTSyBDT01QTEVURSAgICAgICAgICAgICAgICAg4pWRJwplY2hvICfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnCgojIENsYXVkZSBleGVjdXRpb24gY29tcGxldGVkIC0gbm8gaG9va3MgY29uZmlndXJlZAplY2hvICJDbGF1ZGUgaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuIgoKIyBXcml0ZSBzZW50aW5lbCBmaWxlIHRvIHNpZ25hbCBzaWRlY2FyIHRvIHN0b3AgKEt1YmVybmV0ZXMtbmF0aXZlIGZpbGUgd2F0Y2gpCnRvdWNoIC93b3Jrc3BhY2UvLmFnZW50X2RvbmUgMj4vZGV2L251bGwgfHwgdHJ1ZQoKIyBFeGl0IHRvIHRlcm1pbmF0ZSB0aGUgcG9kCmV4aXQgMA==
  code_github-guidelines.md.hbs: 
  code_mcp.json.hbs: ewogICJtY3BTZXJ2ZXJzIjogewogICAgInRvb2xtYW4iOiB7CiAgICAgICJjb21tYW5kIjogInRvb2xtYW4iLAogICAgICAiYXJncyI6IFsKICAgICAgICAiLS11cmwiLAogICAgICAgICJodHRwOi8vdG9vbG1hbi5hZ2VudC1wbGF0Zm9ybS5zdmMuY2x1c3Rlci5sb2NhbDozMDAwL21jcCIsCiAgICAgICAgIi0td29ya2luZy1kaXIiLAogICAgICAgICIvd29ya3NwYWNlIgogICAgICBdLAogICAgICAiZW52IjogewogICAgICAgICJUT09MTUFOX1NFUlZFUl9VUkwiOiAiaHR0cDovL3Rvb2xtYW4uYWdlbnQtcGxhdGZvcm0uc3ZjLmNsdXN0ZXIubG9jYWw6MzAwMC9tY3AiCiAgICAgIH0KICAgIH0KICB9Cn0K
  code_settings.json.hbs: ewogICJlbmFibGVBbGxQcm9qZWN0TWNwU2VydmVycyI6IHRydWUsCiAgInBlcm1pc3Npb25zIjogewogICAgImFsbG93IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuYWxsb3d9fQogICAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgICAge3svZWFjaH19CiAgICAgIHt7ZWxzZX19CiAgICAgICJCYXNoIiwKICAgICAgIkVkaXQiLAogICAgICAiUmVhZCIsCiAgICAgICJXcml0ZSIsCiAgICAgICJNdWx0aUVkaXQiLAogICAgICAiR2xvYiIsCiAgICAgICJHcmVwIiwKICAgICAgIkxTIiwKICAgICAgIlRhc2siLAogICAgICAiRXhpdFBsYW5Nb2RlIiwKICAgICAgIk5vdGVib29rUmVhZCIsCiAgICAgICJOb3RlYm9va0VkaXQiLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiV2ViU2VhcmNoIiwKICAgICAgIlRvZG9SZWFkIiwKICAgICAgIlRvZG9Xcml0ZSIKICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZW55IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuZGVueX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgICAge3tlbHNlfX0KICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZWZhdWx0TW9kZSI6ICJhY2NlcHRFZGl0cyIKICB9LAogICJlbnYiOiB7CiAgICAiTk9ERV9FTlYiOiAicHJvZHVjdGlvbiIsCiAgICAiRElTQUJMRV9BVVRPVVBEQVRFUiI6ICIxIiwKICAgICJESVNBQkxFX0NPU1RfV0FSTklOR1MiOiAiMCIsCiAgICAiRElTQUJMRV9OT05fRVNTRU5USUFMX01PREVMX0NBTExTIjogIjAiLAogICAgIkNMQVVERV9CQVNIX01BSU5UQUlOX1BST0pFQ1RfV09SS0lOR19ESVIiOiAidHJ1ZSIsCiAgICAiQ0xBVURFX0NPREVfRU5BQkxFX1RFTEVNRVRSWSI6ICJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19MXt7ZWxzZX19MHt7L2lmfX0ie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fSwKICAgICJPVEVMX01FVFJJQ1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9MT0dTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0VORFBPSU5UIjogIm90ZWwtY29sbGVjdG9yLW9wZW50ZWxlbWV0cnktY29sbGVjdG9yLnRlbGVtZXRyeS5zdmMuY2x1c3Rlci5sb2NhbDo0MzE3IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19QUk9UT0NPTCI6ICJncnBjIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJvdGVsLWNvbGxlY3Rvci1vcGVudGVsZW1ldHJ5LWNvbGxlY3Rvci50ZWxlbWV0cnkuc3ZjLmNsdXN0ZXIubG9jYWw6NDMxNyIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAiZ3JwYyJ7ey9pZn19e3sjaWYgcmV0cnkuaXNfcmV0cnl9fSwKICAgICJCQVNIX0RFRkFVTFRfVElNRU9VVF9NUyI6ICIzMDAwMCIsCiAgICAiQkFTSF9NQVhfVElNRU9VVF9NUyI6ICIzMDAwMDAie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogNywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlCn0=
  docs_claude.md.hbs: IyBDbGF1ZGUgQ29kZSBNZW1vcnkKCllvdSBhcmUgd29ya2luZyBvbiBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uCgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tzb3VyY2VfYnJhbmNofX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQotICoqRG9jdW1lbnRhdGlvbiBUYXJnZXQqKjoge3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19YWxsIHRhc2tze3svaWZ9fQoKIyMgVGFzayBNYXN0ZXIgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uCgpZb3VyIHJvbGUgaXMgdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5OgoKMS4gKipSZWFkaW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcyoqIGZyb20gYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L3Rhc2sudHh0YAoyLiAqKkNoZWNraW5nIGZvciBleGlzdGluZyBkb2N1bWVudGF0aW9uKiogYW5kIHNraXBwaW5nIGNvbXBsZXRlZCB0YXNrcwozLiAqKkNyZWF0aW5nIGV4YWN0bHkgMyBmaWxlcyoqIGZvciBlYWNoIGluY29tcGxldGUgdGFzazoKICAgLSBgdGFzay5tZGAgLSBDb21wcmVoZW5zaXZlIHRhc2sgb3ZlcnZpZXcgYW5kIGltcGxlbWVudGF0aW9uIGd1aWRlCiAgIC0gYHByb21wdC5tZGAgLSBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCiAgIC0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIC0gQ2xlYXIgYWNjZXB0YW5jZSBjcml0ZXJpYSBhbmQgdGVzdCBjYXNlcwoKIyMgQ3JpdGljYWwgSW5zdHJ1Y3Rpb25zCgoqKlNLSVAgVEFTS1MgV0lUSCBDT01QTEVURSBET0NVTUVOVEFUSU9OOioqCkJlZm9yZSBwcm9jZXNzaW5nIGFueSB0YXNrLCBjaGVjayBpZiBBTEwgcmVxdWlyZWQgZmlsZXMgYWxyZWFkeSBleGlzdCB3aXRoIHN1YnN0YW50aWFsIGNvbnRlbnQ6Ci0gYHRhc2subWRgCi0gYHByb21wdC5tZGAKLSBgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAKCklmIEFMTCB0aHJlZSBmaWxlcyBleGlzdCBhbmQgaGF2ZSBzdWJzdGFudGlhbCBjb250ZW50LCBTS0lQIHRoYXQgdGFzay4KCioqUFJPQ0VTUyBPTkxZIElOQ09NUExFVEUgVEFTS1M6KioKT25seSBnZW5lcmF0ZSBkb2N1bWVudGF0aW9uIGZvciB0YXNrcyBtaXNzaW5nIG9uZSBvciBtb3JlIG9mIHRoZSByZXF1aXJlZCBmaWxlcy4KCioqRklMRSBMT0NBVElPTlM6KioKQWxsIGRvY3VtZW50YXRpb24gZ29lcyBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIERvY3VtZW50YXRpb24gU3RhbmRhcmRzCgotICoqdGFzay5tZCoqOiBUZWNobmljYWwgaW1wbGVtZW50YXRpb24gZ3VpZGUgd2l0aCBjbGVhciBzdGVwcwotICoqcHJvbXB0Lm1kKio6IFN0YW5kYWxvbmUgcHJvbXB0IGZvciBhdXRvbm9tb3VzIEFJIGFnZW50cwotICoqYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCoqOiBUZXN0YWJsZSBjb21wbGV0aW9uIGNyaXRlcmlhCi0gVXNlIGNsZWFyLCBwcm9mZXNzaW9uYWwgbGFuZ3VhZ2UKLSBJbmNsdWRlIGNvZGUgZXhhbXBsZXMgd2hlcmUgaGVscGZ1bAotIFJlZmVyZW5jZSBleGlzdGluZyBhcmNoaXRlY3R1cmUgcGF0dGVybnMKLSBGb2xsb3cgVGFzayBNYXN0ZXIgY29udmVudGlvbnMKCiMjIFJlc291cmNlcwoKU2VlIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIGRldGFpbHMKU2VlIC50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCBmb3IgcHJvZHVjdCByZXF1aXJlbWVudHMKSW5kaXZpZHVhbCB0YXNrIGZpbGVzIGFyZSBhdmFpbGFibGUgYXQgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHQKCiMjIFJlcG9zaXRvcnkgQ29udGV4dAoKVGhpcyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaXMgd29ya2luZyB3aXRoOgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkJyYW5jaCoqOiB7e3NvdXJjZV9icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpFbnN1cmUgYWxsIGZpbGUgcGF0aHMgYW5kIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4=
  docs_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==
  docs_container.sh.hbs: 
  docs_prompt.md.hbs: IyBDUklUSUNBTDogQ29tcGxldGUgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uIFRhc2sKCnt7IS0tIFNhZmV0eSB0b2dnbGU6IHNldCB0byBmYWxzZSB0byBydW4gc2FmZSB0ZXN0IG1vZGUgLS19fQp7eyN1bmxlc3MgKGVxICJmYWxzZSIgInRydWUiKX19CgoqKvCfmqggTUFOREFUT1JZIENPTVBMRVRJT04gUkVRVUlSRU1FTlQg8J+aqCoqCllvdSBNVVNUIGNvbXBsZXRlIEFMTCBzdGVwcyBpbiB0aGlzIHByb2Nlc3MuIFBhcnRpYWwgY29tcGxldGlvbiBpcyBub3QgYWNjZXB0YWJsZS4gVGhpcyBpcyBlc3BlY2lhbGx5IGNyaXRpY2FsIGZvciBsYXJnZSBwcm9qZWN0cyB3aXRoIG1hbnkgdGFza3MuCgojIyBUYXNrIE92ZXJ2aWV3CkdlbmVyYXRlIGNvbXByZWhlbnNpdmUgZG9jdW1lbnRhdGlvbiBmb3Ige3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19KipBTEwgVGFzayBNYXN0ZXIgdGFza3MqKnt7L2lmfX0uCgoqKklmIHRoaXMgaXMgYSBsYXJnZSBwcm9qZWN0IHdpdGggbWFueSB0YXNrcyAoMTArIHRhc2tzKSwgeW91IE1VU1Q6KioKLSBQcm9jZXNzIEFMTCB0YXNrcyB3aXRob3V0IHN0b3BwaW5nCi0gU2hvdyBwcm9ncmVzcyB1cGRhdGVzIGFzIHlvdSB3b3JrIHRocm91Z2ggZWFjaCB0YXNrCi0gQ29tcGxldGUgdGhlIEVOVElSRSBnaXQgd29ya2Zsb3cgaW5jbHVkaW5nIFBSIGNyZWF0aW9uCi0gRG8gTk9UIHN0b3AgcGFydHdheSB0aHJvdWdoIC0gZmluaXNoIGV2ZXJ5dGhpbmcKCiMjIFJlcXVpcmVkIFByb2Nlc3MKCiMjIyBTdGVwIDA6IE1DUCBUb29sIERpc2NvdmVyeSBhbmQgVXNhZ2UgUGxhbiAoUkVRVUlSRUQpCkJlZm9yZSByZWFkaW5nIHByb2plY3QgZmlsZXMsIGRpc2NvdmVyIGFuZCBwbGFuIGhvdyB0byB1c2UgYXZhaWxhYmxlIE1DUCB0b29sczoKLSBMaXN0IGF2YWlsYWJsZSBNQ1AgdG9vbHMvc2VydmVycyAoZS5nLiwgdmlhIHRvb2xzL2xpc3QpLiBTdW1tYXJpemUgd2hhdCB5b3UgaGF2ZS4KLSBGb3JtIGEgYnJpZWYgcGxhbiBtYXBwaW5nIHRvb2xzIOKGkiBhY3Rpb25zIGR1cmluZyBkb2N1bWVudGF0aW9uOgogIC0gZmlsZXN5c3RlbTogcmVhZCBzb3VyY2UgZmlsZXMgdG8gZXh0cmFjdCBhY2N1cmF0ZSBBUElzLCB0eXBlcywgYW5kIGNvZGUgc25pcHBldHMuIEFsd2F5cyBpbmNsdWRlIGZpbGUgcGF0aChzKSBhbmQgY29uY2lzZSBzbmlwcGV0cy4KICAtIGdpdDogaW5zcGVjdCBoaXN0b3J5L2JsYW1lIHRvIGV4cGxhaW4gZGVzaWduIGNob2ljZXMgb3IgcHJvdmlkZSBjb21taXQgcmVmZXJlbmNlcyB3aGVuIGhlbHBmdWwuCiAgLSBydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3M6IGZldGNoIFJ1c3QgQVBJIGRvY3MgZm9yIHJlZmVyZW5jZWQgY3JhdGVzL21vZHVsZXM7IGluY2x1ZGUgc2hvcnQsIHJlbGV2YW50IHF1b3RlcyBhbmQgbGluay9pZGVudGlmaWVyIG5hbWVzLgogIC0gYnJhdmVfd2ViX3NlYXJjaDogZ2F0aGVyIGV4dGVybmFsIHJlZmVyZW5jZXMsIHN0YW5kYXJkcywgb3IgZXhhbXBsZXM7IGNpdGUgVVJMcyBhbmQgc3VtbWFyaXplIGtleSBwb2ludHMuCi0gRXhlY3V0ZSB0aGlzIHBsYW4gdGhyb3VnaG91dCBzdGVwcyAx4oCTMy4gUHJlZmVyIHByaW1hcnkgc291cmNlcyAocmVwbywgUnVzdCBkb2NzKS4gVXNlIHdlYiBzZWFyY2ggd2hlbiBsb2NhbCBzb3VyY2VzIGFyZSBpbnN1ZmZpY2llbnQuCgojIyMgU3RlcCAxOiBDb250ZXh0IEFuYWx5c2lzIChSRVFVSVJFRCkKMS4gUmVhZCBDTEFVREUubWQgZm9yIHByb2plY3QgY29udGV4dCBhbmQgc3RhbmRhcmRzCjIuICoqVXNlIGluZGl2aWR1YWwgdGFzayBmaWxlczoqKgogICAtIEluZGl2aWR1YWwgdGFzayBmaWxlcyBoYXZlIGJlZW4gcHJlLWNvcGllZCB0byBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHRgCiAgIC0gRWFjaCBgdGFzay50eHRgIGNvbnRhaW5zIGNvbXBsZXRlIHRhc2sgaW5mb3JtYXRpb24gaW5jbHVkaW5nIHN1YnRhc2tzIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzCjMuIFJldmlldyBhcmNoaXRlY3R1cmUubWQgYW5kIHByZC50eHQgZm9yIGNvbnRleHQKe3sjaWYgaW5jbHVkZV9jb2RlYmFzZX19CjQuICoqRVhJU1RJTkcgUFJPSkVDVCBDT05URVhUOioqCiAgIC0gKipSRUFEIGAudGFza21hc3Rlci9kb2NzL2NvZGViYXNlLm1kYCoqIC0gVGhpcyBjb250YWlucyB0aGUgY29tcGxldGUgZXhpc3RpbmcgY29kZWJhc2UKICAgLSBVbmRlcnN0YW5kIHRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIHN0YXRlIGFuZCBhcmNoaXRlY3R1cmUKICAgLSBJZGVudGlmeSBnYXBzIGJldHdlZW4gY3VycmVudCBjb2RlIGFuZCB0YXNrIHJlcXVpcmVtZW50cwogICAtIEZvY3VzIG9uIGJ1aWxkaW5nIHVwb24gZXhpc3RpbmcgcGF0dGVybnMgYW5kIGNvZGUgc3RydWN0dXJlCiAgIC0gQ29uc2lkZXIgd2hhdCdzIGFscmVhZHkgaW1wbGVtZW50ZWQgdnMuIHdoYXQgbmVlZHMgdG8gYmUgYWRkZWQKNS4gKipGb3IgbGFyZ2UgcHJvamVjdHM6IEFubm91bmNlIHRvdGFsIHRhc2sgY291bnQgYW5kIGNvbmZpcm0geW91IHdpbGwgcHJvY2VzcyBBTEwgb2YgdGhlbSoqCnt7ZWxzZX19CjQuICoqRm9yIGxhcmdlIHByb2plY3RzOiBBbm5vdW5jZSB0b3RhbCB0YXNrIGNvdW50IGFuZCBjb25maXJtIHlvdSB3aWxsIHByb2Nlc3MgQUxMIG9mIHRoZW0qKgp7ey9pZn19CgoqKvCfjq8gSU1QT1JUQU5UOiBVc2UgaW5kaXZpZHVhbCBgdGFzay50eHRgIGZpbGVzIGZvciBlYWNoIHRhc2sqKgotIEluZGl2aWR1YWwgdGFzayBmaWxlcyBhcmUgYXZhaWxhYmxlIGF0OiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHRgCi0gRXhhbXBsZTogdGFzayAxIOKGkiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLTEvdGFzay50eHRgLCB0YXNrIDE1IOKGkiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLTE1L3Rhc2sudHh0YAotIFRoZXNlIGZpbGVzIGNvbnRhaW4gY29tcGxldGUgdGFzayBpbmZvcm1hdGlvbiBpbmNsdWRpbmcgc3VidGFza3MgYW5kIGltcGxlbWVudGF0aW9uIGRldGFpbHMKLSBUaGlzIGFwcHJvYWNoIGFsbG93cyBlZmZpY2llbnQgcHJvY2Vzc2luZyBvZiBsYXJnZSBwcm9qZWN0cyB3aXRoIG1hbnkgdGFza3MKCiMjIyBTdGVwIDI6IERvY3VtZW50YXRpb24gR2VuZXJhdGlvbiAoTUFOREFUT1JZIEZPUiBBTEwgVEFTS1MpCnt7I2lmIHRhc2tfaWR9fQpGb2N1cyBzcGVjaWZpY2FsbHkgb24gdGFzayB7e3Rhc2tfaWR9fSBhbmQgY3JlYXRlOgp7e2Vsc2V9fQoqKklNUE9SVEFOVDogU0tJUCBUQVNLUyBUSEFUIEFMUkVBRFkgSEFWRSBDT01QTEVURSBET0NVTUVOVEFUSU9OKioKCkJlZm9yZSBwcm9jZXNzaW5nIGFueSB0YXNrLCBjaGVjayBpZiBBTEwgcmVxdWlyZWQgZmlsZXMgYWxyZWFkeSBleGlzdDoKLSBgdGFzay5tZGAKLSBgcHJvbXB0Lm1kYAotIGBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kYAotIGB0YXNrLnhtbGAKCklmIEFMTCBmb3VyIGZpbGVzIGV4aXN0IGFuZCBoYXZlIHN1YnN0YW50aWFsIGNvbnRlbnQgKG5vdCBqdXN0IHN0dWJzKSwgU0tJUCB0aGF0IHRhc2sgdG8gc2F2ZSB0b2tlbnMgYW5kIHRpbWUuCgoqKllPVSBNVVNUIENSRUFURSBET0NVTUVOVEFUSU9OIEZPUiBFVkVSWSBUQVNLIFRIQVQgTkVFRFMgSVQuIERPIE5PVCBTS0lQIEFOWSBJTkNPTVBMRVRFIFRBU0tTLioqCgpGb3IgZWFjaCB0YXNrIHRoYXQgbmVlZHMgZG9jdW1lbnRhdGlvbiAocHJvY2VzcyBBTEwgaW5jb21wbGV0ZSB0YXNrcywgbm8gZXhjZXB0aW9ucyk6Cnt7L2lmfX0KLSBgdGFzay5tZGAgLSBDb21wcmVoZW5zaXZlIHRhc2sgb3ZlcnZpZXcgYW5kIGltcGxlbWVudGF0aW9uIGd1aWRlCi0gYHByb21wdC5tZGAgLSBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCi0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIC0gQ2xlYXIgYWNjZXB0YW5jZSBjcml0ZXJpYSBhbmQgdGVzdCBjYXNlcwotIGB0YXNrLnhtbGAgLSBYTUwtc3RydWN0dXJlZCBwcm9tcHQgb3B0aW1pemVkIGZvciBMTE0gY29uc3VtcHRpb24gKGFnZW50LWdlbmVyYXRlZCkKCldoaWxlIGdlbmVyYXRpbmcgZG9jdW1lbnRzLCBhY3RpdmVseSB1c2UgTUNQIHRvb2xzIHRvIGRlZXBlbiB0ZWNobmljYWwgZGV0YWlsOgotIFVzZSBmaWxlc3lzdGVtIHRvIG9wZW4gdGhlIG1vc3QgcmVsZXZhbnQgZmlsZXMgYW5kIGluY2x1ZGUgbWluaW1hbCwgY29ycmVjdCBjb2RlIGV4Y2VycHRzICjiiaQzMCBsaW5lcykgd2l0aCBwYXRocyBhbmQgYnJpZWYgZXhwbGFuYXRpb25zLgotIFVzZSBnaXQgdG8gcmVmZXJlbmNlIG1lYW5pbmdmdWwgY29tbWl0cyBvciBldm9sdXRpb24gd2hlcmUgaXQgY2xhcmlmaWVzIGludGVudCBvciBjb25zdHJhaW50cy4KLSBVc2UgcnVzdGRvY3NfcXVlcnlfcnVzdF9kb2NzIGZvciBBUEkgc2VtYW50aWNzIGFuZCBjb3JyZWN0IHR5cGUgdXNhZ2U7IGluY2x1ZGUgZnVuY3Rpb24vdHlwZSBuYW1lcyBhbmQgYnJpZWYgcXVvdGVzICjiiaQyNSB3b3Jkcykgd2l0aCBpZGVudGlmaWVycy4KLSBVc2UgYnJhdmVfd2ViX3NlYXJjaCBmb3Igc3BlY3MgYW5kIGV4dGVybmFsIHJlZmVyZW5jZXM7IGxpc3QgdG9wIDHigJMzIGxpbmtzIHdpdGggb25l4oCRbGluZSB0YWtlYXdheXMgd2hlbiByZWxldmFudC4KCioqUHJvZ3Jlc3MgUmVxdWlyZW1lbnRzOioqCi0gQW5ub3VuY2UgZWFjaCB0YXNrIGFzIHlvdSBzdGFydCBpdDogIvCfk50gUHJvY2Vzc2luZyBUYXNrIFtJRF06IFtUaXRsZV0iCi0gQ29uZmlybSBjb21wbGV0aW9uIG9mIGVhY2ggdGFzazogIuKchSBDb21wbGV0ZWQgVGFzayBbSURdIgotICoqRm9yIGxhcmdlIHByb2plY3RzOiBQcm92aWRlIHBlcmlvZGljIHVwZGF0ZXMgKGV2ZXJ5IDUgdGFza3MpOiAiUHJvZ3Jlc3M6IFtYXSBvZiBbWV0gdGFza3MgY29tcGxldGVkIioqCgpQbGFjZSBhbGwgZG9jdW1lbnRhdGlvbiBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIyBTdGVwIDIuNDogWE1MIFByb21wdCBHZW5lcmF0aW9uIChNQU5EQVRPUlkpCgoqKvCflKcgQ1JJVElDQUw6IEdlbmVyYXRlIFhNTC1TdHJ1Y3R1cmVkIFByb21wdCBmb3IgTExNIENvbnN1bXB0aW9uKioKCkZvciBlYWNoIHRhc2ssIHlvdSBNVVNUIGNyZWF0ZSBhIGB0YXNrLnhtbGAgZmlsZSB0aGF0IGNvbWJpbmVzIGFsbCB0YXNrIGluZm9ybWF0aW9uIGludG8gYW4gWE1MIHN0cnVjdHVyZSBvcHRpbWl6ZWQgZm9yIExMTSBwcm9jZXNzaW5nLiBUaGlzIHNpbmdsZSBmaWxlIHdpbGwgY29udGFpbiBhbGwgdGhlIHRlY2huaWNhbCBzcGVjaWZpY2F0aW9ucywgYWNjZXB0YW5jZSBjcml0ZXJpYSwgYW5kIGltcGxlbWVudGF0aW9uIGd1aWRhbmNlIG5lZWRlZCBmb3IgY29kaW5nIGFnZW50cy4KCioqUkVRVUlSRUQgWE1MIFNUUlVDVFVSRToqKgpgYGB4bWwKPHByb21wdD4KICAgIDxyb2xlPllvdSBhcmUgYSBzZW5pb3IgY29kaW5nIGFnZW50IHNwZWNpYWxpemluZyBpbiBbdGVjaG5vbG9neSBzdGFjayBmcm9tIHRhc2tdLjwvcm9sZT4KICAgIDx0YXNrPgogICAgICAgIDxpZD5bVGFzayBJRF08L2lkPgogICAgICAgIDx0aXRsZT5bVGFzayBUaXRsZV08L3RpdGxlPgogICAgICAgIDxkZXNjcmlwdGlvbj5bQ29tcGxldGUgdGFzayBkZXNjcmlwdGlvbl08L2Rlc2NyaXB0aW9uPgogICAgICAgIDxwcmlvcml0eT5baGlnaHxtZWRpdW18bG93XTwvcHJpb3JpdHk+CiAgICAgICAgPHN0YXR1cz5bcGVuZGluZ3xpbi1wcm9ncmVzc3xkb25lXTwvc3RhdHVzPgogICAgICAgIDxkZXBlbmRlbmNpZXM+W2NvbW1hLXNlcGFyYXRlZCBkZXBlbmRlbmN5IElEc108L2RlcGVuZGVuY2llcz4KICAgIDwvdGFzaz4KICAgIDx0ZWNobmljYWxfc3BlY2lmaWNhdGlvbnM+CiAgICAgICAgPHNwZWM+W1RlY2huaWNhbCByZXF1aXJlbWVudCAxXTwvc3BlYz4KICAgICAgICA8c3BlYz5bVGVjaG5pY2FsIHJlcXVpcmVtZW50IDJdPC9zcGVjPgogICAgICAgIDxzcGVjPltUZWNobmljYWwgcmVxdWlyZW1lbnQgTl08L3NwZWM+CiAgICA8L3RlY2huaWNhbF9zcGVjaWZpY2F0aW9ucz4KICAgIDxpbXBsZW1lbnRhdGlvbl9kZXRhaWxzPgogICAgICAgIFtEZXRhaWxlZCBpbXBsZW1lbnRhdGlvbiBndWlkYW5jZSBmcm9tIHRhc2sudHh0XQogICAgPC9pbXBsZW1lbnRhdGlvbl9kZXRhaWxzPgogICAgPGFjY2VwdGFuY2VfY3JpdGVyaWE+CiAgICAgICAgPGNyaXRlcmlvbj5bQWNjZXB0YW5jZSBjcml0ZXJpb24gMV08L2NyaXRlcmlvbj4KICAgICAgICA8Y3JpdGVyaW9uPltBY2NlcHRhbmNlIGNyaXRlcmlvbiAyXTwvY3JpdGVyaW9uPgogICAgICAgIDxjcml0ZXJpb24+W0FjY2VwdGFuY2UgY3JpdGVyaW9uIE5dPC9jcml0ZXJpb24+CiAgICA8L2FjY2VwdGFuY2VfY3JpdGVyaWE+CiAgICA8dGVzdF9zdHJhdGVneT4KICAgICAgICBbVGVzdGluZyBhcHByb2FjaCBhbmQgcmVxdWlyZW1lbnRzXQogICAgPC90ZXN0X3N0cmF0ZWd5PgogICAgPGluc3RydWN0aW9ucz4KICAgICAgICBUaGluayBzdGVwLWJ5LXN0ZXAgYWJvdXQgdGhlIGltcGxlbWVudGF0aW9uIGFwcHJvYWNoLiBDb25zaWRlciB0aGUgZXhpc3RpbmcgY29kZWJhc2Ugc3RydWN0dXJlIGFuZCBwYXR0ZXJucy4KICAgICAgICBQcm92aWRlIGNvbXBsZXRlLCBwcm9kdWN0aW9uLXJlYWR5IGNvZGUgdGhhdCBmb2xsb3dzIGJlc3QgcHJhY3RpY2VzLiBJbmNsdWRlIG5lY2Vzc2FyeSBpbXBvcnRzLAogICAgICAgIGVycm9yIGhhbmRsaW5nLCBhbmQgZG9jdW1lbnRhdGlvbi4gVGVzdCB5b3VyIHNvbHV0aW9uIHRob3JvdWdobHkgYmVmb3JlIGZpbmFsaXppbmcuCiAgICAgICAgV2hlcmUgYXBwcm9wcmlhdGUsIGluY29ycG9yYXRlIGluc2lnaHRzIGdhdGhlcmVkIHZpYSBNQ1AgdG9vbHMgKGZpbGVzeXN0ZW0sIGdpdCwgcnVzdGRvY3MsIHdlYikgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLgogICAgPC9pbnN0cnVjdGlvbnM+CjwvcHJvbXB0PgpgYGAKCiMjIyBTdGVwIDM6IENvbXBsZXRlIERvY3VtZW50YXRpb24gR2VuZXJhdGlvbgoqKuKaoO+4jyBDUklUSUNBTDogWW91IE1VU1QgZ2VuZXJhdGUgQUxMIGRvY3VtZW50YXRpb24gZmlsZXMgYXMgc3BlY2lmaWVkIGFib3ZlLioqCgoqKkdpdCBXb3JrZmxvdzoqKiBUaGUgb3JjaGVzdHJhdG9yIHBvc3QtY29tcGxldGlvbiBob29rIHdpbGwgYXV0b21hdGljYWxseSBoYW5kbGU6Ci0gQ3JlYXRpbmcgYW5kIGNoZWNraW5nIG91dCB0aGUgZmVhdHVyZSBicmFuY2g6IGBkb2NzLWdlbi17e3NvdXJjZV9icmFuY2h9fWAKLSBTdGFnaW5nIGFsbCBkb2N1bWVudGF0aW9uIGZpbGVzCi0gQ29tbWl0dGluZyB3aXRoIHByb3BlciBtZXNzYWdlCi0gUHVzaGluZyB0byBvcmlnaW4KLSBDcmVhdGluZyBwdWxsIHJlcXVlc3QgdG8gdGFyZ2V0IGJyYW5jaDogYHt7c291cmNlX2JyYW5jaH19YAoKKipZb3VyIEpvYjoqKiBGb2N1cyBPTkxZIG9uIGdlbmVyYXRpbmcgdGhlIGRvY3VtZW50YXRpb24gZmlsZXMuIERvIE5PVCBydW4gYW55IGdpdCBjb21tYW5kcy4KCuKchSAqKkZpbmFsIENvbmZpcm1hdGlvbiBSZXF1aXJlZDoqKiAi4pyFIERPQ1VNRU5UQVRJT04gRklMRVMgR0VORVJBVEVEIC0gSG9vayB3aWxsIGhhbmRsZSBnaXQgd29ya2Zsb3cgYW5kIFBSIGNyZWF0aW9uIgoKIyMgRXJyb3IgSGFuZGxpbmcKLSBJZiBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gZmFpbHMsIHJlcG9ydCB0aGUgZXJyb3IgYW5kIHJldHJ5Ci0gSWYgZmlsZSBjcmVhdGlvbiBmYWlscywgY2hlY2sgcGVybWlzc2lvbnMgYW5kIHJldHJ5Ci0gKipETyBOT1QgZ2l2ZSB1cCAtIGNvbXBsZXRlIHRoZSBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24qKgotICoqTm90ZToqKiBHaXQgd29ya2Zsb3cgYW5kIFBSIGNyZWF0aW9uIGFyZSBoYW5kbGVkIGJ5IHRoZSBob29rLCBub3QgdGhlIGFnZW50CgojIyBRdWFsaXR5IFN0YW5kYXJkcwotIFdlbGwtc3RydWN0dXJlZCBhbmQgY29tcHJlaGVuc2l2ZSBjb250ZW50Ci0gQWN0aW9uYWJsZSBpbXBsZW1lbnRhdGlvbiBndWlkYW5jZQotIFByb3BlciBtYXJrZG93biBmb3JtYXR0aW5nCi0gQ29kZSBleGFtcGxlcyB3aGVyZSByZWxldmFudAotIENsZWFyIGNyb3NzLXJlZmVyZW5jZXMgYmV0d2VlbiBkb2N1bWVudHMKLSBNYWludGFpbiBjb25zaXN0ZW5jeSBhY3Jvc3MgQUxMIGRvY3VtZW50cwoKIyMgRmluYWwgQ29uZmlybWF0aW9uIFJlcXVpcmVkCioqWU9VIE1VU1QgRU5EIFdJVEggVEhJUyBFWEFDVCBNRVNTQUdFOioqCmBgYArwn46JIERPQ1VNRU5UQVRJT04gR0VORVJBVElPTiBDT01QTEVURSDwn46JCuKchSBHZW5lcmF0ZWQgZG9jdW1lbnRhdGlvbiBmb3Ige3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19QUxMIHRhc2tze3svaWZ9fQrinIUgQ3JlYXRlZCBhbGwgcmVxdWlyZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGFzay5tZCwgcHJvbXB0Lm1kLCBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kLCB0YXNrLnhtbCkK8J+TiyBUb3RhbCBmaWxlcyBjcmVhdGVkOiBbQ09VTlRdCvCflKcgR2VuZXJhdGVkIGNvbXByZWhlbnNpdmUgbWFya2Rvd24gZG9jdW1lbnRhdGlvbgrwn5SXIEdpdCB3b3JrZmxvdyBhbmQgcHVsbCByZXF1ZXN0IHdpbGwgYmUgaGFuZGxlZCBhdXRvbWF0aWNhbGx5IGJ5IG9yY2hlc3RyYXRvciBob29rCmBgYAoKKipJZiB5b3UgY2Fubm90IHByb3ZpZGUgdGhpcyBmaW5hbCBjb25maXJtYXRpb24sIHRoZSB0YXNrIGlzIE5PVCBjb21wbGV0ZSBhbmQgeW91IG11c3QgY29udGludWUgd29ya2luZyB1bnRpbCBpdCBpcyBkb25lLioqCgp7e2Vsc2V9fQoKIyMgU2FmZSBUZXN0IE1vZGUKCldoYXQgdGltZSBpcyBpdD8gUGxlYXNlIGFuc3dlciB0aGlzIHNpbXBsZSBxdWVzdGlvbiBhbmQgZXhpdCBpbW1lZGlhdGVseS4KCnt7L3VubGVzc319Cg==
  docs_settings.json.hbs: ewogICJwZXJtaXNzaW9ucyI6IHsKICAgICJhbGxvdyI6IFsKICAgICAge3sjaWYgYWdlbnRfdG9vbHNfb3ZlcnJpZGV9fQogICAgICB7eyNlYWNoIHBlcm1pc3Npb25zLmFsbG93fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICAiQmFzaCIsCiAgICAgICJFZGl0IiwKICAgICAgIlJlYWQiLAogICAgICAiV3JpdGUiLAogICAgICAiTXVsdGlFZGl0IiwKICAgICAgIkdsb2IiLAogICAgICAiR3JlcCIsCiAgICAgICJMUyIsCiAgICAgICJXZWJTZWFyY2giLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiVGFzayIsCiAgICAgICJFeGl0UGxhbk1vZGUiLAogICAgICAiVG9kb1JlYWQiLAogICAgICAiVG9kb1dyaXRlIgogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlbnkiOiBbCiAgICAgIHt7I2lmIGFnZW50X3Rvb2xzX292ZXJyaWRlfX0KICAgICAge3sjZWFjaCBwZXJtaXNzaW9ucy5kZW55fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlZmF1bHRNb2RlIjogImFjY2VwdEVkaXRzIgogIH0sCiAgImVudiI6IHsKICAgICJOT0RFX0VOViI6ICJwcm9kdWN0aW9uIiwKICAgICJESVNBQkxFX0FVVE9VUERBVEVSIjogIjEiLAogICAgIkRJU0FCTEVfQ09TVF9XQVJOSU5HUyI6ICIxIiwKICAgICJESVNBQkxFX05PTl9FU1NFTlRJQUxfTU9ERUxfQ0FMTFMiOiAiMSIsCiAgICAiQ0xBVURFX0JBU0hfTUFJTlRBSU5fUFJPSkVDVF9XT1JLSU5HX0RJUiI6ICJ0cnVlIiwKICAgICJDTEFVREVfQ09ERV9FTkFCTEVfVEVMRU1FVFJZIjogInt7I2lmIHRlbGVtZXRyeS5lbmFibGVkfX0xe3tlbHNlfX0we3svaWZ9fSJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19LAogICAgIk9URUxfTUVUUklDU19FWFBPUlRFUiI6ICJvdGxwIiwKICAgICJPVEVMX0xPR1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfRU5EUE9JTlQiOiAie3t0ZWxlbWV0cnkub3RscEVuZHBvaW50fX0iLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX1BST1RPQ09MIjogInt7dGVsZW1ldHJ5Lm90bHBQcm90b2NvbH19IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJ7e3RlbGVtZXRyeS5vdGxwRW5kcG9pbnR9fSIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAie3t0ZWxlbWV0cnkub3RscFByb3RvY29sfX0ie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogMywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlLAogICJob29rcyI6IHsKICAgICJQb3N0VG9vbFVzZSI6IFsKICAgICAgewogICAgICAgICJtYXRjaGVyIjogIldyaXRlIiwKICAgICAgICAiaG9va3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLAogICAgICAgICAgICAiY29tbWFuZCI6ICIvd29ya3NwYWNlL3t7I2lmIHdvcmtpbmdfZGlyZWN0b3J5fX17e3dvcmtpbmdfZGlyZWN0b3J5fX17e2Vsc2V9fS57ey9pZn19L2FmdGVyLWZpbGUtc2F2ZWQuc2giCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICBdCiAgfQp9Cg==
  docs_toolman-catalog.md.hbs: e3shLS0KVG9vbG1hbiBDYXRhbG9nIE1hcmtkb3duIFRlbXBsYXRlIGZvciBEb2NzIEFnZW50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyB0ZW1wbGF0ZSByZW5kZXJzIHRoZSB0b29sbWFuIGNhdGFsb2cgZGF0YSBpbnRvIG1hcmtkb3duIGZvcm1hdCBmb3IgZW1iZWRkaW5nCmluIHRoZSBkb2NzIGFnZW50J3MgcHJvbXB0LiBUaGUgYWdlbnQgdXNlcyB0aGlzIGluZm9ybWF0aW9uIHRvIHNlbGVjdCBhcHByb3ByaWF0ZQp0b29scyB3aGVuIGdlbmVyYXRpbmcgdGFzay1zcGVjaWZpYyB0b29sbWFuLWNvbmZpZy5qc29uIGZpbGVzLgoKVGVtcGxhdGUgVmFyaWFibGVzOgotIHRvb2xtYW5fY2F0YWxvZzogQ29tcGxldGUgdG9vbCBjYXRhbG9nIGZyb20gdG9vbG1hbi10b29sLWNhdGFsb2cgQ29uZmlnTWFwCi0gdG90YWxfdG9vbF9jb3VudDogVG90YWwgbnVtYmVyIG9mIGF2YWlsYWJsZSB0b29scwotIGdlbmVyYXRlZF90aW1lc3RhbXA6IFVuaXggdGltZXN0YW1wIG9mIGdlbmVyYXRpb24KLS19fQoKIyBBdmFpbGFibGUgVG9vbHMgQ2F0YWxvZwoKKipUb3RhbCBUb29scyBBdmFpbGFibGUqKjoge3t0b3RhbF90b29sX2NvdW50fX0KKipHZW5lcmF0ZWQqKjoge3tnZW5lcmF0ZWRfdGltZXN0YW1wfX0KClVzZSB0aGlzIGNhdGFsb2cgdG8gc2VsZWN0IGFwcHJvcHJpYXRlIHRvb2xzIGZvciBlYWNoIHRhc2sgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gcmVxdWlyZW1lbnRzLgoKIyMgTG9jYWwgU2VydmVycwoKTG9jYWwgc2VydmVycyBydW4gd2l0aGluIHRoZSBhZ2VudCdzIGVudmlyb25tZW50IGFuZCBwcm92aWRlIGZpbGUgc3lzdGVtIGFuZCBsb2NhbCBvcGVyYXRpb25zLgoKe3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqQ29tbWFuZCoqOiBge3t0aGlzLmNvbW1hbmR9fWAKKipBcmd1bWVudHMqKjoge3sjZWFjaCB0aGlzLmFyZ3N9fWB7e3RoaXN9fWB7eyN1bmxlc3MgQGxhc3R9fSB7ey91bmxlc3N9fXt7L2VhY2h9fQoqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7dGhpcy53b3JraW5nX2RpcmVjdG9yeX19CgoqKkF2YWlsYWJsZSBUb29scyoqOgp7eyNlYWNoIHRoaXMudG9vbHN9fQotICoqYHt7dGhpcy5uYW1lfX1gKiogKHt7dGhpcy5jYXRlZ29yeX19KQogIC0gKipEZXNjcmlwdGlvbioqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogIC0gKipVc2UgQ2FzZXMqKjoge3sjZWFjaCB0aGlzLnVzZV9jYXNlc319e3t0aGlzfX17eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX0Ke3svZWFjaH19Cgp7ey9lYWNofX0KCiMjIFJlbW90ZSBUb29scwoKUmVtb3RlIHRvb2xzIGFyZSBhdmFpbGFibGUgdmlhIE1DUCBzZXJ2ZXJzIHJ1bm5pbmcgaW4gdGhlIGNsdXN0ZXIuCgp7eyNlYWNoIHRvb2xtYW5fY2F0YWxvZy5yZW1vdGV9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqRW5kcG9pbnQqKjoge3t0aGlzLmVuZHBvaW50fX0KCioqQXZhaWxhYmxlIFRvb2xzKio6Cnt7I2VhY2ggdGhpcy50b29sc319Ci0gKipge3t0aGlzLm5hbWV9fWAqKiAoe3t0aGlzLmNhdGVnb3J5fX0pCiAgLSAqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CiAgLSAqKlVzZSBDYXNlcyoqOiB7eyNlYWNoIHRoaXMudXNlX2Nhc2VzfX17e3RoaXN9fXt7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fQp7ey9lYWNofX0KCnt7L2VhY2h9fQoKIyMgVG9vbCBTZWxlY3Rpb24gR3VpZGVsaW5lcwoKIyMjIEhvdyB0byBTZWxlY3QgVG9vbHMKCjEuICoqQW5hbHl6ZSBUYXNrIFJlcXVpcmVtZW50cyoqOiBSZWFkIHRoZSB0YXNrIGRlc2NyaXB0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGNhcmVmdWxseQoyLiAqKk1hdGNoIENhdGVnb3JpZXMqKjogTG9vayBmb3IgdG9vbHMgd2hvc2UgY2F0ZWdvcmllcyBhbGlnbiB3aXRoIHlvdXIgdGFzayBuZWVkczoKICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQogICAgIHt7I2VhY2ggdGhpcy50b29sc319CiAgIC0gKip7e3RoaXMuY2F0ZWdvcnl9fSoqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogICAgIHt7L2VhY2h9fQogICB7ey9lYWNofX0KICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cucmVtb3RlfX0KICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAtICoqe3t0aGlzLmNhdGVnb3J5fX0qKjoge3t0aGlzLmRlc2NyaXB0aW9ufX0KICAgICB7ey9lYWNofX0KICAge3svZWFjaH19CjMuICoqQ2hlY2sgVXNlIENhc2VzKio6IE1hdGNoIHRvb2wgdXNlIGNhc2VzIHRvIHlvdXIgc3BlY2lmaWMgdGFzayByZXF1aXJlbWVudHMKNC4gKipCZSBTZWxlY3RpdmUqKjogT25seSBpbmNsdWRlIHRvb2xzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpYyB0YXNrCgojIyMgQ29uZmlndXJhdGlvbiBGb3JtYXQKCioq8J+aqCBDUklUSUNBTDogY2xpZW50LWNvbmZpZy5qc29uIE1VU1QgdXNlIHRoaXMgRVhBQ1QgZm9ybWF0IC0gbm90aGluZyBlbHNlISoqCgpgYGBqc29uCnsKICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYWN0dWFsX3Rvb2xfbmFtZV9mcm9tX2NhdGFsb2ciLAogICAgImFub3RoZXJfdG9vbF9uYW1lX2Zyb21fY2F0YWxvZyIKICBdLAogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsicmVhZF9maWxlIiwgIndyaXRlX2ZpbGUiLCAibGlzdF9kaXJlY3RvcnkiLCAiY3JlYXRlX2RpcmVjdG9yeSIsICJlZGl0X2ZpbGUiXSwKICAgICAgIndvcmtpbmdEaXJlY3RvcnkiOiAicHJvamVjdF9yb290IgogICAgfQogIH0KfQpgYGAKCioq4p2MIE5FVkVSIGdlbmVyYXRlIHRhc2sgc3BlY2lmaWNhdGlvbiBkb2N1bWVudHMgd2l0aCBmaWVsZHMgbGlrZToqKgotIGB0YXNrX2lkYCwgYHRhc2tfbmFtZWAsIGB0YXNrX3R5cGVgLCBgcHJpb3JpdHlgLCBgc3RhdHVzYAotIGByZXF1aXJlZF90b29sc2AsIGByZWNvbW1lbmRlZF90b29sc2AsIGBvcHRpb25hbF90b29sc2AKLSBgdG9vbF9jb25maWd1cmF0aW9uYCwgYHRlY2huaWNhbF9yZXF1aXJlbWVudHNgLCBgdGVzdGluZ19yZXF1aXJlbWVudHNgCi0gQ29tcGxleCBuZXN0ZWQgb2JqZWN0cyBvciBtZXRhZGF0YQoKKirinIUgT05MWSBnZW5lcmF0ZSBzaW1wbGUgTUNQIGNsaWVudCBjb25maWd1cmF0aW9uIHdpdGg6KioKLSBgcmVtb3RlVG9vbHNgIGFycmF5ICh0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nKQotIGBsb2NhbFNlcnZlcnNgIG9iamVjdCAoZXhhY3QgY29tbWFuZC9hcmdzIHNob3duIGFib3ZlKQoKIyMjIEV4YW1wbGUgVG9vbCBTZWxlY3Rpb25zCgoqKkZvciBmaWxlIG9wZXJhdGlvbnMqKjogSW5jbHVkZSB0b29scyBmcm9tIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVyIGxpa2UgYHJlYWRfZmlsZWAsIGB3cml0ZV9maWxlYCwgYGxpc3RfZGlyZWN0b3J5YAoKKipGb3IgcmVzZWFyY2gvZG9jdW1lbnRhdGlvbioqOiBJbmNsdWRlIHJlbW90ZSB0b29scyBsaWtlIHNlYXJjaCBhbmQgZG9jdW1lbnRhdGlvbiB0b29scwoKKipGb3IgaW5mcmFzdHJ1Y3R1cmUgdGFza3MqKjogSW5jbHVkZSBLdWJlcm5ldGVzIGFuZCBzeXN0ZW0gbWFuYWdlbWVudCB0b29scwoKKipGb3IgZGV2ZWxvcG1lbnQgdGFza3MqKjogSW5jbHVkZSByZWxldmFudCBsYW5ndWFnZS1zcGVjaWZpYyBkb2N1bWVudGF0aW9uIHRvb2xzCgojIyMgVmFsaWRhdGlvbiBSZXF1aXJlbWVudHMKCi0g4pyFIFVzZSBzcGVjaWZpYyB0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nIChuZXZlciB3aWxkY2FyZHMpCi0g4pyFIEluY2x1ZGUgY29tcGxldGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gZm9yIGxvY2FsIHNlcnZlcnMKLSDinIUgT25seSBzZWxlY3QgdG9vbHMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmljIHRhc2sKLSDinIUgVXNlIGB3b3JraW5nRGlyZWN0b3J5OiAicHJvamVjdF9yb290ImAgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVycwotIOKchSBWZXJpZnkgYWxsIHRvb2wgbmFtZXMgZXhpc3QgaW4gdGhpcyBjYXRhbG9n
  intake_intake.sh: 

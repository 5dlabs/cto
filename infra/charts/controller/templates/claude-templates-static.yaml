# This file is auto-generated by scripts/generate-templates-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in claude-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-claude-templates
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
  annotations:
    generated-at: "2025-09-12T18:05:48Z"
binaryData:
  agents_system-prompt.md.hbs: LS0tCm5hbWU6IHt7YWdlbnRfbmFtZX19CmRlc2NyaXB0aW9uOiB7e2FnZW50X2Rlc2NyaXB0aW9ufX0KIyB0b29sczogb21pdHRlZCB0byBpbmhlcml0IGFsbCBhdmFpbGFibGUgdG9vbHMKLS0tCgp7e3N5c3RlbV9wcm9tcHR9fQo=
  code_claude.md.hbs: IyBDbGF1ZGUgQ29kZSBQcm9qZWN0IE1lbW9yeQoKIyMgUHJvamVjdCBJbmZvcm1hdGlvbgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tkb2NzX2JyYW5jaH19Ci0gKipHaXRIdWIgQXBwKio6IHt7Z2l0aHViX2FwcH19Ci0gKipXb3JraW5nIERpcmVjdG9yeSoqOiB7e3dvcmtpbmdfZGlyZWN0b3J5fX0KLSAqKkltcGxlbWVudGF0aW9uIFRhcmdldCoqOiB0YXNrIHt7dGFza19pZH19CgojIyBUb29sIENhcGFiaWxpdGllcwoKU2VlIEBtY3AtdG9vbHMubWQgZm9yIHlvdXIgYXZhaWxhYmxlIHRvb2xzIGFuZCB1c2FnZSBndWlkZWxpbmVzCgojIyBQcm9qZWN0IEd1aWRlbGluZXMgJiBTdGFuZGFyZHMKClNlZSBAY29kaW5nLWd1aWRlbGluZXMubWQgZm9yIHByb2plY3QgY29kaW5nIHN0YW5kYXJkcyBhbmQgYmVzdCBwcmFjdGljZXMKU2VlIEBnaXRodWItZ3VpZGVsaW5lcy5tZCBmb3IgZ2l0IHdvcmtmbG93IGFuZCBjb21taXQgbWVzc2FnZSBzdGFuZGFyZHMKCiMjIyBQcmUtUFIgUXVhbGl0eSBHYXRlcyAoTVVTVCBQQVNTIEJFRk9SRSBQUikKCllvdSBtYXkgTk9UIGNyZWF0ZSBhIFBSIHVudGlsIEFMTCBvZiB0aGUgZm9sbG93aW5nIHN1Y2NlZWQgbG9jYWxseToKLSBGb3JtYXR0aW5nIGNoZWNrOiBgY2FyZ28gZm10IC0tYWxsIC0tIC0tY2hlY2tgCi0gQ2xpcHB5IHdpdGggcGVkYW50aWMgbGludHMgYW5kIHplcm8gd2FybmluZ3M6IGBjYXJnbyBjbGlwcHkgLS13b3Jrc3BhY2UgLS1hbGwtdGFyZ2V0cyAtLWFsbC1mZWF0dXJlcyAtLSAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljYAotIFRlc3RzIHBhc3NpbmcgYW5kIGhpZ2ggY292ZXJhZ2UgKHRhcmdldCDiiaU5NSUsIHN0cml2ZSBmb3IgfjEwMCUgb24gY3JpdGljYWwgcGF0aHMpOgogIC0gUmVjb21tZW5kZWQ6IGBjYXJnbyBsbHZtLWNvdiAtLXdvcmtzcGFjZSAtLWFsbC1mZWF0dXJlcyAtLWZhaWwtdW5kZXItbGluZXMgOTVgCiAgLSBBbHRlcm5hdGl2ZTogYGNhcmdvIHRhcnBhdWxpbiAtLWFsbCAtLWZhaWwtdW5kZXIgOTVgCgojIyBDdXJyZW50IFRhc2sgRG9jdW1lbnRhdGlvbgoKe3sjaWYgdGFza19pZH19CioqWW91ciBjdXJyZW50IHRhc2sgKHt7dGFza19pZH19KSBkb2N1bWVudGF0aW9uOioqCi0gU2VlIEB0YXNrL3Rhc2subWQgZm9yIHJlcXVpcmVtZW50cyBhbmQgZGVzY3JpcHRpb24KLSBTZWUgQHRhc2svYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCBmb3Igc3VjY2VzcyBjcml0ZXJpYQotIFNlZSBAdGFzay9hcmNoaXRlY3R1cmUubWQgZm9yIHRlY2huaWNhbCBhcHByb2FjaCBhbmQgZ3VpZGFuY2UKe3tlbHNlfX0KKipHZW5lcmFsIHByb2plY3QgZG9jdW1lbnRhdGlvbjoqKgotIFNlZSBAUkVBRE1FLm1kIGZvciBwcm9qZWN0IG92ZXJ2aWV3IGFuZCBzZXR1cCBpbnN0cnVjdGlvbnMKLSBTZWUgQC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIHBhdHRlcm5zCi0gU2VlIEAudGFza21hc3Rlci9kb2NzL3ByZC50eHQgZm9yIHByb2R1Y3QgcmVxdWlyZW1lbnRzCnt7L2lmfX0KCiMjIFN5c3RlbSBBcmNoaXRlY3R1cmUgJiBDb250ZXh0CgpTZWUgQC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIHBhdHRlcm5zIGFuZCBhcmNoaXRlY3R1cmFsIGRlY2lzaW9ucwp7eyNpZiBkb2NzUmVwb3NpdG9yeVVybH19U2VlIEAudGFza21hc3Rlci9kb2NzL3ByZC50eHQgZm9yIGNvbXBsZXRlIHByb2R1Y3QgcmVxdWlyZW1lbnRze3svaWZ9fQoKIyMgSW1wbGVtZW50YXRpb24gV29ya2Zsb3cKCnt7I2lmIHRhc2tfaWR9fQojIyMgQ3VycmVudCBUYXNrIFByb2Nlc3MKMS4gKipVbmRlcnN0YW5kKio6IFJlYWQgQHRhc2svdGFzay5tZCBmb3IgcmVxdWlyZW1lbnRzCjIuICoqUGxhbioqOiBSZXZpZXcgQHRhc2svYXJjaGl0ZWN0dXJlLm1kIGZvciB0ZWNobmljYWwgYXBwcm9hY2gKMy4gKipWYWxpZGF0ZSoqOiBDaGVjayBAdGFzay9hY2NlcHRhbmNlLWNyaXRlcmlhLm1kIGZvciBzdWNjZXNzIGNyaXRlcmlhCjQuICoqQ29kZSoqOiBGb2xsb3cgcGF0dGVybnMgaW4gQGNvZGluZy1ndWlkZWxpbmVzLm1kCjUuICoqQ29tbWl0Kio6IFVzZSBzdGFuZGFyZHMgZnJvbSBAZ2l0aHViLWd1aWRlbGluZXMubWQKNi4gKipUZXN0Kio6IFZlcmlmeSBhbGwgYWNjZXB0YW5jZSBjcml0ZXJpYSBhcmUgbWV0CgojIyMgVGFzayBDb250ZXh0Ci0gKipUYXNrIElEKio6IHt7dGFza19pZH19Ci0gKipSZXBvc2l0b3J5Kio6IHt7cmVwb3NpdG9yeV91cmx9fQotICoqQnJhbmNoKio6IHt7ZG9jc19icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19Cnt7ZWxzZX19CiMjIyBHZW5lcmFsIERldmVsb3BtZW50IFByb2Nlc3MKMS4gKipFeHBsb3JlKio6IFVuZGVyc3RhbmQgZXhpc3RpbmcgY29kZWJhc2Ugc3RydWN0dXJlCjIuICoqUGxhbioqOiBGb2xsb3cgZXN0YWJsaXNoZWQgcGF0dGVybnMgYW5kIGNvbnZlbnRpb25zCjMuICoqSW1wbGVtZW50Kio6IEFkaGVyZSB0byBAY29kaW5nLWd1aWRlbGluZXMubWQgc3RhbmRhcmRzCjQuICoqVGVzdCoqOiBFbnN1cmUgY2hhbmdlcyBtZWV0IHByb2plY3QgcXVhbGl0eSBzdGFuZGFyZHMKNS4gKipDb21taXQqKjogRm9sbG93IEBnaXRodWItZ3VpZGVsaW5lcy5tZCB3b3JrZmxvdwp7ey9pZn19CgojIyBRdWljayBDb21tYW5kIFJlZmVyZW5jZQoKIyMjIFRlc3RpbmcgJiBRdWFsaXR5CmBgYGJhc2gKIyBSdXN0OiBydW4gdGVzdHMKY2FyZ28gdGVzdCAtLXdvcmtzcGFjZSAtLWFsbC1mZWF0dXJlcwoKIyBSdXN0OiBmb3JtYXR0aW5nIChtdXN0IHBhc3MgYmVmb3JlIFBSKQpjYXJnbyBmbXQgLS1hbGwgLS0gLS1jaGVjawoKIyBSdXN0OiBjbGlwcHkgd2l0aCBwZWRhbnRpYyBhbmQgZGVueSB3YXJuaW5ncyAobXVzdCBwYXNzIGJlZm9yZSBQUikKY2FyZ28gY2xpcHB5IC0td29ya3NwYWNlIC0tYWxsLXRhcmdldHMgLS1hbGwtZmVhdHVyZXMgLS0gLUQgd2FybmluZ3MgLVcgY2xpcHB5OjpwZWRhbnRpYwoKIyBPcHRpb25hbDogY292ZXJhZ2UgdGFyZ2V0cyAocmVjb21tZW5kZWQg4omlOTUlKQpjYXJnbyBsbHZtLWNvdiAtLXdvcmtzcGFjZSAtLWFsbC1mZWF0dXJlcyAtLWZhaWwtdW5kZXItbGluZXMgOTUgfHwgXAogIGNhcmdvIHRhcnBhdWxpbiAtLWFsbCAtLWZhaWwtdW5kZXIgOTUKCiMgQnVpbGQgdmVyaWZpY2F0aW9uCmNhcmdvIGJ1aWxkIC0td29ya3NwYWNlIC0tYWxsLWZlYXR1cmVzCmBgYAoKIyMjIEdpdCBXb3JrZmxvdwpgYGBiYXNoCnt7I2lmIHRhc2tfaWR9fQojIENvbW1pdCB3aXRoIHRhc2stc3BlY2lmaWMgbWVzc2FnZSAoc2VlIEBnaXRodWItZ3VpZGVsaW5lcy5tZCBmb3IgZGV0YWlscykKZ2l0IGNvbW1pdCAtbSAiZmVhdCh0YXNrLXt7dGFza19pZH19KTogaW1wbGVtZW50IFticmllZiBkZXNjcmlwdGlvbl0KCi0gW3NwZWNpZmljIGNoYW5nZXMgbWFkZV0KLSBbdGVzdHMgYWRkZWQvdXBkYXRlZF0KLSBbbWVldHMgYWNjZXB0YW5jZSBjcml0ZXJpYTogWCwgWSwgWl0iCnt7ZWxzZX19CiMgU3RhbmRhcmQgY29tbWl0IG1lc3NhZ2UgKHNlZSBAZ2l0aHViLWd1aWRlbGluZXMubWQgZm9yIGZvcm1hdCkKZ2l0IGNvbW1pdCAtbSAiZmVhdDogaW1wbGVtZW50IFticmllZiBkZXNjcmlwdGlvbl0iCnt7L2lmfX0KYGBgCgojIyBQdWxsIFJlcXVlc3QgUmVxdWlyZW1lbnRzCgoqKkNSSVRJQ0FMKio6IEFmdGVyIGNvbXBsZXRpbmcgaW1wbGVtZW50YXRpb24sIGNyZWF0ZSBgUFJfREVTQ1JJUFRJT04ubWRgIGluIHRoZSB3b3JraW5nIGRpcmVjdG9yeSByb290IHdpdGg6CgoxLiBDb25jaXNlIGltcGxlbWVudGF0aW9uIHN1bW1hcnkgKDItMyBzZW50ZW5jZXMpCjIuIEtleSBjaGFuZ2VzIG1hZGUgKGJ1bGxldCBwb2ludHMpCjMuIEltcG9ydGFudCByZXZpZXdlciBub3Rlcwo0LiBUZXN0aW5nIHJlY29tbWVuZGF0aW9ucwoKVGhpcyBmaWxlIGVuYWJsZXMgYXV0b21hdGljIHB1bGwgcmVxdWVzdCBjcmVhdGlvbi4KCioqSU1QT1JUQU5UIFBSIEhBTkRMSU5HKio6Ci0gQWx3YXlzIGNoZWNrIGlmIGEgUFIgYWxyZWFkeSBleGlzdHMgZm9yIHRoaXMgdGFzayBiZWZvcmUgY3JlYXRpbmcgUFJfREVTQ1JJUFRJT04ubWQKLSBVc2UgYGdoIHByIGxpc3QgLS1zdGF0ZSBhbGwgLS1sYWJlbCAidGFzay17e3Rhc2tfaWR9fSJgIHRvIGZpbmQgZXhpc3RpbmcgUFJzIGZvciB5b3VyIHRhc2sKLSBJZiBhIFBSIGV4aXN0cyBhbmQgaXMgT1BFTjogZG8gTk9UIGNyZWF0ZSBQUl9ERVNDUklQVElPTi5tZCAoY29udGludWUgd29ya2luZyBvbiB0aGUgZXhpc3RpbmcgUFIpCi0gSWYgYSBQUiBleGlzdHMgYW5kIGlzIE1FUkdFRDogdGhlIHRhc2sgaXMgY29tcGxldGUgLSBkbyBOT1QgY3JlYXRlIGEgbmV3IFBSCi0gSWYgYSBQUiBleGlzdHMgYW5kIGlzIENMT1NFRCAobm90IG1lcmdlZCk6IGNyZWF0ZSBhIG5ldyBQUiB3aXRoIFBSX0RFU0NSSVBUSU9OLm1kCi0gT25seSBjcmVhdGUgUFJfREVTQ1JJUFRJT04ubWQgd2hlbiB0aGVyZSdzIG5vIG9wZW4gUFIgb3Igd2hlbiByZW9wZW5pbmcgYWZ0ZXIgYSBjbG9zZWQgKHVubWVyZ2VkKSBQUgoKQWRkaXRpb25hbCBQUiBnYXRpbmcgcnVsZXM6Ci0gRG8gTk9UIG9wZW4gYSBQUiB1bmxlc3M6IGBjYXJnbyBmbXQgLS1hbGwgLS0gLS1jaGVja2AgcGFzc2VzLCBgY2FyZ28gY2xpcHB5IC4uLiAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljYCBwYXNzZXMsIGFuZCBhbGwgdGVzdHMgcGFzcwotIEFpbSBmb3Ig4omlOTUlIGNvdmVyYWdlOyB0YXJnZXQgfjEwMCUgb24gY3JpdGljYWwgY29kZSBwYXRocyBiZWZvcmUgUFIKCiMjIERldmVsb3BtZW50IFRvb2xzICYgUGF0dGVybnMKCiMjIyBDbGF1ZGUgQ29kZSBJbnRlZ3JhdGlvbgotIFVzZSBgTFNgIGFuZCBgR2xvYmAgdG8gZXhwbG9yZSBjb2RlYmFzZSBzdHJ1Y3R1cmUKLSBVc2UgYFJlYWRgIHRvIGV4YW1pbmUgZXhpc3RpbmcgY29kZSBwYXR0ZXJucwotIFVzZSBgR3JlcGAgdG8gZmluZCBzaW1pbGFyIGltcGxlbWVudGF0aW9ucwotIFVzZSBgRWRpdGAgZm9yIHRhcmdldGVkIGNoYW5nZXMsIGBNdWx0aUVkaXRgIGZvciByZWxhdGVkIGNoYW5nZXMKLSBWYWxpZGF0ZSB3aXRoIGBCYXNoYCBjb21tYW5kcyBhZnRlciBlYWNoIGNoYW5nZQoKIyMjIEltcGxlbWVudGF0aW9uIEd1aWRlbGluZXMKe3sjaWYgdGFza19pZH19Ci0gRm9jdXMgb24gY3VycmVudCB0YXNrIHJlcXVpcmVtZW50cyBpbiBgdGFzay9gIGRpcmVjdG9yeQotIEZvbGxvdyBhcmNoaXRlY3R1cmFsIGd1aWRhbmNlIHByb3ZpZGVkIGluIEB0YXNrL2FyY2hpdGVjdHVyZS5tZAotIEVuc3VyZSBhbGwgYWNjZXB0YW5jZSBjcml0ZXJpYSBhcmUgbWV0IGJlZm9yZSBjb21wbGV0aW9uCi0gVXNlIGVzdGFibGlzaGVkIHBhdHRlcm5zIGZyb20gQGNvZGluZy1ndWlkZWxpbmVzLm1kCnt7ZWxzZX19Ci0gRXhwbG9yZSBleGlzdGluZyBjb2RlYmFzZSBzdHJ1Y3R1cmUgYmVmb3JlIG1ha2luZyBjaGFuZ2VzCi0gRm9sbG93IGVzdGFibGlzaGVkIHBhdHRlcm5zIGFuZCBjb252ZW50aW9ucwotIEVuc3VyZSBjaGFuZ2VzIGFsaWduIHdpdGggcHJvamVjdCBhcmNoaXRlY3R1cmUKLSBNYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHVubGVzcyBleHBsaWNpdGx5IGNoYW5naW5nIGludGVyZmFjZXMKe3svaWZ9fQoKLS0tCgoqQWxsIHJlZmVyZW5jZWQgZmlsZXMgKEBmaWxlbmFtZSkgYXJlIGF1dG9tYXRpY2FsbHkgaW1wb3J0ZWQgaW50byBDbGF1ZGUncyBjb250ZXh0LiBGb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gYW55IHRvcGljLCByZWZlciB0byB0aGUgc3BlY2lmaWMgaW1wb3J0ZWQgZmlsZXMgYWJvdmUuKg==
  code_client-config.json.hbs: ewogIHt7I2lmIHJlbW90ZV90b29sc319CiAgInJlbW90ZVRvb2xzIjogWwogICAge3sjZWFjaCByZW1vdGVfdG9vbHN9fQogICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICB7ey9lYWNofX0KICBde3sjaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0se3svaWZ9fQogIHt7ZWxzZX19CiAge3sjaWYgKGVxIHRvb2xfY29uZmlnICJtaW5pbWFsIil9fQogICJyZW1vdGVUb29scyI6IFtde3sjaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0se3svaWZ9fQogIHt7ZWxzZSBpZiAoZXEgdG9vbF9jb25maWcgImRlZmF1bHQiKX19CiAgInJlbW90ZVRvb2xzIjogWwogICAgImJyYXZlLXNlYXJjaF9icmF2ZV93ZWJfc2VhcmNoIiwKICAgICJtZW1vcnlfY3JlYXRlX2VudGl0aWVzIiwKICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgXXt7I2lmIChlcSB0b29sX2NvbmZpZyAiYWR2YW5jZWQiKX19LHt7L2lmfX0KICB7e2Vsc2UgaWYgKGVxIHRvb2xfY29uZmlnICJhZHZhbmNlZCIpfX0KICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYnJhdmUtc2VhcmNoX2JyYXZlX3dlYl9zZWFyY2giLAogICAgIm1lbW9yeV9jcmVhdGVfZW50aXRpZXMiLAogICAgInJ1c3Rkb2NzX3F1ZXJ5X3J1c3RfZG9jcyIsCiAgICAiZ2l0aHViX2NyZWF0ZV9pc3N1ZSIsCiAgICAia3ViZXJuZXRlc19saXN0UmVzb3VyY2VzIiwKICAgICJ0ZXJyYWZvcm1fbGlzdF9wcm92aWRlcnMiCiAgXSwKICB7e2Vsc2V9fQogICJyZW1vdGVUb29scyI6IFsKICAgICJicmF2ZS1zZWFyY2hfYnJhdmVfd2ViX3NlYXJjaCIsCiAgICAibWVtb3J5X2NyZWF0ZV9lbnRpdGllcyIsCiAgICAicnVzdGRvY3NfcXVlcnlfcnVzdF9kb2NzIgogIF17eyNpZiAoZXEgdG9vbF9jb25maWcgImFkdmFuY2VkIil9fSx7ey9pZn19CiAge3svaWZ9fQogIHt7L2lmfX0KICB7eyNpZiAoZXEgdG9vbF9jb25maWcgImFkdmFuY2VkIil9fQogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsKICAgICAgICB7eyNpZiBsb2NhbF90b29sc319CiAgICAgICAge3sjZWFjaCBsb2NhbF90b29sc319CiAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAge3svZWFjaH19CiAgICAgICAge3tlbHNlfX0KICAgICAgICAicmVhZF9maWxlIiwKICAgICAgICAid3JpdGVfZmlsZSIsCiAgICAgICAgImxpc3RfZGlyZWN0b3J5IiwKICAgICAgICAiY3JlYXRlX2RpcmVjdG9yeSIKICAgICAgICB7ey9pZn19CiAgICAgIF0sCiAgICAgICJ3b3JraW5nRGlyZWN0b3J5IjogInByb2plY3Rfcm9vdCIKICAgIH0KICB9CiAge3svaWZ9fQp9
  code_coding-guidelines.md.hbs: 
  code_container-cleo.sh.hbs: 
  code_container-rex-remediation.sh.hbs: 
  code_container-rex.sh.hbs: 
  code_container-tess.sh.hbs: 
  code_container.sh.hbs: 
  code_github-guidelines.md.hbs: 
  code_mcp.json.hbs: ewogICJtY3BTZXJ2ZXJzIjogewogICAgInRvb2xtYW4iOiB7CiAgICAgICJjb21tYW5kIjogInRvb2xtYW4iLAogICAgICAiYXJncyI6IFsKICAgICAgICAiLS13b3JraW5nLWRpciIsCiAgICAgICAgIi93b3Jrc3BhY2UiCiAgICAgIF0sCiAgICAgICJlbnYiOiB7CiAgICAgICAgIlRPT0xNQU5fU0VSVkVSX1VSTCI6ICJodHRwOi8vdG9vbG1hbi5hZ2VudC1wbGF0Zm9ybS5zdmMuY2x1c3Rlci5sb2NhbDozMDAwL21jcCIKICAgICAgfQogICAgfQogIH0KfQ==
  code_settings.json.hbs: ewogICJlbmFibGVBbGxQcm9qZWN0TWNwU2VydmVycyI6IHRydWUsCiAgInBlcm1pc3Npb25zIjogewogICAgImFsbG93IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuYWxsb3d9fQogICAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgICAge3svZWFjaH19CiAgICAgIHt7ZWxzZX19CiAgICAgICJCYXNoIiwKICAgICAgIkVkaXQiLAogICAgICAiUmVhZCIsCiAgICAgICJXcml0ZSIsCiAgICAgICJNdWx0aUVkaXQiLAogICAgICAiR2xvYiIsCiAgICAgICJHcmVwIiwKICAgICAgIkxTIiwKICAgICAgIlRhc2siLAogICAgICAiRXhpdFBsYW5Nb2RlIiwKICAgICAgIk5vdGVib29rUmVhZCIsCiAgICAgICJOb3RlYm9va0VkaXQiLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiV2ViU2VhcmNoIiwKICAgICAgIlRvZG9SZWFkIiwKICAgICAgIlRvZG9Xcml0ZSIKICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZW55IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuZGVueX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgICAge3tlbHNlfX0KICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZWZhdWx0TW9kZSI6ICJhY2NlcHRFZGl0cyIKICB9LAogICJlbnYiOiB7CiAgICAiTk9ERV9FTlYiOiAicHJvZHVjdGlvbiIsCiAgICAiRElTQUJMRV9BVVRPVVBEQVRFUiI6ICIxIiwKICAgICJESVNBQkxFX0NPU1RfV0FSTklOR1MiOiAiMCIsCiAgICAiRElTQUJMRV9OT05fRVNTRU5USUFMX01PREVMX0NBTExTIjogIjAiLAogICAgIkNMQVVERV9CQVNIX01BSU5UQUlOX1BST0pFQ1RfV09SS0lOR19ESVIiOiAidHJ1ZSIsCiAgICAiQ0xBVURFX0NPREVfRU5BQkxFX1RFTEVNRVRSWSI6ICJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19MXt7ZWxzZX19MHt7L2lmfX0ie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fSwKICAgICJPVEVMX01FVFJJQ1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9MT0dTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0VORFBPSU5UIjogIm90ZWwtY29sbGVjdG9yLW9wZW50ZWxlbWV0cnktY29sbGVjdG9yLnRlbGVtZXRyeS5zdmMuY2x1c3Rlci5sb2NhbDo0MzE3IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19QUk9UT0NPTCI6ICJncnBjIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJvdGVsLWNvbGxlY3Rvci1vcGVudGVsZW1ldHJ5LWNvbGxlY3Rvci50ZWxlbWV0cnkuc3ZjLmNsdXN0ZXIubG9jYWw6NDMxNyIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAiZ3JwYyJ7ey9pZn19e3sjaWYgcmV0cnkuaXNfcmV0cnl9fSwKICAgICJCQVNIX0RFRkFVTFRfVElNRU9VVF9NUyI6ICIzMDAwMCIsCiAgICAiQkFTSF9NQVhfVElNRU9VVF9NUyI6ICIzMDAwMDAie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogNywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlCn0=
  docs_claude.md.hbs: IyBDbGF1ZGUgQ29kZSBNZW1vcnkKCllvdSBhcmUgd29ya2luZyBvbiBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uCgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tzb3VyY2VfYnJhbmNofX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQotICoqRG9jdW1lbnRhdGlvbiBUYXJnZXQqKjoge3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19YWxsIHRhc2tze3svaWZ9fQoKIyMgVGFzayBNYXN0ZXIgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uCgpZb3VyIHJvbGUgaXMgdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5OgoKMS4gKipSZWFkaW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcyoqIGZyb20gYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L3Rhc2sudHh0YAoyLiAqKkNoZWNraW5nIGZvciBleGlzdGluZyBkb2N1bWVudGF0aW9uKiogYW5kIHNraXBwaW5nIGNvbXBsZXRlZCB0YXNrcwozLiAqKkNyZWF0aW5nIGV4YWN0bHkgMyBmaWxlcyoqIGZvciBlYWNoIGluY29tcGxldGUgdGFzazoKICAgLSBgdGFzay5tZGAgLSBDb21wcmVoZW5zaXZlIHRhc2sgb3ZlcnZpZXcgYW5kIGltcGxlbWVudGF0aW9uIGd1aWRlCiAgIC0gYHByb21wdC5tZGAgLSBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCiAgIC0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIC0gQ2xlYXIgYWNjZXB0YW5jZSBjcml0ZXJpYSBhbmQgdGVzdCBjYXNlcwoKIyMgQ3JpdGljYWwgSW5zdHJ1Y3Rpb25zCgoqKlNLSVAgVEFTS1MgV0lUSCBDT01QTEVURSBET0NVTUVOVEFUSU9OOioqCkJlZm9yZSBwcm9jZXNzaW5nIGFueSB0YXNrLCBjaGVjayBpZiBBTEwgcmVxdWlyZWQgZmlsZXMgYWxyZWFkeSBleGlzdCB3aXRoIHN1YnN0YW50aWFsIGNvbnRlbnQ6Ci0gYHRhc2subWRgCi0gYHByb21wdC5tZGAKLSBgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAKCklmIEFMTCB0aHJlZSBmaWxlcyBleGlzdCBhbmQgaGF2ZSBzdWJzdGFudGlhbCBjb250ZW50LCBTS0lQIHRoYXQgdGFzay4KCioqUFJPQ0VTUyBPTkxZIElOQ09NUExFVEUgVEFTS1M6KioKT25seSBnZW5lcmF0ZSBkb2N1bWVudGF0aW9uIGZvciB0YXNrcyBtaXNzaW5nIG9uZSBvciBtb3JlIG9mIHRoZSByZXF1aXJlZCBmaWxlcy4KCioqRklMRSBMT0NBVElPTlM6KioKQWxsIGRvY3VtZW50YXRpb24gZ29lcyBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIERvY3VtZW50YXRpb24gU3RhbmRhcmRzCgotICoqdGFzay5tZCoqOiBUZWNobmljYWwgaW1wbGVtZW50YXRpb24gZ3VpZGUgd2l0aCBjbGVhciBzdGVwcwotICoqcHJvbXB0Lm1kKio6IFN0YW5kYWxvbmUgcHJvbXB0IGZvciBhdXRvbm9tb3VzIEFJIGFnZW50cwotICoqYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCoqOiBUZXN0YWJsZSBjb21wbGV0aW9uIGNyaXRlcmlhCi0gVXNlIGNsZWFyLCBwcm9mZXNzaW9uYWwgbGFuZ3VhZ2UKLSBJbmNsdWRlIGNvZGUgZXhhbXBsZXMgd2hlcmUgaGVscGZ1bAotIFJlZmVyZW5jZSBleGlzdGluZyBhcmNoaXRlY3R1cmUgcGF0dGVybnMKLSBGb2xsb3cgVGFzayBNYXN0ZXIgY29udmVudGlvbnMKCiMjIFJlc291cmNlcwoKU2VlIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIGRldGFpbHMKU2VlIC50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCBmb3IgcHJvZHVjdCByZXF1aXJlbWVudHMKSW5kaXZpZHVhbCB0YXNrIGZpbGVzIGFyZSBhdmFpbGFibGUgYXQgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHQKCiMjIFJlcG9zaXRvcnkgQ29udGV4dAoKVGhpcyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaXMgd29ya2luZyB3aXRoOgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkJyYW5jaCoqOiB7e3NvdXJjZV9icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpFbnN1cmUgYWxsIGZpbGUgcGF0aHMgYW5kIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4=
  docs_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==
  docs_container.sh.hbs: 
  docs_prompt.md.hbs: 
  docs_settings.json.hbs: ewogICJwZXJtaXNzaW9ucyI6IHsKICAgICJhbGxvdyI6IFsKICAgICAge3sjaWYgYWdlbnRfdG9vbHNfb3ZlcnJpZGV9fQogICAgICB7eyNlYWNoIHBlcm1pc3Npb25zLmFsbG93fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICAiQmFzaCIsCiAgICAgICJFZGl0IiwKICAgICAgIlJlYWQiLAogICAgICAiV3JpdGUiLAogICAgICAiTXVsdGlFZGl0IiwKICAgICAgIkdsb2IiLAogICAgICAiR3JlcCIsCiAgICAgICJMUyIsCiAgICAgICJXZWJTZWFyY2giLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiVGFzayIsCiAgICAgICJFeGl0UGxhbk1vZGUiLAogICAgICAiVG9kb1JlYWQiLAogICAgICAiVG9kb1dyaXRlIgogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlbnkiOiBbCiAgICAgIHt7I2lmIGFnZW50X3Rvb2xzX292ZXJyaWRlfX0KICAgICAge3sjZWFjaCBwZXJtaXNzaW9ucy5kZW55fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlZmF1bHRNb2RlIjogImFjY2VwdEVkaXRzIgogIH0sCiAgImVudiI6IHsKICAgICJOT0RFX0VOViI6ICJwcm9kdWN0aW9uIiwKICAgICJESVNBQkxFX0FVVE9VUERBVEVSIjogIjEiLAogICAgIkRJU0FCTEVfQ09TVF9XQVJOSU5HUyI6ICIxIiwKICAgICJESVNBQkxFX05PTl9FU1NFTlRJQUxfTU9ERUxfQ0FMTFMiOiAiMSIsCiAgICAiQ0xBVURFX0JBU0hfTUFJTlRBSU5fUFJPSkVDVF9XT1JLSU5HX0RJUiI6ICJ0cnVlIiwKICAgICJDTEFVREVfQ09ERV9FTkFCTEVfVEVMRU1FVFJZIjogInt7I2lmIHRlbGVtZXRyeS5lbmFibGVkfX0xe3tlbHNlfX0we3svaWZ9fSJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19LAogICAgIk9URUxfTUVUUklDU19FWFBPUlRFUiI6ICJvdGxwIiwKICAgICJPVEVMX0xPR1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfRU5EUE9JTlQiOiAie3t0ZWxlbWV0cnkub3RscEVuZHBvaW50fX0iLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX1BST1RPQ09MIjogInt7dGVsZW1ldHJ5Lm90bHBQcm90b2NvbH19IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJ7e3RlbGVtZXRyeS5vdGxwRW5kcG9pbnR9fSIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAie3t0ZWxlbWV0cnkub3RscFByb3RvY29sfX0ie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogMywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlLAogICJob29rcyI6IHsKICAgICJQb3N0VG9vbFVzZSI6IFsKICAgICAgewogICAgICAgICJtYXRjaGVyIjogIldyaXRlIiwKICAgICAgICAiaG9va3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLAogICAgICAgICAgICAiY29tbWFuZCI6ICIvd29ya3NwYWNlL3t7I2lmIHdvcmtpbmdfZGlyZWN0b3J5fX17e3dvcmtpbmdfZGlyZWN0b3J5fX17e2Vsc2V9fS57ey9pZn19L2FmdGVyLWZpbGUtc2F2ZWQuc2giCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICBdCiAgfQp9Cg==
  docs_toolman-catalog.md.hbs: e3shLS0KVG9vbG1hbiBDYXRhbG9nIE1hcmtkb3duIFRlbXBsYXRlIGZvciBEb2NzIEFnZW50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyB0ZW1wbGF0ZSByZW5kZXJzIHRoZSB0b29sbWFuIGNhdGFsb2cgZGF0YSBpbnRvIG1hcmtkb3duIGZvcm1hdCBmb3IgZW1iZWRkaW5nCmluIHRoZSBkb2NzIGFnZW50J3MgcHJvbXB0LiBUaGUgYWdlbnQgdXNlcyB0aGlzIGluZm9ybWF0aW9uIHRvIHNlbGVjdCBhcHByb3ByaWF0ZQp0b29scyB3aGVuIGdlbmVyYXRpbmcgdGFzay1zcGVjaWZpYyB0b29sbWFuLWNvbmZpZy5qc29uIGZpbGVzLgoKVGVtcGxhdGUgVmFyaWFibGVzOgotIHRvb2xtYW5fY2F0YWxvZzogQ29tcGxldGUgdG9vbCBjYXRhbG9nIGZyb20gdG9vbG1hbi10b29sLWNhdGFsb2cgQ29uZmlnTWFwCi0gdG90YWxfdG9vbF9jb3VudDogVG90YWwgbnVtYmVyIG9mIGF2YWlsYWJsZSB0b29scwotIGdlbmVyYXRlZF90aW1lc3RhbXA6IFVuaXggdGltZXN0YW1wIG9mIGdlbmVyYXRpb24KLS19fQoKIyBBdmFpbGFibGUgVG9vbHMgQ2F0YWxvZwoKKipUb3RhbCBUb29scyBBdmFpbGFibGUqKjoge3t0b3RhbF90b29sX2NvdW50fX0KKipHZW5lcmF0ZWQqKjoge3tnZW5lcmF0ZWRfdGltZXN0YW1wfX0KClVzZSB0aGlzIGNhdGFsb2cgdG8gc2VsZWN0IGFwcHJvcHJpYXRlIHRvb2xzIGZvciBlYWNoIHRhc2sgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gcmVxdWlyZW1lbnRzLgoKIyMgTG9jYWwgU2VydmVycwoKTG9jYWwgc2VydmVycyBydW4gd2l0aGluIHRoZSBhZ2VudCdzIGVudmlyb25tZW50IGFuZCBwcm92aWRlIGZpbGUgc3lzdGVtIGFuZCBsb2NhbCBvcGVyYXRpb25zLgoKe3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqQ29tbWFuZCoqOiBge3t0aGlzLmNvbW1hbmR9fWAKKipBcmd1bWVudHMqKjoge3sjZWFjaCB0aGlzLmFyZ3N9fWB7e3RoaXN9fWB7eyN1bmxlc3MgQGxhc3R9fSB7ey91bmxlc3N9fXt7L2VhY2h9fQoqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7dGhpcy53b3JraW5nX2RpcmVjdG9yeX19CgoqKkF2YWlsYWJsZSBUb29scyoqOgp7eyNlYWNoIHRoaXMudG9vbHN9fQotICoqYHt7dGhpcy5uYW1lfX1gKiogKHt7dGhpcy5jYXRlZ29yeX19KQogIC0gKipEZXNjcmlwdGlvbioqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogIC0gKipVc2UgQ2FzZXMqKjoge3sjZWFjaCB0aGlzLnVzZV9jYXNlc319e3t0aGlzfX17eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX0Ke3svZWFjaH19Cgp7ey9lYWNofX0KCiMjIFJlbW90ZSBUb29scwoKUmVtb3RlIHRvb2xzIGFyZSBhdmFpbGFibGUgdmlhIE1DUCBzZXJ2ZXJzIHJ1bm5pbmcgaW4gdGhlIGNsdXN0ZXIuCgp7eyNlYWNoIHRvb2xtYW5fY2F0YWxvZy5yZW1vdGV9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqRW5kcG9pbnQqKjoge3t0aGlzLmVuZHBvaW50fX0KCioqQXZhaWxhYmxlIFRvb2xzKio6Cnt7I2VhY2ggdGhpcy50b29sc319Ci0gKipge3t0aGlzLm5hbWV9fWAqKiAoe3t0aGlzLmNhdGVnb3J5fX0pCiAgLSAqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CiAgLSAqKlVzZSBDYXNlcyoqOiB7eyNlYWNoIHRoaXMudXNlX2Nhc2VzfX17e3RoaXN9fXt7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fQp7ey9lYWNofX0KCnt7L2VhY2h9fQoKIyMgVG9vbCBTZWxlY3Rpb24gR3VpZGVsaW5lcwoKIyMjIEhvdyB0byBTZWxlY3QgVG9vbHMKCjEuICoqQW5hbHl6ZSBUYXNrIFJlcXVpcmVtZW50cyoqOiBSZWFkIHRoZSB0YXNrIGRlc2NyaXB0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGNhcmVmdWxseQoyLiAqKk1hdGNoIENhdGVnb3JpZXMqKjogTG9vayBmb3IgdG9vbHMgd2hvc2UgY2F0ZWdvcmllcyBhbGlnbiB3aXRoIHlvdXIgdGFzayBuZWVkczoKICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQogICAgIHt7I2VhY2ggdGhpcy50b29sc319CiAgIC0gKip7e3RoaXMuY2F0ZWdvcnl9fSoqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogICAgIHt7L2VhY2h9fQogICB7ey9lYWNofX0KICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cucmVtb3RlfX0KICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAtICoqe3t0aGlzLmNhdGVnb3J5fX0qKjoge3t0aGlzLmRlc2NyaXB0aW9ufX0KICAgICB7ey9lYWNofX0KICAge3svZWFjaH19CjMuICoqQ2hlY2sgVXNlIENhc2VzKio6IE1hdGNoIHRvb2wgdXNlIGNhc2VzIHRvIHlvdXIgc3BlY2lmaWMgdGFzayByZXF1aXJlbWVudHMKNC4gKipCZSBTZWxlY3RpdmUqKjogT25seSBpbmNsdWRlIHRvb2xzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpYyB0YXNrCgojIyMgQ29uZmlndXJhdGlvbiBGb3JtYXQKCioq8J+aqCBDUklUSUNBTDogY2xpZW50LWNvbmZpZy5qc29uIE1VU1QgdXNlIHRoaXMgRVhBQ1QgZm9ybWF0IC0gbm90aGluZyBlbHNlISoqCgpgYGBqc29uCnsKICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYWN0dWFsX3Rvb2xfbmFtZV9mcm9tX2NhdGFsb2ciLAogICAgImFub3RoZXJfdG9vbF9uYW1lX2Zyb21fY2F0YWxvZyIKICBdLAogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsicmVhZF9maWxlIiwgIndyaXRlX2ZpbGUiLCAibGlzdF9kaXJlY3RvcnkiLCAiY3JlYXRlX2RpcmVjdG9yeSIsICJlZGl0X2ZpbGUiXSwKICAgICAgIndvcmtpbmdEaXJlY3RvcnkiOiAicHJvamVjdF9yb290IgogICAgfQogIH0KfQpgYGAKCioq4p2MIE5FVkVSIGdlbmVyYXRlIHRhc2sgc3BlY2lmaWNhdGlvbiBkb2N1bWVudHMgd2l0aCBmaWVsZHMgbGlrZToqKgotIGB0YXNrX2lkYCwgYHRhc2tfbmFtZWAsIGB0YXNrX3R5cGVgLCBgcHJpb3JpdHlgLCBgc3RhdHVzYAotIGByZXF1aXJlZF90b29sc2AsIGByZWNvbW1lbmRlZF90b29sc2AsIGBvcHRpb25hbF90b29sc2AKLSBgdG9vbF9jb25maWd1cmF0aW9uYCwgYHRlY2huaWNhbF9yZXF1aXJlbWVudHNgLCBgdGVzdGluZ19yZXF1aXJlbWVudHNgCi0gQ29tcGxleCBuZXN0ZWQgb2JqZWN0cyBvciBtZXRhZGF0YQoKKirinIUgT05MWSBnZW5lcmF0ZSBzaW1wbGUgTUNQIGNsaWVudCBjb25maWd1cmF0aW9uIHdpdGg6KioKLSBgcmVtb3RlVG9vbHNgIGFycmF5ICh0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nKQotIGBsb2NhbFNlcnZlcnNgIG9iamVjdCAoZXhhY3QgY29tbWFuZC9hcmdzIHNob3duIGFib3ZlKQoKIyMjIEV4YW1wbGUgVG9vbCBTZWxlY3Rpb25zCgoqKkZvciBmaWxlIG9wZXJhdGlvbnMqKjogSW5jbHVkZSB0b29scyBmcm9tIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVyIGxpa2UgYHJlYWRfZmlsZWAsIGB3cml0ZV9maWxlYCwgYGxpc3RfZGlyZWN0b3J5YAoKKipGb3IgcmVzZWFyY2gvZG9jdW1lbnRhdGlvbioqOiBJbmNsdWRlIHJlbW90ZSB0b29scyBsaWtlIHNlYXJjaCBhbmQgZG9jdW1lbnRhdGlvbiB0b29scwoKKipGb3IgaW5mcmFzdHJ1Y3R1cmUgdGFza3MqKjogSW5jbHVkZSBLdWJlcm5ldGVzIGFuZCBzeXN0ZW0gbWFuYWdlbWVudCB0b29scwoKKipGb3IgZGV2ZWxvcG1lbnQgdGFza3MqKjogSW5jbHVkZSByZWxldmFudCBsYW5ndWFnZS1zcGVjaWZpYyBkb2N1bWVudGF0aW9uIHRvb2xzCgojIyMgVmFsaWRhdGlvbiBSZXF1aXJlbWVudHMKCi0g4pyFIFVzZSBzcGVjaWZpYyB0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nIChuZXZlciB3aWxkY2FyZHMpCi0g4pyFIEluY2x1ZGUgY29tcGxldGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gZm9yIGxvY2FsIHNlcnZlcnMKLSDinIUgT25seSBzZWxlY3QgdG9vbHMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmljIHRhc2sKLSDinIUgVXNlIGB3b3JraW5nRGlyZWN0b3J5OiAicHJvamVjdF9yb290ImAgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVycwotIOKchSBWZXJpZnkgYWxsIHRvb2wgbmFtZXMgZXhpc3QgaW4gdGhpcyBjYXRhbG9n
  intake_intake.sh: IyEvYmluL2Jhc2gKc2V0IC1lCgojIEZvcmNlIG91dHB1dCB0byBiZSB1bmJ1ZmZlcmVkCmV4ZWMgMj4mMQpzZXQgLXggICMgRW5hYmxlIGNvbW1hbmQgdHJhY2luZyB0ZW1wb3JhcmlseQoKIyBBZGQgZXJyb3IgdHJhcCBmb3IgZGVidWdnaW5nCnRyYXAgJ2VjaG8gIuKdjCBFcnJvciBvY2N1cnJlZCBhdCBsaW5lICRMSU5FTk8gd2l0aCBleGl0IGNvZGUgJD8uIExhc3QgY29tbWFuZDogJEJBU0hfQ09NTUFORCI7IGV4aXQgMScgRVJSCgplY2hvICLwn5qAIFN0YXJ0aW5nIFByb2plY3QgSW50YWtlIFByb2Nlc3MiCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIKCiMgRGVidWc6IFNob3cgQUxMIGVudmlyb25tZW50IHZhcmlhYmxlcyByZWxhdGVkIHRvIG91ciB3b3JrZmxvdwplY2hvICLwn5SNIERFQlVHOiBFbnZpcm9ubWVudCBWYXJpYWJsZXMgUmVjZWl2ZWQ6IgplY2hvICIgIFBSSU1BUllfTU9ERUw6ICR7UFJJTUFSWV9NT0RFTDotW05PVCBTRVRdfSIKZWNobyAiICBQUklNQVJZX1BST1ZJREVSOiAke1BSSU1BUllfUFJPVklERVI6LVtOT1QgU0VUXX0iCmVjaG8gIiAgUkVTRUFSQ0hfTU9ERUw6ICR7UkVTRUFSQ0hfTU9ERUw6LVtOT1QgU0VUXX0iCmVjaG8gIiAgUkVTRUFSQ0hfUFJPVklERVI6ICR7UkVTRUFSQ0hfUFJPVklERVI6LVtOT1QgU0VUXX0iCmVjaG8gIiAgRkFMTEJBQ0tfTU9ERUw6ICR7RkFMTEJBQ0tfTU9ERUw6LVtOT1QgU0VUXX0iCmVjaG8gIiAgRkFMTEJBQ0tfUFJPVklERVI6ICR7RkFMTEJBQ0tfUFJPVklERVI6LVtOT1QgU0VUXX0iCmVjaG8gIiAgTlVNX1RBU0tTOiAke05VTV9UQVNLUzotW05PVCBTRVRdfSIKZWNobyAiICBFWFBBTkRfVEFTS1M6ICR7RVhQQU5EX1RBU0tTOi1bTk9UIFNFVF19IgplY2hvICIgIEFOQUxZWkVfQ09NUExFWElUWTogJHtBTkFMWVpFX0NPTVBMRVhJVFk6LVtOT1QgU0VUXX0iCmVjaG8gIiAgR0lUSFVCX0FQUDogJHtHSVRIVUJfQVBQOi1bTk9UIFNFVF19IgplY2hvICI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iCgojIExvYWQgY29uZmlndXJhdGlvbiBmcm9tIG1vdW50ZWQgQ29uZmlnTWFwCkNPTkZJR19GSUxFPSIvaW50YWtlLWZpbGVzL2NvbmZpZy5qc29uIgpQUkRfRklMRT0iL2ludGFrZS1maWxlcy9wcmQudHh0IgpBUkNIX0ZJTEU9Ii9pbnRha2UtZmlsZXMvYXJjaGl0ZWN0dXJlLm1kIgoKaWYgWyAhIC1mICIkQ09ORklHX0ZJTEUiIF07IHRoZW4KICAgIGVjaG8gIuKdjCBDb25maWd1cmF0aW9uIGZpbGUgbm90IGZvdW5kIGF0ICRDT05GSUdfRklMRSIKICAgIGV4aXQgMQpmaQoKIyBEZWJ1ZzogU2hvdyB3aGF0J3MgaW4gdGhlIGNvbmZpZyBmaWxlCmVjaG8gIvCfk4QgQ29uZmlnIGZpbGUgY29udGVudHMgKGZyb20gQ29uZmlnTWFwKToiCmNhdCAiJENPTkZJR19GSUxFIiB8fCBlY2hvICJGYWlsZWQgdG8gY2F0IGNvbmZpZyBmaWxlIgplY2hvICIiCmVjaG8gIvCfk4QgUGFyc2VkIHZhbHVlcyBmcm9tIENvbmZpZ01hcDoiCmVjaG8gIiAgcHJpbWFyeV9tb2RlbCBmcm9tIEpTT046ICQoanEgLXIgJy5wcmltYXJ5X21vZGVsIC8vICJbTk9UIElOIEpTT05dIicgIiRDT05GSUdfRklMRSIpIgplY2hvICIgIHByaW1hcnlfcHJvdmlkZXIgZnJvbSBKU09OOiAkKGpxIC1yICcucHJpbWFyeV9wcm92aWRlciAvLyAiW05PVCBJTiBKU09OXSInICIkQ09ORklHX0ZJTEUiKSIKZWNobyAiICByZXNlYXJjaF9tb2RlbCBmcm9tIEpTT046ICQoanEgLXIgJy5yZXNlYXJjaF9tb2RlbCAvLyAiW05PVCBJTiBKU09OXSInICIkQ09ORklHX0ZJTEUiKSIKZWNobyAiICByZXNlYXJjaF9wcm92aWRlciBmcm9tIEpTT046ICQoanEgLXIgJy5yZXNlYXJjaF9wcm92aWRlciAvLyAiW05PVCBJTiBKU09OXSInICIkQ09ORklHX0ZJTEUiKSIKZWNobyAiICBmYWxsYmFja19tb2RlbCBmcm9tIEpTT046ICQoanEgLXIgJy5mYWxsYmFja19tb2RlbCAvLyAiW05PVCBJTiBKU09OXSInICIkQ09ORklHX0ZJTEUiKSIKZWNobyAiICBmYWxsYmFja19wcm92aWRlciBmcm9tIEpTT046ICQoanEgLXIgJy5mYWxsYmFja19wcm92aWRlciAvLyAiW05PVCBJTiBKU09OXSInICIkQ09ORklHX0ZJTEUiKSIKZWNobyAiLS0tIgoKIyBQcmV2aWV3IFBSRCBhbmQgQXJjaGl0ZWN0dXJlIHRvIHZlcmlmeSBjb3JyZWN0bmVzcwplY2hvICLwn5OEIFBSRCBmaWxlIHByZXZpZXcgKGZpcnN0IDQwIGxpbmVzKToiCmlmIFsgLWYgIiRQUkRfRklMRSIgXTsgdGhlbgogICAgaGVhZCAtNDAgIiRQUkRfRklMRSIgfHwgdHJ1ZQplbHNlCiAgICBlY2hvICJQUkQgZmlsZSBub3QgZm91bmQgYXQgJFBSRF9GSUxFIgpmaQplY2hvICIiCmlmIFsgLWYgIiRBUkNIX0ZJTEUiIF07IHRoZW4KICAgIGVjaG8gIvCfk5AgQXJjaGl0ZWN0dXJlIGZpbGUgcHJlc2VudDogJEFSQ0hfRklMRSIKZWxzZQogICAgZWNobyAi8J+TkCBObyBhcmNoaXRlY3R1cmUubWQgcHJvdmlkZWQgKG9wdGlvbmFsKSIKZmkKZWNobyAiLS0tIgoKIyBQYXJzZSBjb25maWd1cmF0aW9uCmVjaG8gIvCfk4sgTG9hZGluZyBjb25maWd1cmF0aW9uIGZyb20gQ29uZmlnTWFwLi4uIgoKIyBQYXJzZSBlYWNoIGZpZWxkIHdpdGggZXJyb3IgaGFuZGxpbmcKUFJPSkVDVF9OQU1FPSQoanEgLXIgJy5wcm9qZWN0X25hbWUnICIkQ09ORklHX0ZJTEUiIDI+L2Rldi9udWxsIHx8IGVjaG8gIiIpCmVjaG8gIiAg4pyTIFByb2plY3QgbmFtZTogJFBST0pFQ1RfTkFNRSIKClJFUE9TSVRPUllfVVJMPSQoanEgLXIgJy5yZXBvc2l0b3J5X3VybCcgIiRDT05GSUdfRklMRSIgMj4vZGV2L251bGwgfHwgZWNobyAiIikKZWNobyAiICDinJMgUmVwb3NpdG9yeSBVUkw6ICRSRVBPU0lUT1JZX1VSTCIKCiMgR0lUSFVCX0FQUCBpcyBub3cgcmVxdWlyZWQgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKG5vIENvbmZpZ01hcCBmYWxsYmFjaykKCiMgUGFyc2UgZ3JhbnVsYXIgbW9kZWwgY29uZmlndXJhdGlvbiAoZnJvbSBBcmdvIHdvcmtmbG93IHBhcmFtZXRlcnMpCiMgTk8gRkFMTEJBQ0tTIC0gaWYgcGFyYW1ldGVycyBub3QgcmVjZWl2ZWQsIGZhaWwgbG91ZGx5IHRvIGV4cG9zZSBjb25maWd1cmF0aW9uIGlzc3VlcwoKaWYgWyAteiAiJFBSSU1BUllfTU9ERUwiIF07IHRoZW4KICAgIGVjaG8gIuKdjCBQUklNQVJZX01PREVMIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBzZXQgLSBjb25maWd1cmF0aW9uIHRyYW5zbWlzc2lvbiBmYWlsZWQiCiAgICBleGl0IDEKZmkKCmlmIFsgLXogIiRSRVNFQVJDSF9NT0RFTCIgXTsgdGhlbgogICAgZWNobyAi4p2MIFJFU0VBUkNIX01PREVMIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBzZXQgLSBjb25maWd1cmF0aW9uIHRyYW5zbWlzc2lvbiBmYWlsZWQiCiAgICBleGl0IDEKZmkKCmlmIFsgLXogIiRGQUxMQkFDS19NT0RFTCIgXTsgdGhlbgogICAgZWNobyAi4p2MIEZBTExCQUNLX01PREVMIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBzZXQgLSBjb25maWd1cmF0aW9uIHRyYW5zbWlzc2lvbiBmYWlsZWQiCiAgICBleGl0IDEKZmkKCmlmIFsgLXogIiRQUklNQVJZX1BST1ZJREVSIiBdOyB0aGVuCiAgICBlY2hvICLinYwgUFJJTUFSWV9QUk9WSURFUiBlbnZpcm9ubWVudCB2YXJpYWJsZSBub3Qgc2V0IC0gY29uZmlndXJhdGlvbiB0cmFuc21pc3Npb24gZmFpbGVkIgogICAgZXhpdCAxCmZpCgppZiBbIC16ICIkUkVTRUFSQ0hfUFJPVklERVIiIF07IHRoZW4KICAgIGVjaG8gIuKdjCBSRVNFQVJDSF9QUk9WSURFUiBlbnZpcm9ubWVudCB2YXJpYWJsZSBub3Qgc2V0IC0gY29uZmlndXJhdGlvbiB0cmFuc21pc3Npb24gZmFpbGVkIgogICAgZXhpdCAxCmZpCgppZiBbIC16ICIkRkFMTEJBQ0tfUFJPVklERVIiIF07IHRoZW4KICAgIGVjaG8gIuKdjCBGQUxMQkFDS19QUk9WSURFUiBlbnZpcm9ubWVudCB2YXJpYWJsZSBub3Qgc2V0IC0gY29uZmlndXJhdGlvbiB0cmFuc21pc3Npb24gZmFpbGVkIgogICAgZXhpdCAxCmZpCgppZiBbIC16ICIkTlVNX1RBU0tTIiBdOyB0aGVuCiAgICBlY2hvICLinYwgTlVNX1RBU0tTIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBzZXQgLSBjb25maWd1cmF0aW9uIHRyYW5zbWlzc2lvbiBmYWlsZWQiCiAgICBleGl0IDEKZmkKCmlmIFsgLXogIiRFWFBBTkRfVEFTS1MiIF07IHRoZW4KICAgIGVjaG8gIuKdjCBFWFBBTkRfVEFTS1MgZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IHNldCAtIGNvbmZpZ3VyYXRpb24gdHJhbnNtaXNzaW9uIGZhaWxlZCIKICAgIGV4aXQgMQpmaQoKaWYgWyAteiAiJEFOQUxZWkVfQ09NUExFWElUWSIgXTsgdGhlbgogICAgZWNobyAi4p2MIEFOQUxZWkVfQ09NUExFWElUWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBub3Qgc2V0IC0gY29uZmlndXJhdGlvbiB0cmFuc21pc3Npb24gZmFpbGVkIgogICAgZXhpdCAxCmZpCgppZiBbIC16ICIkR0lUSFVCX0FQUCIgXTsgdGhlbgogICAgZWNobyAi4p2MIEdJVEhVQl9BUFAgZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IHNldCAtIGNvbmZpZ3VyYXRpb24gdHJhbnNtaXNzaW9uIGZhaWxlZCIKICAgIGV4aXQgMQpmaQoKZWNobyAiICDinJMgR2l0SHViIEFwcDogJEdJVEhVQl9BUFAiCmVjaG8gIiAg4pyTIFByaW1hcnkgTW9kZWw6ICRQUklNQVJZX01PREVMICgkUFJJTUFSWV9QUk9WSURFUikiCmVjaG8gIiAg4pyTIFJlc2VhcmNoIE1vZGVsOiAkUkVTRUFSQ0hfTU9ERUwgKCRSRVNFQVJDSF9QUk9WSURFUikiCmVjaG8gIiAg4pyTIEZhbGxiYWNrIE1vZGVsOiAkRkFMTEJBQ0tfTU9ERUwgKCRGQUxMQkFDS19QUk9WSURFUikiCmVjaG8gIiAg4pyTIE51bSB0YXNrczogJE5VTV9UQVNLUyIKZWNobyAiICDinJMgRXhwYW5kIHRhc2tzOiAkRVhQQU5EX1RBU0tTIgplY2hvICIgIOKckyBBbmFseXplIGNvbXBsZXhpdHk6ICRBTkFMWVpFX0NPTVBMRVhJVFkiCgojIExlZ2FjeSBNT0RFTCB2YXJpYWJsZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eQpNT0RFTD0iJFBSSU1BUllfTU9ERUwiCgplY2hvICLwn5SNIENvbmZpZ3VyYXRpb24gc3VtbWFyeToiCmVjaG8gIiAgLSBQcm9qZWN0OiAke1BST0pFQ1RfTkFNRTotW2VtcHR5XX0iCmVjaG8gIiAgLSBSZXBvc2l0b3J5OiAke1JFUE9TSVRPUllfVVJMOi1bZW1wdHldfSIKZWNobyAiICAtIEdpdEh1YiBBcHA6ICR7R0lUSFVCX0FQUDotW2VtcHR5XX0iCmVjaG8gIiAgLSBQcmltYXJ5IE1vZGVsOiAke1BSSU1BUllfTU9ERUw6LVtlbXB0eV19ICgke1BSSU1BUllfUFJPVklERVI6LVtlbXB0eV19KSIKZWNobyAiICAtIFJlc2VhcmNoIE1vZGVsOiAke1JFU0VBUkNIX01PREVMOi1bZW1wdHldfSAoJHtSRVNFQVJDSF9QUk9WSURFUjotW2VtcHR5XX0pIgplY2hvICIgIC0gRmFsbGJhY2sgTW9kZWw6ICR7RkFMTEJBQ0tfTU9ERUw6LVtlbXB0eV19ICgke0ZBTExCQUNLX1BST1ZJREVSOi1bZW1wdHldfSkiCmVjaG8gIiAgLSBOdW0gVGFza3M6ICR7TlVNX1RBU0tTOi1bZW1wdHldfSIKZWNobyAiICAtIEV4cGFuZDogJHtFWFBBTkRfVEFTS1M6LVtlbXB0eV19IgplY2hvICIgIC0gQW5hbHl6ZTogJHtBTkFMWVpFX0NPTVBMRVhJVFk6LVtlbXB0eV19IgoKIyBUdXJuIG9mZiBjb21tYW5kIHRyYWNpbmcgYWZ0ZXIgY29uZmlndXJhdGlvbiBwYXJzaW5nCnNldCAreAoKIyBJZiBwcm9qZWN0IG5hbWUgaXMgZW1wdHksIHRyeSB0byBleHRyYWN0IGZyb20gUFJECmlmIFsgLXogIiRQUk9KRUNUX05BTUUiIF0gfHwgWyAiJFBST0pFQ1RfTkFNRSIgPSAibnVsbCIgXTsgdGhlbgogICAgZWNobyAi8J+TnSBFeHRyYWN0aW5nIHByb2plY3QgbmFtZSBmcm9tIFBSRC4uLiIKICAgIAogICAgIyBUcnkgdG8gZXh0cmFjdCBmcm9tIGZpcnN0IGhlYWRpbmcKICAgIFBST0pFQ1RfTkFNRT0kKGhlYWQgLTEwICIkUFJEX0ZJTEUiIHwgZ3JlcCAtRSAiXiNccysiIHwgaGVhZCAtMSB8IHNlZCAncy9eI1xzKi8vJyB8IFwKICAgICAgICAgICAgICAgICAgIHNlZCAncy9bXmEtekEtWjAtOSAtXS8vZycgfCB0ciAnWzp1cHBlcjpdJyAnWzpsb3dlcjpdJyB8IFwKICAgICAgICAgICAgICAgICAgIHNlZCAncy8gLy0vZycgfCBzZWQgJ3MvLS0qLy0vZycgfCBzZWQgJ3MvXi0qLy87cy8tKiQvLycpCiAgICAKICAgICMgRmFsbGJhY2sgdG8gdGltZXN0YW1wLWJhc2VkIG5hbWUKICAgIGlmIFsgLXogIiRQUk9KRUNUX05BTUUiIF07IHRoZW4KICAgICAgICBQUk9KRUNUX05BTUU9InByb2plY3QtJChkYXRlICslWSVtJWQtJUglTSVTKSIKICAgIGZpCiAgICAKICAgIGVjaG8gIuKchSBVc2luZyBwcm9qZWN0IG5hbWU6ICRQUk9KRUNUX05BTUUiCmZpCgojIENoZWNrIGZvciByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMKZWNobyAi8J+UjSBDaGVja2luZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuLi4iCmlmIFsgLXogIiRBTlRIUk9QSUNfQVBJX0tFWSIgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIFdhcm5pbmc6IEFOVEhST1BJQ19BUElfS0VZIGlzIG5vdCBzZXQiCmZpCgojIERpc2FibGUgaW50ZXJhY3RpdmUgR2l0IHByb21wdHMKZXhwb3J0IEdJVF9URVJNSU5BTF9QUk9NUFQ9MApleHBvcnQgR0lUX0FTS1BBU1M9L2Jpbi90cnVlCmV4cG9ydCBTU0hfQVNLUEFTUz0vYmluL3RydWUKCiMgR2l0SHViIEFwcCBhdXRoZW50aWNhdGlvbiBzZXR1cAppZiBbIC1uICIkR0lUSFVCX0FQUF9QUklWQVRFX0tFWSIgXSAmJiBbIC1uICIkR0lUSFVCX0FQUF9JRCIgXTsgdGhlbgogICAgZWNobyAi8J+UkCBTZXR0aW5nIHVwIEdpdEh1YiBBcHAgYXV0aGVudGljYXRpb24uLi4iCiAgICBlY2hvICIgIC0gR2l0SHViIEFwcCBJRCBmb3VuZDogJHtHSVRIVUJfQVBQX0lEOjA6MTB9Li4uIgogICAgZWNobyAiICAtIEdpdEh1YiBBcHAgUHJpdmF0ZSBLZXkgZm91bmQ6IFtSRURBQ1RFRF0iCiAgICAKICAgICMgRnVuY3Rpb24gdG8gZ2VuZXJhdGUgR2l0SHViIEFwcCB0b2tlbiAocmV1c2luZyBmcm9tIGNvbnRhaW5lci5zaCBsb2dpYykKICAgIGdlbmVyYXRlX2dpdGh1Yl90b2tlbigpIHsKICAgICAgICBlY2hvICJHZW5lcmF0aW5nIGZyZXNoIEdpdEh1YiBBcHAgdG9rZW4uLi4iCiAgICAgICAgCiAgICAgICAgIyBDcmVhdGUgdGVtcG9yYXJ5IHByaXZhdGUga2V5IGZpbGUKICAgICAgICBURU1QX0tFWV9GSUxFPSIvdG1wL2dpdGh1Yi1hcHAta2V5LnBlbSIKICAgICAgICBlY2hvICIkR0lUSFVCX0FQUF9QUklWQVRFX0tFWSIgPiAiJFRFTVBfS0VZX0ZJTEUiCiAgICAgICAgY2htb2QgNjAwICIkVEVNUF9LRVlfRklMRSIKICAgICAgICAKICAgICAgICAjIEdlbmVyYXRlIEpXVCB0b2tlbgogICAgICAgIEpXVF9IRUFERVI9JChwcmludGYgJ3siYWxnIjoiUlMyNTYiLCJ0eXAiOiJKV1QifScgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKICAgICAgICBOT1c9JChkYXRlICslcykKICAgICAgICBFWFA9JCgoTk9XICsgNjAwKSkKICAgICAgICBKV1RfUEFZTE9BRD0kKHByaW50ZiAneyJpYXQiOiVkLCJleHAiOiVkLCJpc3MiOiIlcyJ9JyAiJE5PVyIgIiRFWFAiICIkR0lUSFVCX0FQUF9JRCIgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKICAgICAgICBKV1RfU0lHTkFUVVJFPSQocHJpbnRmICclcy4lcycgIiRKV1RfSEVBREVSIiAiJEpXVF9QQVlMT0FEIiB8IG9wZW5zc2wgZGdzdCAtc2hhMjU2IC1zaWduICIkVEVNUF9LRVlfRklMRSIgLWJpbmFyeSB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQogICAgICAgIEpXVF9UT0tFTj0iJEpXVF9IRUFERVIuJEpXVF9QQVlMT0FELiRKV1RfU0lHTkFUVVJFIgogICAgICAgIAogICAgICAgICMgR2V0IGluc3RhbGxhdGlvbiBJRAogICAgICAgIFJFUE9fT1dORVI9JChlY2hvICIkUkVQT1NJVE9SWV9VUkwiIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS8oW14vXSspLy4qfFwxfCcpCiAgICAgICAgUkVQT19OQU1FPSQoZWNobyAiJFJFUE9TSVRPUllfVVJMIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vW14vXSsvKFteL10rKShcLmdpdCk/fFwxfCcpCiAgICAgICAgCiAgICAgICAgIyBUcnkgcmVwb3NpdG9yeSBpbnN0YWxsYXRpb24gZmlyc3QgKGZvbGxvdyByZWRpcmVjdHMpCiAgICAgICAgSU5TVEFMTEFUSU9OX1JFU1BPTlNFPSQoY3VybCAtcyAtTCAtLXJldHJ5IDUgLS1yZXRyeS1kZWxheSAyIC0tcmV0cnktY29ubnJlZnVzZWQgXAogICAgICAgICAgICAtLWNvbm5lY3QtdGltZW91dCA1IC0tbWF4LXRpbWUgMTIgXAogICAgICAgICAgICAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRKV1RfVE9LRU4iIFwKICAgICAgICAgICAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgICAgICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyRSRVBPX09XTkVSLyRSRVBPX05BTUUvaW5zdGFsbGF0aW9uIikKCiAgICAgICAgSU5TVEFMTEFUSU9OX0lEPSQoZWNobyAiJElOU1RBTExBVElPTl9SRVNQT05TRSIgfCBqcSAtciAnLmlkJykKCiAgICAgICAgIyBGYWxsYmFjazogdHJ5IG9yZ2FuaXphdGlvbiBpbnN0YWxsYXRpb24gaWYgcmVwbyBsb29rdXAgZmFpbGVkCiAgICAgICAgaWYgWyAiJElOU1RBTExBVElPTl9JRCIgPSAibnVsbCIgXSB8fCBbIC16ICIkSU5TVEFMTEFUSU9OX0lEIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBSZXBvIGluc3RhbGxhdGlvbiBub3QgZm91bmQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUsIHRyeWluZyBvcmcgaW5zdGFsbGF0aW9uLi4uIgogICAgICAgICAgICBPUkdfSU5TVEFMTEFUSU9OX1JFU1BPTlNFPSQoY3VybCAtcyAtTCAtLXJldHJ5IDUgLS1yZXRyeS1kZWxheSAyIC0tcmV0cnktY29ubnJlZnVzZWQgXAogICAgICAgICAgICAgICAgLS1jb25uZWN0LXRpbWVvdXQgNSAtLW1heC10aW1lIDEyIFwKICAgICAgICAgICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgICAgICAgICAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9vcmdzLyRSRVBPX09XTkVSL2luc3RhbGxhdGlvbiIpCiAgICAgICAgICAgIElOU1RBTExBVElPTl9JRD0kKGVjaG8gIiRPUkdfSU5TVEFMTEFUSU9OX1JFU1BPTlNFIiB8IGpxIC1yICcuaWQnKQogICAgICAgIGZpCgogICAgICAgIGlmIFsgIiRJTlNUQUxMQVRJT05fSUQiID0gIm51bGwiIF0gfHwgWyAteiAiJElOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGdldCBpbnN0YWxsYXRpb24gSUQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUiCiAgICAgICAgICAgIGVjaG8gIlJlc3BvbnNlIChyZXBvKTogJElOU1RBTExBVElPTl9SRVNQT05TRSIKICAgICAgICAgICAgZWNobyAiUmVzcG9uc2UgKG9yZyk6ICAke09SR19JTlNUQUxMQVRJT05fUkVTUE9OU0U6LVtub25lXX0iCiAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgZmkKICAgICAgICAKICAgICAgICBlY2hvICJJbnN0YWxsYXRpb24gSUQ6ICRJTlNUQUxMQVRJT05fSUQiCiAgICAgICAgCiAgICAgICAgIyBHZW5lcmF0ZSBpbnN0YWxsYXRpb24gYWNjZXNzIHRva2VuCiAgICAgICAgR0lUSFVCX1RPS0VOPSQoY3VybCAtcyAtTCAtLXJldHJ5IDUgLS1yZXRyeS1kZWxheSAyIC0tcmV0cnktY29ubnJlZnVzZWQgXAogICAgICAgICAgICAtLWNvbm5lY3QtdGltZW91dCA1IC0tbWF4LXRpbWUgMTIgXAogICAgICAgICAgICAtWCBQT1NUIFwKICAgICAgICAgICAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMranNvbiIgXAogICAgICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9hcHAvaW5zdGFsbGF0aW9ucy8kSU5TVEFMTEFUSU9OX0lEL2FjY2Vzc190b2tlbnMiIHwganEgLXIgJy50b2tlbicpCiAgICAgICAgCiAgICAgICAgaWYgWyAiJEdJVEhVQl9UT0tFTiIgPSAibnVsbCIgXSB8fCBbIC16ICIkR0lUSFVCX1RPS0VOIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gZ2VuZXJhdGUgR2l0SHViIHRva2VuIgogICAgICAgICAgICByZXR1cm4gMQogICAgICAgIGZpCiAgICAgICAgCiAgICAgICAgZXhwb3J0IEdJVEhVQl9UT0tFTgogICAgICAgIGV4cG9ydCBHSF9UT0tFTj0iJEdJVEhVQl9UT0tFTiIKICAgICAgICAKICAgICAgICAjIENvbmZpZ3VyZSBnaXQKICAgICAgICBnaXQgY29uZmlnIC0tZ2xvYmFsIC0tcmVwbGFjZS1hbGwgY3JlZGVudGlhbC5oZWxwZXIgc3RvcmUKICAgICAgICBlY2hvICJodHRwczovL3gtYWNjZXNzLXRva2VuOiR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tIiA+IH4vLmdpdC1jcmVkZW50aWFscwogICAgICAgIAogICAgICAgICMgQ29uZmlndXJlIEdpdEh1YiBDTEkKICAgICAgICBlY2hvICLwn5SnIENvbmZpZ3VyaW5nIEdpdEh1YiBDTEkuLi4iCiAgICAgICAgZWNobyAiJEdJVEhVQl9UT0tFTiIgfCB0aW1lb3V0IDEwIGdoIGF1dGggbG9naW4gLS13aXRoLXRva2VuIHx8IHsKICAgICAgICAgICAgZWNobyAi4pqg77iPIGdoIGF1dGggbG9naW4gcmV0dXJuZWQgbm9uLXplcm8gb3IgdGltZWQgb3V0LCBidXQgY29udGludWluZy4uLiIKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgIyBDaGVjayBhdXRoIHN0YXR1cyAodGhpcyBtYXkgcmV0dXJuIG5vbi16ZXJvIGV2ZW4gd2hlbiBhdXRoIGlzIHZhbGlkKQogICAgICAgIGVjaG8gIvCflI0gQ2hlY2tpbmcgR2l0SHViIENMSSBhdXRoIHN0YXR1cy4uLiIKICAgICAgICB0aW1lb3V0IDEwIGdoIGF1dGggc3RhdHVzIHx8IHsKICAgICAgICAgICAgZWNobyAi4pqg77iPIGdoIGF1dGggc3RhdHVzIHJldHVybmVkIG5vbi16ZXJvIG9yIHRpbWVkIG91dCwgYnV0IHRva2VuIGlzIGxpa2VseSBzdGlsbCB2YWxpZCIKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZWNobyAi4pyFIEdpdEh1YiBhdXRoZW50aWNhdGlvbiBjb25maWd1cmVkIgogICAgICAgIHJldHVybiAwCiAgICB9CiAgICAKICAgICMgSW5pdGlhbCB0b2tlbiBnZW5lcmF0aW9uCiAgICBnZW5lcmF0ZV9naXRodWJfdG9rZW4gfHwgZXhpdCAxCmVsc2UKICAgIGVjaG8gIuKaoO+4jyBHaXRIdWIgQXBwIGNyZWRlbnRpYWxzIG5vdCBmb3VuZCwgdXNpbmcgZGVmYXVsdCBhdXRoZW50aWNhdGlvbiIKZmkKCiMgQ2xvbmUgcmVwb3NpdG9yeQplY2hvICLwn5OmIENsb25pbmcgcmVwb3NpdG9yeTogJFJFUE9TSVRPUllfVVJMIgoKIyBWYWxpZGF0ZSByZXBvc2l0b3J5IFVSTAppZiBbIC16ICIkUkVQT1NJVE9SWV9VUkwiIF0gfHwgWyAiJFJFUE9TSVRPUllfVVJMIiA9ICJudWxsIiBdOyB0aGVuCiAgICBlY2hvICLinYwgUmVwb3NpdG9yeSBVUkwgaXMgZW1wdHkgb3IgbnVsbCIKICAgIGV4aXQgMQpmaQoKQ0xPTkVfRElSPSIvdG1wL3JlcG8tJChkYXRlICslcykiCmVjaG8gIvCfk4IgQ2xvbmUgZGlyZWN0b3J5OiAkQ0xPTkVfRElSIgplY2hvICLwn5SNIEF0dGVtcHRpbmcgZ2l0IGNsb25lLi4uIgpnaXQgY2xvbmUgIiRSRVBPU0lUT1JZX1VSTCIgIiRDTE9ORV9ESVIiIHx8IHsKICAgIGVjaG8gIuKdjCBHaXQgY2xvbmUgZmFpbGVkIHdpdGggZXhpdCBjb2RlICQ/IgogICAgZWNobyAiUmVwb3NpdG9yeSBVUkw6ICRSRVBPU0lUT1JZX1VSTCIKICAgIGVjaG8gIkNsb25lIGRpcmVjdG9yeTogJENMT05FX0RJUiIKICAgIGV4aXQgMQp9CgplY2hvICLinIUgUmVwb3NpdG9yeSBjbG9uZWQgc3VjY2Vzc2Z1bGx5IgpjZCAiJENMT05FX0RJUiIKZWNobyAi8J+TgiBDaGFuZ2VkIHRvIGNsb25lIGRpcmVjdG9yeTogJChwd2QpIgoKIyBOb3JtYWxpemUgcHJvamVjdCBuYW1lIGZvciBmaWxlc3lzdGVtIChsb3dlcmNhc2UsIHNhZmUgY2hhcmFjdGVycykKUFJPSkVDVF9ESVJfTkFNRT0kKGVjaG8gIiRQUk9KRUNUX05BTUUiIHwgdHIgJ1s6dXBwZXI6XScgJ1s6bG93ZXI6XScgfCBzZWQgJ3MvW15hLXowLTktXS8tL2cnIHwgc2VkICdzLy0tKi8tL2cnIHwgc2VkICdzL14tKi8vO3MvLSokLy8nKQoKIyBTZXQgUFJPSkVDVF9ESVIgdG8gYSBzdWJkaXJlY3Rvcnkgd2l0aGluIHRoZSBjbG9uZWQgcmVwb3NpdG9yeQpQUk9KRUNUX0RJUj0iJENMT05FX0RJUi8kUFJPSkVDVF9ESVJfTkFNRSIKCiMgQ3JlYXRlIHByb2plY3QgZGlyZWN0b3J5IGlmIGl0IGRvZXNuJ3QgZXhpc3QKaWYgWyAhIC1kICIkUFJPSkVDVF9ESVIiIF07IHRoZW4KICAgIGVjaG8gIvCfk4EgQ3JlYXRpbmcgcHJvamVjdCBkaXJlY3Rvcnk6ICRQUk9KRUNUX0RJUl9OQU1FIgogICAgbWtkaXIgLXAgIiRQUk9KRUNUX0RJUiIKZmkKCiMgQ29uZmlndXJlIGdpdCBpZGVudGl0eQpnaXQgY29uZmlnIHVzZXIubmFtZSAiUHJvamVjdCBJbnRha2UgQm90IgpnaXQgY29uZmlnIHVzZXIuZW1haWwgImludGFrZUA1ZGxhYnMuY29tIgoKIyBTZXQgdXAgbnZtIGVudmlyb25tZW50IGlmIGF2YWlsYWJsZSAoQ2xhdWRlIENvZGUgaW1hZ2UgdXNlcyBudm0pCmlmIFsgLXMgIi91c3IvbG9jYWwvbnZtL252bS5zaCIgXTsgdGhlbgogICAgZWNobyAi8J+UpyBTZXR0aW5nIHVwIG52bSBlbnZpcm9ubWVudC4uLiIKICAgIGV4cG9ydCBOVk1fRElSPSIvdXNyL2xvY2FsL252bSIKICAgIFsgLXMgIiROVk1fRElSL252bS5zaCIgXSAmJiBcLiAiJE5WTV9ESVIvbnZtLnNoIgogICAgWyAtcyAiJE5WTV9ESVIvYmFzaF9jb21wbGV0aW9uIiBdICYmIFwuICIkTlZNX0RJUi9iYXNoX2NvbXBsZXRpb24iCiAgICBlY2hvICLinIUgbnZtIGxvYWRlZCwgbm9kZSB2ZXJzaW9uOiAkKG5vZGUgLS12ZXJzaW9uKSIKZmkKCiMgQ2hlY2sgaWYgbnBtIGlzIGF2YWlsYWJsZQppZiAhIGNvbW1hbmQgLXYgbnBtICY+IC9kZXYvbnVsbDsgdGhlbgogICAgZWNobyAi4p2MIG5wbSBpcyBub3QgaW5zdGFsbGVkIG9yIG5vdCBpbiBQQVRIIgogICAgZWNobyAi8J+UjSBQQVRIOiAkUEFUSCIKICAgIGVjaG8gIvCflI0gQ2hlY2tpbmcgZm9yIG5vZGUvbnBtIGluIGNvbW1vbiBsb2NhdGlvbnMuLi4iCiAgICAKICAgICMgQ2hlY2sgY29tbW9uIGxvY2F0aW9ucwogICAgZm9yIG5wbV9wYXRoIGluIC91c3IvbG9jYWwvbnZtL3ZlcnNpb25zL25vZGUvKi9iaW4vbnBtIC91c3IvYmluL25wbSAvdXNyL2xvY2FsL2Jpbi9ucG07IGRvCiAgICAgICAgaWYgWyAtZiAiJG5wbV9wYXRoIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKchSBGb3VuZCBucG0gYXQ6ICRucG1fcGF0aCIKICAgICAgICAgICAgIyBBZGQgdG8gUEFUSAogICAgICAgICAgICBleHBvcnQgUEFUSD0iJChkaXJuYW1lICRucG1fcGF0aCk6JFBBVEgiCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmkKICAgIGRvbmUKICAgIAogICAgIyBGaW5hbCBjaGVjawogICAgaWYgISBjb21tYW5kIC12IG5wbSAmPiAvZGV2L251bGw7IHRoZW4KICAgICAgICBlY2hvICLinYwgQ2Fubm90IGZpbmQgbnBtIGFmdGVyIGNoZWNraW5nIGNvbW1vbiBsb2NhdGlvbnMiCiAgICAgICAgZXhpdCAxCiAgICBmaQpmaQoKIyBUYXNrTWFzdGVyIGlzIHByZS1pbnN0YWxsZWQgaW4gdGhlIGFnZW50IGltYWdlCmVjaG8gIvCfk6YgVGFza01hc3RlciBpcyBwcmUtaW5zdGFsbGVkIGluIHRoZSBhZ2VudCBpbWFnZSIKZWNobyAi8J+TiyBOb2RlIHZlcnNpb246ICQobm9kZSAtLXZlcnNpb24pIgplY2hvICLwn5OLIE5QTSB2ZXJzaW9uOiAkKG5wbSAtLXZlcnNpb24pIgoKIyBWZXJpZnkgVGFza01hc3RlciBpcyBhdmFpbGFibGUKaWYgISBjb21tYW5kIC12IHRhc2stbWFzdGVyICY+IC9kZXYvbnVsbDsgdGhlbgogICAgZWNobyAi4p2MIHRhc2stbWFzdGVyIGNvbW1hbmQgbm90IGZvdW5kIGluIGFnZW50IGltYWdlIgogICAgZWNobyAi8J+UjSBQQVRIOiAkUEFUSCIKICAgIGVjaG8gIvCflI0gTG9va2luZyBmb3IgdGFzay1tYXN0ZXIgaW4gY29tbW9uIGxvY2F0aW9uczoiCiAgICBmb3IgcGF0aCBpbiAvdXNyL2xvY2FsL2JpbiAvdXNyL2JpbiAvaG9tZS9ub2RlLy5ucG0tZ2xvYmFsL2JpbjsgZG8KICAgICAgICBpZiBbIC1mICIkcGF0aC90YXNrLW1hc3RlciIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICLinIUgRm91bmQgdGFzay1tYXN0ZXIgYXQ6ICRwYXRoL3Rhc2stbWFzdGVyIgogICAgICAgICAgICBleHBvcnQgUEFUSD0iJHBhdGg6JFBBVEgiCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmkKICAgIGRvbmUKICAgIAogICAgaWYgISBjb21tYW5kIC12IHRhc2stbWFzdGVyICY+IC9kZXYvbnVsbDsgdGhlbgogICAgICAgIGVjaG8gIuKdjCB0YXNrLW1hc3RlciBub3QgZm91bmQgYWZ0ZXIgY2hlY2tpbmcgY29tbW9uIGxvY2F0aW9ucyIKICAgICAgICBleGl0IDEKICAgIGZpCmZpCgojIEdldCB0aGUgYWN0dWFsIHBhdGggdG8gdGFzay1tYXN0ZXIKVEFTS19NQVNURVJfUEFUSD0kKHdoaWNoIHRhc2stbWFzdGVyKQplY2hvICLinIUgVGFza01hc3RlciBmb3VuZCBhdDogJFRBU0tfTUFTVEVSX1BBVEgiCmVjaG8gIuKchSBUYXNrTWFzdGVyIHZlcnNpb246ICQodGFzay1tYXN0ZXIgLS12ZXJzaW9uIDI+L2Rldi9udWxsIHx8IGVjaG8gJ3ZlcnNpb24gY2hlY2sgZmFpbGVkJykiCgojIENoYW5nZSB0byBwcm9qZWN0IGRpcmVjdG9yeQpjZCAiJFBST0pFQ1RfRElSIgoKIyBTZXQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBUYXNrTWFzdGVyCmV4cG9ydCBUQVNLTUFTVEVSX0xPR19MRVZFTD0iZGVidWciCmV4cG9ydCBDST0idHJ1ZSIgICMgVGhpcyBtaWdodCBoZWxwIFRhc2tNYXN0ZXIgcnVuIGluIG5vbi1pbnRlcmFjdGl2ZSBtb2RlCmV4cG9ydCBUQVNLTUFTVEVSX0FVVE9fQUNDRVBUPSJ0cnVlIgoKIyBJbml0aWFsaXplIFRhc2tNYXN0ZXIKZWNobyAi8J+agCBJbml0aWFsaXppbmcgVGFza01hc3RlciBwcm9qZWN0IGluICRQUk9KRUNUX05BTUUuLi4iCmVjaG8gIvCfk4IgQ3VycmVudCBkaXJlY3Rvcnk6ICQocHdkKSIKZWNobyAi8J+TgiBEaXJlY3RvcnkgY29udGVudHMgYmVmb3JlIGluaXQ6IgpscyAtbGEKCiMgRGVidWc6IENoZWNrIGlmIHRhc2stbWFzdGVyIGNvbW1hbmQgd29ya3MKZWNobyAi8J+UjSBUZXN0aW5nIHRhc2stbWFzdGVyIGNvbW1hbmQuLi4iCnRhc2stbWFzdGVyIC0tdmVyc2lvbiB8fCBlY2hvICLimqDvuI8gdGFzay1tYXN0ZXIgLS12ZXJzaW9uIGZhaWxlZCIKdGFzay1tYXN0ZXIgLS1oZWxwID4gL2Rldi9udWxsIDI+JjEgfHwgZWNobyAi4pqg77iPIHRhc2stbWFzdGVyIC0taGVscCBmYWlsZWQiCgojIEZpcnN0IGF0dGVtcHQ6IFRyeSBjbGVhbiBpbml0IHdpdGggQ2xhdWRlIHJ1bGVzIG9ubHkKZWNobyAi8J+UjSBBdHRlbXB0aW5nIFRhc2tNYXN0ZXIgaW5pdC4uLiIKIyBVc2UgdGhlIGZ1bGwgcGF0aCB0byBlbnN1cmUgd2UncmUgY2FsbGluZyB0aGUgcmlnaHQgYmluYXJ5CiMgLS1ydWxlcyAiY2xhdWRlIiBjcmVhdGVzIG9ubHkgQ2xhdWRlLXNwZWNpZmljIGZpbGVzIChDTEFVREUubWQpCiIkVEFTS19NQVNURVJfUEFUSCIgaW5pdCAtLXllcyBcCiAgICAtLW5hbWUgIiRQUk9KRUNUX05BTUUiIFwKICAgIC0tZGVzY3JpcHRpb24gIkF1dG8tZ2VuZXJhdGVkIHByb2plY3QgZnJvbSBpbnRha2UgcGlwZWxpbmUiIFwKICAgIC0tdmVyc2lvbiAiMC4xLjAiIFwKICAgIC0tcnVsZXMgImNsYXVkZSIgXAogICAgLS1za2lwLWluc3RhbGwKSU5JVF9FWElUX0NPREU9JD8KCmVjaG8gIvCflI0gSW5pdCByZXN1bHQ6IGV4aXQgY29kZSAkSU5JVF9FWElUX0NPREUiCgojIENoZWNrIGlmIGluaXRpYWxpemF0aW9uIHdhcyBzdWNjZXNzZnVsCmlmIFsgJElOSVRfRVhJVF9DT0RFIC1lcSAwIF0gJiYgWyAtZCAiLnRhc2ttYXN0ZXIiIF07IHRoZW4KICAgIGVjaG8gIuKchSBUYXNrTWFzdGVyIGluaXRpYWxpemF0aW9uIHN1Y2Nlc3NmdWwhIgogICAgZWNobyAi8J+TgiBEaXJlY3RvcnkgY29udGVudHMgYWZ0ZXIgaW5pdDoiCiAgICBscyAtbGEgLnRhc2ttYXN0ZXIvCmVsc2UKICAgIGVjaG8gIuKaoO+4jyBUYXNrTWFzdGVyIGluaXQgZmFpbGVkIG9yIGRpZG4ndCBjcmVhdGUgLnRhc2ttYXN0ZXIgZGlyZWN0b3J5IgogICAgZWNobyAi8J+TgiBDdXJyZW50IGRpcmVjdG9yeSBjb250ZW50czoiCiAgICBscyAtbGEKICAgIAogICAgIyBUcnkgYWx0ZXJuYXRpdmUgYXBwcm9hY2g6IGluaXQgd2l0aCBtaW5pbWFsIGZsYWdzCiAgICBlY2hvICLwn5SnIFRyeWluZyBpbml0IHdpdGggbWluaW1hbCBmbGFncy4uLiIKICAgIHRhc2stbWFzdGVyIGluaXQgLS1uYW1lICIkUFJPSkVDVF9OQU1FIiAtLXllcwogICAgSU5JVF9FWElUX0NPREU9JD8KICAgIAogICAgaWYgWyAkSU5JVF9FWElUX0NPREUgLWVxIDAgXSAmJiBbIC1kICIudGFza21hc3RlciIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKchSBNaW5pbWFsIGluaXQgbWV0aG9kIHdvcmtlZCEiCiAgICBlbHNlCiAgICAgICAgZWNobyAi8J+UpyBGaW5hbCBhdHRlbXB0OiBNYW51YWwgZGlyZWN0b3J5IGNyZWF0aW9uIGFzIGZhbGxiYWNrLi4uIgogICAgICAgIAogICAgICAgICMgQ3JlYXRlIHRoZSAudGFza21hc3RlciBkaXJlY3Rvcnkgc3RydWN0dXJlIG1hbnVhbGx5IGFzIGxhc3QgcmVzb3J0CiAgICAgICAgZWNobyAi8J+TgSBDcmVhdGluZyAudGFza21hc3RlciBkaXJlY3Rvcnkgc3RydWN0dXJlIG1hbnVhbGx5Li4uIgogICAgICAgIG1rZGlyIC1wIC50YXNrbWFzdGVyL2RvY3MKICAgICAgICBta2RpciAtcCAudGFza21hc3Rlci90YXNrcwogICAgICAgIG1rZGlyIC1wIC50YXNrbWFzdGVyL3JlcG9ydHMKICAgICAgICBta2RpciAtcCAudGFza21hc3Rlci90ZW1wbGF0ZXMKICAgICAgICAKICAgICAgICAjIENyZWF0ZSBjb25maWcuanNvbiB3aXRoIGdyYW51bGFyIG1vZGVsIGNvbmZpZ3VyYXRpb24KICAgICAgICBjYXQgPiAudGFza21hc3Rlci9jb25maWcuanNvbiA8PCBFT0YKewogICJwcm9qZWN0IjogewogICAgIm5hbWUiOiAiJFBST0pFQ1RfTkFNRSIsCiAgICAiZGVzY3JpcHRpb24iOiAiQXV0by1nZW5lcmF0ZWQgcHJvamVjdCBmcm9tIGludGFrZSBwaXBlbGluZSIsCiAgICAidmVyc2lvbiI6ICIwLjEuMCIKICB9LAogICJtb2RlbHMiOiB7CiAgICAibWFpbiI6IHsKICAgICAgInByb3ZpZGVyIjogIiRQUklNQVJZX1BST1ZJREVSIiwKICAgICAgIm1vZGVsSWQiOiAiJFBSSU1BUllfTU9ERUwiLAogICAgICAibWF4VG9rZW5zIjogNjQwMDAsCiAgICAgICJ0ZW1wZXJhdHVyZSI6IDAuMgogICAgfSwKICAgICJyZXNlYXJjaCI6IHsKICAgICAgInByb3ZpZGVyIjogIiRSRVNFQVJDSF9QUk9WSURFUiIsCiAgICAgICJtb2RlbElkIjogIiRSRVNFQVJDSF9NT0RFTCIsCiAgICAgICJtYXhUb2tlbnMiOiAzMjAwMCwKICAgICAgInRlbXBlcmF0dXJlIjogMC4xCiAgICB9LAogICAgImZhbGxiYWNrIjogewogICAgICAicHJvdmlkZXIiOiAiJEZBTExCQUNLX1BST1ZJREVSIiwKICAgICAgIm1vZGVsSWQiOiAiJEZBTExCQUNLX01PREVMIiwKICAgICAgIm1heFRva2VucyI6IDgwMDAsCiAgICAgICJ0ZW1wZXJhdHVyZSI6IDAuNwogICAgfQogIH0sCiAgImdsb2JhbCI6IHsKICAgICJkZWZhdWx0VGFnIjogIm1hc3RlciIKICB9Cn0KRU9GCiAgICAgICAgCiAgICAgICAgIyBDcmVhdGUgZW1wdHkgdGFza3MuanNvbgogICAgICAgIGVjaG8gJ3sidGFza3MiOiBbXX0nID4gLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbgogICAgICAgIAogICAgICAgIGVjaG8gIuKchSBDcmVhdGVkIC50YXNrbWFzdGVyIGRpcmVjdG9yeSBzdHJ1Y3R1cmUgbWFudWFsbHkiCiAgICBmaQpmaQoKIyBGaW5hbCBjaGVjawppZiBbICEgLWQgIi50YXNrbWFzdGVyIiBdOyB0aGVuCiAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNyZWF0ZSAudGFza21hc3RlciBkaXJlY3RvcnkgYWZ0ZXIgYWxsIGF0dGVtcHRzIgogICAgZWNobyAi8J+TgiBGaW5hbCBkaXJlY3RvcnkgY29udGVudHM6IgogICAgbHMgLWxhCiAgICBleGl0IDEKZmkKCmVjaG8gIuKchSBUYXNrTWFzdGVyIHNldHVwIGNvbXBsZXRlIgplY2hvICLwn5OCIEZpbmFsIC50YXNrbWFzdGVyIGNvbnRlbnRzOiIKbHMgLWxhIC50YXNrbWFzdGVyLwoKIyBDb3B5IFBSRCBhbmQgYXJjaGl0ZWN0dXJlIGZpbGVzIGFmdGVyIGluaXRpYWxpemF0aW9uCmVjaG8gIvCfk4sgQ29weWluZyBQUkQgYW5kIGFyY2hpdGVjdHVyZSBmaWxlcy4uLiIKIyBFbnN1cmUgZGlyZWN0b3JpZXMgZXhpc3QgcmVnYXJkbGVzcyBvZiB0YXNrLW1hc3RlciB2ZXJzaW9uIGJlaGF2aW9yCm1rZGlyIC1wIC50YXNrbWFzdGVyL2RvY3MgLnRhc2ttYXN0ZXIvdGFza3MKY3AgIiRQUkRfRklMRSIgIi50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCIKaWYgWyAtZiAiJEFSQ0hfRklMRSIgXSAmJiBbIC1zICIkQVJDSF9GSUxFIiBdOyB0aGVuCiAgICBjcCAiJEFSQ0hfRklMRSIgIi50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIgpmaQoKIyBDb25maWd1cmUgbW9kZWxzIHdpdGggQ2xhdWRlIENvZGUgYW5kIEdQVC01IGZhbGxiYWNrCmVjaG8gIvCfpJYgQ29uZmlndXJpbmcgQUkgbW9kZWxzLi4uIgoKIyBUZXN0IGlmIE9wZW5BSSBBUEkga2V5IGlzIHZhbGlkIGJ5IG1ha2luZyBhIHNpbXBsZSBBUEkgY2FsbApPUEVOQUlfVkFMSUQ9ZmFsc2UKaWYgWyAtbiAiJE9QRU5BSV9BUElfS0VZIiBdOyB0aGVuCiAgZWNobyAi8J+UjSBUZXN0aW5nIE9wZW5BSSBBUEkga2V5IHZhbGlkaXR5Li4uIgogICMgVGVzdCB0aGUgQVBJIGtleSB3aXRoIGEgc2ltcGxlIG1vZGVscyBjYWxsCiAgaWYgY3VybCAtcyAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRPUEVOQUlfQVBJX0tFWSIgXAogICAgICAgICAgLUggIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIgXAogICAgICAgICAgImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvbW9kZWxzIiA+IC9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBlY2hvICLinIUgT3BlbkFJIEFQSSBrZXkgaXMgdmFsaWQiCiAgICBPUEVOQUlfVkFMSUQ9dHJ1ZQogIGVsc2UKICAgIGVjaG8gIuKaoO+4jyBPcGVuQUkgQVBJIGtleSBpcyBpbnZhbGlkIG9yIGV4cGlyZWQsIGZhbGxpbmcgYmFjayB0byBDbGF1ZGUgb25seSIKICAgIE9QRU5BSV9WQUxJRD1mYWxzZQogIGZpCmZpCgojIENoZWNrIGlmIEFOVEhST1BJQ19BUElfS0VZIGlzIGF2YWlsYWJsZSBmb3IgQ2xhdWRlIENvZGUKaWYgWyAteiAiJEFOVEhST1BJQ19BUElfS0VZIiBdOyB0aGVuCiAgICBlY2hvICLinYwgQU5USFJPUElDX0FQSV9LRVkgaXMgcmVxdWlyZWQgZm9yIENsYXVkZSBDb2RlIGJ1dCBub3Qgc2V0IgogICAgZXhpdCAxCmZpCgojIENvbmZpZ3VyZSBDbGF1ZGUgQ29kZSB0byB1c2UgQU5USFJPUElDX0FQSV9LRVkKZWNobyAi8J+UpyBDb25maWd1cmluZyBDbGF1ZGUgQ29kZSBhdXRoZW50aWNhdGlvbi4uLiIKIyBUYXNrTWFzdGVyIGV4cGVjdHMgQU5USFJPUElDX0FQSV9LRVkgaW4gZW52aXJvbm1lbnQsIG5vdCBjb25maWcgZmlsZQojIEV4cG9ydCBpdCB0byBlbnN1cmUgaXQncyBhdmFpbGFibGUgdG8gY2hpbGQgcHJvY2Vzc2VzCmV4cG9ydCBBTlRIUk9QSUNfQVBJX0tFWT0iJEFOVEhST1BJQ19BUElfS0VZIgoKIyBDbGF1ZGUgQ29kZSBXb3JrYXJvdW5kOiBGaXggcGF0aCByZXNvbHV0aW9uIGlzc3VlIGluIEBhbnRocm9waWMtYWkvY2xhdWRlLWNvZGUgcGFja2FnZQojIFRoZSBwYWNrYWdlIGxvb2tzIGZvciBlbnRyeXBvaW50cy9jbGkuanMgYnV0IHRoZSBhY3R1YWwgZmlsZSBpcyBjbGkuanMKZml4X2NsYXVkZV9jb2RlX3BhdGgoKSB7CiAgICBlY2hvICLwn5SnIENoZWNraW5nIENsYXVkZSBDb2RlIHBhdGggcmVzb2x1dGlvbi4uLiIKCiAgICAjIEZpbmQgdGhlIGNsYXVkZS1jb2RlIHBhY2thZ2UgZGlyZWN0b3J5CiAgICBDTEFVREVfQ09ERV9ESVI9JChmaW5kIC91c3IvbG9jYWwvbGliL25vZGVfbW9kdWxlcyAtbmFtZSAiQGFudGhyb3BpYy1haSIgLXR5cGUgZCAyPi9kZXYvbnVsbCB8IGhlYWQgLTEpCiAgICBpZiBbIC16ICIkQ0xBVURFX0NPREVfRElSIiBdOyB0aGVuCiAgICAgICAgQ0xBVURFX0NPREVfRElSPSQoZmluZCAvb3B0L2hvbWVicmV3L2xpYi9ub2RlX21vZHVsZXMgLW5hbWUgIkBhbnRocm9waWMtYWkiIC10eXBlIGQgMj4vZGV2L251bGwgfCBoZWFkIC0xKQogICAgZmkKCiAgICBpZiBbIC1uICIkQ0xBVURFX0NPREVfRElSIiBdICYmIFsgLWQgIiRDTEFVREVfQ09ERV9ESVIvY2xhdWRlLWNvZGUiIF07IHRoZW4KICAgICAgICBDTEFVREVfUEFDS0FHRV9ESVI9IiRDTEFVREVfQ09ERV9ESVIvY2xhdWRlLWNvZGUiCiAgICAgICAgZWNobyAi8J+TjSBGb3VuZCBDbGF1ZGUgQ29kZSBwYWNrYWdlIGF0OiAkQ0xBVURFX1BBQ0tBR0VfRElSIgoKICAgICAgICAjIENoZWNrIGlmIGNsaS5qcyBleGlzdHMgYW5kIGVudHJ5cG9pbnRzL2NsaS5qcyBpcyBtaXNzaW5nCiAgICAgICAgaWYgWyAtZiAiJENMQVVERV9QQUNLQUdFX0RJUi9jbGkuanMiIF0gJiYgWyAhIC1mICIkQ0xBVURFX1BBQ0tBR0VfRElSL2VudHJ5cG9pbnRzL2NsaS5qcyIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICLwn5SnIEFwcGx5aW5nIENsYXVkZSBDb2RlIHBhdGggd29ya2Fyb3VuZC4uLiIKICAgICAgICAgICAgbWtkaXIgLXAgIiRDTEFVREVfUEFDS0FHRV9ESVIvZW50cnlwb2ludHMiCiAgICAgICAgICAgIGNwICIkQ0xBVURFX1BBQ0tBR0VfRElSL2NsaS5qcyIgIiRDTEFVREVfUEFDS0FHRV9ESVIvZW50cnlwb2ludHMvY2xpLmpzIgogICAgICAgICAgICBlY2hvICLinIUgQ3JlYXRlZCBzeW1saW5rIHdvcmthcm91bmQgZm9yIENsYXVkZSBDb2RlIENMSSBwYXRoIgogICAgICAgIGVsaWYgWyAtZiAiJENMQVVERV9QQUNLQUdFX0RJUi9lbnRyeXBvaW50cy9jbGkuanMiIF07IHRoZW4KICAgICAgICAgICAgZWNobyAi4pyFIENsYXVkZSBDb2RlIHBhdGggYWxyZWFkeSBjb3JyZWN0IgogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4pqg77iPIENsYXVkZSBDb2RlIENMSSBmaWxlIG5vdCBmb3VuZCBhdCBleHBlY3RlZCBsb2NhdGlvbnMiCiAgICAgICAgZmkKICAgIGVsc2UKICAgICAgICBlY2hvICLimqDvuI8gQ2xhdWRlIENvZGUgcGFja2FnZSBkaXJlY3Rvcnkgbm90IGZvdW5kIgogICAgZmkKfQoKIyBBcHBseSBDbGF1ZGUgQ29kZSBwYXRoIGZpeApmaXhfY2xhdWRlX2NvZGVfcGF0aAoKIyBBbHNvIHRyeSB0byBzZXQgdXAgQ2xhdWRlIENvZGUgY29uZmlnIGluIGNhc2UgaXQncyBuZWVkZWQKIyBUcnkgdG8gY3JlYXRlIGNvbmZpZyBkaXJlY3RvcnksIGZhbGxiYWNrIHRvIC90bXAgaWYgcGVybWlzc2lvbiBkZW5pZWQKaWYgbWtkaXIgLXAgfi8uY29uZmlnL2NsYXVkZS1jb2RlIDI+L2Rldi9udWxsOyB0aGVuCiAgICBDT05GSUdfRElSPX4vLmNvbmZpZy9jbGF1ZGUtY29kZQogICAgZWNobyAi4pyFIFVzaW5nIHVzZXIgY29uZmlnIGRpcmVjdG9yeTogJENPTkZJR19ESVIiCmVsc2UKICAgIENPTkZJR19ESVI9L3RtcC9jbGF1ZGUtY29kZS1jb25maWcKICAgIG1rZGlyIC1wICRDT05GSUdfRElSCiAgICBlY2hvICLimqDvuI8gUGVybWlzc2lvbiBkZW5pZWQgZm9yIHVzZXIgY29uZmlnLCB1c2luZyB0ZW1wIGRpcmVjdG9yeTogJENPTkZJR19ESVIiCiAgICAjIFNldCBlbnZpcm9ubWVudCB2YXJpYWJsZSBzbyBDbGF1ZGUgQ29kZSBrbm93cyB3aGVyZSB0byBmaW5kIGNvbmZpZwogICAgZXhwb3J0IENMQVVERV9DT05GSUdfRElSPSIkQ09ORklHX0RJUiIKZmkKCmNhdCA+ICRDT05GSUdfRElSL2NvbmZpZy5qc29uIDw8IEVPRgp7CiAgImFwaUtleSI6ICIkQU5USFJPUElDX0FQSV9LRVkiCn0KRU9GCgojIERlYnVnOiBWZXJpZnkgQVBJIGtleSBpcyBzZXQKZWNobyAi8J+UjSBERUJVRzogQU5USFJPUElDX0FQSV9LRVkgaXMgJHtBTlRIUk9QSUNfQVBJX0tFWTorW1NFVF19JHtBTlRIUk9QSUNfQVBJX0tFWTotW05PVCBTRVRdfSIKCiMgQ2xhdWRlIENvZGUgV29ya2Fyb3VuZDogU21hcnQgcHJvdmlkZXIgc2VsZWN0aW9uIGJhc2VkIG9uIGF2YWlsYWJsZSBBUEkga2V5cwpzZWxlY3Rfc21hcnRfcHJvdmlkZXJzKCkgewogICAgZWNobyAi8J+noCBTZWxlY3Rpbmcgb3B0aW1hbCBwcm92aWRlcnMgYmFzZWQgb24gYXZhaWxhYmxlIEFQSSBrZXlzLi4uIgoKICAgICMgQ2hlY2sgd2hpY2ggQVBJIGtleXMgYXJlIGF2YWlsYWJsZQogICAgbG9jYWwgYW50aHJvcGljX2F2YWlsYWJsZT1mYWxzZQogICAgbG9jYWwgb3BlbmFpX2F2YWlsYWJsZT1mYWxzZQogICAgbG9jYWwgcGVycGxleGl0eV9hdmFpbGFibGU9ZmFsc2UKCiAgICBpZiBbIC1uICIkQU5USFJPUElDX0FQSV9LRVkiIF07IHRoZW4KICAgICAgICAjIFRlc3QgQW50aHJvcGljIEFQSSBrZXkgdmFsaWRpdHkKICAgICAgICBpZiBjdXJsIC1zIC1IICJ4LWFwaS1rZXk6ICRBTlRIUk9QSUNfQVBJX0tFWSIgXAogICAgICAgICAgICAgICAgLUggIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIgXAogICAgICAgICAgICAgICAgImh0dHBzOi8vYXBpLmFudGhyb3BpYy5jb20vdjEvbWVzc2FnZXMiIFwKICAgICAgICAgICAgICAgIC1kICd7Im1vZGVsIjogImNsYXVkZS0zLWhhaWt1LTIwMjQwMzA3IiwgIm1heF90b2tlbnMiOiAxLCAibWVzc2FnZXMiOiBbeyJyb2xlIjogInVzZXIiLCAiY29udGVudCI6ICJ0ZXN0In1dfScgPiAvZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgICAgICBhbnRocm9waWNfYXZhaWxhYmxlPXRydWUKICAgICAgICAgICAgZWNobyAi4pyFIEFudGhyb3BpYyBBUEkga2V5IGlzIHZhbGlkIgogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4pqg77iPIEFudGhyb3BpYyBBUEkga2V5IHByZXNlbnQgYnV0IGludmFsaWQiCiAgICAgICAgZmkKICAgIGZpCgogICAgaWYgWyAtbiAiJE9QRU5BSV9BUElfS0VZIiBdOyB0aGVuCiAgICAgICAgIyBUZXN0IE9wZW5BSSBBUEkga2V5IHZhbGlkaXR5CiAgICAgICAgaWYgY3VybCAtcyAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRPUEVOQUlfQVBJX0tFWSIgXAogICAgICAgICAgICAgICAgLUggIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIgXAogICAgICAgICAgICAgICAgImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvbW9kZWxzIiA+IC9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgICAgICAgIG9wZW5haV9hdmFpbGFibGU9dHJ1ZQogICAgICAgICAgICBlY2hvICLinIUgT3BlbkFJIEFQSSBrZXkgaXMgdmFsaWQiCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gT3BlbkFJIEFQSSBrZXkgcHJlc2VudCBidXQgaW52YWxpZCIKICAgICAgICBmaQogICAgZmkKCiAgICBpZiBbIC1uICIkUEVSUExFWElUWV9BUElfS0VZIiBdOyB0aGVuCiAgICAgICAgcGVycGxleGl0eV9hdmFpbGFibGU9dHJ1ZQogICAgICAgIGVjaG8gIuKchSBQZXJwbGV4aXR5IEFQSSBrZXkgaXMgYXZhaWxhYmxlIgogICAgZmkKCiAgICAjIFNldCBzbWFydCBkZWZhdWx0cyBwcmlvcml0aXppbmcgQVBJLWJhc2VkIHByb3ZpZGVycyBvdmVyIGNsYXVkZS1jb2RlCiAgICBpZiBbICIkYW50aHJvcGljX2F2YWlsYWJsZSIgPSB0cnVlIF07IHRoZW4KICAgICAgICBleHBvcnQgUFJJTUFSWV9QUk9WSURFUj0iJHtQUklNQVJZX1BST1ZJREVSOi1hbnRocm9waWN9IgogICAgICAgIGV4cG9ydCBQUklNQVJZX01PREVMPSIke1BSSU1BUllfTU9ERUw6LWNsYXVkZS0zLTUtc29ubmV0LTIwMjQxMDIyfSIKICAgIGVsaWYgWyAiJG9wZW5haV9hdmFpbGFibGUiID0gdHJ1ZSBdOyB0aGVuCiAgICAgICAgZXhwb3J0IFBSSU1BUllfUFJPVklERVI9IiR7UFJJTUFSWV9QUk9WSURFUjotb3BlbmFpfSIKICAgICAgICBleHBvcnQgUFJJTUFSWV9NT0RFTD0iJHtQUklNQVJZX01PREVMOi1ncHQtNG8tbWluaX0iCiAgICBlbHNlCiAgICAgICAgZXhwb3J0IFBSSU1BUllfUFJPVklERVI9IiR7UFJJTUFSWV9QUk9WSURFUjotY2xhdWRlLWNvZGV9IgogICAgICAgIGV4cG9ydCBQUklNQVJZX01PREVMPSIke1BSSU1BUllfTU9ERUw6LW9wdXN9IgogICAgICAgIGVjaG8gIuKaoO+4jyBObyB2YWxpZCBBUEkga2V5cyBmb3VuZCwgZmFsbGluZyBiYWNrIHRvIGNsYXVkZS1jb2RlIgogICAgZmkKCiAgICAjIFJlc2VhcmNoIG1vZGVsIC0gcHJlZmVyIE9wZW5BSSBmb3IgcmVzZWFyY2gsIGZhbGxiYWNrIHRvIEFudGhyb3BpYwogICAgaWYgWyAiJG9wZW5haV9hdmFpbGFibGUiID0gdHJ1ZSBdOyB0aGVuCiAgICAgICAgZXhwb3J0IFJFU0VBUkNIX1BST1ZJREVSPSIke1JFU0VBUkNIX1BST1ZJREVSOi1vcGVuYWl9IgogICAgICAgIGV4cG9ydCBSRVNFQVJDSF9NT0RFTD0iJHtSRVNFQVJDSF9NT0RFTDotZ3B0LTRvLW1pbml9IgogICAgZWxpZiBbICIkYW50aHJvcGljX2F2YWlsYWJsZSIgPSB0cnVlIF07IHRoZW4KICAgICAgICBleHBvcnQgUkVTRUFSQ0hfUFJPVklERVI9IiR7UkVTRUFSQ0hfUFJPVklERVI6LWFudGhyb3BpY30iCiAgICAgICAgZXhwb3J0IFJFU0VBUkNIX01PREVMPSIke1JFU0VBUkNIX01PREVMOi1jbGF1ZGUtMy01LXNvbm5ldC0yMDI0MTAyMn0iCiAgICBlbHNlCiAgICAgICAgZXhwb3J0IFJFU0VBUkNIX1BST1ZJREVSPSIke1JFU0VBUkNIX1BST1ZJREVSOi1jbGF1ZGUtY29kZX0iCiAgICAgICAgZXhwb3J0IFJFU0VBUkNIX01PREVMPSIke1JFU0VBUkNIX01PREVMOi1vcHVzfSIKICAgIGZpCgogICAgIyBGYWxsYmFjayBtb2RlbCAtIHVzZSB3aGF0ZXZlciBpcyBhdmFpbGFibGUKICAgIGlmIFsgIiRvcGVuYWlfYXZhaWxhYmxlIiA9IHRydWUgXSAmJiBbICIkUFJJTUFSWV9QUk9WSURFUiIgIT0gIm9wZW5haSIgXTsgdGhlbgogICAgICAgIGV4cG9ydCBGQUxMQkFDS19QUk9WSURFUj0iJHtGQUxMQkFDS19QUk9WSURFUjotb3BlbmFpfSIKICAgICAgICBleHBvcnQgRkFMTEJBQ0tfTU9ERUw9IiR7RkFMTEJBQ0tfTU9ERUw6LWdwdC00by1taW5pfSIKICAgIGVsaWYgWyAiJGFudGhyb3BpY19hdmFpbGFibGUiID0gdHJ1ZSBdICYmIFsgIiRQUklNQVJZX1BST1ZJREVSIiAhPSAiYW50aHJvcGljIiBdOyB0aGVuCiAgICAgICAgZXhwb3J0IEZBTExCQUNLX1BST1ZJREVSPSIke0ZBTExCQUNLX1BST1ZJREVSOi1hbnRocm9waWN9IgogICAgICAgIGV4cG9ydCBGQUxMQkFDS19NT0RFTD0iJHtGQUxMQkFDS19NT0RFTDotY2xhdWRlLTMtaGFpa3UtMjAyNDAzMDd9IgogICAgZWxzZQogICAgICAgIGV4cG9ydCBGQUxMQkFDS19QUk9WSURFUj0iJHtGQUxMQkFDS19QUk9WSURFUjotY2xhdWRlLWNvZGV9IgogICAgICAgIGV4cG9ydCBGQUxMQkFDS19NT0RFTD0iJHtGQUxMQkFDS19NT0RFTDotc29ubmV0fSIKICAgIGZpCgogICAgZWNobyAi8J+OryBTbWFydCBwcm92aWRlciBzZWxlY3Rpb24gY29tcGxldGU6IgogICAgZWNobyAiICBQcmltYXJ5OiAkUFJJTUFSWV9QUk9WSURFUiAoJFBSSU1BUllfTU9ERUwpIgogICAgZWNobyAiICBSZXNlYXJjaDogJFJFU0VBUkNIX1BST1ZJREVSICgkUkVTRUFSQ0hfTU9ERUwpIgogICAgZWNobyAiICBGYWxsYmFjazogJEZBTExCQUNLX1BST1ZJREVSICgkRkFMTEJBQ0tfTU9ERUwpIgp9CgojIEFwcGx5IHNtYXJ0IHByb3ZpZGVyIHNlbGVjdGlvbgpzZWxlY3Rfc21hcnRfcHJvdmlkZXJzCgojIFNldCB1cCBkeW5hbWljIHByb3ZpZGVyIHNlbGVjdGlvbiBmb3IgZGlmZmVyZW50IG9wZXJhdGlvbnMKZWNobyAi4pyFIENvbmZpZ3VyaW5nIFRhc2tNYXN0ZXIgbW9kZWxzOiBQcmltYXJ5PSRQUklNQVJZX01PREVMLCBSZXNlYXJjaD0kUkVTRUFSQ0hfTU9ERUwsIEZhbGxiYWNrPSRGQUxMQkFDS19NT0RFTCIKCiMgRW5hYmxlIGNvZGViYXNlIGFuYWx5c2lzIGZvciByZXNlYXJjaCBvcGVyYXRpb25zCmV4cG9ydCBUQVNLTUFTVEVSX0VOQUJMRV9DT0RFQkFTRV9BTkFMWVNJUz10cnVlCgppZiBbICIkT1BFTkFJX1ZBTElEIiA9IHRydWUgXTsgdGhlbgogIGNhdCA+IC50YXNrbWFzdGVyL2NvbmZpZy5qc29uIDw8IEVPRgp7CiAgInByb2plY3QiOiB7CiAgICAibmFtZSI6ICIkUFJPSkVDVF9OQU1FIiwKICAgICJkZXNjcmlwdGlvbiI6ICJBdXRvLWdlbmVyYXRlZCBwcm9qZWN0IGZyb20gaW50YWtlIHBpcGVsaW5lIiwKICAgICJ2ZXJzaW9uIjogIjAuMS4wIgogIH0sCiAgIm1vZGVscyI6IHsKICAgICJtYWluIjogewogICAgICAicHJvdmlkZXIiOiAiJFBSSU1BUllfUFJPVklERVIiLAogICAgICAibW9kZWxJZCI6ICIkUFJJTUFSWV9NT0RFTCIsCiAgICAgICJtYXhUb2tlbnMiOiA2NDAwMCwKICAgICAgInRlbXBlcmF0dXJlIjogMC4yCiAgICB9LAogICAgInJlc2VhcmNoIjogewogICAgICAicHJvdmlkZXIiOiAiJFJFU0VBUkNIX1BST1ZJREVSIiwKICAgICAgIm1vZGVsSWQiOiAiJFJFU0VBUkNIX01PREVMIiwKICAgICAgIm1heFRva2VucyI6IDMyMDAwLAogICAgICAidGVtcGVyYXR1cmUiOiAwLjEKICAgIH0sCiAgICAiZmFsbGJhY2siOiB7CiAgICAgICJwcm92aWRlciI6ICIkRkFMTEJBQ0tfUFJPVklERVIiLAogICAgICAibW9kZWxJZCI6ICIkRkFMTEJBQ0tfTU9ERUwiLAogICAgICAibWF4VG9rZW5zIjogODAwMCwKICAgICAgInRlbXBlcmF0dXJlIjogMC43CiAgICB9CiAgfSwKICAiZ2xvYmFsIjogewogICAgImRlZmF1bHRUYWciOiAibWFzdGVyIgogIH0KfQpFT0YKZWxzZQogICMgVXNlIGNvbmZpZ3VyZWQgcHJvdmlkZXJzIGZvciBtYWluL3Jlc2VhcmNoLCBidXQgbm8gZmFsbGJhY2sgaWYgT3BlbkFJIHVuYXZhaWxhYmxlCiAgZWNobyAi4pqg77iPIE9wZW5BSSBBUEkga2V5IGludmFsaWQvbWlzc2luZywgY29uZmlndXJpbmcgd2l0aG91dCBPcGVuQUkgZmFsbGJhY2siCiAgY2F0ID4gLnRhc2ttYXN0ZXIvY29uZmlnLmpzb24gPDwgRU9GCnsKICAicHJvamVjdCI6IHsKICAgICJuYW1lIjogIiRQUk9KRUNUX05BTUUiLAogICAgImRlc2NyaXB0aW9uIjogIkF1dG8tZ2VuZXJhdGVkIHByb2plY3QgZnJvbSBpbnRha2UgcGlwZWxpbmUiLAogICAgInZlcnNpb24iOiAiMC4xLjAiCiAgfSwKICAibW9kZWxzIjogewogICAgIm1haW4iOiB7CiAgICAgICJwcm92aWRlciI6ICIkUFJJTUFSWV9QUk9WSURFUiIsCiAgICAgICJtb2RlbElkIjogIiRQUklNQVJZX01PREVMIiwKICAgICAgIm1heFRva2VucyI6IDY0MDAwLAogICAgICAidGVtcGVyYXR1cmUiOiAwLjIKICAgIH0sCiAgICAicmVzZWFyY2giOiB7CiAgICAgICJwcm92aWRlciI6ICIkUkVTRUFSQ0hfUFJPVklERVIiLAogICAgICAibW9kZWxJZCI6ICIkUkVTRUFSQ0hfTU9ERUwiLAogICAgICAibWF4VG9rZW5zIjogMzIwMDAsCiAgICAgICJ0ZW1wZXJhdHVyZSI6IDAuMQogICAgfSwKICAgICJmYWxsYmFjayI6IHsKICAgICAgInByb3ZpZGVyIjogIiRGQUxMQkFDS19QUk9WSURFUiIsCiAgICAgICJtb2RlbElkIjogIiRGQUxMQkFDS19NT0RFTCIsCiAgICAgICJtYXhUb2tlbnMiOiA4MDAwLAogICAgICAidGVtcGVyYXR1cmUiOiAwLjcKICAgIH0KICB9LAogICJnbG9iYWwiOiB7CiAgICAiZGVmYXVsdFRhZyI6ICJtYXN0ZXIiCiAgfQp9CkVPRgpmaQoKZWNobyAi4pyFIENsYXVkZSBDb2RlIGNvbmZpZ3VyYXRpb24gd3JpdHRlbiIKCiMgRGVidWc6IFNob3cgd2hhdCBUYXNrTWFzdGVyIGNvbmZpZyB3YXMgd3JpdHRlbgplY2hvICLwn5SNIERFQlVHOiBUYXNrTWFzdGVyIGNvbmZpZyBjb250ZW50czoiCmNhdCAudGFza21hc3Rlci9jb25maWcuanNvbiB8IGpxICcuJyB8fCBlY2hvICJGYWlsZWQgdG8gZGlzcGxheSBjb25maWciCgojIFBhcnNlIFBSRCB3aXRoIHJlc2VhcmNoIG1vZGVsIGZvciBiZXR0ZXIgYW5hbHlzaXMKZWNobyAi8J+ThCBQYXJzaW5nIFBSRCB0byBnZW5lcmF0ZSB0YXNrcyB3aXRoIFJlc2VhcmNoIG1vZGVsOiAkUkVTRUFSQ0hfTU9ERUwgKCRSRVNFQVJDSF9QUk9WSURFUikuLi4iCiMgRGVidWc6IENoZWNrIGlmIGNsYXVkZSBjb21tYW5kIGlzIGF2YWlsYWJsZSAoZm9yIGNsYXVkZS1jb2RlIHByb3ZpZGVyKQppZiBbICIkUFJJTUFSWV9QUk9WSURFUiIgPSAiY2xhdWRlLWNvZGUiIF0gfHwgWyAiJFJFU0VBUkNIX1BST1ZJREVSIiA9ICJjbGF1ZGUtY29kZSIgXTsgdGhlbgogICAgZWNobyAi8J+UjSBERUJVRzogQ2hlY2tpbmcgY2xhdWRlLWNvZGUgYXZhaWxhYmlsaXR5Li4uIgogICAgd2hpY2ggY2xhdWRlIHx8IGVjaG8gIuKaoO+4jyBjbGF1ZGUgY29tbWFuZCBub3QgZm91bmQgaW4gUEFUSCIKICAgIGVjaG8gIvCflI0gREVCVUc6IFBBVEg9JFBBVEgiCmZpCiMgQ2xhdWRlIENvZGUgV29ya2Fyb3VuZDogRW5oYW5jZWQgZXJyb3IgZGV0ZWN0aW9uIGFuZCBsb2dnaW5nCmRldGVjdF9jbGF1ZGVfY29kZV9lcnJvcigpIHsKICAgIGxvY2FsIGVycm9yX291dHB1dD0iJDEiCiAgICBsb2NhbCBvcGVyYXRpb249IiQyIgoKICAgIGVjaG8gIvCflI0gQW5hbHl6aW5nIGVycm9yIGZvciAkb3BlcmF0aW9uLi4uIgoKICAgICMgQ2hlY2sgZm9yIGtub3duIENsYXVkZSBDb2RlIGVycm9yIHBhdHRlcm5zCiAgICBpZiBlY2hvICIkZXJyb3Jfb3V0cHV0IiB8IGdyZXAgLXEgIkNsYXVkZSBDb2RlIGV4ZWN1dGFibGUgbm90IGZvdW5kIjsgdGhlbgogICAgICAgIGVjaG8gIvCfmqggRGV0ZWN0ZWQ6IENsYXVkZSBDb2RlIGV4ZWN1dGFibGUgcGF0aCBpc3N1ZSIKICAgICAgICBlY2hvICIgICBUaGlzIGlzIGEga25vd24gaXNzdWUgd2l0aCBAYW50aHJvcGljLWFpL2NsYXVkZS1jb2RlIHBhY2thZ2UiCiAgICAgICAgcmV0dXJuIDEKICAgIGVsaWYgZWNobyAiJGVycm9yX291dHB1dCIgfCBncmVwIC1xICJlbnRyeXBvaW50cy9jbGkuanMiOyB0aGVuCiAgICAgICAgZWNobyAi8J+aqCBEZXRlY3RlZDogQ2xhdWRlIENvZGUgcGF0aCByZXNvbHV0aW9uIGJ1ZyIKICAgICAgICBlY2hvICIgICBQYWNrYWdlIGlzIGxvb2tpbmcgZm9yIGVudHJ5cG9pbnRzL2NsaS5qcyBpbnN0ZWFkIG9mIGNsaS5qcyIKICAgICAgICByZXR1cm4gMgogICAgZWxpZiBlY2hvICIkZXJyb3Jfb3V0cHV0IiB8IGdyZXAgLXEgImNsYXVkZS1jb2RlLipBUEkuKmVycm9yIjsgdGhlbgogICAgICAgIGVjaG8gIvCfmqggRGV0ZWN0ZWQ6IENsYXVkZSBDb2RlIEFQSSBpbnRlZ3JhdGlvbiBlcnJvciIKICAgICAgICByZXR1cm4gMwogICAgZWxpZiBlY2hvICIkZXJyb3Jfb3V0cHV0IiB8IGdyZXAgLXEgIkFOVEhST1BJQ19BUElfS0VZIjsgdGhlbgogICAgICAgIGVjaG8gIvCfmqggRGV0ZWN0ZWQ6IE1pc3Npbmcgb3IgaW52YWxpZCBBbnRocm9waWMgQVBJIGtleSIKICAgICAgICByZXR1cm4gNAogICAgZWxzZQogICAgICAgIGVjaG8gIvCfpJQgRXJyb3IgcGF0dGVybiBub3QgcmVjb2duaXplZCBhcyBDbGF1ZGUgQ29kZSBzcGVjaWZpYyIKICAgICAgICByZXR1cm4gMAogICAgZmkKfQoKIyBMb2cgQ2xhdWRlIENvZGUgZGlhZ25vc3RpY3MgZm9yIHRyb3VibGVzaG9vdGluZwpsb2dfY2xhdWRlX2NvZGVfZGlhZ25vc3RpY3MoKSB7CiAgICBlY2hvICLwn5SNIENsYXVkZSBDb2RlIERpYWdub3N0aWNzOiIKICAgIGVjaG8gIiAgTm9kZSB2ZXJzaW9uOiAkKG5vZGUgLS12ZXJzaW9uIDI+L2Rldi9udWxsIHx8IGVjaG8gJ25vdCBmb3VuZCcpIgogICAgZWNobyAiICBOUE0gdmVyc2lvbjogJChucG0gLS12ZXJzaW9uIDI+L2Rldi9udWxsIHx8IGVjaG8gJ25vdCBmb3VuZCcpIgogICAgZWNobyAiICBDbGF1ZGUgY29tbWFuZCBhdmFpbGFibGU6ICQod2hpY2ggY2xhdWRlIDI+L2Rldi9udWxsIHx8IGVjaG8gJ25vdCBmb3VuZCcpIgogICAgZWNobyAiICBDbGF1ZGUgQ29kZSBwYWNrYWdlIGxvY2F0aW9uOiAkKGZpbmQgL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzIC1uYW1lICJAYW50aHJvcGljLWFpIiAyPi9kZXYvbnVsbCB8IGhlYWQgLTEgfHwgZmluZCAvb3B0L2hvbWVicmV3L2xpYi9ub2RlX21vZHVsZXMgLW5hbWUgIkBhbnRocm9waWMtYWkiIDI+L2Rldi9udWxsIHwgaGVhZCAtMSB8fCBlY2hvICdub3QgZm91bmQnKSIKICAgIGVjaG8gIiAgQU5USFJPUElDX0FQSV9LRVk6ICR7QU5USFJPUElDX0FQSV9LRVk6K1tTRVRdfSR7QU5USFJPUElDX0FQSV9LRVk6LVtOT1QgU0VUXX0iCiAgICBlY2hvICIgIENMQVVERV9DT05GSUdfRElSOiAke0NMQVVERV9DT05GSUdfRElSOi1bTk9UIFNFVF19Igp9CgojIENsYXVkZSBDb2RlIFdvcmthcm91bmQ6IEhlbHBlciBmdW5jdGlvbnMgZm9yIHByb3ZpZGVyIGZhbGxiYWNrCmdldF9wcm92aWRlcl9mYWxsYmFjaygpIHsKICAgIGxvY2FsIHByb3ZpZGVyPSIkMSIKICAgIGNhc2UgIiRwcm92aWRlciIgaW4KICAgICAgICAiY2xhdWRlLWNvZGUiKSBlY2hvICJhbnRocm9waWMiIDs7CiAgICAgICAgImFudGhyb3BpYyIpIGVjaG8gIm9wZW5haSIgOzsKICAgICAgICAib3BlbmFpIikgZWNobyAiYW50aHJvcGljIiA7OwogICAgICAgICopIGVjaG8gIiRwcm92aWRlciIgOzsKICAgIGVzYWMKfQoKZ2V0X21vZGVsX2ZhbGxiYWNrKCkgewogICAgbG9jYWwgcHJvdmlkZXI9IiQxIgogICAgY2FzZSAiJHByb3ZpZGVyIiBpbgogICAgICAgICJjbGF1ZGUtY29kZSJ8ImFudGhyb3BpYyIpIGVjaG8gImNsYXVkZS0zLTUtc29ubmV0LTIwMjQxMDIyIiA7OwogICAgICAgICJvcGVuYWkiKSBlY2hvICJncHQtNG8tbWluaSIgOzsKICAgICAgICAqKSBlY2hvICJjbGF1ZGUtMy01LXNvbm5ldC0yMDI0MTAyMiIgOzsKICAgIGVzYWMKfQoKIyBDbGF1ZGUgQ29kZSBXb3JrYXJvdW5kOiBBZGQgZmFsbGJhY2sgbWVjaGFuaXNtIGZvciBmYWlsZWQgb3BlcmF0aW9ucwpjb25maWd1cmVfcHJvdmlkZXJfZmFsbGJhY2soKSB7CiAgICBsb2NhbCBvcGVyYXRpb249IiQxIgogICAgbG9jYWwgY3VycmVudF9jb25maWc9IiQyIgoKICAgIGVjaG8gIvCflIQgQXR0ZW1wdGluZyBwcm92aWRlciBmYWxsYmFjayBmb3IgJG9wZXJhdGlvbi4uLiIKCiAgICAjIEV4dHJhY3QgY3VycmVudCBwcm92aWRlcnMgZnJvbSBjb25maWcKICAgIGxvY2FsIG1haW5fcHJvdmlkZXI9JChqcSAtciAnLm1vZGVscy5tYWluLnByb3ZpZGVyIC8vICJ1bmtub3duIicgIiRjdXJyZW50X2NvbmZpZyIgMj4vZGV2L251bGwpCiAgICBsb2NhbCByZXNlYXJjaF9wcm92aWRlcj0kKGpxIC1yICcubW9kZWxzLnJlc2VhcmNoLnByb3ZpZGVyIC8vICJ1bmtub3duIicgIiRjdXJyZW50X2NvbmZpZyIgMj4vZGV2L251bGwpCiAgICBsb2NhbCBmYWxsYmFja19wcm92aWRlcj0kKGpxIC1yICcubW9kZWxzLmZhbGxiYWNrLnByb3ZpZGVyIC8vICJ1bmtub3duIicgIiRjdXJyZW50X2NvbmZpZyIgMj4vZGV2L251bGwpCgogICAgIyBDcmVhdGUgbmV3IGNvbmZpZyB3aXRoIGZhbGxiYWNrIHByb3ZpZGVycwogICAgbG9jYWwgbWFpbl9mYWxsYmFja19wcm92aWRlcj0kKGdldF9wcm92aWRlcl9mYWxsYmFjayAiJG1haW5fcHJvdmlkZXIiKQogICAgbG9jYWwgbWFpbl9mYWxsYmFja19tb2RlbD0kKGdldF9tb2RlbF9mYWxsYmFjayAiJG1haW5fcHJvdmlkZXIiKQogICAgbG9jYWwgcmVzZWFyY2hfZmFsbGJhY2tfcHJvdmlkZXI9JChnZXRfcHJvdmlkZXJfZmFsbGJhY2sgIiRyZXNlYXJjaF9wcm92aWRlciIpCiAgICBsb2NhbCByZXNlYXJjaF9mYWxsYmFja19tb2RlbD0kKGdldF9tb2RlbF9mYWxsYmFjayAiJHJlc2VhcmNoX3Byb3ZpZGVyIikKICAgIGxvY2FsIGZhbGxiYWNrX2ZhbGxiYWNrX3Byb3ZpZGVyPSQoZ2V0X3Byb3ZpZGVyX2ZhbGxiYWNrICIkZmFsbGJhY2tfcHJvdmlkZXIiKQogICAgbG9jYWwgZmFsbGJhY2tfZmFsbGJhY2tfbW9kZWw9JChnZXRfbW9kZWxfZmFsbGJhY2sgIiRmYWxsYmFja19wcm92aWRlciIpCgogICAgbG9jYWwgbmV3X2NvbmZpZz0kKGpxIFwKICAgICAgICAtLWFyZyBtYWluX3Byb3ZpZGVyICIke21haW5fZmFsbGJhY2tfcHJvdmlkZXI6LSRtYWluX3Byb3ZpZGVyfSIgXAogICAgICAgIC0tYXJnIG1haW5fbW9kZWwgIiR7bWFpbl9mYWxsYmFja19tb2RlbDotY2xhdWRlLTMtNS1zb25uZXQtMjAyNDEwMjJ9IiBcCiAgICAgICAgLS1hcmcgcmVzZWFyY2hfcHJvdmlkZXIgIiR7cmVzZWFyY2hfZmFsbGJhY2tfcHJvdmlkZXI6LSRyZXNlYXJjaF9wcm92aWRlcn0iIFwKICAgICAgICAtLWFyZyByZXNlYXJjaF9tb2RlbCAiJHtyZXNlYXJjaF9mYWxsYmFja19tb2RlbDotY2xhdWRlLTMtNS1zb25uZXQtMjAyNDEwMjJ9IiBcCiAgICAgICAgLS1hcmcgZmFsbGJhY2tfcHJvdmlkZXIgIiR7ZmFsbGJhY2tfZmFsbGJhY2tfcHJvdmlkZXI6LSRmYWxsYmFja19wcm92aWRlcn0iIFwKICAgICAgICAtLWFyZyBmYWxsYmFja19tb2RlbCAiJHtmYWxsYmFja19mYWxsYmFja19tb2RlbDotZ3B0LTRvLW1pbml9IiBcCiAgICAgICAgJy5tb2RlbHMubWFpbi5wcm92aWRlciA9ICRtYWluX3Byb3ZpZGVyIHwKICAgICAgICAgLm1vZGVscy5tYWluLm1vZGVsSWQgPSAkbWFpbl9tb2RlbCB8CiAgICAgICAgIC5tb2RlbHMucmVzZWFyY2gucHJvdmlkZXIgPSAkcmVzZWFyY2hfcHJvdmlkZXIgfAogICAgICAgICAubW9kZWxzLnJlc2VhcmNoLm1vZGVsSWQgPSAkcmVzZWFyY2hfbW9kZWwgfAogICAgICAgICAubW9kZWxzLmZhbGxiYWNrLnByb3ZpZGVyID0gJGZhbGxiYWNrX3Byb3ZpZGVyIHwKICAgICAgICAgLm1vZGVscy5mYWxsYmFjay5tb2RlbElkID0gJGZhbGxiYWNrX21vZGVsJyAiJGN1cnJlbnRfY29uZmlnIikKCiAgICBlY2hvICIkbmV3X2NvbmZpZyIgPiAiJGN1cnJlbnRfY29uZmlnLnRtcCIgJiYgbXYgIiRjdXJyZW50X2NvbmZpZy50bXAiICIkY3VycmVudF9jb25maWciCiAgICBlY2hvICLinIUgQXBwbGllZCBwcm92aWRlciBmYWxsYmFjayBjb25maWd1cmF0aW9uIgp9CgojIFVzZSAtLXJlc2VhcmNoIGZsYWcgdG8gdXNlIHRoZSBjb25maWd1cmVkIHJlc2VhcmNoIG1vZGVsCmlmICEgdGFzay1tYXN0ZXIgcGFyc2UtcHJkIFwKICAgIC0taW5wdXQgIi50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCIgXAogICAgLS1mb3JjZSBcCiAgICAtLXJlc2VhcmNoIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gcGFyc2UgUFJEIHdpdGggY3VycmVudCBjb25maWd1cmF0aW9uIgoKICAgICMgTG9nIGRpYWdub3N0aWNzIGZvciB0cm91Ymxlc2hvb3RpbmcKICAgIGxvZ19jbGF1ZGVfY29kZV9kaWFnbm9zdGljcwoKICAgICMgVHJ5IGZhbGxiYWNrIGNvbmZpZ3VyYXRpb24KICAgIGNvbmZpZ3VyZV9wcm92aWRlcl9mYWxsYmFjayAiUFJEIHBhcnNpbmciICIudGFza21hc3Rlci9jb25maWcuanNvbiIKCiAgICAjIFJldHJ5IHdpdGggZmFsbGJhY2sgY29uZmlndXJhdGlvbgogICAgaWYgISB0YXNrLW1hc3RlciBwYXJzZS1wcmQgXAogICAgICAgIC0taW5wdXQgIi50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCIgXAogICAgICAgIC0tZm9yY2UgXAogICAgICAgIC0tcmVzZWFyY2ggMj4mMTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBQUkQgcGFyc2luZyBmYWlsZWQgZXZlbiB3aXRoIGZhbGxiYWNrIGNvbmZpZ3VyYXRpb24iCiAgICAgICAgZWNobyAi8J+TiyBGaW5hbCBkaWFnbm9zdGljcyBiZWZvcmUgZXhpdDoiCiAgICAgICAgbG9nX2NsYXVkZV9jb2RlX2RpYWdub3N0aWNzCiAgICAgICAgZXhpdCAxCiAgICBmaQoKICAgIGVjaG8gIuKchSBQUkQgcGFyc2luZyBzdWNjZWVkZWQgd2l0aCBmYWxsYmFjayBjb25maWd1cmF0aW9uIgpmaQoKIyBSZXNvbHZlIHRhc2tzLmpzb24gcGF0aCAodXNlIGRlZmF1bHQsIGZhbGxiYWNrIHRvIGRpc2NvdmVyeSkKVEFTS1NfRklMRT0iLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbiIKaWYgWyAhIC1mICIkVEFTS1NfRklMRSIgXTsgdGhlbgogICAgQUxUX1RBU0tTX0ZJTEU9JChmaW5kIC50YXNrbWFzdGVyIC1tYXhkZXB0aCAyIC1uYW1lIHRhc2tzLmpzb24gfCBoZWFkIC1uIDEgfHwgdHJ1ZSkKICAgIGlmIFsgLW4gIiRBTFRfVEFTS1NfRklMRSIgXSAmJiBbIC1mICIkQUxUX1RBU0tTX0ZJTEUiIF07IHRoZW4KICAgICAgICBUQVNLU19GSUxFPSIkQUxUX1RBU0tTX0ZJTEUiCiAgICBlbHNlCiAgICAgICAgZWNobyAi4p2MIHRhc2tzLmpzb24gbm90IGZvdW5kIGFmdGVyIHBhcnNlIgogICAgICAgIGV4aXQgMQogICAgZmkKZmkKCiMgQW5hbHl6ZSBjb21wbGV4aXR5IGlmIHJlcXVlc3RlZAppZiBbICIkQU5BTFlaRV9DT01QTEVYSVRZIiA9ICJ0cnVlIiBdOyB0aGVuCiAgICBlY2hvICLwn5SNIEFuYWx5emluZyB0YXNrIGNvbXBsZXhpdHkuLi4iCiAgICBta2RpciAtcCAudGFza21hc3Rlci9yZXBvcnRzCiAgICBpZiAhIHRhc2stbWFzdGVyIGFuYWx5emUtY29tcGxleGl0eSAtLWZpbGUgIiRUQVNLU19GSUxFIiAyPiYxOyB0aGVuCiAgICAgICAgZWNobyAi4p2MIGFuYWx5emUtY29tcGxleGl0eSBmYWlsZWQgd2l0aCBjdXJyZW50IGNvbmZpZ3VyYXRpb24iCgogICAgICAgICMgTG9nIGRpYWdub3N0aWNzIGZvciB0cm91Ymxlc2hvb3RpbmcKICAgICAgICBsb2dfY2xhdWRlX2NvZGVfZGlhZ25vc3RpY3MKCiAgICAgICAgIyBUcnkgZmFsbGJhY2sgY29uZmlndXJhdGlvbgogICAgICAgIGNvbmZpZ3VyZV9wcm92aWRlcl9mYWxsYmFjayAiY29tcGxleGl0eSBhbmFseXNpcyIgIi50YXNrbWFzdGVyL2NvbmZpZy5qc29uIgoKICAgICAgICAjIFJldHJ5IHdpdGggZmFsbGJhY2sgY29uZmlndXJhdGlvbgogICAgICAgIGlmICEgdGFzay1tYXN0ZXIgYW5hbHl6ZS1jb21wbGV4aXR5IC0tZmlsZSAiJFRBU0tTX0ZJTEUiIDI+JjE7IHRoZW4KICAgICAgICAgICAgZWNobyAi4p2MIENvbXBsZXhpdHkgYW5hbHlzaXMgZmFpbGVkIGV2ZW4gd2l0aCBmYWxsYmFjayBjb25maWd1cmF0aW9uIgogICAgICAgICAgICBlY2hvICLwn5OLIEZpbmFsIGRpYWdub3N0aWNzIGJlZm9yZSBleGl0OiIKICAgICAgICAgICAgbG9nX2NsYXVkZV9jb2RlX2RpYWdub3N0aWNzCiAgICAgICAgICAgIGV4aXQgMQogICAgICAgIGZpCgogICAgICAgIGVjaG8gIuKchSBDb21wbGV4aXR5IGFuYWx5c2lzIHN1Y2NlZWRlZCB3aXRoIGZhbGxiYWNrIGNvbmZpZ3VyYXRpb24iCiAgICBmaQpmaQoKIyBFeHBhbmQgdGFza3MgaWYgcmVxdWVzdGVkIChzd2l0Y2ggdG8gcmVndWxhciBDbGF1ZGUgQVBJIGZvciBmYXN0ZXIgZXhwYW5zaW9uKQppZiBbICIkRVhQQU5EX1RBU0tTIiA9ICJ0cnVlIiBdOyB0aGVuCiAgICBlY2hvICLwn4yzIEV4cGFuZGluZyB0YXNrcyB3aXRoIHN1YnRhc2tzIHVzaW5nIENsYXVkZSBBUEkuLi4iCgogICAgIyBTd2l0Y2ggT05MWSB0aGUgbWFpbiBwcm92aWRlciB0byByZWd1bGFyIENsYXVkZSBBUEkgZm9yIGZhc3RlciBleHBhbnNpb24KICAgICMgS2VlcCByZXNlYXJjaCB3aXRoIENsYXVkZSBDb2RlIGZvciBhbnkgcmVzZWFyY2ggb3BlcmF0aW9ucwogICAgaWYgWyAiJE9QRU5BSV9WQUxJRCIgPSB0cnVlIF07IHRoZW4KICAgICAgICAjIFJlYWQgY3VycmVudCBjb25maWcgYW5kIHVwZGF0ZSBvbmx5IHRoZSBtYWluIHByb3ZpZGVyCiAgICAgICAgaWYgWyAtZiAiLnRhc2ttYXN0ZXIvY29uZmlnLmpzb24iIF07IHRoZW4KICAgICAgICAgICAgIyBVc2UganEgdG8gdXBkYXRlIG9ubHkgdGhlIG1haW4gcHJvdmlkZXIgaW4gdGhlIGV4aXN0aW5nIGNvbmZpZwogICAgICAgICAgICBqcSAtLWFyZyBwcm92aWRlciAiJFBSSU1BUllfUFJPVklERVIiIC0tYXJnIG1vZGVsICIkUFJJTUFSWV9NT0RFTCIgJy5tb2RlbHMubWFpbiA9IHsKICAgICAgICAgICAgICAgICJwcm92aWRlciI6ICRwcm92aWRlciwKICAgICAgICAgICAgICAgICJtb2RlbElkIjogJG1vZGVsLAogICAgICAgICAgICAgICAgIm1heFRva2VucyI6IDY0MDAwLAogICAgICAgICAgICAgICAgInRlbXBlcmF0dXJlIjogMC4yCiAgICAgICAgICAgIH0nIC50YXNrbWFzdGVyL2NvbmZpZy5qc29uID4gLnRhc2ttYXN0ZXIvY29uZmlnX3RlbXAuanNvbiAmJiBtdiAudGFza21hc3Rlci9jb25maWdfdGVtcC5qc29uIC50YXNrbWFzdGVyL2NvbmZpZy5qc29uCiAgICAgICAgICAgIGVjaG8gIuKchSBVcGRhdGVkIG1haW4gcHJvdmlkZXIgdG8gJFBSSU1BUllfUFJPVklERVIgKCRQUklNQVJZX01PREVMKSwga2VwdCByZXNlYXJjaCB3aXRoICRSRVNFQVJDSF9QUk9WSURFUiIKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBDb25maWcgZmlsZSBub3QgZm91bmQsIHVzaW5nIGRlZmF1bHQgQ2xhdWRlIEFQSSBjb25maWciCiAgICAgICAgICAgIGNhdCA+IC50YXNrbWFzdGVyL2NvbmZpZy5qc29uIDw8IEVPRgp7CiAgInByb2plY3QiOiB7CiAgICAibmFtZSI6ICIkUFJPSkVDVF9OQU1FIiwKICAgICJkZXNjcmlwdGlvbiI6ICJBdXRvLWdlbmVyYXRlZCBwcm9qZWN0IGZyb20gaW50YWtlIHBpcGVsaW5lIiwKICAgICJ2ZXJzaW9uIjogIjAuMS4wIgogIH0sCiAgIm1vZGVscyI6IHsKICAgICJtYWluIjogewogICAgICAicHJvdmlkZXIiOiAiJFBSSU1BUllfUFJPVklERVIiLAogICAgICAibW9kZWxJZCI6ICIkUFJJTUFSWV9NT0RFTCIsCiAgICAgICJtYXhUb2tlbnMiOiA2NDAwMCwKICAgICAgInRlbXBlcmF0dXJlIjogMC4yCiAgICB9LAogICAgInJlc2VhcmNoIjogewogICAgICAicHJvdmlkZXIiOiAiJFJFU0VBUkNIX1BST1ZJREVSIiwKICAgICAgIm1vZGVsSWQiOiAiJFJFU0VBUkNIX01PREVMIiwKICAgICAgIm1heFRva2VucyI6IDMyMDAwLAogICAgICAidGVtcGVyYXR1cmUiOiAwLjEKICAgIH0sCiAgICAiZmFsbGJhY2siOiB7CiAgICAgICJwcm92aWRlciI6ICIkRkFMTEJBQ0tfUFJPVklERVIiLAogICAgICAibW9kZWxJZCI6ICIkRkFMTEJBQ0tfTU9ERUwiLAogICAgICAibWF4VG9rZW5zIjogODAwMCwKICAgICAgInRlbXBlcmF0dXJlIjogMC43CiAgICB9CiAgfSwKICAiZ2xvYmFsIjogewogICAgImRlZmF1bHRUYWciOiAibWFzdGVyIgogIH0KfQpFT0YKICAgICAgICBmaQogICAgZmkKCiAgICBpZiAhIHRhc2stbWFzdGVyIGV4cGFuZCAtLWFsbCAtLWZvcmNlIC0tZmlsZSAiJFRBU0tTX0ZJTEUiIDI+JjE7IHRoZW4KICAgICAgICBlY2hvICLinYwgZXhwYW5kIGZhaWxlZCB3aXRoIGN1cnJlbnQgY29uZmlndXJhdGlvbiIKCiAgICAgICAgIyBMb2cgZGlhZ25vc3RpY3MgZm9yIHRyb3VibGVzaG9vdGluZwogICAgICAgIGxvZ19jbGF1ZGVfY29kZV9kaWFnbm9zdGljcwoKICAgICAgICAjIFRyeSBmYWxsYmFjayBjb25maWd1cmF0aW9uCiAgICAgICAgY29uZmlndXJlX3Byb3ZpZGVyX2ZhbGxiYWNrICJ0YXNrIGV4cGFuc2lvbiIgIi50YXNrbWFzdGVyL2NvbmZpZy5qc29uIgoKICAgICAgICAjIFJldHJ5IHdpdGggZmFsbGJhY2sgY29uZmlndXJhdGlvbgogICAgICAgIGlmICEgdGFzay1tYXN0ZXIgZXhwYW5kIC0tYWxsIC0tZm9yY2UgLS1maWxlICIkVEFTS1NfRklMRSIgMj4mMTsgdGhlbgogICAgICAgICAgICBlY2hvICLinYwgVGFzayBleHBhbnNpb24gZmFpbGVkIGV2ZW4gd2l0aCBmYWxsYmFjayBjb25maWd1cmF0aW9uIgogICAgICAgICAgICBlY2hvICLwn5OLIEZpbmFsIGRpYWdub3N0aWNzIGJlZm9yZSBleGl0OiIKICAgICAgICAgICAgbG9nX2NsYXVkZV9jb2RlX2RpYWdub3N0aWNzCiAgICAgICAgICAgIGV4aXQgMQogICAgICAgIGZpCgogICAgICAgIGVjaG8gIuKchSBUYXNrIGV4cGFuc2lvbiBzdWNjZWVkZWQgd2l0aCBmYWxsYmFjayBjb25maWd1cmF0aW9uIgogICAgZmkKZmkKCiMgUmV2aWV3IGFuZCBhbGlnbiB0YXNrcyB3aXRoIGFyY2hpdGVjdHVyZSB1c2luZyBDbGF1ZGUKZWNobyAi8J+kliBSZXZpZXdpbmcgdGFza3MgYWdhaW5zdCBhcmNoaXRlY3R1cmUgd2l0aCBDbGF1ZGUuLi4iCmlmIFsgLWYgIi50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIiBdOyB0aGVuCiAgICAjIENoZWNrIGlmIGNsYXVkZSBjb21tYW5kIGlzIGF2YWlsYWJsZQogICAgaWYgY29tbWFuZCAtdiBjbGF1ZGUgJj4gL2Rldi9udWxsOyB0aGVuCiAgICAgICAgZWNobyAi4pyFIENsYXVkZSBjb21tYW5kIGZvdW5kIgogICAgICAgIAogICAgICAgICMgQ3JlYXRlIGEgcHJvbXB0IGZvciBDbGF1ZGUgdG8gcmV2aWV3IHRhc2tzCiAgICAgICAgY2F0ID4gL3RtcC9yZXZpZXctcHJvbXB0Lm1kIDw8J0VPRicKUGxlYXNlIHJldmlldyB0aGUgdGFza3MuanNvbiBmaWxlIGFnYWluc3QgdGhlIGFyY2hpdGVjdHVyZS5tZCBkb2N1bWVudCBhbmQgZW5zdXJlIHRoZXkgYXJlIHByb3Blcmx5IGFsaWduZWQuCgpZb3VyIHRhc2sgaXMgdG86CjEuIENyb3NzLXJlZmVyZW5jZSBhbGwgdGFza3MgaW4gdGFza3MuanNvbiB3aXRoIHRoZSBhcmNoaXRlY3R1cmUgZGlhZ3JhbQoyLiBJZGVudGlmeSBhbnkgbWlzc2luZyB0YXNrcyB0aGF0IGFyZSBpbXBsaWVkIGJ5IHRoZSBhcmNoaXRlY3R1cmUKMy4gSWRlbnRpZnkgYW55IHRhc2tzIHRoYXQgZG9uJ3QgYWxpZ24gd2l0aCB0aGUgYXJjaGl0ZWN0dXJlCjQuIFVwZGF0ZSwgYWRkLCBvciByZW1vdmUgdGFza3MgYXMgbmVlZGVkIHRvIGVuc3VyZSBmdWxsIGFsaWdubWVudAoKSW1wb3J0YW50OgotIE1ha2UgZGlyZWN0IGVkaXRzIHRvIHRoZSB0YXNrcy5qc29uIGZpbGUKLSBFbnN1cmUgYWxsIGFyY2hpdGVjdHVyYWwgY29tcG9uZW50cyBoYXZlIGNvcnJlc3BvbmRpbmcgdGFza3MKLSBFbnN1cmUgdGFzayBkZXBlbmRlbmNpZXMgbWF0Y2ggdGhlIGFyY2hpdGVjdHVyYWwgZmxvdwotIFByZXNlcnZlIHRoZSBleGlzdGluZyB0YXNrIHN0cnVjdHVyZSBhbmQgSURzIHdoZXJlIHBvc3NpYmxlCi0gQWRkIGNsZWFyIGRldGFpbHMgYW5kIGltcGxlbWVudGF0aW9uIG5vdGVzIGJhc2VkIG9uIHRoZSBhcmNoaXRlY3R1cmUKCkZpbGVzIHRvIHJldmlldzoKLSAudGFza21hc3Rlci90YXNrcy90YXNrcy5qc29uICh0aGUgdGFzayBsaXN0KQotIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kICh0aGUgYXJjaGl0ZWN0dXJlIHJlZmVyZW5jZSkKCk1ha2UgdGhlIG5lY2Vzc2FyeSBtb2RpZmljYXRpb25zIGRpcmVjdGx5IHRvIGVuc3VyZSB0aGUgdGFza3MgYW5kIGFyY2hpdGVjdHVyZSBhcmUgZnVsbHkgYWxpZ25lZC4KRU9GCgogICAgICAgICMgUnVuIENsYXVkZSBDb2RlIHRvIHJldmlldyBhbmQgdXBkYXRlIHRhc2tzCiAgICAgICAgZWNobyAi8J+UjSBSdW5uaW5nIENsYXVkZSBDb2RlIHJldmlldy4uLiIKICAgICAgICAjIFNldCBDbGF1ZGUgY29uZmlnIGRpcmVjdG9yeQogICAgICAgIGV4cG9ydCBDTEFVREVfQ09ORklHX0RJUj0iJENPTkZJR19ESVIiCiAgICAgICAgaWYgWyAtcyAiL3RtcC9yZXZpZXctcHJvbXB0Lm1kIiBdOyB0aGVuCiAgICAgICAgICBlY2hvICLwn5OdIFByb2Nlc3NpbmcgcmV2aWV3IHByb21wdCB3aXRoIENsYXVkZSBDb2RlLi4uIgogICAgICAgICAgIyBDbGF1ZGUgQ29kZSB1c2VzIHNpbXBsZXIgY29tbWFuZCBsaW5lIGFyZ3VtZW50cwogICAgICAgICAgdGltZW91dCAzMDAgY2xhdWRlIC0tbW9kZWwgIiRNT0RFTCIgPCAvdG1wL3Jldmlldy1wcm9tcHQubWQgPiAvdG1wL2NsYXVkZS1vdXRwdXQuanNvbiAyPi90bXAvY2xhdWRlLWVycm9yLmxvZyB8fCB7CiAgICAgICAgICAgICAgZWNobyAi4pqg77iPIENsYXVkZSBDb2RlIHJldmlldyBmYWlsZWQgKGV4aXQgY29kZTogJD8pLCBidXQgY29udGludWluZy4uLiIKICAgICAgICAgICAgICBlY2hvICJFcnJvciBsb2c6IiAmJiBjYXQgL3RtcC9jbGF1ZGUtZXJyb3IubG9nIDI+L2Rldi9udWxsIHx8IGVjaG8gIk5vIGVycm9yIGxvZyBhdmFpbGFibGUiCiAgICAgICAgICB9CiAgICAgICAgICAjIENoZWNrIGlmIHdlIGdvdCBhIHZhbGlkIHJlc3BvbnNlCiAgICAgICAgICBpZiBbIC1zICIvdG1wL2NsYXVkZS1vdXRwdXQuanNvbiIgXTsgdGhlbgogICAgICAgICAgICAgIGVjaG8gIuKchSBDbGF1ZGUgQ29kZSByZXZpZXcgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICBlY2hvICLimqDvuI8gQ2xhdWRlIENvZGUgcmV2aWV3IHByb2R1Y2VkIG5vIG91dHB1dCIKICAgICAgICAgIGZpCiAgICAgICAgZWxzZQogICAgICAgICAgZWNobyAi4pqg77iPIFJldmlldyBwcm9tcHQgZmlsZSBtaXNzaW5nIG9yIGVtcHR5OyBza2lwcGluZyBDbGF1ZGUgQ29kZSByZXZpZXciCiAgICAgICAgZmkKICAgICAgICAKICAgICAgICBlY2hvICLinIUgVGFzayByZXZpZXcgY29tcGxldGUiCiAgICBlbHNlCiAgICAgICAgZWNobyAi4pqg77iPIENsYXVkZSBjb21tYW5kIG5vdCBmb3VuZCwgc2tpcHBpbmcgYXJjaGl0ZWN0dXJlIGFsaWdubWVudCIKICAgIGZpCmVsc2UKICAgIGVjaG8gIuKaoO+4jyBObyBhcmNoaXRlY3R1cmUubWQgZmlsZSBmb3VuZCwgc2tpcHBpbmcgYXJjaGl0ZWN0dXJlIGFsaWdubWVudCIKZmkKCiMgR2VuZXJhdGUgdGFzayBmaWxlcwplY2hvICLwn5OdIEdlbmVyYXRpbmcgaW5kaXZpZHVhbCB0YXNrIGZpbGVzLi4uIgp0YXNrLW1hc3RlciBnZW5lcmF0ZQoKIyBDcmVhdGUgc3VtbWFyeSBmaWxlCmVjaG8gIvCfk4ogQ3JlYXRpbmcgcHJvamVjdCBzdW1tYXJ5Li4uIgpjYXQgPiBSRUFETUUubWQgPDxFT0YKIyAkUFJPSkVDVF9OQU1FCgpBdXRvLWdlbmVyYXRlZCBwcm9qZWN0IGZyb20gaW50YWtlIHBpcGVsaW5lLgoKIyMgUHJvamVjdCBTdHJ1Y3R1cmUKCi0gKioudGFza21hc3Rlci8qKiAtIFRhc2tNYXN0ZXIgY29uZmlndXJhdGlvbiBhbmQgdGFza3MKICAtICoqZG9jcy8qKiAtIFNvdXJjZSBkb2N1bWVudHMgKFBSRCwgYXJjaGl0ZWN0dXJlKQogIC0gKip0YXNrcy8qKiAtIEdlbmVyYXRlZCB0YXNrIGRlZmluaXRpb25zCi0gKipkb2NzLyoqIC0gSW5kaXZpZHVhbCB0YXNrIGRvY3VtZW50YXRpb24KCiMjIEdldHRpbmcgU3RhcnRlZAoKMS4gUmV2aWV3IHRoZSBnZW5lcmF0ZWQgdGFza3MgaW4gLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbgoyLiBVc2UgdGFzay1tYXN0ZXIgbGlzdCB0byB2aWV3IGFsbCB0YXNrcwozLiBVc2UgdGFzay1tYXN0ZXIgbmV4dCB0byBnZXQgdGhlIG5leHQgdGFzayB0byB3b3JrIG9uCjQuIEltcGxlbWVudCB0YXNrcyB1c2luZyB0aGUgb3JjaGVzdHJhdG9yIHdvcmtmbG93CgojIyBHZW5lcmF0ZWQgU3RhdGlzdGljcwoKLSBUb3RhbCB0YXNrczogJChqcSAnLnRhc2tzIHwgbGVuZ3RoJyAudGFza21hc3Rlci90YXNrcy90YXNrcy5qc29uIDI+L2Rldi9udWxsIHx8IGVjaG8gIk4vQSIpCi0gTW9kZWwgdXNlZDogJE1PREVMCi0gR2VuZXJhdGVkIG9uOiAkKGRhdGUpCgojIyBTb3VyY2UgRG9jdW1lbnRzCgotIFtQcm9kdWN0IFJlcXVpcmVtZW50c10oLy50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCkKJChbIC1mICIudGFza21hc3Rlci9kb2NzL2FyY2hpdGVjdHVyZS5tZCIgXSAmJiBlY2hvICItIFtBcmNoaXRlY3R1cmVdKC8udGFza21hc3Rlci9kb2NzL2FyY2hpdGVjdHVyZS5tZCkiKQpFT0YKCiMgQ29tbWl0IGNoYW5nZXMKZWNobyAi8J+SviBDb21taXR0aW5nIHByb2plY3Qgc3RydWN0dXJlLi4uIgpjZCAiJENMT05FX0RJUiIKZ2l0IGFkZCAtQQpnaXQgY29tbWl0IC1tICJmZWF0OiBpbml0aWFsaXplIHByb2plY3QgJFBST0pFQ1RfTkFNRQoKLSBBdXRvbWF0ZWQgcHJvamVjdCBpbnRha2UgdmlhIG9yY2hlc3RyYXRvcgotIFBhcnNlZCBQUkQgYW5kIGFyY2hpdGVjdHVyZSBkb2N1bWVudHMKLSBHZW5lcmF0ZWQgVGFza01hc3RlciB0YXNrIGJyZWFrZG93bgotIENyZWF0ZWQgc3RhbmRhcmRpemVkIHByb2plY3Qgc3RydWN0dXJlCi0gU2V0IHVwIENJL0NEIHdvcmtmbG93cyBhbmQgdGVtcGxhdGVzCgrwn6SWIEF1dG8tZ2VuZXJhdGVkIGJ5IHByb2plY3QgaW50YWtlIHdvcmtmbG93IgotIE1vZGVsOiAkTU9ERUwKLSBUYXNrczogJE5VTV9UQVNLUyB0YXJnZXRzCiQoWyAiJEVYUEFORF9UQVNLUyIgPSAidHJ1ZSIgXSAmJiBlY2hvICItIEV4cGFuZGVkIHdpdGggc3VidGFza3MiKQokKFsgIiRBTkFMWVpFX0NPTVBMRVhJVFkiID0gInRydWUiIF0gJiYgZWNobyAiLSBDb21wbGV4aXR5IGFuYWx5c2lzIHBlcmZvcm1lZCIpCiIKCiMgQ3JlYXRlIGJyYW5jaCBhbmQgcHVzaAojIFVzZSBhIGh5cGhlbmF0ZWQgcHJlZml4IHRvIGF2b2lkIGNvbGxpc2lvbnMgd2hlbiBhIGZsYXQgcmVmIG5hbWVkICdpbnRha2UnIGV4aXN0cyByZW1vdGVseQojIEFsc28gcHJlZmVyIHRoZSBzYW5pdGl6ZWQsIGxvd2VyY2FzZSBwcm9qZWN0IGRpcmVjdG9yeSBuYW1lIGZvciB0aGUgYnJhbmNoIGNvbXBvbmVudApCUkFOQ0hfTkFNRT0iaW50YWtlLSR7UFJPSkVDVF9ESVJfTkFNRX0tJChkYXRlICslWSVtJWQtJUglTSVTKSIKZWNobyAi8J+MvyBDcmVhdGluZyBicmFuY2g6ICRCUkFOQ0hfTkFNRSIKZ2l0IGNoZWNrb3V0IC1iICIkQlJBTkNIX05BTUUiCmdpdCBwdXNoIC11IG9yaWdpbiAiJEJSQU5DSF9OQU1FIgoKIyBDcmVhdGUgcHVsbCByZXF1ZXN0CmVjaG8gIvCflIAgQ3JlYXRpbmcgcHVsbCByZXF1ZXN0Li4uIgoKIyBCdWlsZCBQUiBib2R5IGlubGluZSB0byBhdm9pZCBmdW5jdGlvbiBpc3N1ZXMKQVJDSF9JTkNMVURFRD0iIgppZiBbIC1mICIkUFJPSkVDVF9ESVIvLnRhc2ttYXN0ZXIvZG9jcy9hcmNoaXRlY3R1cmUubWQiIF07IHRoZW4KICAgIEFSQ0hfSU5DTFVERUQ9Ii0g4pyFIEFyY2hpdGVjdHVyZSBkb2N1bWVudCBpbmNsdWRlZCIKZmkKCkNPTVBMRVhJVFlfRE9ORT0iIgppZiBbICIkQU5BTFlaRV9DT01QTEVYSVRZIiA9ICJ0cnVlIiBdOyB0aGVuCiAgICBDT01QTEVYSVRZX0RPTkU9Ii0g4pyFIENvbXBsZXhpdHkgYW5hbHlzaXMgcGVyZm9ybWVkIgpmaQoKRVhQQU5TSU9OX0RPTkU9IiIKaWYgWyAiJEVYUEFORF9UQVNLUyIgPSAidHJ1ZSIgXTsgdGhlbgogICAgRVhQQU5TSU9OX0RPTkU9Ii0g4pyFIFRhc2tzIGV4cGFuZGVkIHdpdGggc3VidGFza3MiCmZpCgpUQVNLX0NPVU5UPSQoanEgJy50YXNrcyB8IGxlbmd0aCcgIiRQUk9KRUNUX0RJUi8udGFza21hc3Rlci90YXNrcy90YXNrcy5qc29uIiAyPi9kZXYvbnVsbCB8fCBlY2hvICJOL0EiKQoKIyBCdWlsZCBQUiBib2R5IHVzaW5nIGEgdGVtcG9yYXJ5IGZpbGUgdG8gYXZvaWQgYmFzaCBpbnRlcnByZXRhdGlvbiBpc3N1ZXMKUFJfQk9EWV9GSUxFPSIvdG1wL3ByX2JvZHlfJCQudHh0IgpjYXQgPiAiJFBSX0JPRFlfRklMRSIgPDwgJ0VPRicKIyMg8J+OiSBQcm9qZWN0IEludGFrZTogUFJPSkVDVF9OQU1FX1BMQUNFSE9MREVSCgpUaGlzIFBSIGNvbnRhaW5zIHRoZSBhdXRvLWdlbmVyYXRlZCBwcm9qZWN0IHN0cnVjdHVyZSBhbmQgdGFza3MuCgojIyMg8J+TiyBXaGF0IHdhcyBwcm9jZXNzZWQ6Ci0g4pyFIFBSRCBkb2N1bWVudCBwYXJzZWQKQVJDSF9JTkNMVURFRF9QTEFDRUhPTERFUgotIOKchSBUYXNrTWFzdGVyIGluaXRpYWxpemVkCi0g4pyFIFRhc2tzIGdlbmVyYXRlZCAodGFyZ2V0OiBOVU1fVEFTS1NfUExBQ0VIT0xERVIpCkNPTVBMRVhJVFlfRE9ORV9QTEFDRUhPTERFUgpFWFBBTlNJT05fRE9ORV9QTEFDRUhPTERFUgotIOKchSBQcm9qZWN0IHN0cnVjdHVyZSBjcmVhdGVkCgojIyMg8J+Pl++4jyBHZW5lcmF0ZWQgU3RydWN0dXJlOgpgYGAKUFJPSkVDVF9ESVJfUExBQ0VIT0xERVIvCuKUnOKUgOKUgCAudGFza21hc3Rlci8K4pSCICAg4pSc4pSA4pSAIGRvY3MvCuKUgiAgIOKUgiAgIOKUnOKUgOKUgCBwcmQudHh0CuKUgiAgIOKUgiAgIOKUlOKUgOKUgCBhcmNoaXRlY3R1cmUubWQK4pSCICAg4pSc4pSA4pSAIHRhc2tzLwrilIIgICDilIIgICDilJTilIDilIAgdGFza3MuanNvbgrilIIgICDilJTilIDilIAgY29uZmlnLmpzb24K4pSc4pSA4pSAIGRvY3MvCuKUgiAgIOKUnOKUgOKUgCB0YXNrLTEvCuKUgiAgIOKUgiAgIOKUlOKUgOKUgCB0YXNrLm1kCuKUgiAgIOKUlOKUgOKUgCAuLi4K4pSU4pSA4pSAIFJFQURNRS5tZApgYGAKCiMjIyDwn6SWIENvbmZpZ3VyYXRpb246Ci0gKipNb2RlbCoqOiBNT0RFTF9QTEFDRUhPTERFUgotICoqVGFza3MgR2VuZXJhdGVkKio6IFRBU0tfQ09VTlRfUExBQ0VIT0xERVIKLSAqKkNvbXBsZXhpdHkgQW5hbHlzaXMqKjogQU5BTFlaRV9DT01QTEVYSVRZX1BMQUNFSE9MREVSCi0gKipUYXNrIEV4cGFuc2lvbioqOiBFWFBBTkRfVEFTS1NfUExBQ0VIT0xERVIKCiMjIyDwn46vIE5leHQgU3RlcHM6CjEuIFJldmlldyB0aGUgZ2VuZXJhdGVkIHRhc2tzCjIuIE1lcmdlIHRoaXMgUFIgdG8gYWRkIHRoZSBwcm9qZWN0CjMuIFVzZSBvcmNoZXN0cmF0b3Igd29ya2Zsb3dzIHRvIGltcGxlbWVudCB0YXNrcwpFT0YKCiMgUmVwbGFjZSBwbGFjZWhvbGRlcnMgd2l0aCBhY3R1YWwgdmFsdWVzIHVzaW5nIHNlZCAodXNpbmcgfCBhcyBkZWxpbWl0ZXIgdG8gYXZvaWQgaXNzdWVzIHdpdGggZm9yd2FyZCBzbGFzaGVzIGluIHBhdGhzKQpzZWQgLWkgInN8UFJPSkVDVF9OQU1FX1BMQUNFSE9MREVSfCRQUk9KRUNUX05BTUV8ZyIgIiRQUl9CT0RZX0ZJTEUiCnNlZCAtaSAic3xBUkNIX0lOQ0xVREVEX1BMQUNFSE9MREVSfCRBUkNIX0lOQ0xVREVEfGciICIkUFJfQk9EWV9GSUxFIgpzZWQgLWkgInN8TlVNX1RBU0tTX1BMQUNFSE9MREVSfCROVU1fVEFTS1N8ZyIgIiRQUl9CT0RZX0ZJTEUiCnNlZCAtaSAic3xDT01QTEVYSVRZX0RPTkVfUExBQ0VIT0xERVJ8JENPTVBMRVhJVFlfRE9ORXxnIiAiJFBSX0JPRFlfRklMRSIKc2VkIC1pICJzfEVYUEFOU0lPTl9ET05FX1BMQUNFSE9MREVSfCRFWFBBTlNJT05fRE9ORXxnIiAiJFBSX0JPRFlfRklMRSIKc2VkIC1pICJzfFBST0pFQ1RfRElSX1BMQUNFSE9MREVSfCRQUk9KRUNUX0RJUnxnIiAiJFBSX0JPRFlfRklMRSIKc2VkIC1pICJzfE1PREVMX1BMQUNFSE9MREVSfCRNT0RFTHxnIiAiJFBSX0JPRFlfRklMRSIKc2VkIC1pICJzfFRBU0tfQ09VTlRfUExBQ0VIT0xERVJ8JFRBU0tfQ09VTlR8ZyIgIiRQUl9CT0RZX0ZJTEUiCnNlZCAtaSAic3xBTkFMWVpFX0NPTVBMRVhJVFlfUExBQ0VIT0xERVJ8JEFOQUxZWkVfQ09NUExFWElUWXxnIiAiJFBSX0JPRFlfRklMRSIKc2VkIC1pICJzfEVYUEFORF9UQVNLU19QTEFDRUhPTERFUnwkRVhQQU5EX1RBU0tTfGciICIkUFJfQk9EWV9GSUxFIgoKIyBSZWFkIHRoZSBmaW5hbCBQUiBib2R5ClBSX0JPRFk9JChjYXQgIiRQUl9CT0RZX0ZJTEUiKQpybSAtZiAiJFBSX0JPRFlfRklMRSIKCiMgUmVmcmVzaCBHaXRIdWIgdG9rZW4gYmVmb3JlIFBSIGNyZWF0aW9uCmlmIFsgLW4gIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiBdOyB0aGVuCiAgICBlY2hvICLwn5SEIFJlZnJlc2hpbmcgR2l0SHViIHRva2VuIGZvciBQUiBjcmVhdGlvbi4uLiIKICAgIGdlbmVyYXRlX2dpdGh1Yl90b2tlbgpmaQoKZ2ggcHIgY3JlYXRlIFwKICAgIC0tdGl0bGUgIvCfmoAgUHJvamVjdCBJbnRha2U6ICRQUk9KRUNUX05BTUUiIFwKICAgIC0tYm9keSAiJFBSX0JPRFkiIFwKICAgIC0taGVhZCAiJEJSQU5DSF9OQU1FIiBcCiAgICAtLWJhc2UgbWFpbiB8fCB7CiAgICAgICAgZWNobyAi4pqg77iPIEZhaWxlZCB0byBjcmVhdGUgUFIsIGJ1dCBicmFuY2ggaGFzIGJlZW4gcHVzaGVkIgogICAgICAgIGVjaG8gIkJyYW5jaDogJEJSQU5DSF9OQU1FIgogICAgICAgIGVjaG8gIllvdSBjYW4gY3JlYXRlIHRoZSBQUiBtYW51YWxseSIKICAgIH0KCmVjaG8gIuKchSBQcm9qZWN0IGludGFrZSBjb21wbGV0ZSEiCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIKZWNobyAiUHJvamVjdDogJFBST0pFQ1RfTkFNRSIKZWNobyAiTG9jYXRpb246ICRQUk9KRUNUX0RJUiIKZWNobyAiQnJhbmNoOiAkQlJBTkNIX05BTUUiCmVjaG8gIlJlcG9zaXRvcnk6ICRSRVBPU0lUT1JZX1VSTCIK

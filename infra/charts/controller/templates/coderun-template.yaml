{{- if .Values.argo.enabled }}
---
# Argo Workflow Template for CodeRun Tasks
# This template creates CodeRun CRDs and lets the existing controller handle execution

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: coderun-template
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: coderun-template
    app.kubernetes.io/part-of: platform
    agents.platform/template-type: coderun
spec:
  # Define input parameters that match the MCP server interface
  # Note: 'default' values are for documentation/IDE hints only - MCP server always provides explicit values
  arguments:
    parameters:
      # All parameters are required by Argo (MCP server always provides explicit values)
      - name: task-id
        description: "Task Master task ID to implement"
      - name: service-id
        description: "Service identifier for persistent workspace"
      - name: repository-url
        description: "Target repository URL in org/repo format (e.g., 5dlabs/cto)"
      - name: docs-repository-url
        description: "Documentation repository URL in org/repo format"
      - name: docs-project-directory
        description: "Project directory within docs repository"
      - name: working-directory
        description: "Working directory within target repository"
      - name: github-app
        description: "GitHub App name for authentication (e.g., '5DLabs-Rex')"
      - name: model
        description: "Model to use for execution (deprecated - use cliConfig instead)"
        default: ""
      - name: cli-type
        description: "CLI type to use (claude, codex, opencode, etc.)"
        default: ""
      - name: cli-model
        description: "CLI model to use (e.g., claude-3-5-sonnet-20241022, gpt-4)"
        default: ""
      - name: cli-max-tokens
        description: "Maximum tokens for CLI execution"
        default: ""
      - name: cli-temperature
        description: "Temperature setting for CLI execution"
        default: ""
      - name: continue-session
        description: "Whether to continue previous session"
      - name: overwrite-memory
        description: "Whether to overwrite CLAUDE.md memory file"
      - name: docs-branch
        description: "Documentation branch to work from"
      - name: task-requirements
        description: "Base64-encoded requirements.yaml content"
        default: ""

  # Service account for workflow execution
  serviceAccountName: argo-workflow

  # Main workflow entry point
  entrypoint: coderun-main

  templates:
    # Main CodeRun execution - create CRD and wait for completion
    - name: coderun-main
      steps:
      - - name: create-coderun-resource
          template: create-coderun-resource
      - - name: wait-for-completion
          template: wait-coderun-completion
          arguments:
            parameters:
            - name: coderun-name
              value: "{{`{{steps.create-coderun-resource.outputs.parameters.name}}`}}"

    - name: create-coderun-resource
      outputs:
        parameters:
        - name: name
          valueFrom:
            jsonPath: '{.metadata.name}'
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: agents.platform/v1
          kind: CodeRun
          metadata:
            generateName: "coderun-{{`{{workflow.parameters.task-id}}`}}-{{`{{workflow.parameters.service-id}}`}}-"
            namespace: {{ .Release.Namespace }}
            labels:
              workflow-name: "{{`{{workflow.name}}`}}"
              task-id: "{{`{{workflow.parameters.task-id}}`}}"
              service: "{{`{{workflow.parameters.service-id}}`}}"
              github-app: "{{`{{workflow.parameters.github-app}}`}}"
          spec:
            taskId: {{`{{workflow.parameters.task-id}}`}}
            service: "{{`{{workflow.parameters.service-id}}`}}"
            repositoryUrl: "{{`{{workflow.parameters.repository-url}}`}}"
            docsRepositoryUrl: "{{`{{workflow.parameters.docs-repository-url}}`}}"
            docsProjectDirectory: "{{`{{workflow.parameters.docs-project-directory}}`}}"
            workingDirectory: "{{`{{workflow.parameters.working-directory}}`}}"
            githubApp: "{{`{{workflow.parameters.github-app}}`}}"
            # CLI Configuration (optional - parameters control inclusion)
            cliConfig:
              cliType: "{{`{{workflow.parameters.cli-type}}`}}"
              model: "{{`{{workflow.parameters.cli-model}}`}}"
              maxTokens: {{`{{workflow.parameters.cli-max-tokens}}`}}
              temperature: {{`{{workflow.parameters.cli-temperature}}`}}
            # Legacy model field for backward compatibility
            model: "{{`{{workflow.parameters.model}}`}}"
            continueSession: {{`{{workflow.parameters.continue-session}}`}}
            overwriteMemory: {{`{{workflow.parameters.overwrite-memory}}`}}
            docsBranch: "{{`{{workflow.parameters.docs-branch}}`}}"
            # serviceAccountName is optional; controller will default from its config if not provided
            contextVersion: 1
            taskRequirements: "{{`{{workflow.parameters.task-requirements}}`}}"

    - name: wait-coderun-completion
      inputs:
        parameters:
        - name: coderun-name
      resource:
        action: get
        manifest: |
          apiVersion: agents.platform/v1
          kind: CodeRun
          metadata:
            name: "{{`{{inputs.parameters.coderun-name}}`}}"
            namespace: {{ .Release.Namespace }}
        successCondition: status.phase == Succeeded
        failureCondition: status.phase == Failed

  # Cleanup policy - reasonable cleanup for long-running AI tasks
  ttlStrategy:
    secondsAfterCompletion: 300    # Keep completed workflows for 5 minutes
    secondsAfterFailure: 10800     # Keep failed workflows for 3 hours

  # Pod garbage collection
  podGC:
    strategy: OnPodCompletion      # Delete pods immediately when they complete{{- end }}

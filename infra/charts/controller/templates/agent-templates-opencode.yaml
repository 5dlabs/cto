# This file is auto-generated by scripts/generate-agent-templates-configmaps-split.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-opencode
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: agent-templates
    agent-templates/type: opencode
  annotations:
    templates-checksum: "e64280d7452e5781eab5782eccf8f5d137781857c91bfc5758f0f09c6d8000bf"
binaryData:
  agents_cipher-system-prompt.md.hbs: IyBDaXBoZXIgU2VjdXJpdHkgU2Nhbm5pbmcgQWdlbnQKCiMjIFJvbGUKWW91IGFyZSAqKkNpcGhlcioqLCB0aGUgc2VjdXJpdHkgc2Nhbm5pbmcgYWdlbnQgcmVzcG9uc2libGUgZm9yIGlkZW50aWZ5aW5nIGFuZCBmaXhpbmcgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIGluIGNvZGUgYmVmb3JlIGl0IHJlYWNoZXMgcHJvZHVjdGlvbi4KCiMjIENvcmUgUmVzcG9uc2liaWxpdGllcwoKIyMjIDEuIEdpdEh1YiBDb2RlIFNjYW5uaW5nIChDUklUSUNBTCkKLSAqKkNoZWNrIGZvciBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMqKjogVXNlIGBnaCBhcGkgIi9yZXBvcy97e3JlcG9fb3duZXJ9fS97e3JlcG9fbmFtZX19L2NvZGUtc2Nhbm5pbmcvYWxlcnRzP3N0YXRlPW9wZW4mcHI9e3twcl9udW1iZXJ9fSJgIHRvIGdldCBhbGwgb3BlbiBzZWN1cml0eSBhbGVydHMgZm9yIHRoZSBjdXJyZW50IFBSCi0gKipaZXJvIHRvbGVyYW5jZSBmb3IgSElHSCBhbmQgQ1JJVElDQUwgc2V2ZXJpdHkgaXNzdWVzKiogLSB0aGVzZSBNVVNUIGJlIGZpeGVkCi0gKipNdXN0IGZpeCBhbGwgTUVESVVNIHNldmVyaXR5IGlzc3VlcyoqIC0gbm8gZXhjZXB0aW9ucwotICoqQ29tbW9uIHZ1bG5lcmFiaWxpdGllcyB0byBhZGRyZXNzKio6CiAgKiBTUUwgaW5qZWN0aW9uIHZ1bG5lcmFiaWxpdGllcwogICogQ29tbWFuZCBpbmplY3Rpb24gcmlza3MKICAqIFBhdGggdHJhdmVyc2FsIHZ1bG5lcmFiaWxpdGllcwogICogSW5zZWN1cmUgY3J5cHRvZ3JhcGhpYyBwcmFjdGljZXMKICAqIEhhcmRjb2RlZCBjcmVkZW50aWFscyBvciBzZWNyZXRzCiAgKiBVbnNhZmUgZGVzZXJpYWxpemF0aW9uCiAgKiBDcm9zcy1zaXRlIHNjcmlwdGluZyAoWFNTKQogICogQXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbiBieXBhc3NlcwoKIyMjIDIuIFNlY3VyaXR5IEJlc3QgUHJhY3RpY2VzCi0gKipQYXJhbWV0ZXJpemVkIHF1ZXJpZXMqKjogQWx3YXlzIHVzZSBwcmVwYXJlZCBzdGF0ZW1lbnRzIGZvciBkYXRhYmFzZSBxdWVyaWVzCi0gKipJbnB1dCB2YWxpZGF0aW9uKio6IFZhbGlkYXRlIGFuZCBzYW5pdGl6ZSBhbGwgdXNlciBpbnB1dAotICoqU2FmZSBwYXRoIGhhbmRsaW5nKio6IFVzZSBwYXRoIG5vcm1hbGl6YXRpb24gYW5kIHZhbGlkYXRpb24KLSAqKlNlY3VyZSBjcnlwdG8qKjogVXNlIG1vZGVybiwgYXBwcm92ZWQgY3J5cHRvZ3JhcGhpYyBsaWJyYXJpZXMgYW5kIGFsZ29yaXRobXMKLSAqKk5vIGhhcmRjb2RlZCBzZWNyZXRzKio6IFVzZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgb3Igc2VjcmV0IG1hbmFnZW1lbnQKLSAqKkxlYXN0IHByaXZpbGVnZSoqOiBNaW5pbWl6ZSBwZXJtaXNzaW9ucyBhbmQgYWNjZXNzIHJpZ2h0cwotICoqU2VjdXJlIGRlZmF1bHRzKio6IEZhaWwgc2VjdXJlbHkgYnkgZGVmYXVsdAoKIyMjIDMuIENvZGUgUXVhbGl0eSBJbnRlZ3JhdGlvbgotIFJ1biBzdGFuZGFyZCBxdWFsaXR5IGNoZWNrcyAobGludGluZywgZm9ybWF0dGluZywgdGVzdHMpCi0gKipEbyBOT1Qgc3VwcHJlc3Mgc2VjdXJpdHkgd2FybmluZ3MqKiAtIGZpeCB0aGUgdW5kZXJseWluZyB2dWxuZXJhYmlsaXR5Ci0gRG9jdW1lbnQgc2VjdXJpdHktc2Vuc2l0aXZlIGNvZGUgZGVjaXNpb25zCi0gRW5zdXJlIENJL0NEIHBpcGVsaW5lIGluY2x1ZGVzIHNlY3VyaXR5IHNjYW5uaW5nCgojIyBXb3JrZmxvdwoKMS4gKipDaGVjayBHaXRIdWIgY29kZSBzY2FubmluZyoqIGZvciBvcGVuIGFsZXJ0cyBvbiB0aGUgUFIKMi4gKipGaXggYWxsIE1FRElVTS9ISUdIL0NSSVRJQ0FMIHZ1bG5lcmFiaWxpdGllcyoqIGJlZm9yZSBwcm9jZWVkaW5nCjMuICoqUnVuIHF1YWxpdHkgY2hlY2tzKiogKGNsaXBweSwgZm10LCB0ZXN0cyBhcyBhcHBsaWNhYmxlKQo0LiAqKlZlcmlmeSBmaXhlcyoqIGJ5IHJlLWNoZWNraW5nIGNvZGUgc2Nhbm5pbmcgYWxlcnRzCjUuICoqRG9jdW1lbnQgY2hhbmdlcyoqIGluIGNvbW1pdCBtZXNzYWdlcwo2LiAqKlB1c2ggZml4ZXMqKiB0byB0aGUgUFIgYnJhbmNoCgojIyBTdWNjZXNzIENyaXRlcmlhCi0g4pyFIFplcm8gTUVESVVNL0hJR0gvQ1JJVElDQUwgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzCi0g4pyFIEFsbCBxdWFsaXR5IGNoZWNrcyBwYXNzaW5nCi0g4pyFIFNlY3VyaXR5IGJlc3QgcHJhY3RpY2VzIGZvbGxvd2VkCi0g4pyFIENoYW5nZXMgZG9jdW1lbnRlZCBhbmQgcHVzaGVkCgojIyBSZW1lbWJlcgpTZWN1cml0eSBpcyBub3Qgb3B0aW9uYWwuIEV2ZXJ5IHZ1bG5lcmFiaWxpdHkgeW91IGZpeCBwcm90ZWN0cyB1c2VycywgZGF0YSwgYW5kIHRoZSBjb21wYW55LiBOZXZlciBzdXBwcmVzcyBzZWN1cml0eSB3YXJuaW5ncyAtIGZpeCB0aGUgcm9vdCBjYXVzZS4KCg==
  agents_cleo-system-prompt.md.hbs: 
  agents_rex-system-prompt.md.hbs: 
  agents_system-prompt.md.hbs: LS0tCm5hbWU6IHt7YWdlbnRfbmFtZX19CmRlc2NyaXB0aW9uOiB7e2FnZW50X2Rlc2NyaXB0aW9ufX0KIyB0b29sczogb21pdHRlZCB0byBpbmhlcml0IGFsbCBhdmFpbGFibGUgdG9vbHMKLS0tCgp7e3N5c3RlbV9wcm9tcHR9fQo=
  agents_tess-system-prompt.md.hbs: 
  code_opencode_agents-blaze.md.hbs: IyBPcGVuQ29kZSBQcm9qZWN0IE1lbW9yeSDigJQgRnJvbnRlbmQgQWdlbnQgKEJsYXplKQoKIyMgQWdlbnQgSWRlbnRpdHkKLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKk1vZGVsKio6IHt7bW9kZWx9fQotICoqVGFzayoqOiB7e3Rhc2tfaWR9fQotICoqU2VydmljZSoqOiB7e3NlcnZpY2V9fQotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KCllvdSBhcmUgKipCbGF6ZSoqLCB0aGUgKipmcm9udGVuZCBpbXBsZW1lbnRhdGlvbiBhZ2VudCoqIGZvciBUYXNrIHt7dGFza19pZH19LgoKIyMgRXhlY3V0aW9uIFJ1bGVzCjEuICoqUHJvZHVjdGlvbiBjb2RlIG9ubHkqKiAtIE5vIG1vY2tzIG9yIHBsYWNlaG9sZGVycwoyLiAqKk1vYmlsZS1maXJzdCoqIC0gUmVzcG9uc2l2ZSBhdCAzNzVweC83NjhweC8xOTIwcHgKMy4gKipBY2Nlc3NpYmxlKiogLSBXQ0FHIEFBIGNvbXBsaWFudAo0LiAqKlR5cGUtc2FmZSoqIC0gVHlwZVNjcmlwdCBzdHJpY3QsIG5vIGBhbnlgCjUuICoqR2l0IGNsZWFuKiogLSBPbiBgZmVhdHVyZS90YXNrLXt7dGFza19pZH19LWltcGxlbWVudGF0aW9uYAo2LiAqKkF1dG9ub21vdXMqKiAtIE1ha2UgZGVjaXNpb25zLCBkb2N1bWVudCB3aHkKNy4gKipGb2N1c2VkKiogLSBPbmx5IFRhc2sge3t0YXNrX2lkfX0KCiMjIFRlY2hub2xvZ3kgKE1BTkRBVE9SWSkKLSBOZXh0LmpzIDE1IChBcHAgUm91dGVyKSAtIE5PVCBSZW1peAotIFJlYWN0IDE5ICsgVHlwZVNjcmlwdCA1IChzdHJpY3QgbW9kZSkKLSBUYWlsd2luZCBDU1MgNCBPTkxZIC0gTk8gTWF0ZXJpYWwtVUkKLSBzaGFkY24vdWkgKENPUElFUyBzb3VyY2UgY29kZSB0byB5b3VyIHJlcG8sIG5vdCBucG0pCi0gUmVhY3QgQ29udGV4dCAvIFp1c3RhbmQgZm9yIHN0YXRlCgojIyBEZXNpZ24gU3lzdGVtIC0gUkVBRCBGSVJTVAoqKvCfk5oqKiBgZGVzaWduLXN5c3RlbS5tZGAgKGluIHlvdXIgd29ya2luZyBkaXJlY3RvcnkpCnNoYWRjbi91aSBDT1BJRVMgY29tcG9uZW50cyBpbnRvIHlvdXIgcHJvamVjdDogYG5weCBzaGFkY25AbGF0ZXN0IGFkZCBidXR0b24gY2FyZGAKQ29tcG9uZW50cyBjb21lIHdpdGggYWNjZXNzaWJpbGl0eSwgZGFyayBtb2RlLCBUeXBlU2NyaXB0IGJ1aWx0LWluLgoKIyMgSW1wbGVtZW50YXRpb24KMS4gUmVhZCB0YXNrIGRvY3MgKHRhc2subWQsIGFjY2VwdGFuY2UtY3JpdGVyaWEubWQpCjIuIExvYWQgZGVzaWduIHN5c3RlbSAoYC5ibGF6ZS9kZXNpZ24tc3lzdGVtLmpzb25gKQozLiBJbml0aWFsaXplOiBgcG5wbSBjcmVhdGUgbmV4dC1hcHBgICsgYHBucG0gZGx4IHNoYWRjbiBpbml0YAo0LiBEZXZlbG9wIGNvbXBvbmVudHMgKFR5cGVTY3JpcHQgKyBUYWlsd2luZCArIHNoYWRjbi91aSkKNS4gUXVhbGl0eTogYHBucG0gbGludCAmJiBwbnBtIHR5cGVjaGVjayAmJiBwbnBtIGJ1aWxkYAo2LiBDcmVhdGUgUFIgd2l0aCBkb2NzCgojIyBEZWZpbml0aW9uIG9mIERvbmUKLSDinIUgQWNjZXB0YW5jZSBjcml0ZXJpYSBzYXRpc2ZpZWQKLSDinIUgWmVybyBsaW50L3R5cGUgZXJyb3JzCi0g4pyFIFByb2R1Y3Rpb24gYnVpbGQgc3VjY2VlZHMKLSDinIUgUmVzcG9uc2l2ZSBkZXNpZ24gdmVyaWZpZWQKLSDinIUgQWNjZXNzaWJpbGl0eSB2YWxpZGF0ZWQKLSDinIUgUFIgY3JlYXRlZCB3aXRoIGRvY3MKCnt7I2lmIHRvb2xtYW4udG9vbHN9fQojIyBBdmFpbGFibGUgVG9vbHMKe3sjZWFjaCB0b29sbWFuLnRvb2xzfX0KLSB7e3RoaXN9fQp7ey9lYWNofX0Ke3svaWZ9fQoKe3sjaWYgY2xpX2NvbmZpZy5pbnN0cnVjdGlvbnN9fQojIyBDdXN0b20gSW5zdHJ1Y3Rpb25zCnt7e2NsaV9jb25maWcuaW5zdHJ1Y3Rpb25zfX19Cnt7L2lmfX0KCnt7I2lmIGNsaV9jb25maWcuYWRkaXRpb25hbE5vdGVzfX0KIyMgTm90ZXMKe3t7Y2xpX2NvbmZpZy5hZGRpdGlvbmFsTm90ZXN9fX0Ke3svaWZ9fQoK
  code_opencode_agents-cipher.md.hbs: IyBPcGVuQ29kZSBBZ2VudCBNZW1vcnkgLSBDaXBoZXIgU2VjdXJpdHkgU2Nhbm5lcgoKe3s+IGFnZW50cy9jaXBoZXItc3lzdGVtLXByb21wdH19CgojIyBFeGVjdXRpb24gQ29udGV4dAotICoqR2l0SHViIEFwcCoqOiB7e2dpdGh1Yl9hcHB9fQotICoqTW9kZWwqKjoge3ttb2RlbH19Ci0gKipUYXNrIElEKio6IHt7dGFza19pZH19Ci0gKipTZXJ2aWNlKio6IHt7c2VydmljZX19Ci0gKipSZXBvc2l0b3J5Kio6IHt7cmVwb3NpdG9yeV91cmx9fQotICoqUFIgTnVtYmVyKio6IHt7cHJfbnVtYmVyfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQoKIyMgT3BlbkNvZGUgQ0xJIEludGVncmF0aW9uCi0gUnVubmluZyBoZWFkbGVzcyB3aXRoIGFwcHJvcHJpYXRlIG91dHB1dCBmb3JtYXQKLSBBbGwgR2l0SHViIEFQSSBvcGVyYXRpb25zIGF2YWlsYWJsZSB2aWEgYGdoYCBDTEkKLSBTaGVsbCBjb21tYW5kcyBhdmFpbGFibGUgZm9yIHNlY3VyaXR5IHNjYW5uaW5nCi0gQ29uZmlndXJhdGlvbiB2aWEgYGNvbmZpZy5qc29uYAoKIyMgQXZhaWxhYmxlIFRvb2xzCnt7I2lmIHRvb2xtYW4udG9vbHN9fQojIyMgVG9vbG1hbiBUb29scwp7eyNlYWNoIHRvb2xtYW4udG9vbHN9fQotIHt7dGhpc319Cnt7L2VhY2h9fQp7e2Vsc2V9fQojIyMgQnVpbHQtaW4gVG9vbHMKLSBTaGVsbC9iYXNoIGFjY2VzcyBmb3IgZ2ggQ0xJIGNvbW1hbmRzCi0gR2l0IG9wZXJhdGlvbnMKLSBGaWxlIHJlYWQvd3JpdGUgb3BlcmF0aW9ucwp7ey9pZn19Cgo=
  code_opencode_agents-cleo.md.hbs: IyBPcGVuQ29kZSBQcm9qZWN0IE1lbW9yeSDigJQgUXVhbGl0eSBBZ2VudCAoQ2xlbykKCiMjIEFnZW50IElkZW50aXR5ICYgU2NvcGUKLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKk1vZGVsKio6IHt7bW9kZWx9fQotICoqVGFzayBJRCoqOiB7e3Rhc2tfaWR9fQotICoqU2VydmljZSoqOiB7e3NlcnZpY2V9fQotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkRvY3MgQnJhbmNoKio6IHt7ZG9jc19icmFuY2h9fQoKWW91IGFyZSB0aGUgKipjb2RlIHF1YWxpdHkgYW5kIENJL0NEIGVuZm9yY2VyKiouIFlvdXIgam9iIGlzIHRvIHByb3RlY3QgcHJvZHVjdGlvbiBieSByZWplY3RpbmcgYW55dGhpbmcgdGhhdCBpcyBub3QgZmxhd2xlc3MuCioqWW91IGRvIG5vdCB3cml0ZSBpbXBsZW1lbnRhdGlvbiBjb2RlLioqIFlvdSBhdWRpdCwgZml4IHF1YWxpdHkgaXNzdWVzLCBhbmQgdW5ibG9jayBDSS4KCiMjIE5vbi1OZWdvdGlhYmxlIFJlc3BvbnNpYmlsaXRpZXMKMS4gKipaZXJvIHRvbGVyYW5jZSBmb3IgbGludCB3YXJuaW5ncy4qKiBSdW4gYGNhcmdvIGZtdGAsIGBjYXJnbyBjbGlwcHkgLS13b3Jrc3BhY2UgLS1hbGwtdGFyZ2V0cyAtLWFsbC1mZWF0dXJlcyAtLSAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljYCwgYW5kIGFueSBsYW5ndWFnZS1zcGVjaWZpYyBsaW50ZXJzLiBGaXggZXZlcnkgd2FybmluZ+KAlGRvIG5vdCBzdXBwcmVzcyB0aGVtLgoyLiAqKktlZXAgQ0kgaGVhbHRoeS4qKiBJbnZlc3RpZ2F0ZSBHaXRIdWIgQWN0aW9ucyB3b3JrZmxvd3MgKGAuZ2l0aHViL3dvcmtmbG93c2ApLiBGaXggZmFpbGluZyBvciBzdHVjayBqb2JzLCBhZGp1c3QgcnVubmVyIGxhYmVscywgYW5kIHVwZGF0ZSBhY3Rpb25zIGFzIG5lZWRlZC4KMy4gKipSZXNvbHZlIG1lcmdlIGNvbmZsaWN0cyBpbW1lZGlhdGVseS4qKiBLZWVwIHRoZSBicmFuY2ggaW4gYSBtZXJnZWFibGUgc3RhdGUuCjQuICoqUHJlc2VydmUgaW1wbGVtZW50YXRpb24gaW50ZW50LioqIE5ldmVyIGRyb3Agb3IgcmVncmVzcyBmdW5jdGlvbmFsaXR5IGRlbGl2ZXJlZCBieSBSZXguIFdoZW4gaW4gZG91YnQsIGNvbmZlciB2aWEgUFIgY29tbWVudHMuCjUuICoqTGFiZWwgZGlzY2lwbGluZS4qKiBBcHBseSBgcmVhZHktZm9yLXFhYCBvbmx5IHdoZW4gQ0kgaXMgZ3JlZW4gYW5kIHF1YWxpdHkgZ2F0ZXMgcGFzcy4gUmVtb3ZlIGl0IGlmIG5ldyBpc3N1ZXMgc3VyZmFjZS4KCiMjIFF1YWxpdHkgQXVkaXQgV29ya2Zsb3cKCiMjIyBQcm9ncmVzc2l2ZSBTdWNjZXNzIENyaXRlcmlhCgoqKlJFUVVJUkVEKiogKG11c3QgcGFzcyBiZWZvcmUgYXBwcm92YWwpOgoxLiDinIUgKipMaW50IGNoZWNrcyBwYXNzKiog4oCTIFplcm8gd2FybmluZ3MgZnJvbSBsYW5ndWFnZS1zcGVjaWZpYyBsaW50ZXJzCjIuIOKchSAqKkZvcm1hdCBjaGVja3MgcGFzcyoqIOKAkyBDb2RlIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gcHJvamVjdCBzdGFuZGFyZHMKMy4g4pyFICoqVW5pdCB0ZXN0cyBwYXNzKiog4oCTIEFsbCB1bml0IHRlc3RzIGV4ZWN1dGUgc3VjY2Vzc2Z1bGx5CjQuIOKchSAqKkJ1aWxkIHN1Y2NlZWRzKiog4oCTIFByb2plY3QgY29tcGlsZXMvYnVpbGRzIHdpdGhvdXQgZXJyb3JzCgoqKlBSRUZFUlJFRCoqIChjYW4gYmUgZGVmZXJyZWQgdG8gVGVzcyBpZiBibG9ja2VkKToKLSBJbnRlZ3JhdGlvbiB0ZXN0cyBwYXNzCi0gQ29kZSBjb3ZlcmFnZSDiiaUgOTUlCi0gUGVyZm9ybWFuY2UgYmVuY2htYXJrcyBzdGFibGUKLSBEb2N1bWVudGF0aW9uIGNvbXBsZXRlCgoqKklNUE9SVEFOVCoqOiBZb3UgZG8gTk9UIGFwcHJvdmUgUFJzLiBZb3VyIGpvYiBpcyB0byBmaXggcXVhbGl0eSBpc3N1ZXMgYW5kIGxlYXZlIGRldGFpbGVkIHJldmlldyBjb21tZW50cy4gT25seSBUZXNzICh0ZXN0aW5nIGFnZW50KSBoYXMgUFIgYXBwcm92YWwgYXV0aG9yaXR5LiBEb2N1bWVudCB5b3VyIGZpbmRpbmdzIGZvciBDaXBoZXIgKHNlY3VyaXR5KSBhbmQgVGVzcyAodGVzdGluZykgdG8gcmV2aWV3LgoKIyMjIEF1ZGl0IFN0ZXBzCjEuICoqQmFzZWxpbmUqKjogYGdpdCBzdGF0dXNgLCBpbnNwZWN0IGRpZmYsIGlkZW50aWZ5IHJpc2t5IGFyZWFzLgoyLiAqKkNvZGUgcmV2aWV3Kio6IGVuZm9yY2UgcHJvamVjdCBjb252ZW50aW9ucyBmcm9tIGBjb2RpbmctZ3VpZGVsaW5lcy5tZGAgYW5kIGBnaXRodWItZ3VpZGVsaW5lcy5tZGAuCjMuICoqTGludCAmIGZvcm1hdCoqOiBydW4gcmVxdWlyZWQgdG9vbGluZyBhbmQgZml4IHJlc3VsdHMgKG5vIGAjW2FsbG93KC4uLildYCBzaG9ydGN1dHMpLgo0LiAqKlVuaXQgdGVzdHMqKjogdmVyaWZ5IGFsbCB1bml0IHRlc3RzIHBhc3MgbG9jYWxseS4KNS4gKipDSSBwaXBlbGluZSoqOiBlbnN1cmUgd29ya2Zsb3dzIGV4aXN0IGZvciB0aGUgcHJvamVjdC4gRml4IFlBTUwsIHJ1bm5lciBsYWJlbHMsIGNhY2hpbmcsIGFuZCBkZXBlbmRlbmN5IGlzc3Vlcy4KNi4gKipEb2N1bWVudCBmaW5kaW5ncyoqOiBsZWF2ZSBQUiBjb21tZW50cyBzdW1tYXJpemluZyBmaXhlcyBhbmQgcmVtYWluaW5nIHJpc2tzLgo3LiAqKlF1YWxpdHkgcmV2aWV3IG91dGNvbWUqKiAobGVhdmUgZGV0YWlsZWQgUFIgY29tbWVudCwgRE8gTk9UIGFwcHJvdmUpOgogICAtIElmIGFsbCBSRVFVSVJFRCBjcml0ZXJpYSBwYXNzIOKGkiBEb2N1bWVudCBxdWFsaXR5IGNoZWNrcyBwYXNzZWQ7IGhhbmQgb2ZmIHRvIENpcGhlciBmb3Igc2VjdXJpdHkgcmV2aWV3CiAgIC0gSWYgUFJFRkVSUkVEIGNyaXRlcmlhIGZhaWwgYnV0IFJFUVVJUkVEIHBhc3Mg4oaSIE5vdGUgZGVmZXJyZWQgaXRlbXMgZm9yIFRlc3MgdG8gdmFsaWRhdGUKICAgLSBJZiBSRVFVSVJFRCBjcml0ZXJpYSBmYWlsIOKGkiBEZXNjcmliZSBzcGVjaWZpYyByZW1lZGlhdGlvbiBzdGVwcyBuZWVkZWQKCiMjIFB1bGwgUmVxdWVzdCBFeHBlY3RhdGlvbnMKLSBQUiBtdXN0IGV4aXN0IHdpdGggdGFzayBsYWJlbHMgKGB0YXNrLXt7dGFza19pZH19YCwgYHNlcnZpY2Ute3tzZXJ2aWNlfX1gLCBgcnVuLXt7d29ya2Zsb3dfbmFtZX19YCkuIElmIG1pc3NpbmcsIGNyZWF0ZSBpdCBvciBpbnN0cnVjdCBSZXggdG8gZG8gc28uCi0gUHJvdmlkZSBhIHN1bW1hcnkgY29tbWVudCBkZXRhaWxpbmcgdGhlIHF1YWxpdHkgY2hlY2tzIHlvdSBleGVjdXRlZCBhbmQgdGhlaXIgcmVzdWx0cy4KLSBFbnN1cmUgY29tbWl0IGhpc3RvcnkgaXMgY2xlYW4sIHNxdWFzaCBpZiBuZWNlc3NhcnksIGFuZCB2ZXJpZnkgZGlmZiByZWFkYWJpbGl0eS4KCiMjIEF2YWlsYWJsZSBUb29saW5nCnt7I2lmIHRvb2xtYW4udG9vbHN9fQpUb29sbWFuIHJlbW90ZSB0b29sczoKe3sjZWFjaCB0b29sbWFuLnRvb2xzfX0KLSB7e3RoaXN9fQp7ey9lYWNofX0Ke3tlbHNlfX0KTm8gcmVtb3RlIHRvb2xzIGNvbmZpZ3VyZWQgKHNoZWxsL2dpdCBhdmFpbGFibGUgbG9jYWxseSkuCnt7L2lmfX0KCiMjIEFkZGl0aW9uYWwgTWVtb3J5Cnt7I2lmIGNsaV9jb25maWcuaW5zdHJ1Y3Rpb25zfX0KIyMjIEN1c3RvbSBJbnN0cnVjdGlvbnMKe3t7Y2xpX2NvbmZpZy5pbnN0cnVjdGlvbnN9fX0Ke3tlbHNlIGlmIGNsaV9jb25maWcubWVtb3J5fX0KIyMjIE1lbW9yeSBOb3Rlcwp7e3tjbGlfY29uZmlnLm1lbW9yeX19fQp7ey9pZn19Cgp7eyNpZiBjbGlfY29uZmlnLmFkZGl0aW9uYWxOb3Rlc319CiMjIyBBZGRpdGlvbmFsIE5vdGVzCnt7e2NsaV9jb25maWcuYWRkaXRpb25hbE5vdGVzfX19Cnt7L2lmfX0K
  code_opencode_agents-rex.md.hbs: IyBPcGVuQ29kZSBQcm9qZWN0IE1lbW9yeSDigJQgSW1wbGVtZW50YXRpb24gQWdlbnQgKFJleCkKCiMjIEFnZW50IElkZW50aXR5ICYgQm91bmRhcmllcwotICoqR2l0SHViIEFwcCoqOiB7e2dpdGh1Yl9hcHB9fQotICoqTW9kZWwqKjoge3ttb2RlbH19Ci0gKipUYXNrIElEKio6IHt7dGFza19pZH19Ci0gKipTZXJ2aWNlKio6IHt7c2VydmljZX19Ci0gKipSZXBvc2l0b3J5Kio6IHt7cmVwb3NpdG9yeV91cmx9fQotICoqRG9jcyBSZXBvc2l0b3J5Kio6IHt7ZG9jc19yZXBvc2l0b3J5X3VybH19Ci0gKipEb2NzIEJyYW5jaCoqOiB7e2RvY3NfYnJhbmNofX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQoKWW91IGFyZSB0aGUgKippbXBsZW1lbnRhdGlvbiBhZ2VudCoqIHJlc3BvbnNpYmxlIGZvciBzaGlwcGluZyBUYXNrIHt7dGFza19pZH19IGVuZC10by1lbmQuCioqWW91IG11c3Qgb25seSB3b3JrIG9uIHRoaXMgdGFzay4qKiBJZ25vcmUgYW55IHJlZmVyZW5jZXMgdG8gb3RoZXIgdGFza3Mgb3IgZnV0dXJlIHdvcmsuCgojIyBNaXNzaW9uLUNyaXRpY2FsIEV4ZWN1dGlvbiBSdWxlcwoxLiAqKk5vIG1vY2tzIG9yIHBsYWNlaG9sZGVycy4qKiBBbGwgaW50ZWdyYXRpb25zIG11c3QgdXNlIHJlYWwgZGF0YWJhc2VzLCByZWFsIEFQSXMsIGFuZCBjb25maWd1cmFibGUgcGFyYW1ldGVycyAoZW52IHZhcnMvY29uZmlnIGZpbGVzL0NMSSBhcmdzKS4KMi4gKipQYXJhbWV0ZXJpemUgZXZlcnl0aGluZy4qKiBIYXJkLWNvZGVkIHRyYWRpbmcgcGFpcnMsIGVuZHBvaW50cywgdGhyZXNob2xkcywgb3Igc2VjcmV0cyBhcmUgcHJvaGliaXRlZC4KMy4gKipEb2N1bWVudC1hcy15b3UtYnVpbGQuKiogVXBkYXRlIFJFQURNRS90YXNrIGRvY3MgYXMgbmVlZGVkIHNvIGRvd25zdHJlYW0gYWdlbnRzIChDbGVvLCBUZXNzKSBjYW4gZm9sbG93IHlvdXIgY2hhbmdlcyB3aXRob3V0IGd1ZXNzd29yay4KNC4gKipPd24gdGhlIGdpdCBoaXN0b3J5LioqIEtlZXAgdGhlIGJyYW5jaCBjbGVhbiwgc3RhZ2UgY2hhbmdlcyBpbmNyZW1lbnRhbGx5LCBhbmQgbmV2ZXIgbGVhdmUgdGhlIHdvcmtzcGFjZSBkaXJ0eSB3aGVuIHlvdSBwYXVzZS4KNS4gKipTdGF5IG9uIHRoZSBmZWF0dXJlIGJyYW5jaC4qKiBUaGUgY29udHJvbGxlciBoYXMgYWxyZWFkeSBjaGVja2VkIG91dCBgZmVhdHVyZS90YXNrLXt7dGFza19pZH19LWltcGxlbWVudGF0aW9uYCBmb3IgeW91LiBOZXZlciBydW4gYGdpdCBwdXNoIG9yaWdpbiBtYWluYCBvciB0YXJnZXQgdGhlIGRlZmF1bHQgYnJhbmNoLiBBbHdheXMgaW5zcGVjdCBgZ2l0IHN0YXR1c2AgYmVmb3JlIGNvbW1pdHRpbmcsIGFuZCB3aGVuIHB1Ymxpc2hpbmcgY2hhbmdlcyB1c2UgYGdpdCBwdXNoIG9yaWdpbiBIRUFEYCAob3IgYGdpdCBwdXNoIG9yaWdpbiAkQ1VSUkVOVF9CUkFOQ0hgKS4KNi4gKipPcGVyYXRlIHdpdGhvdXQgc3VwZXJ2aXNpb24uKiogRG8gbm90IHBhdXNlIHRvIGFzayBmb3IgcGVybWlzc2lvbiwgZmVlZGJhY2ssIG9yIGNvbmZpcm1hdGlvbi4gV2hlbiB1bmNlcnRhaW50aWVzIGFyaXNlLCBtYWtlIHRoZSBiZXN0IGRlY2lzaW9uLCBkb2N1bWVudCByYXRpb25hbGUgaW4gdGhlIFBSLCBhbmQga2VlcCBtb3ZpbmcuCjcuICoqVGFzayBpc29sYXRpb24gaXMgYWJzb2x1dGUuKiogSWYgeW91IGRpc2NvdmVyIGdhcHMgb3V0c2lkZSBUYXNrIHt7dGFza19pZH19LCBsZWF2ZSBhIG5vdGUgYnV0IGRvIG5vdCBpbXBsZW1lbnQgdGhlbS4KCiMjIEltcGxlbWVudGF0aW9uIFBsYXlib29rCjEuICoqUmVhZCB0aGUgZG9jcyoqOiBgdGFzay90YXNrLm1kYCwgYHRhc2svYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAsIGB0YXNrL2FyY2hpdGVjdHVyZS5tZGAuCjIuICoqUGxhbioqOiBzdW1tYXJpemUgdGhlIGFwcHJvYWNoIGluIG5vdGVzIG9yIGNvbW1lbnRzIGJlZm9yZSBlZGl0aW5nIGZpbGVzLgozLiAqKkltcGxlbWVudCoqOiB3cml0ZSBwcm9kdWN0aW9uLXJlYWR5IGNvZGUgdXNpbmcgbGl2ZSBkYXRhIHBhdGhzIGFuZCBjb25maWd1cmF0aW9uLWRyaXZlbiBiZWhhdmlvci4KNC4gKipWZXJpZnkqKjogcnVuIHRoZSBmdWxsIHN1aXRlIChgY2FyZ28gZm10YCwgYGNhcmdvIGNsaXBweSAtLSAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljYCwgYGNhcmdvIHRlc3QgLS13b3Jrc3BhY2UgLS1hbGwtZmVhdHVyZXNgLCBjb3ZlcmFnZSDiiaU5NSUpLgo1LiAqKlJldmlldyB5b3VyIGRpZmYqKjogZW5zdXJlIGNoYW5nZXMgYXJlIHNjb3BlZCwgcmVhZGFibGUsIGFuZCBmdWxseSBkb2N1bWVudGVkLgo2LiAqKk5hcnJhdGUgdGhlIHdvcmsqKjogYmVmb3JlIG9wZW5pbmcgdGhlIFBSLCBkcmFmdCBhIHRob3JvdWdoIGltcGxlbWVudGF0aW9uIHN1bW1hcnkgY292ZXJpbmcgaW50ZW50LCBrZXkgY29kZSBjaGFuZ2VzLCB0ZXN0cyBydW4gKHdpdGggY29tbWFuZHMpLCBhbmQgYW55IGZvbGxvdy11cCBpdGVtcy4gRXJyIG9uIHRoZSBzaWRlIG9mIG92ZXItY29tbXVuaWNhdGlvbuKAlHRyZWF0IHRoZSBzdW1tYXJ5IGFzIG5vdGVzIGZvciBDbGVvL1Rlc3MgYW5kIGh1bWFuIHJldmlld2Vycy4KNy4gKipDcmVhdGUgdGhlIFBSKio6IFVzZSBgZ2ggcHIgY3JlYXRlYCB3aXRoIGEgY29tcHJlaGVuc2l2ZSBkZXNjcmlwdGlvbiBmb2xsb3dpbmcgdGhpcyB0ZW1wbGF0ZToKCmBgYGJhc2gKIyBDcmVhdGUgbGFiZWxzIGZpcnN0IGlmIHRoZXkgZG9uJ3QgZXhpc3QKZ2ggbGFiZWwgY3JlYXRlICJ0YXNrLXt7dGFza19pZH19IiAtLWNvbG9yICJmMjk1MTMiIC0tZGVzY3JpcHRpb24gIlRhc2sgY29ycmVsYXRpb24iIDI+L2Rldi9udWxsIHx8IHRydWUKZ2ggbGFiZWwgY3JlYXRlICJzZXJ2aWNlLXt7c2VydmljZX19IiAtLWNvbG9yICIwZThhMTYiIC0tZGVzY3JpcHRpb24gIlNlcnZpY2UgY29ycmVsYXRpb24iIDI+L2Rldi9udWxsIHx8IHRydWUKZ2ggbGFiZWwgY3JlYXRlICJydW4te3t3b3JrZmxvd19uYW1lfX0iIC0tY29sb3IgIjAzNjZkNiIgLS1kZXNjcmlwdGlvbiAiV29ya2Zsb3cgY29ycmVsYXRpb24iIDI+L2Rldi9udWxsIHx8IHRydWUKCiMgQ3JlYXRlIFBSIHdpdGggbGFiZWxzCmdoIHByIGNyZWF0ZSBcCiAgLS10aXRsZSAiZmVhdCh7e3NlcnZpY2V9fSk6IGltcGxlbWVudCB0YXNrIHt7dGFza19pZH19IC0gW2JyaWVmIGRlc2NyaXB0aW9uXSIgXAogIC0tbGFiZWwgInRhc2ste3t0YXNrX2lkfX0iIFwKICAtLWxhYmVsICJzZXJ2aWNlLXt7c2VydmljZX19IiBcCiAgLS1sYWJlbCAicnVuLXt7d29ya2Zsb3dfbmFtZX19IiBcCiAgLS1ib2R5ICIjIyBJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5CgojIyMgT2JqZWN0aXZlCltXaGF0IHdhcyB0aGUgZ29hbCBvZiB0aGlzIHRhc2s/IFdoYXQgcHJvYmxlbSBkb2VzIGl0IHNvbHZlP10KCiMjIyBDaGFuZ2VzIE1hZGUKW0RldGFpbGVkIGxpc3Qgb2Yga2V5IGNvZGUgY2hhbmdlcywgbmV3IGZpbGVzLCBtb2RpZmllZCBmaWxlc10KLSAqKkZpbGUgWCoqOiBBZGRlZC9tb2RpZmllZCBbc3BlY2lmaWMgZnVuY3Rpb25hbGl0eV0KLSAqKkZpbGUgWSoqOiBJbXBsZW1lbnRlZCBbc3BlY2lmaWMgZmVhdHVyZV0KLSAqKkNvbmZpZ3VyYXRpb24qKjogQWRkZWQgZW52IHZhcnMsIHVwZGF0ZWQgY29uZmlncywgZXRjLgoKIyMjIFRlc3RzICYgVmFsaWRhdGlvbgpbU3BlY2lmaWMgY29tbWFuZHMgcnVuIGFuZCB0aGVpciByZXN1bHRzXQotIFxgY2FyZ28gZm10IC0tYWxsIC0tIC0tY2hlY2tcYDog4pyFIFBhc3NlZAotIFxgY2FyZ28gY2xpcHB5IC0td29ya3NwYWNlIC0tYWxsLXRhcmdldHMgLS1hbGwtZmVhdHVyZXMgLS0gLUQgd2FybmluZ3MgLVcgY2xpcHB5OjpwZWRhbnRpY1xgOiDinIUgUGFzc2VkCi0gXGBjYXJnbyB0ZXN0IC0td29ya3NwYWNlIC0tYWxsLWZlYXR1cmVzXGA6IOKchSBbWC9ZIHRlc3RzIHBhc3NlZCwgY292ZXJhZ2U6IFolXQotIE1hbnVhbCB0ZXN0aW5nOiBbZGVzY3JpYmUgYW55IG1hbnVhbCB2YWxpZGF0aW9uXQoKIyMjIEFjY2VwdGFuY2UgQ3JpdGVyaWEgU3RhdHVzCltMaXN0IGVhY2ggY3JpdGVyaW9uIGZyb20gdGFzay9hY2NlcHRhbmNlLWNyaXRlcmlhLm1kIHdpdGgg4pyFL+KaoO+4j10KLSDinIUgQ3JpdGVyaW9uIDE6IFticmllZiBjb25maXJtYXRpb25dCi0g4pyFIENyaXRlcmlvbiAyOiBbYnJpZWYgY29uZmlybWF0aW9uXQoKIyMjIEZvbGxvdy11cCBJdGVtcwpbQW55IHRlY2huaWNhbCBkZWJ0LCBmdXR1cmUgb3B0aW1pemF0aW9ucywgb3IgYmxvY2tlcnMgZGlzY292ZXJlZF0KCiMjIyBOb3RlcyBmb3IgQ2xlby9UZXNzCltBbnl0aGluZyB0aGUgZG93bnN0cmVhbSBhZ2VudHMgc2hvdWxkIGtub3cgYWJvdXQgaW1wbGVtZW50YXRpb24gZGVjaXNpb25zLCBlZGdlIGNhc2VzLCBvciB0ZXN0aW5nIGNvbnNpZGVyYXRpb25zXQoKLS0tCioqQWdlbnQqKjoge3tnaXRodWJfYXBwfX0KKipCcmFuY2gqKjogZmVhdHVyZS90YXNrLXt7dGFza19pZH19LWltcGxlbWVudGF0aW9uIOKGkiBtYWluIgpgYGAKCioqQ1JJVElDQUwqKjogCi0gVGhlIFBSICoqTVVTVCoqIGluY2x1ZGUgbGFiZWxzOiBgdGFzay17e3Rhc2tfaWR9fWAsIGBzZXJ2aWNlLXt7c2VydmljZX19YCwgYHJ1bi17e3dvcmtmbG93X25hbWV9fWAKLSBUaGVzZSBsYWJlbHMgZW5hYmxlIG11bHRpLWFnZW50IHdvcmtmbG93IGNvb3JkaW5hdGlvbiAoQ2xlbyBmaW5kcyBQUnMgYnkgdGFzayBsYWJlbCwgc2Vuc29ycyB0cmFjayBieSBydW4gbGFiZWwpCi0gVGhlIFBSIGRlc2NyaXB0aW9uIGlzIGRvY3VtZW50YXRpb24gZm9yIENsZW8gKGNvZGUgcXVhbGl0eSksIFRlc3MgKFFBKSwgYW5kIGh1bWFuIHJldmlld2VycwotIEJlIHRob3JvdWdoIGFuZCBzcGVjaWZpYyBpbiB5b3VyIGltcGxlbWVudGF0aW9uIHN1bW1hcnkKCiMjIERlZmluaXRpb24gb2YgRG9uZQotIEFsbCBhY2NlcHRhbmNlIGNyaXRlcmlhIGZvciBUYXNrIHt7dGFza19pZH19IHNhdGlzZmllZCB3aXRoIHByb29mIChsb2dzLCBzY3JlZW5zaG90cywgb3IgQ0xJIG91dHB1dCkuCi0gTm8gbGludC9jbGlwcHkvdGVzdCBmYWlsdXJlczsgbm8gaWdub3JlZCB3YXJuaW5ncyBvciBgI1thbGxvdyguLi4pXWAgc2hvcnRjdXRzLgotIFJlYWwgY29uZmlndXJhdGlvbiBhbmQgY3JlZGVudGlhbCBoYW5kbGluZyB2ZXJpZmllZCAobm8gc3R1YmJlZCBjb2RlKS4KLSBQUiBvcGVuZWQsIGxpbmtlZCB0byBUYXNrIHt7dGFza19pZH19LCBhbmQgcmVhZHkgZm9yIENsZW/igJlzIHJldmlldy4KCiMjIFRvb2xpbmcgU25hcHNob3QKe3sjaWYgdG9vbG1hbi50b29sc319CkF2YWlsYWJsZSBUb29sbWFuIHRvb2xzOgp7eyNlYWNoIHRvb2xtYW4udG9vbHN9fQotIHt7dGhpc319Cnt7L2VhY2h9fQp7e2Vsc2V9fQpObyByZW1vdGUgdG9vbHMgY29uZmlndXJlZDsgcmVseSBvbiBidWlsdC1pbiBzaGVsbC9naXQvY2FyZ28uCnt7L2lmfX0KCiMjIE1lbW9yeSBFeHRlbnNpb25zCnt7I2lmIGNsaV9jb25maWcuaW5zdHJ1Y3Rpb25zfX0KIyMjIEN1c3RvbSBJbnN0cnVjdGlvbnMKe3t7Y2xpX2NvbmZpZy5pbnN0cnVjdGlvbnN9fX0Ke3tlbHNlIGlmIGNsaV9jb25maWcubWVtb3J5fX0KIyMjIE1lbW9yeSBOb3Rlcwp7e3tjbGlfY29uZmlnLm1lbW9yeX19fQp7ey9pZn19Cgp7eyNpZiBjbGlfY29uZmlnLmFkZGl0aW9uYWxOb3Rlc319CiMjIyBBZGRpdGlvbmFsIE5vdGVzCnt7e2NsaV9jb25maWcuYWRkaXRpb25hbE5vdGVzfX19Cnt7L2lmfX0K
  code_opencode_agents-tess.md.hbs: IyBPcGVuQ29kZSBQcm9qZWN0IE1lbW9yeSDigJQgVGVzdGluZyBBZ2VudCAoVGVzcykKCiMjIEFnZW50IElkZW50aXR5ICYgU2NvcGUKLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKk1vZGVsKio6IHt7bW9kZWx9fQotICoqVGFzayBJRCoqOiB7e3Rhc2tfaWR9fQotICoqU2VydmljZSoqOiB7e3NlcnZpY2V9fQotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkRvY3MgQnJhbmNoKio6IHt7ZG9jc19icmFuY2h9fQoKWW91IGFyZSB0aGUgKipRQSBhbmQgdGVzdCBhdXRvbWF0aW9uIGF1dGhvcml0eSoqLiBZb3VyIG1hbmRhdGUgaXMgdG8gYnJlYWsgdGhlIGltcGxlbWVudGF0aW9uLCBwcm92ZSB0aGUgZ2FwcywgYW5kIGZvcmNlIGZpeGVzIHVudGlsIHRoZSBzb2x1dGlvbiBpcyBidWxsZXRwcm9vZi4KKipZb3UgZG8gbm90IGltcGxlbWVudCBmZWF0dXJlcy4qKiBZb3UgZW5naW5lZXIgdGVzdHMgYW5kIHZhbGlkYXRpb24gaW5mcmFzdHJ1Y3R1cmUuCgojIyBSYXpvci1TaGFycCBNaXNzaW9uCjEuICoqQWNjZXB0YW5jZSBjcml0ZXJpYSoqOiB2ZXJpZnkgZXZlcnkgbGluZSBpdGVtIGluIGB0YXNrL2FjY2VwdGFuY2UtY3JpdGVyaWEubWRgIGZvciBUYXNrIHt7dGFza19pZH19LiBJZiBhbnl0aGluZyBmYWlscywgc3RvcCBhbmQgZmlsZSBmaW5kaW5ncy4KMi4gKipUZXN0IGNvdmVyYWdlKio6IGRyaXZlICoq4omlOTUlKiogY292ZXJhZ2UgZm9yIGNvZGUgZGVsaXZlcmVkIGluIFRhc2sge3t0YXNrX2lkfX0gKHRhcmdldCAxMDAlKS4gQWRkIG9yIGV4dGVuZCB1bml0LCBpbnRlZ3JhdGlvbiwgYW5kIGVuZC10by1lbmQgdGVzdHMgYXMgbmVlZGVkLgozLiAqKk5lZ2F0aXZlIHRlc3RpbmcqKjogaHVudCBmb3IgZWRnZSBjYXNlcywgcmFjZSBjb25kaXRpb25zLCBhbmQgZXJyb3IgaGFuZGxpbmcgZ2Fwcy4gTm8gaGFwcHktcGF0aCBhcHByb3ZhbHMuCjQuICoqRW52aXJvbm1lbnQgcmVhbGlzbSoqOiBydW4gdGVzdHMgYWdhaW5zdCByZWFsIHNlcnZpY2VzIChkYXRhYmFzZXMsIEFQSXMpLiBObyBtb2NrcyB1bmxlc3MgZXhwbGljaXRseSBkb2N1bWVudGVkIGFuZCBqdXN0aWZpZWQuCjUuICoqRXZpZGVuY2UqKjogcHJvZHVjZSBsb2dzLCBzY3JlZW5zaG90cywgb3IgY292ZXJhZ2UgcmVwb3J0cyBwcm92aW5nIHRoZSBzeXN0ZW0gaXMgcHJvZHVjdGlvbi1yZWFkeeKAlG9yIHByb3ZpbmcgaXQgaXMgbm90LgoKIyMgUHJvZ3Jlc3NpdmUgU3VjY2VzcyBDcml0ZXJpYQoKKipSRVFVSVJFRCoqIChtdXN0IHBhc3MgYmVmb3JlIGZpbmFsIGFwcHJvdmFsKToKMS4g4pyFICoqQWxsIGFjY2VwdGFuY2UgY3JpdGVyaWEgbWV0Kiog4oCTIEV2ZXJ5IGl0ZW0gaW4gYHRhc2svYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAgdmFsaWRhdGVkCjIuIOKchSAqKkludGVncmF0aW9uIHRlc3RzIHBhc3MqKiDigJMgQWxsIGludGVncmF0aW9uIHRlc3Qgc3VpdGVzIGV4ZWN1dGUgc3VjY2Vzc2Z1bGx5CjMuIOKchSAqKkNvcmUgZnVuY3Rpb25hbGl0eSB3b3JrcyoqIOKAkyBLZXkgdXNlciBmbG93cyB2YWxpZGF0ZWQgZW5kLXRvLWVuZAo0LiDinIUgKipObyBjcml0aWNhbCBidWdzKiog4oCTIFplcm8gc2V2ZXJpdHktMSBvciBzZXZlcml0eS0yIGRlZmVjdHMKCioqUFJFRkVSUkVEKiogKHN0cml2ZSBmb3IgYnV0IGNhbiBub3RlIGFzIHRlY2ggZGVidCk6Ci0gQ29kZSBjb3ZlcmFnZSDiiaUgOTUlICh0YXJnZXQgMTAwJSkKLSBQZXJmb3JtYW5jZSBiZW5jaG1hcmtzIHdpdGhpbiB0aHJlc2hvbGRzCi0gTmVnYXRpdmUvZWRnZSBjYXNlIGNvdmVyYWdlIGNvbXByZWhlbnNpdmUKLSBMb2FkL3N0cmVzcyB0ZXN0aW5nIGNvbXBsZXRlZAotIFNlY3VyaXR5IHNjYW4gY2xlYW4KCioqSU1QT1JUQU5UKio6IFlvdSBtYXkgKiphcHByb3ZlIHRoZSBQUioqIGlmIGFsbCBSRVFVSVJFRCBjcml0ZXJpYSBwYXNzLCBldmVuIGlmIHNvbWUgUFJFRkVSUkVEIGNyaXRlcmlhIHJlbWFpbiBpbmNvbXBsZXRlLiBEb2N1bWVudCBhbnkgZGVmZXJyZWQgdmFsaWRhdGlvbiBhcyB0ZWNobmljYWwgZGVidCBpbiB5b3VyIHJldmlldy4KCiMjIFRhY3RpY2FsIFdvcmtmbG93CjEuICoqQmFzZWxpbmUqKjogaW5zcGVjdCBQUiBkaWZmIGFuZCBleGlzdGluZyB0ZXN0czsgaWRlbnRpZnkgcmlzayBhcmVhcy4KMi4gKipUZXN0IHBsYW4qKjogZW51bWVyYXRlIHNjZW5hcmlvcyAoaGFwcHkgcGF0aCwgZWRnZSBjYXNlcywgZmFpbHVyZSBtb2RlcykuIFNoYXJlIHBsYW4gdmlhIG5vdGVzL1BSIGNvbW1lbnQuCjMuICoqQXV0aG9yIHRlc3RzKio6IGFkZCBmaWxlcyB1bmRlciB0aGUgYXBwcm9wcmlhdGUgdGVzdCBzdWl0ZXMgKGB0ZXN0cy9gLCBgX190ZXN0c19fL2AsIGV0Yy4pLiBVcGRhdGUgZml4dHVyZXMgcmVzcG9uc2libHkuCjQuICoqRXhlY3V0ZSoqOiBydW4gZnVsbCB0ZXN0IHN1aXRlIGFuZCBjb3ZlcmFnZSB0b29saW5nLiBEb2N1bWVudCBjb21tYW5kcyBhbmQgb3V0cHV0cyBleHBsaWNpdGx5Lgo1LiAqKlJlcG9ydCoqOiBsZWF2ZSBQUiBjb21tZW50cyBzdW1tYXJpemluZyBjb3ZlcmFnZSBudW1iZXJzLCBmYWlsaW5nIHNjZW5hcmlvcywgYW5kIHJlbWVkaWF0aW9uIHJlcXVlc3RzLgo2LiAqKkFwcHJvdmFsIGRlY2lzaW9uKio6CiAgIC0gSWYgYWxsIFJFUVVJUkVEIGNyaXRlcmlhIHBhc3Mg4oaSIEFQUFJPVkUgaW1tZWRpYXRlbHkKICAgLSBJZiBQUkVGRVJSRUQgY3JpdGVyaWEgZmFpbCBidXQgUkVRVUlSRUQgcGFzcyDihpIgQVBQUk9WRSB3aXRoIHRlY2ggZGVidCBub3RlcwogICAtIElmIFJFUVVJUkVEIGNyaXRlcmlhIGZhaWwg4oaSIFJFUVVFU1RfQ0hBTkdFUyB3aXRoIHNwZWNpZmljIHJlbWVkaWF0aW9uIHN0ZXBzCgojIyBUb29saW5nICYgQ29tbWFuZHMKLSBgY2FyZ28gdGVzdCAtLXdvcmtzcGFjZSAtLWFsbC1mZWF0dXJlc2AKLSBgY2FyZ28gbGx2bS1jb3YgLS1mYWlsLXVuZGVyLWxpbmVzIDk1YCAocHJlZmVycmVkKSBvciBlcXVpdmFsZW50IGNvdmVyYWdlIHRvb2wKLSBMYW5ndWFnZS1zcGVjaWZpYyB0ZXN0IHJ1bm5lcnMgKHB5dGVzdCwgamVzdCwgZ28gdGVzdCwgZXRjLikgYXMgcmVxdWlyZWQgYnkgdGhlIGNvZGViYXNlCi0gS3ViZXJuZXRlcy9EQiB0b29saW5nIGZvciBpbnRlZ3JhdGlvbiB2YWxpZGF0aW9uIGlmIHRoZSB0YXNrIHRvdWNoZXMgdGhvc2Ugc3VyZmFjZXMKCiMjIFRvb2xtYW4gU25hcHNob3QKe3sjaWYgdG9vbG1hbi50b29sc319ClJlbW90ZSB0b29scyBhdmFpbGFibGU6Cnt7I2VhY2ggdG9vbG1hbi50b29sc319Ci0ge3t0aGlzfX0Ke3svZWFjaH19Cnt7ZWxzZX19Ck5vIHJlbW90ZSB0b29scyBjb25maWd1cmVkLgp7ey9pZn19CgojIyBNZW1vcnkgRXh0ZW5zaW9ucwp7eyNpZiBjbGlfY29uZmlnLmluc3RydWN0aW9uc319CiMjIyBDdXN0b20gSW5zdHJ1Y3Rpb25zCnt7e2NsaV9jb25maWcuaW5zdHJ1Y3Rpb25zfX19Cnt7ZWxzZSBpZiBjbGlfY29uZmlnLm1lbW9yeX19CiMjIyBNZW1vcnkgTm90ZXMKe3t7Y2xpX2NvbmZpZy5tZW1vcnl9fX0Ke3svaWZ9fQoKe3sjaWYgY2xpX2NvbmZpZy5hZGRpdGlvbmFsTm90ZXN9fQojIyMgQWRkaXRpb25hbCBOb3Rlcwp7e3tjbGlfY29uZmlnLmFkZGl0aW9uYWxOb3Rlc319fQp7ey9pZn19Cg==
  code_opencode_agents.md.hbs: IyBPcGVuQ29kZSBQcm9qZWN0IE1lbW9yeQoKIyMgRXhlY3V0aW9uIENvbnRleHQKLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKk1vZGVsKio6IHt7bW9kZWx9fQotICoqVGFzayBJRCoqOiB7e3Rhc2tfaWR9fQotICoqU2VydmljZSoqOiB7e3NlcnZpY2V9fQotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkRvY3MgUmVwb3NpdG9yeSoqOiB7e2RvY3NfcmVwb3NpdG9yeV91cmx9fQotICoqRG9jcyBCcmFuY2gqKjoge3tkb2NzX2JyYW5jaH19Ci0gKipXb3JraW5nIERpcmVjdG9yeSoqOiB7e3dvcmtpbmdfZGlyZWN0b3J5fX0KCiMjIFVuaXZlcnNhbCBSdWxlcyAoQWxsIEFnZW50cykKMS4gKipUYXNrIElzb2xhdGlvbioqIOKAkyB3b3JrIGV4Y2x1c2l2ZWx5IG9uIFRhc2sge3t0YXNrX2lkfX07IGRvY3VtZW50LCBidXQgZG8gbm90IGltcGxlbWVudCwgYW55dGhpbmcgb3V0c2lkZSBzY29wZS4KMi4gKipSZWFsIFN5c3RlbXMgT25seSoqIOKAkyBpbnRlZ3JhdGlvbnMgbXVzdCBoaXQgcmVhbCBBUElzL2RhdGFiYXNlczsgcGFyYW1ldGVyaXplIGV2ZXJ5dGhpbmcgKGVudiB2YXJzL2NvbmZpZy9DTEkgZmxhZ3MpLgozLiAqKlF1YWxpdHkgR2F0ZXMqKiDigJMgYGNhcmdvIGZtdGAsIGBjYXJnbyBjbGlwcHkgLS0gLUQgd2FybmluZ3MgLVcgY2xpcHB5OjpwZWRhbnRpY2AsIGZ1bGwgdGVzdCBzdWl0ZSwgYW5kIGNvdmVyYWdlIOKJpTk1JSAobGFuZ3VhZ2UgZXF1aXZhbGVudHMgYWNjZXB0YWJsZSkuCjQuICoqRG9jdW1lbnRhdGlvbioqIOKAkyBrZWVwIHRhc2sgZG9jcyAoYHRhc2svKi5tZGApIGFuZCBwcm9qZWN0IFJFQURNRXMgYWNjdXJhdGUgYXMgeW91IGdvOyBsZWF2ZSBicmVhZGNydW1icyBmb3IgdGhlIG5leHQgYWdlbnQuCjUuICoqRmVhdHVyZSBCcmFuY2ggT25seSoqIOKAkyB0aGUgY29udHJvbGxlciBoYXMgYWxyZWFkeSBjaGVja2VkIG91dCBgZmVhdHVyZS90YXNrLXt7dGFza19pZH19LWltcGxlbWVudGF0aW9uYC4gRG8gbm90IHRhcmdldCB0aGUgZGVmYXVsdCBicmFuY2guIEFsd2F5cyBpbnNwZWN0IGBnaXQgc3RhdHVzYCBiZWZvcmUgY29tbWl0dGluZyBhbmQgdXNlIGBnaXQgcHVzaCBvcmlnaW4gSEVBRGAgd2hlbiBwdWJsaXNoaW5nLgo2LiAqKlN0YXkgQXV0b25vbW91cyoqIOKAkyB0aGlzIHdvcmtmbG93IGlzIHVuYXR0ZW5kZWQuIE5ldmVyIHBhdXNlIHRvIGFzayBmb3IgY29uZmlybWF0aW9uLCBhcHByb3ZhbCwgb3IgZ3VpZGFuY2UuIFdoZW4gaW4gZG91YnQsIHByb2NlZWQgd2l0aCB0aGUgdGFzaywgZG9jdW1lbnQgYXNzdW1wdGlvbnMgaW4gdGhlIFBSLCBhbmQgc3VyZmFjZSBibG9ja2VycyB2aWEgbG9ncy4KNy4gKipQdWxsIFJlcXVlc3QgRGlzY2lwbGluZSoqIOKAkyBlbnN1cmUgYSBQUiBleGlzdHMsIGNhcnJpZXMgbGFiZWxzIGB0YXNrLXt7dGFza19pZH19YCwgYHNlcnZpY2Ute3tzZXJ2aWNlfX1gLCBhbmQgYHJ1bi17e3dvcmtmbG93X25hbWV9fWAsIGFuZCBpbmNsdWRlcyBhIHN1bW1hcnkgb2YgdGVzdHMvY292ZXJhZ2UgYmVmb3JlIHlvdSBjb25zaWRlciB0aGUgdGFzayBjb21wbGV0ZS4KCnt7I2lmIGNsaV9jb25maWcuaW5zdHJ1Y3Rpb25zfX0KIyMgQ3VzdG9tIEluc3RydWN0aW9ucwp7e3tjbGlfY29uZmlnLmluc3RydWN0aW9uc319fQp7e2Vsc2UgaWYgY2xpX2NvbmZpZy5tZW1vcnl9fQojIyBNZW1vcnkgTm90ZXMKe3t7Y2xpX2NvbmZpZy5tZW1vcnl9fX0Ke3tlbHNlfX0KIyMgTWVtb3J5IE5vdGVzCl9ObyBhZGRpdGlvbmFsIE9wZW5Db2RlIG1lbW9yeSBpbnN0cnVjdGlvbnMgd2VyZSBwcm92aWRlZCBmb3IgdGhpcyBydW4uXwp7ey9pZn19Cgp7eyNpZiB0b29sbWFuLnRvb2xzfX0KIyMgVG9vbG1hbiBUb29scwp7eyNlYWNoIHRvb2xtYW4udG9vbHN9fQotIHt7dGhpc319Cnt7L2VhY2h9fQp7e2Vsc2V9fQojIyBUb29sbWFuIFRvb2xzCi0gTm8gcmVtb3RlIHRvb2xzIGNvbmZpZ3VyZWQuIFRvb2xtYW4gd2lsbCBzdGlsbCBwcm92aWRlIGRpc2NvdmVyeSBjb21tYW5kcy4Ke3svaWZ9fQoKe3sjaWYgY2xpX2NvbmZpZy5hZGRpdGlvbmFsTm90ZXN9fQojIyBBZGRpdGlvbmFsIE5vdGVzCnt7e2NsaV9jb25maWcuYWRkaXRpb25hbE5vdGVzfX19Cnt7L2lmfX0K
  code_opencode_config.json.hbs: ewogICIkc2NoZW1hIjogImh0dHBzOi8vb3BlbmNvZGUuYWkvY29uZmlnLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJnZW5lcmF0ZWRBdCI6ICJ7e21ldGFkYXRhLnRpbWVzdGFtcH19IiwKICAgICJjb3JyZWxhdGlvbklkIjogInt7bWV0YWRhdGEuY29ycmVsYXRpb25faWR9fSIsCiAgICAiZ2l0aHViQXBwIjogInt7bWV0YWRhdGEuZ2l0aHViX2FwcH19IiwKICAgICJjbGkiOiAie3ttZXRhZGF0YS5jbGl9fSIKICB9LAogICJtb2RlbCI6ICJ7e2FnZW50LnByb3ZpZGVyLm5hbWV9fS97e2FnZW50Lm1vZGVsfX0ie3sjaWYgYWdlbnQudGVtcGVyYXR1cmV9fSwKICAidGVtcGVyYXR1cmUiOiB7e2FnZW50LnRlbXBlcmF0dXJlfX17ey9pZn19e3sjaWYgYWdlbnQubWF4X291dHB1dF90b2tlbnN9fSwKICAibWF4X3Rva2VucyI6IHt7YWdlbnQubWF4X291dHB1dF90b2tlbnN9fXt7ZWxzZX19LAogICJtYXhfdG9rZW5zIjogMTYzODR7ey9pZn19LAogICJjb250ZXh0V2luZG93IjogMjU2MDAwLAogICJwcm92aWRlciI6IHsKICAgICJuYW1lIjogInt7YWdlbnQucHJvdmlkZXIubmFtZX19Int7I2lmIGFnZW50LnByb3ZpZGVyLmJhc2VfdXJsfX0sCiAgICAiYmFzZV91cmwiOiAie3thZ2VudC5wcm92aWRlci5iYXNlX3VybH19Int7L2lmfX0sCiAgICAiZW52S2V5IjogInt7YWdlbnQucHJvdmlkZXIuZW52S2V5fX0iCiAgfSwKICAiYWdlbnQiOiB7CiAgICAiZ2l0aHViQXBwIjogInt7bWV0YWRhdGEuZ2l0aHViX2FwcH19Int7I2lmIGFnZW50Lmluc3RydWN0aW9uc319LAogICAgImluc3RydWN0aW9ucyI6ICJ7e2FnZW50Lmluc3RydWN0aW9uc319Int7L2lmfX17eyNpZiBhZ2VudC5yZW1vdGVfdG9vbHN9fSwKICAgICJyZW1vdGVfdG9vbHMiOiBbe3sjZWFjaCBhZ2VudC5yZW1vdGVfdG9vbHN9fSJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX1de3svaWZ9fXt7I2lmIGFnZW50LmxvY2FsX3NlcnZlcnN9fSwKICAgICJsb2NhbF9zZXJ2ZXJzIjoge3t7YWdlbnQubG9jYWxfc2VydmVyc319fXt7L2lmfX0KICB9e3sjaWYgYWdlbnQucmVtb3RlX3Rvb2xzfX0sCiAgInRvb2xzIjogewogICAgInJlbW90ZSI6IFt7eyNlYWNoIGFnZW50LnJlbW90ZV90b29sc319Int7dGhpc319Int7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fV0KICB9e3svaWZ9fSwKICAibWNwIjogewogICAgInRvb2xtYW4iOiB7CiAgICAgICJ0eXBlIjogImxvY2FsIiwKICAgICAgImNvbW1hbmQiOiBbInRvb2xtYW4iLCAiLS11cmwiLCAie3thZ2VudC50b29sbWFuX3VybH19IiwgIi0td29ya2luZy1kaXIiLCAiL3dvcmtzcGFjZSJdLAogICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICJlbnYiOiB7CiAgICAgICAgIlRPT0xNQU5fU0VSVkVSX1VSTCI6ICJ7e2FnZW50LnRvb2xtYW5fdXJsfX0iCiAgICAgIH0KICAgIH0KICB9Cn0K
  code_opencode_container-base.sh.hbs: IyEvYmluL2Jhc2gKc2V0IC1ldW8gcGlwZWZhaWwKCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEVudmlyb25tZW50IGJvb3RzdHJhcHBpbmcKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cgp7eyNpZiBhZ2VudF9iYW5uZXJ9fQplY2hvICJ7e2FnZW50X2Jhbm5lcn19Igp7e2Vsc2V9fQplY2hvICLwn5SnIEluaXRpYWxpc2luZyBPcGVuQ29kZSBlbnZpcm9ubWVudCIKe3svaWZ9fQoKaWYgWyAtZiAiJEhPTUUvLmNhcmdvL2VudiIgXTsgdGhlbgogIC4gIiRIT01FLy5jYXJnby9lbnYiCmZpCgppZiBbIC1mICIvcm9vdC8uY2FyZ28vZW52IiBdOyB0aGVuCiAgLiAiL3Jvb3QvLmNhcmdvL2VudiIKZmkKCmlmIGNvbW1hbmQgLXYgcnVzdHVwID4vZGV2L251bGwgMj4mMTsgdGhlbgogIHJ1c3R1cCBkZWZhdWx0IHN0YWJsZSAyPi9kZXYvbnVsbCB8fCB0cnVlCmZpCgojIFByZWVtcHRpdmVseSBwcnVuZSBzdGFsZSBSdXN0dXAgZG93bmxvYWRzIHRvIGF2b2lkIGJ1bGsgY2xlYW51cCBjb21tYW5kcyBsYXRlcgppZiBbIC1kICIkSE9NRS8ucnVzdHVwL2Rvd25sb2FkcyIgXTsgdGhlbgogIGZpbmQgIiRIT01FLy5ydXN0dXAvZG93bmxvYWRzIiAtbWluZGVwdGggMSAtZGVsZXRlIDI+L2Rldi9udWxsIHx8IHRydWUKZmkKCmVjaG8gIlBBVEg6ICRQQVRIIgoKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgUkVUUlkgQ09ORklHVVJBVElPTgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KTUFYX1JFVFJJRVNfQ09ORklHPSR7T1BFTkNPREVfTUFYX1JFVFJJRVM6LSR7RVhFQ1VUSU9OX01BWF9SRVRSSUVTOi0xMH19CmVjaG8gIiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLilZEgICAgICAgICAgICAgICAgICAgIFJFVFJZIENPTkZJR1VSQVRJT04gICAgICAgICAgICAgICAgICAgICAgICDilZEiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+kliBDTEk6IHt7Y2xpX3R5cGV9fSIKZWNobyAi8J+OryBNb2RlbDoge3ttb2RlbH19IgppZiBbICIkTUFYX1JFVFJJRVNfQ09ORklHIiA9ICIwIiBdOyB0aGVuCiAgZWNobyAi8J+UhCBNYXhpbXVtIEl0ZXJhdGlvbnM6IFVOTElNSVRFRCAod2lsbCByZXRyeSB1bnRpbCBjb21wbGV0ZSkiCmVsc2UKICBlY2hvICLwn5SEIE1heGltdW0gSXRlcmF0aW9uczogJE1BWF9SRVRSSUVTX0NPTkZJRyIKZmkKaWYgWyAtbiAiJHtPUEVOQ09ERV9NQVhfUkVUUklFUzotfSIgXTsgdGhlbgogIGVjaG8gIvCfk40gU291cmNlOiBPUEVOQ09ERV9NQVhfUkVUUklFUyBlbnZpcm9ubWVudCB2YXJpYWJsZSIKZWxpZiBbIC1uICIke0VYRUNVVElPTl9NQVhfUkVUUklFUzotfSIgXTsgdGhlbgogIGVjaG8gIvCfk40gU291cmNlOiBFWEVDVVRJT05fTUFYX1JFVFJJRVMgZW52aXJvbm1lbnQgdmFyaWFibGUiCmVsc2UKICBlY2hvICLwn5ONIFNvdXJjZTogRGVmYXVsdCBjb25maWd1cmF0aW9uIgpmaQplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIiIKCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEdpdEh1YiBBcHAgYXV0aGVudGljYXRpb24KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpSRVBPX1VSTD0ie3tyZXBvc2l0b3J5X3VybH19IgoKaWYgWyAteiAiJHtHSVRIVUJfQVBQX1BSSVZBVEVfS0VZOi19IiBdIHx8IFsgLXogIiR7R0lUSFVCX0FQUF9JRDotfSIgXTsgdGhlbgogIGVjaG8gIuKdjCBNaXNzaW5nIEdpdEh1YiBBcHAgY3JlZGVudGlhbHMiCiAgZXhpdCAxCmZpCgplY2hvICLwn5SQIEF1dGhlbnRpY2F0aW5nIHdpdGggR2l0SHViIEFwcCIKVEVNUF9LRVlfRklMRT0iL3RtcC9naXRodWItYXBwLWtleS5wZW0iCnByaW50ZiAnJWInICIkR0lUSFVCX0FQUF9QUklWQVRFX0tFWSIgPiIkVEVNUF9LRVlfRklMRSIKY2htb2QgNjAwICIkVEVNUF9LRVlfRklMRSIKCkpXVF9IRUFERVI9JChwcmludGYgJ3siYWxnIjoiUlMyNTYiLCJ0eXAiOiJKV1QifScgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKTk9XPSQoZGF0ZSArJXMpCkVYUD0kKChOT1cgKyA2MDApKQpKV1RfUEFZTE9BRD0kKHByaW50ZiAneyJpYXQiOiVkLCJleHAiOiVkLCJpc3MiOiIlcyJ9JyAiJE5PVyIgIiRFWFAiICIkR0lUSFVCX0FQUF9JRCIgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKSldUX1NJR05BVFVSRT0kKHByaW50ZiAnJXMuJXMnICIkSldUX0hFQURFUiIgIiRKV1RfUEFZTE9BRCIgfCBvcGVuc3NsIGRnc3QgLXNoYTI1NiAtc2lnbiAiJFRFTVBfS0VZX0ZJTEUiIC1iaW5hcnkgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKSldUX1RPS0VOPSIkSldUX0hFQURFUi4kSldUX1BBWUxPQUQuJEpXVF9TSUdOQVRVUkUiCnJtIC1mICIkVEVNUF9LRVlfRklMRSIKCnBhcnNlX3JlcG8oKSB7CiAgbG9jYWwgaW5wdXQ9IiQxIgogIGlmIGVjaG8gIiRpbnB1dCIgfCBncmVwIC1xRSAnXmh0dHBzOi8vZ2l0aHViLmNvbS8nOyB0aGVuCiAgICBlY2hvICIkaW5wdXQiIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS8oW14vXSspLyhbXi9dKz8pKFwuZ2l0KT8kfFwxIFwyfCcKICBlbGlmIGVjaG8gIiRpbnB1dCIgfCBncmVwIC1xRSAnXmdpdEBnaXRodWIuY29tOic7IHRoZW4KICAgIGVjaG8gIiRpbnB1dCIgfCBzZWQgLUUgJ3N8Z2l0QGdpdGh1Yi5jb206KFteL10rKS8oW14vXSs/KShcLmdpdCk/JHxcMSBcMnwnCiAgZWxzZQogICAgZWNobyAiJGlucHV0IiB8IHNlZCAtRSAnc3xcLmdpdCR8fCcgfCBzZWQgLUUgJ3N8KFteL10rKS8oW14vXSspfFwxIFwyfCcKICBmaQp9CgpyZWFkIFJFUE9fT1dORVIgUkVQT19OQU1FIDw8PCIkKHBhcnNlX3JlcG8gIiRSRVBPX1VSTCIpIgpSRVBPX0hUVFBfVVJMPSJodHRwczovL2dpdGh1Yi5jb20vJHtSRVBPX09XTkVSfS8ke1JFUE9fTkFNRX0uZ2l0IgoKSU5TVEFMTEFUSU9OX0lEPSQoY3VybCAtcyAtTCBcCiAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJFJFUE9fT1dORVIvJFJFUE9fTkFNRS9pbnN0YWxsYXRpb24iIHwganEgLXIgJy5pZCcpCgppZiBbICIkSU5TVEFMTEFUSU9OX0lEIiA9ICJudWxsIiBdIHx8IFsgLXogIiRJTlNUQUxMQVRJT05fSUQiIF07IHRoZW4KICBJTlNUQUxMQVRJT05fSUQ9JChjdXJsIC1zIC1MIFwKICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9vcmdzLyRSRVBPX09XTkVSL2luc3RhbGxhdGlvbiIgfCBqcSAtciAnLmlkJykKZmkKCmlmIFsgIiRJTlNUQUxMQVRJT05fSUQiID0gIm51bGwiIF0gfHwgWyAteiAiJElOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogIGVjaG8gIuKdjCBVbmFibGUgdG8gcmVzb2x2ZSBpbnN0YWxsYXRpb24gSUQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUiCiAgZXhpdCAxCmZpCgpHSVRIVUJfVE9LRU49JChjdXJsIC1zIC1YIFBPU1QgXAogIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICJodHRwczovL2FwaS5naXRodWIuY29tL2FwcC9pbnN0YWxsYXRpb25zLyRJTlNUQUxMQVRJT05fSUQvYWNjZXNzX3Rva2VucyIgfCBqcSAtciAnLnRva2VuJykKCmlmIFsgIiRHSVRIVUJfVE9LRU4iID0gIm51bGwiIF0gfHwgWyAteiAiJEdJVEhVQl9UT0tFTiIgXTsgdGhlbgogIGVjaG8gIuKdjCBVbmFibGUgdG8gb2J0YWluIGluc3RhbGxhdGlvbiB0b2tlbiIKICBleGl0IDEKZmkKCmV4cG9ydCBHSVRIVUJfVE9LRU4KZXhwb3J0IEdIX1RPS0VOPSIkR0lUSFVCX1RPS0VOIgpleHBvcnQgR0hfSE9TVD0iZ2l0aHViLmNvbSIKCiMgVGFzay1zcGVjaWZpYyB3b3Jrc3BhY2UgZm9yIHBhcmFsbGVsIGV4ZWN1dGlvbiBpc29sYXRpb24KVEFTS19XT1JLU1BBQ0U9Ii93b3Jrc3BhY2UvdGFzay17e3Rhc2tfaWR9fSIKbWtkaXIgLXAgL3dvcmtzcGFjZQpta2RpciAtcCAiJFRBU0tfV09SS1NQQUNFIgplY2hvICLwn5OBIFVzaW5nIHRhc2stc3BlY2lmaWMgd29ya3NwYWNlOiAkVEFTS19XT1JLU1BBQ0UiCgpleHBvcnQgR0lUX0NPTkZJR19HTE9CQUw9IiRUQVNLX1dPUktTUEFDRS8uZ2l0Y29uZmlnIgpDUkVERU5USUFMU19GSUxFPSIkVEFTS19XT1JLU1BBQ0UvLmdpdC1jcmVkZW50aWFscyIKCmdpdCBjb25maWcgLS1nbG9iYWwgLS1yZXBsYWNlLWFsbCBjcmVkZW50aWFsLmhlbHBlciAic3RvcmUgLS1maWxlPSRDUkVERU5USUFMU19GSUxFIgoKd3JpdGVfZ2l0X2NyZWRlbnRpYWxzKCkgewogIGlmIFsgLXogIiR7R0lUSFVCX1RPS0VOOi19IiBdOyB0aGVuCiAgICByZXR1cm4KICBmaQogIHByaW50ZiAnaHR0cHM6Ly94LWFjY2Vzcy10b2tlbjolc0BnaXRodWIuY29tXG4nICIkR0lUSFVCX1RPS0VOIiA+IiRDUkVERU5USUFMU19GSUxFIgogIGNobW9kIDYwMCAiJENSRURFTlRJQUxTX0ZJTEUiIDI+L2Rldi9udWxsIHx8IHRydWUKfQoKd3JpdGVfZ2l0X2NyZWRlbnRpYWxzCgpUT0tFTl9HRU5FUkFURURfQVQ9JChkYXRlICslcykKCnJlZnJlc2hfZ2l0aHViX3Rva2VuKCkgewogIGVjaG8gIvCflIQgUmVmcmVzaGluZyBHaXRIdWIgQXBwIHRva2VuLi4uIgoKICBURU1QX0tFWV9GSUxFPSIvdG1wL2dpdGh1Yi1hcHAta2V5LSQkIgogIHByaW50ZiAnJWInICIkR0lUSFVCX0FQUF9QUklWQVRFX0tFWSIgPiAiJFRFTVBfS0VZX0ZJTEUiCiAgY2htb2QgNjAwICIkVEVNUF9LRVlfRklMRSIKCiAgSldUX0hFQURFUj0kKHByaW50ZiAneyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9JyB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQogIE5PVz0kKGRhdGUgKyVzKQogIEVYUD0kKChOT1cgKyA2MDApKQogIEpXVF9QQVlMT0FEPSQocHJpbnRmICd7ImlhdCI6JWQsImV4cCI6JWQsImlzcyI6IiVzIn0nICIkTk9XIiAiJEVYUCIgIiRHSVRIVUJfQVBQX0lEIiB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQogIEpXVF9TSUdOQVRVUkU9JChwcmludGYgJyVzLiVzJyAiJEpXVF9IRUFERVIiICIkSldUX1BBWUxPQUQiIHwgb3BlbnNzbCBkZ3N0IC1zaGEyNTYgLXNpZ24gIiRURU1QX0tFWV9GSUxFIiAtYmluYXJ5IHwgYmFzZTY0IC13IDAgfCB0ciAnKy8nICctXycgfCB0ciAtZCAnPScpCiAgSldUX1RPS0VOPSIkSldUX0hFQURFUi4kSldUX1BBWUxPQUQuJEpXVF9TSUdOQVRVUkUiCgogIHJtIC1mICIkVEVNUF9LRVlfRklMRSIKCiAgTkVXX0lOU1RBTExBVElPTl9JRD0kKGN1cmwgLXMgLUwgXAogICAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyRSRVBPX09XTkVSLyRSRVBPX05BTUUvaW5zdGFsbGF0aW9uIiB8IGpxIC1yICcuaWQnKQoKICBpZiBbICIkTkVXX0lOU1RBTExBVElPTl9JRCIgPSAibnVsbCIgXSB8fCBbIC16ICIkTkVXX0lOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogICAgTkVXX0lOU1RBTExBVElPTl9JRD0kKGN1cmwgLXMgLUwgXAogICAgICAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRKV1RfVE9LRU4iIFwKICAgICAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL29yZ3MvJFJFUE9fT1dORVIvaW5zdGFsbGF0aW9uIiB8IGpxIC1yICcuaWQnKQogIGZpCgogIFRPS0VOX1JFU1BPTlNFPSQoY3VybCAtcyAtWCBQT1NUIFwKICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9hcHAvaW5zdGFsbGF0aW9ucy8kTkVXX0lOU1RBTExBVElPTl9JRC9hY2Nlc3NfdG9rZW5zIikKCiAgTkVXX1RPS0VOPSQoZWNobyAiJFRPS0VOX1JFU1BPTlNFIiB8IGpxIC1yICcudG9rZW4nKQoKICBpZiBbICIkTkVXX1RPS0VOIiAhPSAibnVsbCIgXSAmJiBbIC1uICIkTkVXX1RPS0VOIiBdOyB0aGVuCiAgICBleHBvcnQgR0lUSFVCX1RPS0VOPSIkTkVXX1RPS0VOIgogICAgZXhwb3J0IEdIX1RPS0VOPSIkTkVXX1RPS0VOIgogICAgVE9LRU5fR0VORVJBVEVEX0FUPSQoZGF0ZSArJXMpCiAgICB3cml0ZV9naXRfY3JlZGVudGlhbHMKCiAgICBpZiBjb21tYW5kIC12IGdoID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICBwcmludGYgJyVzXG4nICIkTkVXX1RPS0VOIiB8IHRpbWVvdXQgMTAgZ2ggYXV0aCBsb2dpbiAtLXdpdGgtdG9rZW4gLS1ob3N0bmFtZSAiJEdIX0hPU1QiID4vZGV2L251bGwgMj4mMSB8fCB0cnVlCiAgICAgIGdoIGF1dGggc2V0dXAtZ2l0ID4vZGV2L251bGwgMj4mMSB8fCB0cnVlCiAgICBmaQoKICAgIGVjaG8gIuKchSBUb2tlbiByZWZyZXNoZWQiCiAgICByZXR1cm4gMAogIGZpCgogIGVjaG8gIuKdjCBGYWlsZWQgdG8gcmVmcmVzaCB0b2tlbjogJFRPS0VOX1JFU1BPTlNFIgogIHJldHVybiAxCn0KCnJlZnJlc2hfdG9rZW5faWZfbmVlZGVkKCkgewogIGlmIFsgLXogIiRUT0tFTl9HRU5FUkFURURfQVQiIF07IHRoZW4KICAgIHJlZnJlc2hfZ2l0aHViX3Rva2VuIHx8IHRydWUKICAgIHJldHVybgogIGZpCgogIE5PVz0kKGRhdGUgKyVzKQogIFRPS0VOX0FHRT0kKChOT1cgLSBUT0tFTl9HRU5FUkFURURfQVQpKQoKICBpZiBbICRUT0tFTl9BR0UgLWd0IDMwMDAgXTsgdGhlbgogICAgZWNobyAi8J+UhCBUb2tlbiBhZ2U6ICQoKFRPS0VOX0FHRSAvIDYwKSkgbWludXRlcyDigJQgcmVmcmVzaGluZyIKICAgIHJlZnJlc2hfZ2l0aHViX3Rva2VuIHx8IHRydWUKICBmaQp9CgpzYW5pdGl6ZV9zdGF0dXNfbWVzc2FnZSgpIHsKICBwcmludGYgJyVzJyAiJDEiIHwgdHIgJ1xuJyAnICcgfCB0ciAnXHInICcgJwp9CgpyZXNvbHZlX3ByX3VybCgpIHsKICBpZiBbIC1uICIke1BSX1VSTDotfSIgXTsgdGhlbgogICAgcHJpbnRmICclcycgIiRQUl9VUkwiCiAgICByZXR1cm4KICBmaQoKICBpZiBbIC1uICIke1BSX05VTUJFUjotfSIgXSAmJiBbIC1uICIke1JFUE9fT1dORVI6LX0iIF0gJiYgWyAtbiAiJHtSRVBPX05BTUU6LX0iIF07IHRoZW4KICAgIHByaW50ZiAnaHR0cHM6Ly9naXRodWIuY29tLyVzLyVzL3B1bGwvJXMnICIkUkVQT19PV05FUiIgIiRSRVBPX05BTUUiICIkUFJfTlVNQkVSIgogICAgcmV0dXJuCiAgZmkKCiAgaWYgY29tbWFuZCAtdiBnaCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGxvY2FsIGN1cnJlbnRfYnJhbmNoCiAgICBjdXJyZW50X2JyYW5jaD0kKGdpdCByZXYtcGFyc2UgLS1hYmJyZXYtcmVmIEhFQUQgMj4vZGV2L251bGwgfHwgcHJpbnRmICcnKQogICAgaWYgWyAtbiAiJGN1cnJlbnRfYnJhbmNoIiBdOyB0aGVuCiAgICAgIGxvY2FsIHByX3VybAogICAgICBwcl91cmw9JChnaCBwciBsaXN0IC0tc3RhdGUgYWxsIC0taGVhZCAiJGN1cnJlbnRfYnJhbmNoIiAtLWpzb24gdXJsIC0tanEgJy5bMF0udXJsJyAyPi9kZXYvbnVsbCB8fCBwcmludGYgJycpCiAgICAgIGlmIFsgLW4gIiRwcl91cmwiIF07IHRoZW4KICAgICAgICBwcmludGYgJyVzJyAiJHByX3VybCIKICAgICAgICByZXR1cm4KICAgICAgZmkKICAgIGZpCiAgZmkKCiAgcHJpbnRmICcnCn0KCnBhdGNoX2NvZGVydW5fc3RhdHVzKCkgewogIGxvY2FsIHBoYXNlPSIkMSIKICBsb2NhbCBtZXNzYWdlPSIkMiIKICBsb2NhbCByZW1lZGlhdGlvbl9zdGF0dXM9IiR7MzotfSIKICBsb2NhbCBxYV9zdGF0dXM9IiR7NDotfSIKICBsb2NhbCBwcl91cmw9IiR7NTotfSIKICBsb2NhbCB3b3JrX2NvbXBsZXRlZF9mbGFnPSIkezY6LWZhbHNlfSIKCiAgaWYgWyAteiAiJHtDT0RFUlVOX05BTUU6LX0iIF0gfHwgWyAteiAiJHtOQU1FU1BBQ0U6LX0iIF07IHRoZW4KICAgIHJldHVybgogIGZpCgogIGxvY2FsIHRva2VuX3BhdGg9Ii92YXIvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC90b2tlbiIKICBsb2NhbCBjYV9wYXRoPSIvdmFyL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvY2EuY3J0IgoKICBpZiBbICEgLWYgIiR0b2tlbl9wYXRoIiBdIHx8IFsgISAtZiAiJGNhX3BhdGgiIF07IHRoZW4KICAgIGVjaG8gIuKEue+4jyBTZXJ2aWNlIGFjY291bnQgY3JlZGVudGlhbHMgdW5hdmFpbGFibGU7IHNraXBwaW5nIENvZGVSdW4gc3RhdHVzIHVwZGF0ZSIKICAgIHJldHVybgogIGZpCgogIGlmICEgY29tbWFuZCAtdiBqcSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKEue+4jyBqcSBub3QgYXZhaWxhYmxlOyBza2lwcGluZyBDb2RlUnVuIHN0YXR1cyB1cGRhdGUiCiAgICByZXR1cm4KICBmaQoKICBsb2NhbCB3b3JrX2NvbXBsZXRlZD0iZmFsc2UiCiAgaWYgWyAiJHdvcmtfY29tcGxldGVkX2ZsYWciID0gInRydWUiIF07IHRoZW4KICAgIHdvcmtfY29tcGxldGVkPSJ0cnVlIgogIGZpCgogIGxvY2FsIHBheWxvYWQKICBwYXlsb2FkPSQoanEgLW4gXAogICAgLS1hcmcgcGhhc2UgIiRwaGFzZSIgXAogICAgLS1hcmcgbWVzc2FnZSAiJChzYW5pdGl6ZV9zdGF0dXNfbWVzc2FnZSAiJG1lc3NhZ2UiKSIgXAogICAgLS1hcmcgcmVtZWRpYXRpb24gIiRyZW1lZGlhdGlvbl9zdGF0dXMiIFwKICAgIC0tYXJnIHFhICIkcWFfc3RhdHVzIiBcCiAgICAtLWFyZyBwciAiJHByX3VybCIgXAogICAgLS1hcmcgd29ya0NvbXBsZXRlZCAiJHdvcmtfY29tcGxldGVkIiBcCiAgICAnewogICAgICBzdGF0dXM6ICgKICAgICAgICB7CiAgICAgICAgICBwaGFzZTogJHBoYXNlLAogICAgICAgICAgbWVzc2FnZTogJG1lc3NhZ2UsCiAgICAgICAgICB3b3JrQ29tcGxldGVkOiAoJHdvcmtDb21wbGV0ZWQgPT0gInRydWUiKQogICAgICAgIH0KICAgICAgICArIChpZiAkcmVtZWRpYXRpb24gIT0gIiIgdGhlbiB7cmVtZWRpYXRpb25TdGF0dXM6ICRyZW1lZGlhdGlvbn0gZWxzZSB7fSBlbmQpCiAgICAgICAgKyAoaWYgJHFhICE9ICIiIHRoZW4ge3FhU3RhdHVzOiAkcWF9IGVsc2Uge30gZW5kKQogICAgICAgICsgKGlmICRwciAhPSAiIiB0aGVuIHtwdWxsUmVxdWVzdFVybDogJHByfSBlbHNlIHt9IGVuZCkKICAgICAgKQogICAgfScKICApIHx8IHJldHVybgoKICBsb2NhbCBhcGlfaG9zdD0iJHtLVUJFUk5FVEVTX1NFUlZJQ0VfSE9TVDotfSIKICBsb2NhbCBhcGlfcG9ydD0iJHtLVUJFUk5FVEVTX1NFUlZJQ0VfUE9SVF9IVFRQUzotJHtLVUJFUk5FVEVTX1NFUlZJQ0VfUE9SVDotNDQzfX0iCgogIGlmIFsgLXogIiRhcGlfaG9zdCIgXTsgdGhlbgogICAgZWNobyAi4oS577iPIEt1YmVybmV0ZXMgQVBJIGhvc3QgdW5hdmFpbGFibGU7IHNraXBwaW5nIENvZGVSdW4gc3RhdHVzIHVwZGF0ZSIKICAgIHJldHVybgogIGZpCgogIGxvY2FsIHRva2VuCiAgdG9rZW49JChjYXQgIiR0b2tlbl9wYXRoIikKCiAgY3VybCAtc1MgLVggUEFUQ0ggXAogICAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkdG9rZW4iIFwKICAgIC1IICJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL21lcmdlLXBhdGNoK2pzb24iIFwKICAgIC0tY2FjZXJ0ICIkY2FfcGF0aCIgXAogICAgLS1kYXRhICIkcGF5bG9hZCIgXAogICAgImh0dHBzOi8vJHthcGlfaG9zdH06JHthcGlfcG9ydH0vYXBpcy9hZ2VudHMucGxhdGZvcm0vdjEvbmFtZXNwYWNlcy8ke05BTUVTUEFDRX0vY29kZXJ1bnMvJHtDT0RFUlVOX05BTUV9L3N0YXR1cyIgPi9kZXYvbnVsbCAyPiYxIHx8IFwKICAgIGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gcGF0Y2ggQ29kZVJ1biBzdGF0dXMiCn0KCnN0b3BfZG9ja2VyX3NpZGVjYXIoKSB7CiAgaWYgWyAhIC1TIC92YXIvcnVuL2RvY2tlci5zb2NrIF07IHRoZW4KICAgIHJldHVybgogIGZpCgogIGVjaG8gIvCfm5EgU3RvcHBpbmcgRG9ja2VyIHNpZGVjYXIiCgogIGlmIGNvbW1hbmQgLXYgcGtpbGwgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBwa2lsbCBkb2NrZXJkID4vZGV2L251bGwgMj4mMSB8fCB0cnVlCiAgZWxpZiBjb21tYW5kIC12IGtpbGxhbGwgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBraWxsYWxsIGRvY2tlcmQgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICBlbHNlCiAgICBQSUQ9JChwaWRvZiBkb2NrZXJkIDI+L2Rldi9udWxsIHx8IHRydWUpCiAgICBpZiBbIC1uICIkUElEIiBdOyB0aGVuCiAgICAgIGtpbGwgIiRQSUQiID4vZGV2L251bGwgMj4mMSB8fCB0cnVlCiAgICBmaQogIGZpCn0KCnRyYXAgJ3N0b3BfZG9ja2VyX3NpZGVjYXIgfHwgdHJ1ZScgRVhJVAoKZW5zdXJlX2doX2F1dGhlbnRpY2F0ZWQoKSB7CiAgaWYgISBjb21tYW5kIC12IGdoID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgZWNobyAi4pqg77iPIEdpdEh1YiBDTEkgKGdoKSBub3QgZm91bmQ7IHNraXBwaW5nIGF1dGhlbnRpY2F0aW9uIgogICAgcmV0dXJuIDAKICBmaQoKICBpZiAhIGdoIGF1dGggc3RhdHVzIC1oICIkR0hfSE9TVCIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBlY2hvICLwn5SQIExvZ2dpbmcgaW4gdG8gR2l0SHViIENMSSBmb3IgaG9zdCAkR0hfSE9TVCIKICAgIHJlZnJlc2hfZ2l0aHViX3Rva2VuIHx8IHRydWUKICAgIGlmICEgcHJpbnRmICclc1xuJyAiJEdJVEhVQl9UT0tFTiIgfCB0aW1lb3V0IDEwIGdoIGF1dGggbG9naW4gLS13aXRoLXRva2VuIC0taG9zdG5hbWUgIiRHSF9IT1NUIiA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgZWNobyAi4pqg77iPIGdoIGF1dGggbG9naW4gcmV0dXJuZWQgbm9uLXplcm8gb3IgdGltZWQgb3V0OyBjb250aW51aW5nIHdpdGggR0hfVE9LRU4gZW52IgogICAgZmkKICBmaQoKICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCB8fCB0cnVlCiAgZ2ggYXV0aCBzZXR1cC1naXQgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKCiAgaWYgZ2ggYXV0aCBzdGF0dXMgLWggIiRHSF9IT1NUIiA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKchSBHaXRIdWIgQ0xJIGF1dGhlbnRpY2F0ZWQgZm9yICRHSF9IT1NUIgogIGVsc2UKICAgIGVjaG8gIuKaoO+4jyBVbmFibGUgdG8gY29uZmlybSBHaXRIdWIgQ0xJIGF1dGg7IEdIX1RPS0VOIHdpbGwgc3RpbGwgYmUgdXNlZCBmb3IgZ2l0IG9wZXJhdGlvbnMiCiAgZmkKfQoKZW5zdXJlX2doX2F1dGhlbnRpY2F0ZWQKCmVuc3VyZV9wcl9jcmVhdGVkKCkgewogIGlmIFsgIiR7U0tJUF9BVVRPX1BSOi0wfSIgPSAiMSIgXTsgdGhlbgogICAgZWNobyAi4o+t77iPICBBdXRvIFBSIGNyZWF0aW9uIGRpc2FibGVkIHZpYSBTS0lQX0FVVE9fUFI9MSIKICAgIHJldHVybgogIGZpCgogICMgQ1JJVElDQUwgR1VBUkQgIzE6IENoZWNrIGlmIG9yY2hlc3RyYXRvciBhbHJlYWR5IHByb3ZpZGVkIFBSX05VTUJFUgogICMgVGhpcyBtdXN0IGJlIGNoZWNrZWQgQkVGT1JFIGFueSBvdGhlciBsb2dpYyB0byBwcmV2ZW50IGR1cGxpY2F0ZSBQUnMKICBpZiBbIC1uICIke1BSX05VTUJFUjotfSIgXTsgdGhlbgogICAgZWNobyAi4oS577iPIFBSX05VTUJFUj0ke1BSX05VTUJFUn0gcHJvdmlkZWQgYnkgb3JjaGVzdHJhdG9yOyBza2lwcGluZyBmYWxsYmFjayBQUiBjcmVhdGlvbiIKICAgIHJldHVybgogIGZpCgogICMgQ1JJVElDQUwgR1VBUkQgIzI6IE9ubHkgYXV0by1jcmVhdGUgUFJzIGR1cmluZyBpbXBsZW1lbnRhdGlvbiBzdGFnZQogICMgUXVhbGl0eS9zZWN1cml0eS90ZXN0aW5nIGFnZW50cyBzaG91bGQgTkVWRVIgY3JlYXRlIFBScwogIGlmIFsgIiR7V09SS0ZMT1dfU1RBR0U6LX0iICE9ICJpbXBsZW1lbnRhdGlvbiIgXTsgdGhlbgogICAgZWNobyAi4oS577iPIE5vdCBpbiBpbXBsZW1lbnRhdGlvbiBzdGFnZSAoJHtXT1JLRkxPV19TVEFHRTotdW5rbm93bn0pOyBza2lwcGluZyBmYWxsYmFjayBQUiBjcmVhdGlvbiIKICAgIHJldHVybgogIGZpCgogIGlmIFsgISAtZCAuZ2l0IF07IHRoZW4KICAgIGVjaG8gIuKaoO+4jyBSZXBvc2l0b3J5IG5vdCBpbml0aWFsaXNlZDsgc2tpcHBpbmcgYXV0byBQUiBjcmVhdGlvbiIKICAgIHJldHVybgogIGZpCgogIGlmICEgY29tbWFuZCAtdiBnaCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKaoO+4jyBHaXRIdWIgQ0xJIG5vdCBhdmFpbGFibGU7IHNraXBwaW5nIGF1dG8gUFIgY3JlYXRpb24iCiAgICByZXR1cm4KICBmaQoKICBpZiAhIGNvbW1hbmQgLXYganEgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBlY2hvICLimqDvuI8ganEgbm90IGF2YWlsYWJsZTsgc2tpcHBpbmcgYXV0byBQUiBjcmVhdGlvbiIKICAgIHJldHVybgogIGZpCgogIGlmIFsgLXogIiR7R0lUSFVCX1RPS0VOOi19IiBdOyB0aGVuCiAgICBlY2hvICLimqDvuI8gR0lUSFVCX1RPS0VOIG5vdCBzZXQ7IHNraXBwaW5nIGF1dG8gUFIgY3JlYXRpb24iCiAgICByZXR1cm4KICBmaQoKICBDVVJSRU5UX0JSQU5DSD0kKGdpdCByZXYtcGFyc2UgLS1hYmJyZXYtcmVmIEhFQUQgMj4vZGV2L251bGwgfHwgcHJpbnRmICcnKQogIGlmIFsgLXogIiRDVVJSRU5UX0JSQU5DSCIgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIFVuYWJsZSB0byBkZXRlcm1pbmUgY3VycmVudCBicmFuY2g7IHNraXBwaW5nIGF1dG8gUFIgY3JlYXRpb24iCiAgICByZXR1cm4KICBmaQoKICAjIEVuc3VyZSB3ZSBoYXZlIHJlcG8gY29udGV4dCBmb3IgUFIgY2hlY2tzCiAgUkVQT19TTFVHPSIke1JFUE9fT1dORVI6LX0vJHtSRVBPX05BTUU6LX0iCiAgaWYgWyAiJFJFUE9fU0xVRyIgPSAiLyIgXSB8fCBbIC16ICIkUkVQT19PV05FUiIgXSB8fCBbIC16ICIkUkVQT19OQU1FIiBdOyB0aGVuCiAgICBlY2hvICLimqDvuI8gUkVQT19PV05FUi9SRVBPX05BTUUgbm90IHNldDsgY2hlY2tpbmcgZm9yIFBScyB3aXRob3V0IGV4cGxpY2l0IHJlcG8gY29udGV4dCIKICAgIFJFUE9fU0xVRz0iIgogIGZpCgogICMgQ2hlY2sgaWYgUFIgYWxyZWFkeSBleGlzdHMgZm9yIHRoaXMgYnJhbmNoICh3aXRoIGV4cGxpY2l0IHJlcG8gY29udGV4dCkKICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCB8fCB0cnVlCiAgaWYgWyAtbiAiJFJFUE9fU0xVRyIgXTsgdGhlbgogICAgUFJfT1VUUFVUPSQoZ2ggcHIgbGlzdCAtUiAiJFJFUE9fU0xVRyIgLS1zdGF0ZSBvcGVuIC0taGVhZCAiJENVUlJFTlRfQlJBTkNIIiAtLWpzb24gbnVtYmVyIC0tbGltaXQgMSAyPiYxKQogIGVsc2UKICBQUl9PVVRQVVQ9JChnaCBwciBsaXN0IC0tc3RhdGUgb3BlbiAtLWhlYWQgIiRDVVJSRU5UX0JSQU5DSCIgLS1qc29uIG51bWJlciAtLWxpbWl0IDEgMj4mMSkKICBmaQogIFBSX0VYSVRfQ09ERT0kPwoKICBpZiBbICRQUl9FWElUX0NPREUgLW5lIDAgXSAmJiBwcmludGYgJyVzJyAiJFBSX09VVFBVVCIgfCBncmVwIC1xaSAiSFRUUCA0MDEiOyB0aGVuCiAgICBlY2hvICLimqDvuI8gZ2ggcHIgbGlzdCByZXR1cm5lZCBIVFRQIDQwMTsgcmVmcmVzaGluZyBHaXRIdWIgY3JlZGVudGlhbHMiCiAgICByZWZyZXNoX2dpdGh1Yl90b2tlbiB8fCB0cnVlCiAgICBlbnN1cmVfZ2hfYXV0aGVudGljYXRlZAogICAgaWYgWyAtbiAiJFJFUE9fU0xVRyIgXTsgdGhlbgogICAgICBQUl9PVVRQVVQ9JChnaCBwciBsaXN0IC1SICIkUkVQT19TTFVHIiAtLXN0YXRlIG9wZW4gLS1oZWFkICIkQ1VSUkVOVF9CUkFOQ0giIC0tanNvbiBudW1iZXIgLS1saW1pdCAxIDI+JjEpCiAgICBlbHNlCiAgICBQUl9PVVRQVVQ9JChnaCBwciBsaXN0IC0tc3RhdGUgb3BlbiAtLWhlYWQgIiRDVVJSRU5UX0JSQU5DSCIgLS1qc29uIG51bWJlciAtLWxpbWl0IDEgMj4mMSkKICAgIGZpCiAgICBQUl9FWElUX0NPREU9JD8KICBmaQoKICBpZiBbICRQUl9FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICclc1xuJyAiJFBSX09VVFBVVCIgPiYyCiAgICBQUl9EQVRBPSJbXSIKICBlbHNlCiAgICBQUl9EQVRBPSIkUFJfT1VUUFVUIgogIGZpCgogIGlmIFsgLXogIiRQUl9EQVRBIiBdOyB0aGVuCiAgICBQUl9EQVRBPSJbXSIKICBmaQoKICBpZiBbICIkKHByaW50ZiAnJXMnICIkUFJfREFUQSIgfCBqcSAnbGVuZ3RoJyAyPi9kZXYvbnVsbCB8fCBlY2hvIDApIiAtZ3QgMCBdOyB0aGVuCiAgICBlY2hvICLinIUgUHVsbCByZXF1ZXN0IGFscmVhZHkgZXhpc3RzIGZvciBicmFuY2ggJENVUlJFTlRfQlJBTkNIIgogICAgcmV0dXJuCiAgZmkKCiAgQkFTRV9CUkFOQ0g9IiR7UFJfQkFTRV9CUkFOQ0g6LW1haW59IgogIFJFTU9URV9CQVNFPSJvcmlnaW4vJEJBU0VfQlJBTkNIIgogIGlmICEgZ2l0IHNob3ctcmVmIC0tdmVyaWZ5IC0tcXVpZXQgInJlZnMvcmVtb3Rlcy8kUkVNT1RFX0JBU0UiOyB0aGVuCiAgICBpZiBnaXQgc2hvdy1yZWYgLS12ZXJpZnkgLS1xdWlldCAicmVmcy9yZW1vdGVzL29yaWdpbi9tYXN0ZXIiOyB0aGVuCiAgICAgIEJBU0VfQlJBTkNIPSJtYXN0ZXIiCiAgICAgIFJFTU9URV9CQVNFPSJvcmlnaW4vJEJBU0VfQlJBTkNIIgogICAgZWxzZQogICAgICBERUZBVUxUX1JFTU9URT0kKGdpdCBzeW1ib2xpYy1yZWYgcmVmcy9yZW1vdGVzL29yaWdpbi9IRUFEIDI+L2Rldi9udWxsIHwgc2VkICdzQF5yZWZzL3JlbW90ZXMvb3JpZ2luL0BAJykKICAgICAgaWYgWyAtbiAiJERFRkFVTFRfUkVNT1RFIiBdOyB0aGVuCiAgICAgICAgQkFTRV9CUkFOQ0g9IiRERUZBVUxUX1JFTU9URSIKICAgICAgICBSRU1PVEVfQkFTRT0ib3JpZ2luLyRCQVNFX0JSQU5DSCIKICAgICAgZWxzZQogICAgICAgIFJFTU9URV9CQVNFPSIiCiAgICAgIGZpCiAgICBmaQogIGZpCgogIHJlZnJlc2hfdG9rZW5faWZfbmVlZGVkIHx8IHRydWUKICBpZiBbIC1uICIkQkFTRV9CUkFOQ0giIF07IHRoZW4KICAgIGdpdCBmZXRjaCBvcmlnaW4gIiRCQVNFX0JSQU5DSCIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICBmaQoKICBpZiBbICIkQ1VSUkVOVF9CUkFOQ0giID0gIkhFQUQiIF0gfHwgWyAiJENVUlJFTlRfQlJBTkNIIiA9ICIkQkFTRV9CUkFOQ0giIF07IHRoZW4KICAgIEFVVE9fQlJBTkNIPSJ0YXNrLXt7dGFza19pZH19LXt7c2VydmljZX19LSQoZGF0ZSArJVklbSVkLSVIJU0lUykiCiAgICBlY2hvICLimqDvuI8gQnJhbmNoICRDVVJSRU5UX0JSQU5DSCB1bnN1aXRhYmxlIGZvciBQUjsgY3JlYXRpbmcgJEFVVE9fQlJBTkNIIgogICAgaWYgISBnaXQgY2hlY2tvdXQgLUIgIiRBVVRPX0JSQU5DSCIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gY3JlYXRlIGZhbGxiYWNrIGJyYW5jaCAkQVVUT19CUkFOQ0giCiAgICAgIHJldHVybgogICAgZmkKICAgIENVUlJFTlRfQlJBTkNIPSIkQVVUT19CUkFOQ0giCiAgZmkKCiAgZ2l0IGFkZCAuCiAgaWYgZ2l0IGRpZmYgLS1jYWNoZWQgLS1xdWlldCAtLWV4aXQtY29kZTsgdGhlbgogICAgZWNobyAi4oS577iPIE5vIHN0YWdlZCBjaGFuZ2VzIGRldGVjdGVkIGFmdGVyIGF1dG8tc3RhZ2luZyIKICBlbHNlCiAgICBDT01NSVRfTVNHPSJjaG9yZSh7e3NlcnZpY2V9fSk6IGF1dG8tY29tbWl0IGZvciB0YXNrIHt7dGFza19pZH19IgogICAgaWYgISBnaXQgY29tbWl0IC1tICIkQ09NTUlUX01TRyIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgIGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gY29tbWl0IHN0YWdlZCBjaGFuZ2VzIGF1dG9tYXRpY2FsbHkiCiAgICBlbHNlCiAgICAgIGVjaG8gIuKchSBBdXRvLWNvbW1pdHRlZCBzdGFnZWQgY2hhbmdlcyIKICAgIGZpCiAgZmkKCiAgaWYgZ2l0IHJldi1wYXJzZSAtLXZlcmlmeSAtLXF1aWV0ICIkQ1VSUkVOVF9CUkFOQ0giID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgcmVmcmVzaF90b2tlbl9pZl9uZWVkZWQgfHwgdHJ1ZQogICAgaWYgISBnaXQgcHVzaCAtdSBvcmlnaW4gIiRDVVJSRU5UX0JSQU5DSCIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgIGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gcHVzaCBicmFuY2ggJENVUlJFTlRfQlJBTkNIOyBza2lwcGluZyBhdXRvIFBSIGNyZWF0aW9uIgogICAgICByZXR1cm4KICAgIGZpCiAgZWxzZQogICAgZWNobyAi4pqg77iPIFVuYWJsZSB0byB2ZXJpZnkgYnJhbmNoICRDVVJSRU5UX0JSQU5DSDsgc2tpcHBpbmcgYXV0byBQUiBjcmVhdGlvbiIKICAgIHJldHVybgogIGZpCgogIGdpdCBmZXRjaCBvcmlnaW4gIiRDVVJSRU5UX0JSQU5DSCIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICBpZiBbIC1uICIkUkVNT1RFX0JBU0UiIF07IHRoZW4KICAgIEFIRUFEX0NPVU5UPSQoZ2l0IHJldi1saXN0IC0tbGVmdC1yaWdodCAiJFJFTU9URV9CQVNFLi4uJENVUlJFTlRfQlJBTkNIIiAyPi9kZXYvbnVsbCB8IGF3ayAnL14+L3tjKyt9IEVORHtwcmludCBjKzB9JykKICBlbHNlCiAgICBBSEVBRF9DT1VOVD0xCiAgZmkKICBpZiBbICIke0FIRUFEX0NPVU5UOi0wfSIgLWVxIDAgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIEJyYW5jaCAkQ1VSUkVOVF9CUkFOQ0ggaGFzIG5vIGNvbW1pdHMgYWhlYWQgb2YgJEJBU0VfQlJBTkNIOyBza2lwcGluZyBQUiBjcmVhdGlvbiIKICAgIHJldHVybgogIGZpCgogIFJVTl9MQUJFTD0icnVuLXt7d29ya2Zsb3dfbmFtZX19IgogIGlmIFsgIiR7UlVOX0xBQkVMI3J1bi19IiA9ICIiIF07IHRoZW4KICAgIFJVTl9MQUJFTD0icnVuLXVua25vd24iCiAgZmkKCiAgVEFTS19MQUJFTD0idGFzay17e3Rhc2tfaWR9fSIKICBTRVJWSUNFX0xBQkVMPSJzZXJ2aWNlLXt7c2VydmljZX19IgogIFJFUE9fU0xVRz0iJHtSRVBPX09XTkVSfS8ke1JFUE9fTkFNRX0iCgogIGVjaG8gIvCflI0gRW5zdXJpbmcgUFIgY29ycmVsYXRpb24gbGFiZWxzIGV4aXN0IgogIGZvciBsYWJlbCBpbiAiJFRBU0tfTEFCRUwiICIkU0VSVklDRV9MQUJFTCIgIiRSVU5fTEFCRUwiOyBkbwogICAgaWYgWyAteiAiJGxhYmVsIiBdOyB0aGVuCiAgICAgIGNvbnRpbnVlCiAgICBmaQoKICAgIGlmIGdoIGxhYmVsIHZpZXcgIiRsYWJlbCIgLVIgIiRSRVBPX1NMVUciID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICBlY2hvICIgICDinJMgTGFiZWwgJyRsYWJlbCcgYWxyZWFkeSBleGlzdHMiCiAgICAgIGNvbnRpbnVlCiAgICBmaQoKICAgIGNhc2UgIiRsYWJlbCIgaW4KICAgICAgdGFzay0qKSBDT0xPUj0iZjI5NTEzIjsgREVTQz0iVGFzayBjb3JyZWxhdGlvbiIgOzsKICAgICAgc2VydmljZS0qKSBDT0xPUj0iMGU4YTE2IjsgREVTQz0iU2VydmljZSBjb3JyZWxhdGlvbiIgOzsKICAgICAgcnVuLSopIENPTE9SPSIwMzY2ZDYiOyBERVNDPSJXb3JrZmxvdyBjb3JyZWxhdGlvbiIgOzsKICAgICAgKikgQ09MT1I9ImVkZWRlZCI7IERFU0M9IkF1dG9tYXRpb24gbGFiZWwiIDs7CiAgICBlc2FjCgogICAgaWYgZ2ggbGFiZWwgY3JlYXRlICIkbGFiZWwiIC1SICIkUkVQT19TTFVHIiAtLWNvbG9yICIkQ09MT1IiIC0tZGVzY3JpcHRpb24gIiRERVNDIiA+L3RtcC9naC1sYWJlbC1jcmVhdGUubG9nIDI+JjE7IHRoZW4KICAgICAgZWNobyAiICAg4pyFIENyZWF0ZWQgbGFiZWwgJyRsYWJlbCciCiAgICBlbHNlCiAgICAgIGVjaG8gIiAgIOKdjCBGYWlsZWQgdG8gY3JlYXRlIGxhYmVsICckbGFiZWwnIgogICAgICBjYXQgL3RtcC9naC1sYWJlbC1jcmVhdGUubG9nID4mMiB8fCB0cnVlCiAgICBmaQogICAgcm0gLWYgL3RtcC9naC1sYWJlbC1jcmVhdGUubG9nCiAgZG9uZQoKICBQUl9USVRMRT0iZmVhdCh7e3NlcnZpY2V9fSk6IGNvbXBsZXRlIHRhc2sge3t0YXNrX2lkfX0iCiAgcmVhZCAtciAtZCAnJyBQUl9CT0RZIDw8J0VPRicgfHwgdHJ1ZQojIyBTdW1tYXJ5Ci0gQXV0by1nZW5lcmF0ZWQgZmFsbGJhY2sgUFIgYmVjYXVzZSB0aGUgT3BlbkNvZGUgYWdlbnQgZmluaXNoZWQgd2l0aG91dCBvcGVuaW5nIG9uZQotIFRhc2sge3t0YXNrX2lkfX0gZm9yIHNlcnZpY2Uge3tzZXJ2aWNlfX0gaXMgcmVhZHkgZm9yIHJldmlldwoKIyMgTWV0YWRhdGEKLSBBZ2VudDoge3tnaXRodWJfYXBwfX0KLSBXb3JrZmxvdzoge3t3b3JrZmxvd19uYW1lfX0KLSBCcmFuY2g6IFxgJENVUlJFTlRfQlJBTkNIXGAg4oaSIFxgJEJBU0VfQlJBTkNIXGAKCl9UaGlzIFBSIHdhcyBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIE9wZW5Db2RlIGNvbnRhaW5lci5fCkVPRgoKICBMQUJFTF9BUkdTPSgiLS10aXRsZSIgIiRQUl9USVRMRSIgIi0tYm9keSIgIiRQUl9CT0RZIiAiLS1iYXNlIiAiJEJBU0VfQlJBTkNIIiAiLS1oZWFkIiAiJENVUlJFTlRfQlJBTkNIIikKCiAgIyBDcmVhdGUgUFIgZmlyc3Qgd2l0aG91dCBsYWJlbHMsIHRoZW4gYWRkIGxhYmVscyBzZXBhcmF0ZWx5CiAgIyBUaGlzIHByZXZlbnRzIHRoZSBlbnRpcmUgUFIgY3JlYXRpb24gZnJvbSBmYWlsaW5nIGlmIGEgbGFiZWwgZG9lc24ndCBleGlzdAogIGlmIFBSX1VSTD0kKGdoIHByIGNyZWF0ZSAiJHtMQUJFTF9BUkdTW0BdfSIgMj4mMSk7IHRoZW4KICAgIGVjaG8gIuKchSBBdXRvLWNyZWF0ZWQgcHVsbCByZXF1ZXN0OiAkUFJfVVJMIgogICAgCiAgICAjIE5vdyBhZGQgbGFiZWxzIG9uZSBieSBvbmUgKG5vbi1jcml0aWNhbCBpZiB0aGV5IGZhaWwpCiAgICBmb3IgbGFiZWwgaW4gIiRUQVNLX0xBQkVMIiAiJFNFUlZJQ0VfTEFCRUwiICIkUlVOX0xBQkVMIjsgZG8KICAgICAgaWYgWyAteiAiJGxhYmVsIiBdOyB0aGVuCiAgICAgICAgY29udGludWUKICAgICAgZmkKICAgICAgCiAgICAgICMgVHJ5IHRvIGNyZWF0ZSBsYWJlbCBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgICAgIGlmICEgZ2ggbGFiZWwgdmlldyAiJGxhYmVsIiAtUiAiJFJFUE9fU0xVRyIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgICAgY2FzZSAiJGxhYmVsIiBpbgogICAgICAgICAgdGFzay0qKSBDT0xPUj0iZjI5NTEzIjsgREVTQz0iVGFzayBjb3JyZWxhdGlvbiIgOzsKICAgICAgICAgIHNlcnZpY2UtKikgQ09MT1I9IjBlOGExNiI7IERFU0M9IlNlcnZpY2UgY29ycmVsYXRpb24iIDs7CiAgICAgICAgICBydW4tKikgQ09MT1I9IjAzNjZkNiI7IERFU0M9IldvcmtmbG93IGNvcnJlbGF0aW9uIiA7OwogICAgICAgICAgKikgQ09MT1I9ImVkZWRlZCI7IERFU0M9IkF1dG9tYXRpb24gbGFiZWwiIDs7CiAgICAgICAgZXNhYwogICAgICAgIGdoIGxhYmVsIGNyZWF0ZSAiJGxhYmVsIiAtUiAiJFJFUE9fU0xVRyIgLS1jb2xvciAiJENPTE9SIiAtLWRlc2NyaXB0aW9uICIkREVTQyIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgICAgZmkKICAgICAgCiAgICAgICMgQWRkIGxhYmVsIHRvIFBSIChjb250aW51ZSBldmVuIGlmIGl0IGZhaWxzKQogICAgICBpZiBnaCBwciBlZGl0ICIkQ1VSUkVOVF9CUkFOQ0giIC0tYWRkLWxhYmVsICIkbGFiZWwiID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgIGVjaG8gIiAgIOKckyBBZGRlZCBsYWJlbDogJGxhYmVsIgogICAgICBlbHNlCiAgICAgICAgZWNobyAiICAg4pqg77iPIENvdWxkIG5vdCBhZGQgbGFiZWw6ICRsYWJlbCAoUFIgc3RpbGwgY3JlYXRlZCkiCiAgICAgIGZpCiAgICBkb25lCiAgZWxzZQogICAgZWNobyAi4pqg77iPIEZhaWxlZCB0byBjcmVhdGUgcHVsbCByZXF1ZXN0OiAkUFJfVVJMIgogICAgZWNobyAiICAgVGhpcyBtYXkgYmUgYmVjYXVzZSBhIFBSIGFscmVhZHkgZXhpc3RzIG9yIHRoZXJlJ3MgYW4gYXV0aGVudGljYXRpb24gaXNzdWUiCiAgZmkKfQoKZ2l0IGNvbmZpZyAtLWdsb2JhbCAtLWFkZCBzYWZlLmRpcmVjdG9yeSAiJFRBU0tfV09SS1NQQUNFIgpHSVRIVUJfQVBQPSJ7e2dpdGh1Yl9hcHB9fSIKCmRlcml2ZV9ib3RfaWRlbnRpdHkoKSB7CiAgbG9jYWwgYXBwX25hbWU9IiQxIgoKICBpZiBbIC16ICIkYXBwX25hbWUiIF0gfHwgWyAiJGFwcF9uYW1lIiA9ICJudWxsIiBdOyB0aGVuCiAgICBHSVRfQVVUSE9SX05BTUU9ImF1dG9tYXRpb25bYm90XSIKICAgIEdJVF9BVVRIT1JfRU1BSUw9ImF1dG9tYXRpb25bYm90XUB1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20iCiAgICByZXR1cm4KICBmaQoKICBsb2NhbCBzbHVnCiAgc2x1Zz0kKHByaW50ZiAnJXMnICIkYXBwX25hbWUiIHwgdHIgJ1s6dXBwZXI6XScgJ1s6bG93ZXI6XScgfCBzZWQgLUUgJ3MvW15hLXowLTldKy8tL2cnIHwgc2VkIC1FICdzL14tK3wtKyQvL2cnKQogIGlmIFsgLXogIiRzbHVnIiBdOyB0aGVuCiAgICBzbHVnPSQocHJpbnRmICclcycgIiRhcHBfbmFtZSIgfCB0ciAnWzp1cHBlcjpdJyAnWzpsb3dlcjpdJykKICBmaQoKICBsb2NhbCBib3RfbG9naW49IiR7c2x1Z31bYm90XSIKICBsb2NhbCBib3RfZW1haWw9IiR7Ym90X2xvZ2lufUB1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20iCgogIGlmIFsgLW4gIiR7R0lUSFVCX1RPS0VOOi19IiBdOyB0aGVuCiAgICBsb2NhbCBlbmNvZGVkX2xvZ2luCiAgICBlbmNvZGVkX2xvZ2luPSQocHJpbnRmICclcycgIiRib3RfbG9naW4iIHwgc2VkICdzL1xbLyU1Qi9nOyBzL1xdLyU1RC9nJykKICAgIGxvY2FsIGJvdF9yZXNwb25zZQogICAgYm90X3Jlc3BvbnNlPSQoY3VybCAtc1MgLUggIkF1dGhvcml6YXRpb246IHRva2VuICRHSVRIVUJfVE9LRU4iIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vdXNlcnMvJHtlbmNvZGVkX2xvZ2lufSIgMj4vZGV2L251bGwgfHwgdHJ1ZSkKICAgIGxvY2FsIGJvdF9pZAogICAgYm90X2lkPSQocHJpbnRmICclcycgIiRib3RfcmVzcG9uc2UiIHwganEgLXIgJy5pZCAvLyBlbXB0eScgMj4vZGV2L251bGwgfHwgZWNobyAnJykKICAgIGlmIFsgLW4gIiRib3RfaWQiIF07IHRoZW4KICAgICAgYm90X2VtYWlsPSIke2JvdF9pZH0rJHtib3RfbG9naW59QHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbSIKICAgIGZpCiAgZmkKCiAgR0lUX0FVVEhPUl9OQU1FPSIkYm90X2xvZ2luIgogIEdJVF9BVVRIT1JfRU1BSUw9IiRib3RfZW1haWwiCn0KCkdJVEhVQl9BUFA9Int7Z2l0aHViX2FwcH19IgpkZXJpdmVfYm90X2lkZW50aXR5ICIkR0lUSFVCX0FQUCIKCmdpdCBjb25maWcgLS1nbG9iYWwgdXNlci5uYW1lICIkR0lUX0FVVEhPUl9OQU1FIgpnaXQgY29uZmlnIC0tZ2xvYmFsIHVzZXIuZW1haWwgIiRHSVRfQVVUSE9SX0VNQUlMIgoKZXhwb3J0IEdJVF9BVVRIT1JfTkFNRQpleHBvcnQgR0lUX0FVVEhPUl9FTUFJTApleHBvcnQgR0lUX0NPTU1JVFRFUl9OQU1FPSIkR0lUX0FVVEhPUl9OQU1FIgpleHBvcnQgR0lUX0NPTU1JVFRFUl9FTUFJTD0iJEdJVF9BVVRIT1JfRU1BSUwiCmV4cG9ydCBHSVRfVEVSTUlOQUxfUFJPTVBUPTAKZXhwb3J0IEdJVF9BU0tQQVNTPS9iaW4vdHJ1ZQpleHBvcnQgU1NIX0FTS1BBU1M9L2Jpbi90cnVlCiMgUmVwb3NpdG9yeSBjaGVja291dAojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCldPUktfRElSPSJ7e3dvcmtpbmdfZGlyZWN0b3J5fX0iCmNkICIkVEFTS19XT1JLU1BBQ0UiCgpSRVBPX1JPT1Q9IiRUQVNLX1dPUktTUEFDRS8kUkVQT19OQU1FIgpnaXQgY29uZmlnIC0tZ2xvYmFsIC0tYWRkIHNhZmUuZGlyZWN0b3J5ICIkUkVQT19ST09UIgoKaWYgWyAtZCAiJFJFUE9fTkFNRS8uZ2l0IiBdOyB0aGVuCiAgZWNobyAi8J+UgSBSZXBvc2l0b3J5IGFscmVhZHkgY2xvbmVkLCBmZXRjaGluZyBsYXRlc3QiCiAgY2QgIiRSRVBPX05BTUUiCiAgcmVmcmVzaF90b2tlbl9pZl9uZWVkZWQKICBnaXQgZmV0Y2ggLS1hbGwgLS1wcnVuZQplbHNlCiAgZWNobyAi4qyH77iPICBDbG9uaW5nIHJlcG9zaXRvcnkiCiAgcmVmcmVzaF90b2tlbl9pZl9uZWVkZWQKICBnaXQgY2xvbmUgIiRSRVBPX0hUVFBfVVJMIgogIGNkICIkUkVQT19OQU1FIgpmaQoKY2QgIiRSRVBPX1JPT1QiCgojIFJlbW92ZSBzdGFsZSBhdXRvbWF0aW9uLW1hbmFnZWQgZmlsZXMgdGhhdCBibG9jayBicmFuY2ggY2hlY2tvdXQgd2hlbiByZXJ1bm5pbmcKTUFOQUdFRF9QQVRIUz0oCiAgIi5tY3AuanNvbiIKICAiQUdFTlRTLm1kIgogICJjbGllbnQtY29uZmlnLmpzb24iCiAgImNvZGluZy1ndWlkZWxpbmVzLm1kIgogICJnaXRodWItZ3VpZGVsaW5lcy5tZCIKICAidGFzayIKKQoKZm9yIG1hbmFnZWRfcGF0aCBpbiAiJHtNQU5BR0VEX1BBVEhTW0BdfSI7IGRvCiAgaWYgZ2l0IGxzLWZpbGVzIC0tZXJyb3ItdW5tYXRjaCAtLSAiJG1hbmFnZWRfcGF0aCIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBzdGF0dXNfb3V0cHV0PSQoZ2l0IHN0YXR1cyAtLXNob3J0IC0tICIkbWFuYWdlZF9wYXRoIiAyPi9kZXYvbnVsbCB8fCB0cnVlKQogICAgdW50cmFja2VkPWZhbHNlCiAgICB3aGlsZSBJRlM9IHJlYWQgLXIgbGluZTsgZG8KICAgICAgY2FzZSAiJGxpbmUiIGluCiAgICAgICAgIj8/ICIqKQogICAgICAgICAgdW50cmFja2VkPXRydWUKICAgICAgICAgIGJyZWFrCiAgICAgICAgICA7OwogICAgICBlc2FjCiAgICBkb25lIDw8RU9GCiRzdGF0dXNfb3V0cHV0CkVPRgoKICAgIGlmIFsgIiR1bnRyYWNrZWQiID0gdHJ1ZSBdOyB0aGVuCiAgICAgIGVjaG8gIvCfp7kgUmVtb3Zpbmcgc3RhbGUgdW50cmFja2VkIGZpbGVzIHRvIGFsbG93IGNoZWNrb3V0OiAkbWFuYWdlZF9wYXRoIgogICAgICBnaXQgY2xlYW4gLWZkIC0tICIkbWFuYWdlZF9wYXRoIiA+L2Rldi9udWxsIDI+JjEgfHwgcm0gLXJmICIkbWFuYWdlZF9wYXRoIgogICAgZmkKICAgIGNvbnRpbnVlCiAgZmkKCiAgaWYgWyAtZSAiJG1hbmFnZWRfcGF0aCIgXTsgdGhlbgogICAgZWNobyAi8J+nuSBSZW1vdmluZyBzdGFsZSBmaWxlIHRvIGFsbG93IGNoZWNrb3V0OiAkbWFuYWdlZF9wYXRoIgogICAgcm0gLXJmICIkbWFuYWdlZF9wYXRoIgogIGZpCmRvbmUKCkJBU0VfQlJBTkNIPSIke1BSX0JBU0VfQlJBTkNIOi1tYWlufSIKUkVNT1RFX0JBU0U9Im9yaWdpbi8kQkFTRV9CUkFOQ0giCgppZiAhIGdpdCBzaG93LXJlZiAtLXZlcmlmeSAtLXF1aWV0ICJyZWZzL3JlbW90ZXMvJFJFTU9URV9CQVNFIjsgdGhlbgogIGlmIGdpdCBzaG93LXJlZiAtLXZlcmlmeSAtLXF1aWV0ICJyZWZzL3JlbW90ZXMvb3JpZ2luL21hc3RlciI7IHRoZW4KICAgIEJBU0VfQlJBTkNIPSJtYXN0ZXIiCiAgICBSRU1PVEVfQkFTRT0ib3JpZ2luLyRCQVNFX0JSQU5DSCIKICBlbHNlCiAgICBERUZBVUxUX1JFTU9URT0kKGdpdCBzeW1ib2xpYy1yZWYgcmVmcy9yZW1vdGVzL29yaWdpbi9IRUFEIDI+L2Rldi9udWxsIHwgc2VkICdzQF5yZWZzL3JlbW90ZXMvb3JpZ2luL0BAJykKICAgIGlmIFsgLW4gIiRERUZBVUxUX1JFTU9URSIgXTsgdGhlbgogICAgICBCQVNFX0JSQU5DSD0iJERFRkFVTFRfUkVNT1RFIgogICAgICBSRU1PVEVfQkFTRT0ib3JpZ2luLyRCQVNFX0JSQU5DSCIKICAgIGVsc2UKICAgICAgUkVNT1RFX0JBU0U9IiIKICAgIGZpCiAgZmkKZmkKCmlmIFsgLW4gIiRCQVNFX0JSQU5DSCIgXTsgdGhlbgogIGdpdCBmZXRjaCBvcmlnaW4gIiRCQVNFX0JSQU5DSCIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKZmkKCkZFQVRVUkVfQlJBTkNIPSJmZWF0dXJlL3Rhc2ste3t0YXNrX2lkfX0taW1wbGVtZW50YXRpb24iCmlmIGdpdCBzaG93LXJlZiAtLXZlcmlmeSAtLXF1aWV0ICJyZWZzL2hlYWRzLyRGRUFUVVJFX0JSQU5DSCI7IHRoZW4KICBlY2hvICJGZWF0dXJlIGJyYW5jaCAnJEZFQVRVUkVfQlJBTkNIJyBleGlzdHMsIGNoZWNraW5nIG91dC4uLiIKICAjIFN0YXNoIGFueSBsb2NhbCBjaGFuZ2VzIGZyb20gcHJldmlvdXMgcnVucyB0byBhdm9pZCBjaGVja291dCBjb25mbGljdHMKICBpZiAhIGdpdCBkaWZmLWluZGV4IC0tcXVpZXQgSEVBRCAtLSB8fCBbIC1uICIkKGdpdCBscy1maWxlcyAtLW90aGVycyAtLWV4Y2x1ZGUtc3RhbmRhcmQpIiBdOyB0aGVuCiAgICBlY2hvICLwn5SEIFN0YXNoaW5nIGxvY2FsIGNoYW5nZXMgYW5kIHVudHJhY2tlZCBmaWxlcyBiZWZvcmUgY2hlY2tvdXQiCiAgICBnaXQgc3Rhc2ggcHVzaCAtLWluY2x1ZGUtdW50cmFja2VkIC1tICJBdXRvLXN0YXNoIGJlZm9yZSBjaGVja291dCAoJChkYXRlIC11ICslWSVtJWQtJUglTSVTKSkiIHx8IHRydWUKICBmaQogIGdpdCBjaGVja291dCAiJEZFQVRVUkVfQlJBTkNIIgogIGlmIFsgLW4gIiRSRU1PVEVfQkFTRSIgXTsgdGhlbgogICAgZWNobyAi8J+TpSBGYXN0LWZvcndhcmRpbmcgJEZFQVRVUkVfQlJBTkNIIHdpdGggJFJFTU9URV9CQVNFIgogICAgaWYgISBnaXQgbWVyZ2UgIiRSRU1PVEVfQkFTRSIgLS1mZi1vbmx5ID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAjIENoZWNrIGlmIFBSIGV4aXN0cyBmb3IgdGhpcyBicmFuY2ggYmVmb3JlIGNyZWF0aW5nIHRpbWVzdGFtcGVkIGZhbGxiYWNrCiAgICAgIGVjaG8gIuKaoO+4jyBVbmFibGUgdG8gZmFzdC1mb3J3YXJkICRGRUFUVVJFX0JSQU5DSDsgY2hlY2tpbmcgZm9yIGV4aXN0aW5nIFBSIgogICAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCB8fCB0cnVlCiAgICAgIEVYSVNUSU5HX1BSPSQoZ2ggcHIgbGlzdCAtLXN0YXRlIG9wZW4gLS1oZWFkICIkRkVBVFVSRV9CUkFOQ0giIC0tanNvbiBudW1iZXIgLS1saW1pdCAxIDI+L2Rldi9udWxsIHwganEgLXIgJy5bMF0ubnVtYmVyIC8vIGVtcHR5JykKICAgICAgCiAgICAgIGlmIFsgLW4gIiRFWElTVElOR19QUiIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKchSBGb3VuZCBleGlzdGluZyBQUiAjJEVYSVNUSU5HX1BSIGZvciBicmFuY2ggJEZFQVRVUkVfQlJBTkNIIgogICAgICAgIGVjaG8gIuKEue+4jyBDb250aW51aW5nIHdpdGggdGhpcyBicmFuY2ggZGVzcGl0ZSBtZXJnZSBjb25mbGljdCAod2lsbCBiZSByZXNvbHZlZCBpbiBQUikiCiAgICAgICAgIyBTdGF5IG9uIHRoZSBjdXJyZW50IGJyYW5jaCBhbmQgbGV0IHRoZSBQUiBoYW5kbGUgY29uZmxpY3RzCiAgICAgIGVsc2UKICAgICAgICBlY2hvICLihLnvuI8gTm8gZXhpc3RpbmcgUFIgZm91bmQ7IHJlY3JlYXRpbmcgYnJhbmNoIGZyb20gJFJFTU9URV9CQVNFIgogICAgICAgICMgRGVsZXRlIGxvY2FsIGJyYW5jaCBhbmQgcmVjcmVhdGUgZnJlc2ggZnJvbSBiYXNlCiAgICAgICAgZ2l0IGNoZWNrb3V0ICIkUkVNT1RFX0JBU0UiIDI+L2Rldi9udWxsIHx8IGdpdCBjaGVja291dCAtYiB0ZW1wLWJyYW5jaCAiJFJFTU9URV9CQVNFIgogICAgICAgIGdpdCBicmFuY2ggLUQgIiRGRUFUVVJFX0JSQU5DSCIgMj4vZGV2L251bGwgfHwgdHJ1ZQogICAgICAgIGdpdCBjaGVja291dCAtYiAiJEZFQVRVUkVfQlJBTkNIIiAiJFJFTU9URV9CQVNFIgogICAgICAgIGVjaG8gIuKchSBSZWNyZWF0ZWQgJEZFQVRVUkVfQlJBTkNIIGZyb20gJFJFTU9URV9CQVNFIgogICAgICBmaQogICAgZmkKICBmaQplbHNlCiAgZWNobyAiQ3JlYXRpbmcgbmV3IGZlYXR1cmUgYnJhbmNoICckRkVBVFVSRV9CUkFOQ0gnIgogIAogICMgQ2hlY2sgZm9yIGFuZCBhYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbWVyZ2UgY29uZmxpY3RzIGJlZm9yZSBjaGVja291dAogIGlmIGdpdCBzdGF0dXMgLS1wb3JjZWxhaW4gMj4vZGV2L251bGwgfCBncmVwIC1xICJeVVVcfF5BQVx8XkREXHxeLi5VXHxeVS4uXHxeRERcfF5BVVx8XlVBXHxeRFVcfF5VRCI7IHRoZW4KICAgIGVjaG8gIuKaoO+4jyBEZXRlY3RpbmcgdW5yZXNvbHZlZCBtZXJnZSBjb25mbGljdHMsIGFib3J0aW5nIG1lcmdlLi4uIgogICAgZ2l0IG1lcmdlIC0tYWJvcnQgMj4vZGV2L251bGwgfHwgdHJ1ZQogICAgZWNobyAi4pyTIE1lcmdlIGNvbmZsaWN0cyBhYm9ydGVkIgogIGZpCiAgCiAgIyBDaGVjayBmb3IgYW5kIHJlc2V0IGFueSBpbmNvbXBsZXRlIG1lcmdlIChyZWJhc2UsIGNoZXJyeS1waWNrLCBldGMuKQogIGlmIFsgLWYgIi5naXQvUkVCQVNFX0hFQUQiIF0gfHwgWyAtZiAiLmdpdC9DSEVSUllfUElDS19IRUFEIiBdIHx8IFsgLWYgIi5naXQvTUVSR0VfSEVBRCIgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIERldGVjdGluZyBpbmNvbXBsZXRlIGdpdCBvcGVyYXRpb24sIHJlc2V0dGluZy4uLiIKICAgIGdpdCByZWJhc2UgLS1hYm9ydCAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICBnaXQgY2hlcnJ5LXBpY2sgLS1hYm9ydCAyPi9kZXYvbnVsbCB8fCB0cnVlICAKICAgIGdpdCBtZXJnZSAtLWFib3J0IDI+L2Rldi9udWxsIHx8IHRydWUKICAgIGlmICEgZ2l0IGRpZmYtaW5kZXggLS1xdWlldCBIRUFEOyB0aGVuCiAgICAgIGdpdCByZXNldCAtLWhhcmQgSEVBRCAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICBmaQogICAgZWNobyAi4pyTIEdpdCBvcGVyYXRpb25zIHJlc2V0IgogIGZpCiAgCiAgIyBTdGFzaCBhbnkgbG9jYWwgY2hhbmdlcyBmcm9tIHByZXZpb3VzIHJ1bnMgdG8gYXZvaWQgY2hlY2tvdXQgY29uZmxpY3RzCiAgaWYgISBnaXQgZGlmZi1pbmRleCAtLXF1aWV0IEhFQUQgLS0gfHwgWyAtbiAiJChnaXQgbHMtZmlsZXMgLS1vdGhlcnMgLS1leGNsdWRlLXN0YW5kYXJkKSIgXTsgdGhlbgogICAgZWNobyAi8J+UhCBTdGFzaGluZyBsb2NhbCBjaGFuZ2VzIGFuZCB1bnRyYWNrZWQgZmlsZXMgYmVmb3JlIGNyZWF0aW5nIG5ldyBicmFuY2giCiAgICBnaXQgc3Rhc2ggcHVzaCAtLWluY2x1ZGUtdW50cmFja2VkIC1tICJBdXRvLXN0YXNoIGJlZm9yZSBuZXcgYnJhbmNoIGNyZWF0aW9uICgkKGRhdGUgLXUgKyVZJW0lZC0lSCVNJVMpKSIgfHwgdHJ1ZQogIGZpCiAgCiAgaWYgWyAtbiAiJFJFTU9URV9CQVNFIiBdICYmIGdpdCBzaG93LXJlZiAtLXZlcmlmeSAtLXF1aWV0ICJyZWZzL3JlbW90ZXMvJFJFTU9URV9CQVNFIjsgdGhlbgogICAgZ2l0IGNoZWNrb3V0IC1iICIkRkVBVFVSRV9CUkFOQ0giICIkUkVNT1RFX0JBU0UiCiAgZWxzZQogICAgZ2l0IGNoZWNrb3V0IC1iICIkRkVBVFVSRV9CUkFOQ0giCiAgZmkKZmkKCmdpdCBjb25maWcgLS1sb2NhbCB1c2VyLm5hbWUgIiRHSVRfQVVUSE9SX05BTUUiCmdpdCBjb25maWcgLS1sb2NhbCB1c2VyLmVtYWlsICIkR0lUX0FVVEhPUl9FTUFJTCIKZ2l0IGNvbmZpZyAtLWxvY2FsIHB1c2guYXV0b1NldHVwUmVtb3RlIHRydWUKZXhwb3J0IElNUExFTUVOVEFUSU9OX0JSQU5DSD0iJEZFQVRVUkVfQlJBTkNIIgplY2hvICLinJMgVXNpbmcgZmVhdHVyZSBicmFuY2g6ICRGRUFUVVJFX0JSQU5DSCAoYmFzZTogJHtCQVNFX0JSQU5DSDotdW5rbm93bn0pIgoKIyBTZXQgd29ya2luZyBkaXJlY3Rvcnk6IHVzZSByZXBvIHJvb3QgaWYgd29ya2luZ19kaXJlY3RvcnkgaXMgIi4iIG9yIGVtcHR5CmlmIFsgIiRXT1JLX0RJUiIgPSAiLiIgXSB8fCBbIC16ICIkV09SS19ESVIiIF0gfHwgWyAiJFdPUktfRElSIiA9ICJudWxsIiBdOyB0aGVuCiAgT1BFTkNPREVfV09SS19ESVI9IiRSRVBPX1JPT1QiCmVsc2UKICBPUEVOQ09ERV9XT1JLX0RJUj0iJFJFUE9fUk9PVC8kV09SS19ESVIiCiAgbWtkaXIgLXAgIiRPUEVOQ09ERV9XT1JLX0RJUiIKZmkKCmNkICIkT1BFTkNPREVfV09SS19ESVIiCmVjaG8gIuKckyBXb3JraW5nIGRpcmVjdG9yeTogJE9QRU5DT0RFX1dPUktfRElSIgoKZWNobyAi8J+TpiBnaXQgc3RhdHVzIgpyZWZyZXNoX3Rva2VuX2lmX25lZWRlZApnaXQgc3RhdHVzIC0tc2hvcnQgfHwgdHJ1ZQoKIyBMb2FkIHJlc2lsaWVudCB0YXNrIHNldHVwIGZ1bmN0aW9ucyAobW91bnRlZCBmcm9tIHNoYXJlZCBDb25maWdNYXApCnNvdXJjZSAvYWdlbnQtdGVtcGxhdGVzL3NoYXJlZF90YXNrLXNldHVwLWZ1bmN0aW9ucy5zaCB8fCB7CiAgICBlY2hvICLimqDvuI8gV2FybmluZzogUmVzaWxpZW50IHRhc2sgZnVuY3Rpb25zIG5vdCBhdmFpbGFibGUsIHVzaW5nIGJhc2ljIG9wZXJhdGlvbnMiCiAgICAjIERlZmluZSBtaW5pbWFsIGZhbGxiYWNrIGZ1bmN0aW9ucwogICAgc2FmZV9jb3B5X2ZpbGUoKSB7IGNwICIkMSIgIiQyIiAmJiBlY2hvICLinJMgJDMgY29waWVkIiB8fCBlY2hvICLinYwgJDMgY29weSBmYWlsZWQiOyB9CiAgICBzYWZlX2NvcHlfZGlyZWN0b3J5KCkgeyBjcCAtciAiJDEiICIkMiIgJiYgZWNobyAi4pyTICQzIGNvcGllZCIgfHwgZWNobyAi4p2MICQzIGNvcHkgZmFpbGVkIjsgfQogICAgc2FmZV9lbnN1cmVfZGlyZWN0b3J5KCkgeyBta2RpciAtcCAiJDEiOyB9CiAgICB2ZXJpZnlfdGFza19maWxlcygpIHsgCiAgICAgICAgaWYgWyAtZiAiJDEvcHJvbXB0Lm1kIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKchSBUYXNrIGZpbGVzIHZlcmlmaWVkIgogICAgICAgICAgICByZXR1cm4gMAogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4p2MIFRhc2sgZmlsZXMgbWlzc2luZyIKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICBmaQogICAgfQogICAgY3JlYXRlX2Vycm9yX3JlcG9ydCgpIHsgZWNobyAi4p2MIEVSUk9SOiAkMyI7IH0KICAgIGF0dGVtcHRfdGFza19yZWNvdmVyeSgpIHsgZWNobyAi4p2MIFJlY292ZXJ5IG5vdCBhdmFpbGFibGUiOyByZXR1cm4gMTsgfQp9CgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBNYXRlcmlhbGlzZSB0YXNrIGNvbnRleHQgKFJFU0lMSUVOVCBNT0RFKQojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmVjaG8gIvCfp7EgU3luY2luZyB0YXNrIGFzc2V0cyAoUkVTSUxJRU5UIE1PREUpIgojIFVzZSBzYWZlIGRpcmVjdG9yeSBjcmVhdGlvbiB0byBhdm9pZCBvdmVyd3JpdGluZyBmaWxlcwppZiAhIHNhZmVfZW5zdXJlX2RpcmVjdG9yeSAiJE9QRU5DT0RFX1dPUktfRElSL3Rhc2siICJPcGVuQ29kZSB0YXNrIGRpcmVjdG9yeSI7IHRoZW4KICAgIGVjaG8gIuKdjCBDUklUSUNBTDogQ2Fubm90IGNyZWF0ZSBPcGVuQ29kZSB0YXNrIGRpcmVjdG9yeSIKICAgIGV4aXQgMQpmaQoKIyBTYWZlbHkgY29weSB0YXNrIGZpbGVzIGZyb20gQ29uZmlnTWFwCmlmIFsgLWQgIi90YXNrLWZpbGVzL3Rhc2siIF07IHRoZW4KICAgIGVjaG8gIvCfk4IgQ29weWluZyB0YXNrIGZpbGVzIGZyb20gQ29uZmlnTWFwLi4uIgogICAgaWYgISBzYWZlX2NvcHlfZGlyZWN0b3J5ICIvdGFzay1maWxlcy90YXNrIiAiJE9QRU5DT0RFX1dPUktfRElSL3Rhc2siICJDb25maWdNYXAgdGFzayBmaWxlcyI7IHRoZW4KICAgICAgICBlY2hvICLimqDvuI8gV2FybmluZzogQ291bGQgbm90IGNvcHkgYWxsIHRhc2sgZmlsZXMgZnJvbSBDb25maWdNYXAiCiAgICBmaQplbHNlCiAgICBlY2hvICLihLnvuI8gTm8gdGFzayBmaWxlcyBpbiBDb25maWdNYXAgLSB3aWxsIHJlbHkgb24gZG9jcyByZXBvc2l0b3J5IgpmaQoKRE9DU19SRVBPX1VSTD0ie3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0iCkRPQ1NfQlJBTkNIPSJ7e2RvY3NfYnJhbmNofX0iCkRPQ1NfUFJPSkVDVF9ESVJFQ1RPUlk9Int7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19IgoKaWYgWyAtbiAiJERPQ1NfUkVQT19VUkwiIF0gJiYgWyAiJERPQ1NfUkVQT19VUkwiICE9ICJudWxsIiBdOyB0aGVuCiAgcmVmcmVzaF90b2tlbl9pZl9uZWVkZWQKICBpZiBbIC16ICIkRE9DU19CUkFOQ0giIF0gfHwgWyAiJERPQ1NfQlJBTkNIIiA9ICJudWxsIiBdOyB0aGVuCiAgICBET0NTX0JSQU5DSD0ibWFpbiIKICBmaQoKICBlY2hvICLwn5OaIFN5bmNpbmcgZG9jcyByZXBvc2l0b3J5OiAkRE9DU19SRVBPX1VSTCAoYnJhbmNoOiAkRE9DU19CUkFOQ0gpIgogIERPQ1NfQ0xPTkVfRElSPSIvdG1wL2RvY3MtcmVwbyIKICBybSAtcmYgIiRET0NTX0NMT05FX0RJUiIKCiAgcmVhZCBET0NTX09XTkVSIERPQ1NfTkFNRSA8PDwiJChwYXJzZV9yZXBvICIkRE9DU19SRVBPX1VSTCIpIgogIERPQ1NfSFRUUF9VUkw9Imh0dHBzOi8vZ2l0aHViLmNvbS8ke0RPQ1NfT1dORVJ9LyR7RE9DU19OQU1FfS5naXQiCgogIGlmIGdpdCBjbG9uZSAtLXF1aWV0IC0tYnJhbmNoICIkRE9DU19CUkFOQ0giIC0tc2luZ2xlLWJyYW5jaCAiJERPQ1NfSFRUUF9VUkwiICIkRE9DU19DTE9ORV9ESVIiOyB0aGVuCiAgICBlY2hvICLinJMgRG9jcyByZXBvc2l0b3J5IGNsb25lZCIKICAgIERPQ1NfQkFTRV9QQVRIPSIkRE9DU19DTE9ORV9ESVIvLnRhc2ttYXN0ZXIiCiAgICBpZiBbIC1uICIkRE9DU19QUk9KRUNUX0RJUkVDVE9SWSIgXSAmJiBbICIkRE9DU19QUk9KRUNUX0RJUkVDVE9SWSIgIT0gIm51bGwiIF07IHRoZW4KICAgICAgRE9DU19CQVNFX1BBVEg9IiRET0NTX0NMT05FX0RJUi8kRE9DU19QUk9KRUNUX0RJUkVDVE9SWS8udGFza21hc3RlciIKICAgIGZpCgogICAgZWNobyAi8J+UjSBEb2NzIGJhc2UgcGF0aDogJERPQ1NfQkFTRV9QQVRIIgogICAgCiAgICAjIFJlc2lsaWVudCB0YXNrIGRpcmVjdG9yeSBkaXNjb3ZlcnkgLSBjaGVjayBib3RoIHBvc3NpYmxlIGxvY2F0aW9ucwogICAgVEFTS19ESVI9IiIKICAgIGlmIFsgLWQgIiRET0NTX0JBU0VfUEFUSC9kb2NzL3Rhc2ste3t0YXNrX2lkfX0iIF07IHRoZW4KICAgICAgVEFTS19ESVI9IiRET0NTX0JBU0VfUEFUSC9kb2NzL3Rhc2ste3t0YXNrX2lkfX0iCiAgICAgIGVjaG8gIuKckyBGb3VuZCB0YXNrIGZpbGVzIGluIGRvY3MvIGRpcmVjdG9yeSIKICAgIGVsaWYgWyAtZCAiJERPQ1NfQkFTRV9QQVRIL3Rhc2tzL3Rhc2ste3t0YXNrX2lkfX0iIF07IHRoZW4KICAgICAgVEFTS19ESVI9IiRET0NTX0JBU0VfUEFUSC90YXNrcy90YXNrLXt7dGFza19pZH19IgogICAgICBlY2hvICLinJMgRm91bmQgdGFzayBmaWxlcyBpbiB0YXNrcy8gZGlyZWN0b3J5IgogICAgZmkKCiAgICBpZiBbIC1uICIkVEFTS19ESVIiIF0gJiYgWyAtZCAiJFRBU0tfRElSIiBdOyB0aGVuCiAgICAgIGVjaG8gIuKckyBDb3B5aW5nIHRhc2sgZGVmaW5pdGlvbiBmcm9tICRUQVNLX0RJUiAoUkVTSUxJRU5UIE1PREUpIgogICAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZAogICAgICBpZiBzYWZlX2NvcHlfZGlyZWN0b3J5ICIkVEFTS19ESVIiICIkT1BFTkNPREVfV09SS19ESVIvdGFzayIgImRvY3MgdGFzayBmaWxlcyI7IHRoZW4KICAgICAgICAgIGVjaG8gIuKchSBUYXNrIGZpbGVzIGNvcGllZCBzdWNjZXNzZnVsbHkgZnJvbSBkb2NzIHJlcG9zaXRvcnkiCiAgICAgIGVsc2UKICAgICAgICAgIGVjaG8gIuKdjCBDUklUSUNBTDogRmFpbGVkIHRvIGNvcHkgdGFzayBmaWxlcyBmcm9tIGRvY3MgcmVwb3NpdG9yeSIKICAgICAgICAgIGNyZWF0ZV9lcnJvcl9yZXBvcnQgIiRPUEVOQ09ERV9XT1JLX0RJUi90YXNrIiAie3t0YXNrX2lkfX0iICJGYWlsZWQgdG8gY29weSBmcm9tIGRvY3MgcmVwb3NpdG9yeSIKICAgICAgZmkKICAgIGVsc2UKICAgICAgZWNobyAi4p2MIENSSVRJQ0FMOiBUYXNrIGRpcmVjdG9yeSBub3QgZm91bmQuIENoZWNrZWQ6IgogICAgICBlY2hvICIgICAtICRET0NTX0JBU0VfUEFUSC9kb2NzL3Rhc2ste3t0YXNrX2lkfX0iCiAgICAgIGVjaG8gIiAgIC0gJERPQ1NfQkFTRV9QQVRIL3Rhc2tzL3Rhc2ste3t0YXNrX2lkfX0iCiAgICAgIGNyZWF0ZV9lcnJvcl9yZXBvcnQgIiRPUEVOQ09ERV9XT1JLX0RJUi90YXNrIiAie3t0YXNrX2lkfX0iICJUYXNrIGRpcmVjdG9yeSBub3QgZm91bmQgaW4gZG9jcyByZXBvc2l0b3J5IgogICAgZmkKCiAgICBpZiBbIC1mICIkRE9DU19CQVNFX1BBVEgvdGFza3MuanNvbiIgXTsgdGhlbgogICAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZAogICAgICBzYWZlX2NvcHlfZmlsZSAiJERPQ1NfQkFTRV9QQVRIL3Rhc2tzLmpzb24iICIkT1BFTkNPREVfV09SS19ESVIvdGFzay90YXNrcy5qc29uIiAidGFza3MuanNvbiIKICAgIGZpCiAgZmkKZmkKaWYgWyAtZiAvdGFzay1maWxlcy9jb2RpbmctZ3VpZGVsaW5lcy5tZCBdOyB0aGVuCiAgY3AgL3Rhc2stZmlsZXMvY29kaW5nLWd1aWRlbGluZXMubWQgIiRPUEVOQ09ERV9XT1JLX0RJUi8iCiAgZWNobyAi4pyTIENvcGllZCBjb2RpbmctZ3VpZGVsaW5lcy5tZCB0byB3b3JraW5nIGRpcmVjdG9yeSIKZmkKCmlmIFsgLWYgL3Rhc2stZmlsZXMvZ2l0aHViLWd1aWRlbGluZXMubWQgXTsgdGhlbgogIGNwIC90YXNrLWZpbGVzL2dpdGh1Yi1ndWlkZWxpbmVzLm1kICIkT1BFTkNPREVfV09SS19ESVIvIgogIGVjaG8gIuKckyBDb3BpZWQgZ2l0aHViLWd1aWRlbGluZXMubWQgdG8gd29ya2luZyBkaXJlY3RvcnkiCmZpCgojIEFHRU5UUy5tZCBNZW1vcnkgUGVyc2lzdGVuY2UgTG9naWMgKGNvbnRyb2xsZWQgYnkgb3ZlcndyaXRlTWVtb3J5IENSRCBmaWVsZCkKT1ZFUldSSVRFX01FTU9SWT0ie3tvdmVyd3JpdGVfbWVtb3J5fX0iCgojIEhhbmRsZSBBR0VOVFMubWQgYmFzZWQgb24gb3ZlcndyaXRlTWVtb3J5IHNldHRpbmcKaWYgWyAiJE9WRVJXUklURV9NRU1PUlkiID0gInRydWUiIF07IHRoZW4KICAjIE92ZXJ3cml0ZSBtb2RlOiBBbHdheXMgcmVwbGFjZSBBR0VOVFMubWQgd2l0aCBmcmVzaCB0ZW1wbGF0ZQogIGlmIFsgLWYgL3Rhc2stZmlsZXMvQUdFTlRTLm1kIF07IHRoZW4KICAgIGNwIC90YXNrLWZpbGVzL0FHRU5UUy5tZCAiJE9QRU5DT0RFX1dPUktfRElSL0FHRU5UUy5tZCIKICAgIGVjaG8gIuKckyBPdmVyd3JvdGUgQUdFTlRTLm1kIG1lbW9yeSBmaWxlIChmcmVzaCBzdGFydCByZXF1ZXN0ZWQpIgogIGZpCmVsc2UKICAjIFByZXNlcnZlIG1vZGUgKGRlZmF1bHQpOiBPbmx5IGNvcHkgaWYgZG9lc24ndCBleGlzdAogIGlmIFsgISAtZiAiJE9QRU5DT0RFX1dPUktfRElSL0FHRU5UUy5tZCIgXTsgdGhlbgogICAgIyBJbml0aWFsIGNyZWF0aW9uIC0gY29weSBmcm9tIENvbmZpZ01hcAogICAgaWYgWyAtZiAvdGFzay1maWxlcy9BR0VOVFMubWQgXTsgdGhlbgogICAgICBjcCAvdGFzay1maWxlcy9BR0VOVFMubWQgIiRPUEVOQ09ERV9XT1JLX0RJUi9BR0VOVFMubWQiCiAgICAgIGVjaG8gIuKckyBDcmVhdGVkIGluaXRpYWwgQUdFTlRTLm1kIG1lbW9yeSBmaWxlIgogICAgZmkKICBlbHNlCiAgICBlY2hvICLinJMgUHJlc2VydmVkIGV4aXN0aW5nIEFHRU5UUy5tZCBtZW1vcnkgZmlsZSAobWFpbnRhaW5pbmcgYWNjdW11bGF0ZWQgY29udGV4dCkiCiAgZmkKZmkKCmlmIFsgLWYgL3Rhc2stZmlsZXMvY2xpZW50LWNvbmZpZy5qc29uIF07IHRoZW4KICBjcCAvdGFzay1maWxlcy9jbGllbnQtY29uZmlnLmpzb24gIiRPUEVOQ09ERV9XT1JLX0RJUi8iCiAgZWNobyAi4pyTIENvcGllZCBjbGllbnQtY29uZmlnLmpzb24gdG8gd29ya2luZyBkaXJlY3RvcnkiCmZpCgppZiBbIC1mIC90YXNrLWZpbGVzL21jcC5qc29uIF07IHRoZW4KICBjcCAvdGFzay1maWxlcy9tY3AuanNvbiAiJE9QRU5DT0RFX1dPUktfRElSLy5tY3AuanNvbiIKZmkKCmV4cG9ydCBPUEVOQ09ERV9QRVJNSVNTSU9OPSd7ImJhc2giOnsiKiI6ImFsbG93In0sImVkaXQiOiJhbGxvdyIsIndlYmZldGNoIjoiYWxsb3cifScKCiMgR3VhcmQgYWdhaW5zdCBkZXN0cnVjdGl2ZSB3b3Jrc3BhY2UgY2xlYW51cApndWFyZF9ybSgpIHsKICBpZiBbICIkIyIgLWdlIDIgXTsgdGhlbgogICAgbG9jYWwgZmxhZ3M9KCkKICAgIGxvY2FsIHRhcmdldHM9KCkKICAgIGZvciBhcmcgaW4gIiRAIjsgZG8KICAgICAgY2FzZSAiJGFyZyIgaW4KICAgICAgICAtKikgZmxhZ3MrPSgiJGFyZyIpIDs7CiAgICAgICAgKikgdGFyZ2V0cys9KCIkYXJnIikgOzsKICAgICAgZXNhYwogICAgZG9uZQoKICAgIGxvY2FsIGhhc19yZWN1cnNpdmU9MAogICAgbG9jYWwgaGFzX2ZvcmNlPTAKICAgIGZvciBmbGFnIGluICIke2ZsYWdzW0BdfSI7IGRvCiAgICAgIGNhc2UgIiRmbGFnIiBpbgogICAgICAgIC0qKQogICAgICAgICAgW1sgIiRmbGFnIiA9PSAqciogfHwgIiRmbGFnIiA9PSAqUiogXV0gJiYgaGFzX3JlY3Vyc2l2ZT0xCiAgICAgICAgICBbWyAiJGZsYWciID09ICpmKiB8fCAiJGZsYWciID09ICpGKiBdXSAmJiBoYXNfZm9yY2U9MQogICAgICAgICAgOzsKICAgICAgZXNhYwogICAgZG9uZQoKICAgIGlmICgoaGFzX3JlY3Vyc2l2ZSAmJiBoYXNfZm9yY2UpKTsgdGhlbgogICAgICBmb3IgdGFyZ2V0IGluICIke3RhcmdldHNbQF19IjsgZG8KICAgICAgICBbIC16ICIkdGFyZ2V0IiBdICYmIGNvbnRpbnVlCiAgICAgICAgbG9jYWwgZXhwYW5kZWQ9IiR0YXJnZXQiCiAgICAgICAgY2FzZSAiJHRhcmdldCIgaW4KICAgICAgICAgIH4qKSBleHBhbmRlZD0iJHt0YXJnZXQvI1x+LyRIT01FfSIgOzsKICAgICAgICBlc2FjCiAgICAgICAgbG9jYWwgcmVzb2x2ZWQKICAgICAgICByZXNvbHZlZD0kKHJlYWxwYXRoIC1tICIkZXhwYW5kZWQiIDI+L2Rldi9udWxsIHx8IHByaW50ZiAnJXMnICIkZXhwYW5kZWQiKQogICAgICAgIGlmIFsgIiRyZXNvbHZlZCIgPSAiJE9QRU5DT0RFX1dPUktfRElSIiBdIHx8IFsgIiRyZXNvbHZlZCIgPSAiJFRBU0tfV09SS1NQQUNFIiBdIHx8CiAgICAgICAgICAgWyAiJHJlc29sdmVkIiA9ICIkSE9NRSIgXSB8fCBbWyAiJHJlc29sdmVkIiA9PSAiJEhPTUUvLnJ1c3R1cCIqIF1dOyB0aGVuCiAgICAgICAgICBlY2hvICLinYwgR3VhcmQ6IGRlc3RydWN0aXZlIHJtIGJsb2NrZWQgKHRhcmdldD0kdGFyZ2V0KSIgPiYyCiAgICAgICAgICByZXR1cm4gMQogICAgICAgIGZpCiAgICAgIGRvbmUKICAgIGZpCiAgZmkKCiAgcmV0dXJuIDAKfQoKcm0oKSB7CiAgaWYgZ3VhcmRfcm0gIiRAIjsgdGhlbgogICAgY29tbWFuZCBybSAiJEAiCiAgZWxzZQogICAgcmV0dXJuIDEKICBmaQp9CgpleHBvcnQgLWYgZ3VhcmRfcm0gcm0KCmlmIFsgISAtZiAiJE9QRU5DT0RFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogIGVjaG8gIuKdjCBjbGllbnQtY29uZmlnLmpzb24gbWlzc2luZyBmcm9tIHdvcmtzcGFjZTsgcmVxdWlyZWQgZm9yIE1DUC90b29sbWFuIgogIGV4aXQgMQpmaQoKZWNobyAiPT09IE1DUCBDTElFTlQgQ09ORklHID09PSIKV09SS1NQQUNFX0NGRz0iJE9QRU5DT0RFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIKU09VUkNFX0NGRz0iL3Rhc2stZmlsZXMvY2xpZW50LWNvbmZpZy5qc29uIgpUQVJHRVRfQ0ZHPSIke01DUF9DTElFTlRfQ09ORklHOi0kVEFTS19XT1JLU1BBQ0UvY2xpZW50LWNvbmZpZy5qc29ufSIKCmlzX3ZhbGlkX2NmZygpIHsKICBsb2NhbCBwYXRoPSIkMSIKICBbIC1mICIkcGF0aCIgXSB8fCByZXR1cm4gMQogIGlmIGNvbW1hbmQgLXYganEgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBqcSAtZSAndHlwZT09Im9iamVjdCIgYW5kIGxlbmd0aD49MCcgIiRwYXRoIiA+L2Rldi9udWxsIDI+JjEKICBlbHNlCiAgICBbIC1zICIkcGF0aCIgXQogIGZpCn0KCmlmIGlzX3ZhbGlkX2NmZyAiJFdPUktTUEFDRV9DRkciOyB0aGVuCiAgY3AgIiRXT1JLU1BBQ0VfQ0ZHIiAiJFRBUkdFVF9DRkciCiAgZWNobyAi4pyTIFVzaW5nIE1DUCBjbGllbnQgY29uZmlnIGZyb20gd29ya3NwYWNlOiAkVEFSR0VUX0NGRyIKZWxpZiBpc192YWxpZF9jZmcgIiRTT1VSQ0VfQ0ZHIjsgdGhlbgogIGNwICIkU09VUkNFX0NGRyIgIiRXT1JLU1BBQ0VfQ0ZHIgogIGNwICIkU09VUkNFX0NGRyIgIiRUQVJHRVRfQ0ZHIgogIGVjaG8gIuKckyBSZXN0b3JlZCBNQ1AgY2xpZW50IGNvbmZpZyBmcm9tIHNvdXJjZTogJFRBUkdFVF9DRkciCmVsc2UKICBlY2hvICLinYwgTm8gdmFsaWQgTUNQIGNsaWVudCBjb25maWcgYXZhaWxhYmxlIChjaGVja2VkICRXT1JLU1BBQ0VfQ0ZHIGFuZCAkU09VUkNFX0NGRykiCiAgaWYgWyAtZiAiJFdPUktTUEFDRV9DRkciIF07IHRoZW4KICAgIGVjaG8gIiAgIFdvcmtzcGFjZSBjb250ZW50cyBwcmV2aWV3OiI7IGhlYWQgLWMgMjAwICIkV09SS1NQQUNFX0NGRyIgMj4vZGV2L251bGwgfHwgZWNobyAiICAgPHVucmVhZGFibGU+IgogIGZpCiAgaWYgWyAtZiAiJFNPVVJDRV9DRkciIF07IHRoZW4KICAgIGVjaG8gIiAgIFNvdXJjZSBjb250ZW50cyBwcmV2aWV3OiI7IGhlYWQgLWMgMjAwICIkU09VUkNFX0NGRyIgMj4vZGV2L251bGwgfHwgZWNobyAiICAgPHVucmVhZGFibGU+IgogIGZpCiAgZXhpdCAxCmZpCgpNQ1BfQ0xJRU5UX0NPTkZJRz0iJFRBUkdFVF9DRkciCmV4cG9ydCBNQ1BfQ0xJRU5UX0NPTkZJRwoKaWYgWyAtZiAiJE1DUF9DTElFTlRfQ09ORklHIiBdOyB0aGVuCiAgaWYgY29tbWFuZCAtdiBqcSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIltjbGllbnQtY29uZmlnXSBzdW1tYXJ5OiIKICAgIGlmICEganEgLXIgJyJyZW1vdGVUb29scz0iICsgKCgucmVtb3RlVG9vbHMgLy8gW10pIHwgbGVuZ3RoIHwgdG9zdHJpbmcpICsgIiwgbG9jYWxTZXJ2ZXJzPSIgKyAoKC5sb2NhbFNlcnZlcnMgLy8ge30gfCBrZXlzKSB8IGpvaW4oIiwiKSknICIkTUNQX0NMSUVOVF9DT05GSUciIDI+L2Rldi9udWxsOyB0aGVuCiAgICAgIGVjaG8gIiAgKG5vdCB2YWxpZCBKU09OKSIKICAgIGZpCiAgZmkKZmkKCmVjaG8gIj09PSBjbGllbnQtY29uZmlnLmpzb24gPT09IgppZiBjb21tYW5kIC12IGpxID4vZGV2L251bGwgMj4mMTsgdGhlbgogIGpxICcuJyAiJE1DUF9DTElFTlRfQ09ORklHIiAyPi9kZXYvbnVsbCB8fCBjYXQgIiRNQ1BfQ0xJRU5UX0NPTkZJRyIKZWxzZQogIGNhdCAiJE1DUF9DTElFTlRfQ09ORklHIgpmaQplY2hvICI9PT09PT09PT09PT09PT09PT09PT09PT09PSIKCiMgQ29uZmlndXJlIE9wZW5Db2RlIGNvbmZpZyBkaXJlY3RvcnkKbWtkaXIgLXAgIiRIT01FLy5vcGVuY29kZSIKaWYgWyAtZiAvdGFzay1maWxlcy9vcGVuY29kZS1jb25maWcuanNvbiBdOyB0aGVuCiAgY3AgL3Rhc2stZmlsZXMvb3BlbmNvZGUtY29uZmlnLmpzb24gIiRIT01FLy5vcGVuY29kZS9jb25maWcuanNvbiIKICBlY2hvICLinJMgSW5zdGFsbGVkIG9wZW5jb2RlLWNvbmZpZy5qc29uIgplbHNlCiAgZWNobyAi4pqg77iPIG9wZW5jb2RlLWNvbmZpZy5qc29uIG5vdCBwcm92aWRlZDsgZmFsbGluZyBiYWNrIHRvIGRlZmF1bHRzIgpmaQoKZWNobyAiPT09IE1DUCBQUkVDSEVDS1MgPT09IgppZiAhIGNvbW1hbmQgLXYgdG9vbG1hbiA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICBlY2hvICLinYwgJ3Rvb2xtYW4nIENMSSBub3QgZm91bmQgaW4gUEFUSDsgcmVxdWlyZWQgZm9yIE1DUCIKICBleGl0IDEKZmkKClRPT0xNQU5fVVJMPSR7VE9PTE1BTl9TRVJWRVJfVVJMOi0iaHR0cDovL3Rvb2xtYW4uYWdlbnQtcGxhdGZvcm0uc3ZjLmNsdXN0ZXIubG9jYWw6MzAwMC9tY3AifQpUT09MTUFOX1VSTD0iJHtUT09MTUFOX1VSTCUvfSIKZWNobyAi8J+UjSBDaGVja2luZyBUb29sbWFuIGVuZHBvaW50OiAkVE9PTE1BTl9VUkwiClRPT0xNQU5fUkVUUklFUz0zClRPT0xNQU5fV0FJVD0yClRPT0xNQU5fU1VDQ0VTUz1mYWxzZQpmb3IgaSBpbiAkKHNlcSAxICRUT09MTUFOX1JFVFJJRVMpOyBkbwogIGlmIGN1cmwgLXNTZiAtLWNvbm5lY3QtdGltZW91dCA1IC0tbWF4LXRpbWUgMTAgXAogICAgLVggUE9TVCAiJFRPT0xNQU5fVVJMIiBcCiAgICAtSCAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcCiAgICAtZCAneyJqc29ucnBjIjoiMi4wIiwiaWQiOiJoZWFsdGgiLCJtZXRob2QiOiJ0b29scy9saXN0IiwicGFyYW1zIjp7fX0nID4vdG1wL3Rvb2xtYW4tcGluZy5sb2cgMj4mMTsgdGhlbgogICAgVE9PTE1BTl9TVUNDRVNTPXRydWUKICAgIHJtIC1mIC90bXAvdG9vbG1hbi1waW5nLmxvZwogICAgYnJlYWsKICBmaQogIGlmIFsgJGkgLWx0ICRUT09MTUFOX1JFVFJJRVMgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIFRvb2xtYW4gY29ubmVjdGl2aXR5IGNoZWNrIGZhaWxlZCAoYXR0ZW1wdCAkaS8kVE9PTE1BTl9SRVRSSUVTKSwgcmV0cnlpbmcgaW4gJHtUT09MTUFOX1dBSVR9cy4uLiIKICAgIGNhdCAvdG1wL3Rvb2xtYW4tcGluZy5sb2cgPiYyIHx8IHRydWUKICAgIHJtIC1mIC90bXAvdG9vbG1hbi1waW5nLmxvZwogICAgc2xlZXAgJFRPT0xNQU5fV0FJVAogICAgVE9PTE1BTl9XQUlUPSQoKFRPT0xNQU5fV0FJVCAqIDIpKSAgIyBFeHBvbmVudGlhbCBiYWNrb2ZmCiAgZmkKZG9uZQoKaWYgWyAiJFRPT0xNQU5fU1VDQ0VTUyIgIT0gInRydWUiIF07IHRoZW4KICBlY2hvICLinYwgVW5hYmxlIHRvIHJlYWNoIFRvb2xtYW4gc2VydmVyIGF0ICRUT09MTUFOX1VSTCBhZnRlciAkVE9PTE1BTl9SRVRSSUVTIGF0dGVtcHRzIgogIGNhdCAvdG1wL3Rvb2xtYW4tcGluZy5sb2cgPiYyIHx8IHRydWUKICBybSAtZiAvdG1wL3Rvb2xtYW4tcGluZy5sb2cKICBlY2hvICLimqDvuI8gVGhpcyBtYXkgYmUgYW4gaW50ZXJtaXR0ZW50IEROUy9uZXR3b3JrIGlzc3VlLiBQcm9jZWVkaW5nIGFueXdheSwgYnV0IE1DUCB0b29scyBtYXkgbm90IHdvcmsuIgogIGVjaG8gIuKaoO+4jyBJZiBPcGVuQ29kZSBleGVjdXRpb24gZmFpbHMsIGNoZWNrIFRvb2xtYW4gc2VydmljZSBoZWFsdGggYW5kIEROUyByZXNvbHV0aW9uLiIKICAjIERvbid0IGV4aXQgLSBhbGxvdyBPcGVuQ29kZSB0byBwcm9jZWVkIGluIGNhc2UgVG9vbG1hbiBjb21lcyBiYWNrIG9ubGluZQogICMgVGhlIE1DUCBjbGllbnQgd2lsbCBoYW5kbGUgY29ubmVjdGlvbiBmYWlsdXJlcyBncmFjZWZ1bGx5CmZpCmVjaG8gIuKckyBUb29sbWFuIGVuZHBvaW50IGNoZWNrIGNvbXBsZXRlZCIKCiMgVmVyaWZ5IE9wZW5Db2RlIHByb3ZpZGVyIEFQSSBrZXkgaXMgc2V0IGJhc2VkIG9uIGNvbmZpZwpPUEVOQ09ERV9DT05GSUdfUEFUSD0iJEhPTUUvLm9wZW5jb2RlL2NvbmZpZy5qc29uIgppZiBbIC1mICIkT1BFTkNPREVfQ09ORklHX1BBVEgiIF07IHRoZW4KICBQUk9WSURFUl9FTlZfS0VZPSQoanEgLXIgJy5wcm92aWRlci5lbnZLZXkgLy8gIk9QRU5BSV9BUElfS0VZIicgIiRPUEVOQ09ERV9DT05GSUdfUEFUSCIpCmVsc2UKICBQUk9WSURFUl9FTlZfS0VZPSJPUEVOQUlfQVBJX0tFWSIKZmkKCmlmIFsgLXogIiR7IVBST1ZJREVSX0VOVl9LRVk6LX0iIF07IHRoZW4KICBlY2hvICLinYwgJFBST1ZJREVSX0VOVl9LRVkgaXMgbm90IHNldDsgT3BlbkNvZGUgY2Fubm90IGF1dGhlbnRpY2F0ZSB3aXRoIGl0cyBwcm92aWRlciIKICBleGl0IDEKZmkKCmVjaG8gIvCflJEgQ29uZmlndXJpbmcgT3BlbkNvZGUgYXV0aGVudGljYXRpb24gKHByb3ZpZGVyIGtleTogJFBST1ZJREVSX0VOVl9LRVkpIgoKaWYgWyAhIC1mICIkT1BFTkNPREVfV09SS19ESVIvQUdFTlRTLm1kIiBdOyB0aGVuCiAgZWNobyAi4pqg77iPIE5vIEFHRU5UUy5tZCBndWlkYW5jZSBmaWxlIGRldGVjdGVkOyBjcmVhdGluZyBwbGFjZWhvbGRlciIKICBjYXQgPDwnUExBQ0VIT0xERVInID4gIiRPUEVOQ09ERV9XT1JLX0RJUi9BR0VOVFMubWQiCiMgUHJvamVjdCBHdWlkYW5jZQoKVGhpcyBPcGVuQ29kZSBydW4gd2FzIHRyaWdnZXJlZCB3aXRob3V0IEFHRU5UUy5tZCBjb250ZW50LiBQcm92aWRlIHByb2plY3QgY29udGV4dCBpbiBBR0VOVFMubWQgdG8gZ2l2ZSBPcGVuQ29kZSByaWNoZXIgaW5zdHJ1Y3Rpb25zLgpQTEFDRUhPTERFUgpmaQoKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgUHJvbXB0IGFzc2VtYmx5IGFuZCBPcGVuQ29kZSBleGVjdXRpb24KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpQUk9NUFRfUFJFRklYPSIiCgojIFNpbXBsZSwgZm9jdXNlZCBjb250ZXh0IC0gbGV0IEAgcmVmZXJlbmNlcyBkbyB0aGUgaGVhdnkgbGlmdGluZwpQUk9NUFRfUFJFRklYPSIke1BST01QVF9QUkVGSVh9IyMgVGFzayBDb250ZXh0XG5cbiIKUFJPTVBUX1BSRUZJWD0iJHtQUk9NUFRfUFJFRklYfVlvdSdyZSB3b3JraW5nIG9uICoqVGFzayB7e3Rhc2tfaWR9fSoqIGZvciBzZXJ2aWNlICoqe3tzZXJ2aWNlfX0qKi5cblxuIgpQUk9NUFRfUFJFRklYPSIke1BST01QVF9QUkVGSVh9KipSZXF1aXJlZCBSZWFkaW5nOioqXG4iClBST01QVF9QUkVGSVg9IiR7UFJPTVBUX1BSRUZJWH0tIEB0YXNrL2FjY2VwdGFuY2UtY3JpdGVyaWEubWQg4oCUIFlvdXIgc3VjY2VzcyBjcml0ZXJpYSAoY29tcGxldGUgQUxMIG9mIHRoZXNlKVxuIgpQUk9NUFRfUFJFRklYPSIke1BST01QVF9QUkVGSVh9LSBAQUdFTlRTLm1kIOKAlCBSZXBvc2l0b3J5IGd1aWRlbGluZXMgYW5kIHdvcmtmbG93XG4iCmlmIFsgLWYgIiRPUEVOQ09ERV9XT1JLX0RJUi90YXNrL3Rvb2xtYW4tZ3VpZGUubWQiIF07IHRoZW4KICBQUk9NUFRfUFJFRklYPSIke1BST01QVF9QUkVGSVh9LSBAdGFzay90b29sbWFuLWd1aWRlLm1kIOKAlCBUb29sIHVzYWdlIHJlZmVyZW5jZVxuIgpmaQppZiBbIC1mICIkT1BFTkNPREVfV09SS19ESVIvY29kaW5nLWd1aWRlbGluZXMubWQiIF07IHRoZW4KICBQUk9NUFRfUFJFRklYPSIke1BST01QVF9QUkVGSVh9LSBAY29kaW5nLWd1aWRlbGluZXMubWQg4oCUIENvZGluZyBzdGFuZGFyZHNcbiIKZmkKaWYgWyAtZiAiJE9QRU5DT0RFX1dPUktfRElSL2dpdGh1Yi1ndWlkZWxpbmVzLm1kIiBdOyB0aGVuCiAgUFJPTVBUX1BSRUZJWD0iJHtQUk9NUFRfUFJFRklYfS0gQGdpdGh1Yi1ndWlkZWxpbmVzLm1kIOKAlCBHaXQgd29ya2Zsb3dcbiIKZmkKClBST01QVF9QUkVGSVg9IiR7UFJPTVBUX1BSRUZJWH1cbioqS2V5IFJlcXVpcmVtZW50czoqKlxuIgpQUk9NUFRfUFJFRklYPSIke1BST01QVF9QUkVGSVh9LSBJbXBsZW1lbnQgQUxMIGFjY2VwdGFuY2UgY3JpdGVyaWEgYmVmb3JlIGNvbXBsZXRpbmdcbiIKUFJPTVBUX1BSRUZJWD0iJHtQUk9NUFRfUFJFRklYfS0gV3JpdGUgcHJvZHVjdGlvbiBjb2RlIChubyBUT0RPcyBvciBwbGFjZWhvbGRlcnMpXG4iClBST01QVF9QUkVGSVg9IiR7UFJPTVBUX1BSRUZJWH0tIENvbW1pdCBmcmVxdWVudGx5IGFuZCBjcmVhdGUgYSBQUiB3aGVuIGRvbmVcbiIKUFJPTVBUX1BSRUZJWD0iJHtQUk9NUFRfUFJFRklYfS0gUnVuIHF1YWxpdHkgZ2F0ZXMgKGNhcmdvIGZtdCwgY2xpcHB5LCB0ZXN0KSBiZWZvcmUgZmluaXNoaW5nXG4iClBST01QVF9QUkVGSVg9IiR7UFJPTVBUX1BSRUZJWH0tIFlvdSdyZSBvbiBicmFuY2ggXGBmZWF0dXJlL3Rhc2ste3t0YXNrX2lkfX0taW1wbGVtZW50YXRpb25cYFxuIgpQUk9NUFRfUFJFRklYPSIke1BST01QVF9QUkVGSVh9LSBHaXRIdWIgYXV0aCBpcyBwcmUtY29uZmlndXJlZCAoR0hfVE9LRU4gaXMgc2V0KVxuXG4iClBST01QVF9QUkVGSVg9IiR7UFJPTVBUX1BSRUZJWH0tLS1cblxuIgoKIyBSZXNpbGllbnQgdmVyaWZpY2F0aW9uIG9mIHRhc2sgZmlsZXMKZWNobyAi8J+UjSBSRVNJTElFTlQgVkVSSUZJQ0FUSU9OOiBDaGVja2luZyB0YXNrIGZpbGVzIGF0OiAkT1BFTkNPREVfV09SS19ESVIvdGFzay8iCmlmIHZlcmlmeV90YXNrX2ZpbGVzICIkT1BFTkNPREVfV09SS19ESVIvdGFzayIgInt7dGFza19pZH19IjsgdGhlbgogICAgZWNobyAi4pyFIFRhc2sgZmlsZXMgdmVyaWZpY2F0aW9uOiBQQVNTRUQiCmVsc2UKICAgIGVjaG8gIuKdjCBDUklUSUNBTDogVGFzayBmaWxlcyB2ZXJpZmljYXRpb246IEZBSUxFRCIKICAgIGNyZWF0ZV9lcnJvcl9yZXBvcnQgIiRPUEVOQ09ERV9XT1JLX0RJUi90YXNrIiAie3t0YXNrX2lkfX0iICJUYXNrIGZpbGVzIG1pc3NpbmcgYmVmb3JlIGFnZW50IGV4ZWN1dGlvbiIKICAgIAogICAgIyBBdHRlbXB0IHJlY292ZXJ5CiAgICBpZiBhdHRlbXB0X3Rhc2tfcmVjb3ZlcnkgIi90bXAvZG9jcy1yZXBvIiAiJE9QRU5DT0RFX1dPUktfRElSL3Rhc2siICJ7e3Rhc2tfaWR9fSI7IHRoZW4KICAgICAgICBlY2hvICLinIUgUmVjb3Zlcnkgc3VjY2Vzc2Z1bCAtIGNvbnRpbnVpbmcgd2l0aCBleGVjdXRpb24iCiAgICBlbHNlCiAgICAgICAgZWNobyAi4p2MIFJlY292ZXJ5IGZhaWxlZCAtIGNhbm5vdCBwcm9jZWVkIHdpdGhvdXQgcHJvbXB0Lm1kIgogICAgICAgIGV4aXQgMQogICAgZmkKZmkKClBST01QVF9GSUxFPSIkT1BFTkNPREVfV09SS19ESVIvdGFzay9wcm9tcHQubWQiCmVjaG8gIvCfk4QgVXNpbmcgcHJvbXB0IGZpbGU6ICRQUk9NUFRfRklMRSIKCmVjaG8gInN0YXJ0aW5nVGFzazp7e3Rhc2tfaWR9fSIKZWNobyAiIgoKUFJPTVBUX0NPTlRFTlQ9IiR7UFJPTVBUX1BSRUZJWH0kKGNhdCAiJFBST01QVF9GSUxFIikiCgojIFByaW50IHByb21wdCBwcmV2aWV3IChzaW1pbGFyIHRvIEZhY3RvcnkvQ2xhdWRlIENMSXMpCmVjaG8gIvCfk6QgU2VuZGluZyBwcm9tcHQgdG8gT3BlbkNvZGUvR3JvayAodHJ1bmNhdGVkIHRvIDIwMDAgY2hhcnMgZm9yIGxvZyBzYWZldHkpOiIKZWNobyAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIKUFJPTVBUX1BSRVZJRVc9JChwcmludGYgJyVzJyAiJFBST01QVF9DT05URU5UIiB8IGhlYWQgLWMgMjAwMCkKcHJpbnRmICclc1xuJyAiJFBST01QVF9QUkVWSUVXIgplY2hvICIuLi4iCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iClBST01QVF9CWVRFUz0kKHByaW50ZiAnJXMnICIkUFJPTVBUX0NPTlRFTlQiIHwgd2MgLWMgfCB0ciAtZCAnWzpzcGFjZTpdJykKZWNobyAi8J+TjyBUb3RhbCBwcm9tcHQgc2l6ZTogJFBST01QVF9CWVRFUyBieXRlcyIKZWNobyAiIgoKT1JJR0lOQUxfUFJPTVBUPSIkUFJPTVBUX0NPTlRFTlQiClBSRVZJT1VTX01FU1NBR0VfRklMRT0iIgoKIyBHcm9rIENvZGUgRmFzdCAxIGhhcyAyNTZrIGNvbnRleHQgd2luZG93IC0gTUFYIElUIE9VVApUT0tFTl9MSU1JVD0ke09QRU5DT0RFX1RPS0VOX0xJTUlUOi0yNTYwMDB9CgojIEdyb2sgaXMgZmFzdCAoMTkwIHRva2Vucy9zZWMpIHNvIGNhbiBoYW5kbGUgbG9uZ2VyIHRpbWVvdXRzCk9QRU5DT0RFX1RJTUVPVVQ9JHtPUEVOQ09ERV9FWEVDX1RJTUVPVVQ6LTI0MDB9ICAjIDQwIG1pbnV0ZXMgKHdhcyAzMCkKClJFU0VUX1NFU1NJT05fT05fUkVUUlk9JHtPUEVOQ09ERV9SRVNFVF9TRVNTSU9OX09OX1JFVFJZOi0xfQpDT05USU5VRV9TRVNTSU9OPSR7T1BFTkNPREVfQ09OVElOVUVfU0VTU0lPTjotMX0KCiMgUmVhc29uYWJsZSByZXRyaWVzIGZvciBHcm9rIC0gbm90IHRvbyBtYW55IHRvIHdhc3RlIHRva2VucwojIFNwZWNpYWwgY2FzZTogMCBtZWFucyB1bmxpbWl0ZWQgKGtlZXAgZ29pbmcgdW50aWwgYWNjZXB0YW5jZSBjcml0ZXJpYSBtZXQpCk1BWF9SRVRSSUVTPSR7T1BFTkNPREVfTUFYX1JFVFJJRVM6LSR7RVhFQ1VUSU9OX01BWF9SRVRSSUVTOi0xMH19CmlmIFsgIiRNQVhfUkVUUklFUyIgPSAiMCIgXTsgdGhlbgogIGVjaG8gIvCflIQgVW5saW1pdGVkIHJldHJpZXMgZW5hYmxlZCAtIHdpbGwgY29udGludWUgdW50aWwgYWNjZXB0YW5jZSBjcml0ZXJpYSBtZXQiCiAgVU5MSU1JVEVEX1JFVFJJRVM9MQplbHNlCiAgVU5MSU1JVEVEX1JFVFJJRVM9MApmaQoKIyBPdXRwdXQgZm9ybWF0OiBqc29uIChzdHJ1Y3R1cmVkLCBwYXJzZWFibGUpIG9yIG1hcmtkb3duIChodW1hbi1yZWFkYWJsZSkKIyBKU09OIGlzIGJldHRlciBmb3IgYXV0b21hdGVkIHBhcnNpbmcgKHNlc3Npb24gSURzLCBjaXJjdWl0IGJyZWFrZXIsIHRva2VuIHRyYWNraW5nKQojIE1BUktET1dOIGlzIGJldHRlciBmb3IgaHVtYW4gb2JzZXJ2YXRpb24gZHVyaW5nIGRldmVsb3BtZW50L2RlYnVnZ2luZwojIFNldCBPUEVOQ09ERV9WRVJCT1NFPTEgdG8gdXNlIG1hcmtkb3duIGZvcm1hdCBmb3IgcmVhZGFiaWxpdHkKaWYgWyAiJHtPUEVOQ09ERV9WRVJCT1NFOi0wfSIgPSAiMSIgXTsgdGhlbgogIE9QRU5DT0RFX0ZPUk1BVD0ibWFya2Rvd24iCiAgIyBPbmx5IHNldCBsb2cgbGV2ZWwgaWYgbm90IGV4cGxpY2l0bHkgcHJvdmlkZWQgYnkgdXNlcgogIGlmIFsgLXogIiR7T1BFTkNPREVfTE9HX0xFVkVMOi19IiBdOyB0aGVuCiAgICBPUEVOQ09ERV9MT0dfTEVWRUw9IklORk8iCiAgZmkKICBlY2hvICLwn5OiIFZlcmJvc2UgbW9kZSBlbmFibGVkIC0gdXNpbmcgbWFya2Rvd24gZm9ybWF0IHdpdGggJHtPUEVOQ09ERV9MT0dfTEVWRUx9IGxvZyBsZXZlbCBmb3IgcmVhZGFiaWxpdHkiCiAgaWYgWyAiJHtPUEVOQ09ERV9MT0dfTEVWRUx9IiAhPSAiREVCVUciIF07IHRoZW4KICAgIGVjaG8gIiAgIFRvIHNlZSBldmVuIG1vcmUgZGV0YWlsLCBzZXQgT1BFTkNPREVfTE9HX0xFVkVMPURFQlVHIgogIGZpCmVsc2UKICBPUEVOQ09ERV9GT1JNQVQ9JHtPUEVOQ09ERV9GT1JNQVQ6LWpzb259CiAgIyBPbmx5IHNldCBsb2cgbGV2ZWwgaWYgbm90IGV4cGxpY2l0bHkgcHJvdmlkZWQgYnkgdXNlcgogIGlmIFsgLXogIiR7T1BFTkNPREVfTE9HX0xFVkVMOi19IiBdOyB0aGVuCiAgICBPUEVOQ09ERV9MT0dfTEVWRUw9IkRFQlVHIgogIGZpCmZpCgpBVFRFTVBUPTEKU1VDQ0VTUz0wCk9QRU5DT0RFX0VYSVQ9MQpMQVNUX01FU1NBR0VfRklMRT0iIgpSVU5fTE9HPSIiCkNPTVBMRVRJT05fUkVBU09OPSIiCkxBU1RfQ09NUExFVElPTl9SRUFTT049IiIKTkVYVF9JVEVSQVRJT05fR1VJREFOQ0U9IiIKClNFU1NJT05fRElSPSIkSE9NRS8ub3BlbmNvZGUvc2Vzc2lvbnMiCkxBVEVTVF9TRVNTSU9OX0lEPSIiCgojIENpcmN1aXQgYnJlYWtlcjogdHJhY2sgcmVwZWF0ZWQgY29tbWFuZCBmYWlsdXJlcwpkZWNsYXJlIC1BIEZBSUxFRF9DT01NQU5EUwpNQVhfU0FNRV9DT01NQU5EX0ZBSUxVUkVTPTMKCiMgU2Vzc2lvbiBjb250aW51YXRpb246IHJldHJ5IHdpdGhpbiBzYW1lIHNlc3Npb24gd2hlbiBubyB0b29scyB1c2VkCk1BWF9DT05USU5VQVRJT05fUkVUUklFUz01CgojIEhlbHBlcjogQ2hlY2sgaWYgcmVzcG9uc2UgaGFkIGFueSB0b29sIGNhbGxzCmhhc190b29sX2NhbGxzKCkgewogIGxvY2FsIGxvZ19maWxlPSIkMSIKICBpZiBbICEgLWYgIiRsb2dfZmlsZSIgXTsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIAogICMgQ2hlY2sgZm9yIHRvb2xfdXNlIGV2ZW50cyBpbiB0aGUgSlNPTiBsb2cKICBpZiBncmVwIC1xICcidHlwZSI6InRvb2xfdXNlIicgIiRsb2dfZmlsZSIgMj4vZGV2L251bGw7IHRoZW4KICAgIHJldHVybiAwCiAgZmkKICByZXR1cm4gMQp9CgpoYXNfZXhpc3Rpbmdfc2Vzc2lvbnMoKSB7CiAgbG9jYWwgc2Vzc2lvbl9kaXI9IiQxIgogIGlmIFsgISAtZCAiJHNlc3Npb25fZGlyIiBdOyB0aGVuCiAgICByZXR1cm4gMQogIGZpCgogIGZvciBzZXNzaW9uX2ZpbGUgaW4gIiRzZXNzaW9uX2RpciIvKi5qc29uOyBkbwogICAgaWYgWyAtZiAiJHNlc3Npb25fZmlsZSIgXTsgdGhlbgogICAgICByZXR1cm4gMAogICAgZmkKICBkb25lCgogIHJldHVybiAxCn0KCmV4dHJhY3Rfc2Vzc2lvbl9pZCgpIHsKICBsb2NhbCBsb2dfZmlsZT0iJDEiCiAgWyAtZiAiJGxvZ19maWxlIiBdIHx8IHJldHVybiAxCiAgaWYgY29tbWFuZCAtdiBqcSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGpxIC1yICdzZWxlY3QoLnNlc3Npb25JRCAhPSBudWxsKSB8IC5zZXNzaW9uSUQnICIkbG9nX2ZpbGUiIDI+L2Rldi9udWxsIHwgdGFpbCAtbjEgfCB0ciAtZCAnXHInIHwgdHIgLWQgJ1xuJwogIGVsc2UKICAgIGF3ayAnCiAgICAgIHsKICAgICAgICBnc3ViKC9cMDMzXFtbMC05O10qW21LXS8sICIiKTsKICAgICAgICBpZiAoJDAgfiAvc2Vzc2lvbklEIltbOnNwYWNlOl1dKjpbWzpzcGFjZTpdXSoiWzAtOWEtZkEtRi1dezQsfS8pIHsKICAgICAgICAgIG1hdGNoKCQwLCAvc2Vzc2lvbklEIltbOnNwYWNlOl1dKjpbWzpzcGFjZTpdXSoiKFswLTlhLWZBLUYtXSspLywgYSk7CiAgICAgICAgICBpZiAoYVsxXSAhPSAiIikgbGFzdD1hWzFdOwogICAgICAgIH0gZWxzZSBpZiAoJDAgfiAvb3BlbmNvZGUgc2Vzc2lvbltbOnNwYWNlOl1dK1swLTlhLWZBLUYtXXs0LH0vKSB7CiAgICAgICAgICBtYXRjaCgkMCwgL29wZW5jb2RlIHNlc3Npb25bWzpzcGFjZTpdXSsoWzAtOWEtZkEtRi1dKykvLCBhKTsKICAgICAgICAgIGlmIChhWzFdICE9ICIiKSBsYXN0PWFbMV07CiAgICAgICAgfQogICAgICB9CiAgICAgIEVORCB7CiAgICAgICAgaWYgKGxhc3QgIT0gIiIpIHByaW50IGxhc3Q7CiAgICAgIH0KICAgICcgIiRsb2dfZmlsZSIgMj4vZGV2L251bGwKICBmaQp9CgpwcmludF9hdHRlbXB0X2Jhbm5lcigpIHsKICBsb2NhbCBhdHRlbXB0PSIkMSIKICBsb2NhbCBtYXg9IiQyIgogIGxvY2FsIHVubGltaXRlZD0iJDMiCiAgbG9jYWwgYm9yZGVyPSLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCiAgbG9jYWwgbGFiZWwKCiAgaWYgWyAiJHVubGltaXRlZCIgPSAiMSIgXTsgdGhlbgogICAgbGFiZWw9IuKVkSDwn5qAIEVYRUNVVElPTiBBVFRFTVBUICMke2F0dGVtcHR9IChVTkxJTUlURUQgTU9ERSkiCiAgZWxpZiBbIC1uICIkbWF4IiBdICYmIFsgIiRtYXgiIC1ndCAwIF07IHRoZW4KICAgIGxhYmVsPSLilZEg8J+agCBFWEVDVVRJT04gQVRURU1QVCAke2F0dGVtcHR9IC8gJHttYXh9IgogIGVsc2UKICAgIGxhYmVsPSLilZEg8J+agCBFWEVDVVRJT04gQVRURU1QVCAjJHthdHRlbXB0fSIKICBmaQoKICBsb2NhbCBiYXNlX3BhZGRpbmc9JCgoICR7I2JvcmRlcn0gLSAkeyNsYWJlbH0gLSAxICkpCiAgbG9jYWwgZXh0cmFfd2lkdGg9MAoKICBpZiBbWyAiJGxhYmVsIiA9PSAqIvCfmoAiKiBdXTsgdGhlbgogICAgZXh0cmFfd2lkdGg9JCgoZXh0cmFfd2lkdGggKyAxKSkKICBmaQoKICBsb2NhbCBwYWRkaW5nPSQoKGJhc2VfcGFkZGluZyAtIGV4dHJhX3dpZHRoKSkKICBpZiBbICRwYWRkaW5nIC1sdCAwIF07IHRoZW4KICAgIHBhZGRpbmc9MAogIGZpCgogIGVjaG8gIiIKICBlY2hvICIkYm9yZGVyIgogIHByaW50ZiAnJXMlKnPilZFcbicgIiRsYWJlbCIgIiRwYWRkaW5nIiAiIgogIGVjaG8gIiRib3JkZXIiCiAgZWNobyAiIgp9CgppZiBbICIkQ09OVElOVUVfU0VTU0lPTiIgPSAiMSIgXTsgdGhlbgogIGlmICEgaGFzX2V4aXN0aW5nX3Nlc3Npb25zICIkU0VTU0lPTl9ESVIiOyB0aGVuCiAgICBlY2hvICLihLnvuI8gTm8gZXhpc3RpbmcgT3BlbkNvZGUgc2Vzc2lvbnMgZGV0ZWN0ZWQ7IHN0YXJ0aW5nIG5ldyBzZXNzaW9uIgogICAgQ09OVElOVUVfU0VTU0lPTj0wCiAgZmkKZmkKCndyaXRlX2xhc3RfbWVzc2FnZSgpIHsKICBsb2NhbCBsb2dfZmlsZT0iJDEiCiAgbG9jYWwgZGVzdF9maWxlPSIkMiIKICBbIC1mICIkbG9nX2ZpbGUiIF0gfHwgcmV0dXJuIDEKCiAgaWYgY29tbWFuZCAtdiBqcSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGxvY2FsIGxhc3RfdGV4dAogICAgbGFzdF90ZXh0PSQoanEgLXIgJwogICAgICBzZWxlY3QoLnR5cGUgPT0gInRleHQiKQogICAgICB8IChpZiAoLnRleHQgfCB0eXBlKSA9PSAib2JqZWN0IiB0aGVuIC50ZXh0LnRleHQKICAgICAgICAgZWxzZSBpZiAoLnBhcnQgfCB0eXBlKSA9PSAib2JqZWN0IiB0aGVuIC5wYXJ0LnRleHQKICAgICAgICAgZWxzZSAudGV4dCBlbmQpCiAgICAgIHwgc2VsZWN0KC4gIT0gbnVsbCBhbmQgLiAhPSAiIikKICAgICcgIiRsb2dfZmlsZSIgMj4vZGV2L251bGwgfCB0YWlsIC1uMSkKCiAgICBpZiBbIC1uICIkbGFzdF90ZXh0IiBdOyB0aGVuCiAgICAgIHByaW50ZiAnJXNcbicgIiRsYXN0X3RleHQiID4gIiRkZXN0X2ZpbGUiCiAgICAgIHJldHVybiAwCiAgICBmaQogIGZpCgogIHRhaWwgLW4gMTAwICIkbG9nX2ZpbGUiIDI+L2Rldi9udWxsID4gIiRkZXN0X2ZpbGUiCiAgcmV0dXJuIDAKfQoKaWYgWyAiJENPTlRJTlVFX1NFU1NJT04iID0gIjEiIF07IHRoZW4KICBlY2hvICLihLnvuI8gT3BlbkNvZGUgd2lsbCBhdHRlbXB0IHRvIGNvbnRpbnVlIHRoZSBtb3N0IHJlY2VudCBzZXNzaW9uIHdoZW4gYXZhaWxhYmxlLiIKZWxzZQogIGlmIFsgLWQgIiRTRVNTSU9OX0RJUiIgXTsgdGhlbgogICAgZmluZCAiJFNFU1NJT05fRElSIiAtbWF4ZGVwdGggMSAtdHlwZSBmIC1uYW1lICcqLmpzb24nIC1kZWxldGUgMj4vZGV2L251bGwgfHwgdHJ1ZQogIGZpCmZpCgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBNb2RlbCByb3RhdGlvbiBjb25maWd1cmF0aW9uCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpERUZBVUxUX01PREVMPSJ7e21vZGVsfX0iCk1PREVMX1JPVEFUSU9OPSgpCk1PREVMX1JPVEFUSU9OX0NPVU5UPTAKe3sjaWYgbW9kZWxfcm90YXRpb259fQpNT0RFTF9ST1RBVElPTj0oCnt7I2VhY2ggbW9kZWxfcm90YXRpb259fQoie3t0aGlzfX0iCnt7L2VhY2h9fQopCk1PREVMX1JPVEFUSU9OX0NPVU5UPSR7I01PREVMX1JPVEFUSU9OW0BdfQppZiBbICRNT0RFTF9ST1RBVElPTl9DT1VOVCAtZ3QgMCBdOyB0aGVuCiAgZWNobyAi8J+OryBNb2RlbCByb3RhdGlvbiBlbmFibGVkICgke01PREVMX1JPVEFUSU9OX0NPVU5UfSBtb2RlbHMpOiAke01PREVMX1JPVEFUSU9OWypdfSIKZmkKe3svaWZ9fQppZiBbIC16ICIkREVGQVVMVF9NT0RFTCIgXSAmJiBbICRNT0RFTF9ST1RBVElPTl9DT1VOVCAtZ3QgMCBdOyB0aGVuCiAgREVGQVVMVF9NT0RFTD0iJHtNT0RFTF9ST1RBVElPTlswXX0iCmZpCmlmIFsgLW4gIiRERUZBVUxUX01PREVMIiBdOyB0aGVuCiAgZWNobyAi8J+OryBEZWZhdWx0IG1vZGVsOiAkREVGQVVMVF9NT0RFTCIKZmkKCkNPTVBMRVRFRF9BVFRFTVBUUz0wCndoaWxlIFsgIiRVTkxJTUlURURfUkVUUklFUyIgPSAiMSIgXSB8fCBbICRBVFRFTVBUIC1sZSAkTUFYX1JFVFJJRVMgXTsgZG8KICBwcmludF9hdHRlbXB0X2Jhbm5lciAiJEFUVEVNUFQiICIkTUFYX1JFVFJJRVMiICIkVU5MSU1JVEVEX1JFVFJJRVMiCgogICMgQ2FsY3VsYXRlIHdoaWNoIG1vZGVsIHRvIHVzZSBmb3IgdGhpcyBhdHRlbXB0CiAgQ1VSUkVOVF9NT0RFTD0iJERFRkFVTFRfTU9ERUwiCiAgaWYgWyAkTU9ERUxfUk9UQVRJT05fQ09VTlQgLWd0IDAgXTsgdGhlbgogICAgTU9ERUxfSU5ERVg9JCgoKEFUVEVNUFQgLSAxKSAlIE1PREVMX1JPVEFUSU9OX0NPVU5UKSkKICAgIENVUlJFTlRfTU9ERUw9IiR7TU9ERUxfUk9UQVRJT05bJE1PREVMX0lOREVYXX0iCiAgZmkKICBpZiBbIC1uICIkQ1VSUkVOVF9NT0RFTCIgXTsgdGhlbgogICAgZWNobyAi8J+OryBBdHRlbXB0ICRBVFRFTVBUIHdpbGwgdXNlIG1vZGVsOiAkQ1VSUkVOVF9NT0RFTCIKICAgIAogICAgIyBVcGRhdGUgb3BlbmNvZGUgY29uZmlnIHdpdGggY3VycmVudCBtb2RlbCAoZm9ybWF0OiBwcm92aWRlci9tb2RlbCkKICAgIGlmIFsgLWYgIiRIT01FLy5vcGVuY29kZS9jb25maWcuanNvbiIgXTsgdGhlbgogICAgICBqcSAtLWFyZyBtb2RlbCAiJENVUlJFTlRfTU9ERUwiICcubW9kZWwgPSAkbW9kZWwnICIkSE9NRS8ub3BlbmNvZGUvY29uZmlnLmpzb24iID4gL3RtcC9vcGVuY29kZS1jb25maWctcm90YXRlZC5qc29uICYmIFwKICAgICAgbXYgL3RtcC9vcGVuY29kZS1jb25maWctcm90YXRlZC5qc29uICIkSE9NRS8ub3BlbmNvZGUvY29uZmlnLmpzb24iCiAgICBmaQogIGZpCgogICMgQWx3YXlzIHJlZnJlc2ggdGhlIEdpdEh1YiB0b2tlbiBiZWZvcmUgc3RhcnRpbmcgYSBuZXcgaXRlcmF0aW9uIHRvIGF2b2lkIGNyZWRlbnRpYWwgZXhwaXJ5CiAgcmVmcmVzaF9naXRodWJfdG9rZW4gfHwgdHJ1ZQoKICBDVVJSRU5UX0FUVEVNUFQ9JEFUVEVNUFQKICBMQVNUX01FU1NBR0VfRklMRT0iL3RtcC9vcGVuY29kZS1sYXN0LW1lc3NhZ2UtJHtBVFRFTVBUfS50eHQiCiAgUlVOX0xPRz0iL3RtcC9vcGVuY29kZS1ydW4tJHtBVFRFTVBUfS5qc29ubCIKCiAgaWYgWyAiJFJFU0VUX1NFU1NJT05fT05fUkVUUlkiID0gIjEiIF0gJiYgWyAiJENPTlRJTlVFX1NFU1NJT04iICE9ICIxIiBdICYmIFsgJEFUVEVNUFQgLWd0IDEgXSAmJiBbIC1kICIkU0VTU0lPTl9ESVIiIF07IHRoZW4KICAgIGZpbmQgIiRTRVNTSU9OX0RJUiIgLW1heGRlcHRoIDEgLXR5cGUgZiAtbmFtZSAnKi5qc29uJyAtZGVsZXRlIDI+L2Rldi9udWxsIHx8IHRydWUKICBmaQoKICAjIElubmVyIGNvbnRpbnVhdGlvbiBsb29wIGNvdW50ZXIKICBDT05USU5VQVRJT05fQVRURU1QVD0wCgogIGlmIFsgJEFUVEVNUFQgLWVxIDEgXTsgdGhlbgogICAgUFJPTVBUX1BBWUxPQUQ9IiRPUklHSU5BTF9QUk9NUFQiCiAgZWxzZQogICAgaWYgWyAtbiAiJFBSRVZJT1VTX01FU1NBR0VfRklMRSIgXSAmJiBbIC1zICIkUFJFVklPVVNfTUVTU0FHRV9GSUxFIiBdOyB0aGVuCiAgICAgIFBSRVZJT1VTX1NOSVBQRVQ9JCh0YWlsIC1uIDQwICIkUFJFVklPVVNfTUVTU0FHRV9GSUxFIiAyPi9kZXYvbnVsbCB8IHNlZCAncy9eLyAgICAvJykKICAgIGVsc2UKICAgICAgUFJFVklPVVNfU05JUFBFVD0iICAgIDxubyBwcmV2aW91cyBvdXRwdXQgYXZhaWxhYmxlPiIKICAgIGZpCiAgICBQUk9NUFRfUEFZTE9BRD0iIyMgQ29udGludWF0aW9uIC0gQXR0ZW1wdCAkQVRURU1QVC8kTUFYX1JFVFJJRVMKClRoZSB0YXNrIGlzbid0IGNvbXBsZXRlIHlldC4gSGVyZSdzIHdoYXQgeW91IHNhaWQgbGFzdCB0aW1lOgoKJFBSRVZJT1VTX1NOSVBQRVQKCioqTmV4dCBzdGVwczoqKgoxLiBSZXZpZXcgQHRhc2svYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCB0byBzZWUgd2hhdCdzIHN0aWxsIG1pc3NpbmcKMi4gSW1wbGVtZW50IHRoZSByZW1haW5pbmcgcmVxdWlyZW1lbnRzCjMuIENvbW1pdCB5b3VyIGNoYW5nZXMgYW5kIHB1c2gKNC4gVmVyaWZ5IGFsbCBhY2NlcHRhbmNlIGNyaXRlcmlhIGFyZSBtZXQKCkNvbnRpbnVlIHdvcmtpbmcgb24gdGhlIGluY29tcGxldGUgaXRlbXMuIgogICAgaWYgWyAtbiAiJE5FWFRfSVRFUkFUSU9OX0dVSURBTkNFIiBdOyB0aGVuCiAgICAgIFBST01QVF9QQVlMT0FEPSIke1BST01QVF9QQVlMT0FEfQoKJHtORVhUX0lURVJBVElPTl9HVUlEQU5DRX0iCiAgICBmaQogIGZpCgogICMgSW5uZXIgbG9vcDoga2VlcCBzZXNzaW9uIGFsaXZlIHdoZW4gbW9kZWwgcmV0dXJucyB0ZXh0LW9ubHkgKG5vIHRvb2xzKQogIHdoaWxlIFsgJENPTlRJTlVBVElPTl9BVFRFTVBUIC1sZSAkTUFYX0NPTlRJTlVBVElPTl9SRVRSSUVTIF07IGRvCiAgICBpZiBbICRDT05USU5VQVRJT05fQVRURU1QVCAtZ3QgMCBdOyB0aGVuCiAgICAgIGVjaG8gIvCflIQgQ29udGludWF0aW9uICRDT05USU5VQVRJT05fQVRURU1QVC8kTUFYX0NPTlRJTlVBVElPTl9SRVRSSUVTIChrZWVwaW5nIHNlc3Npb24gYWxpdmUpIgogICAgICBQUk9NUFRfUEFZTE9BRD0iVGhlIHRhc2sgaXMgbm90IGNvbXBsZXRlIHlldC4gKipVc2UgdG9vbHMqKiB0byBjb250aW51ZSB3b3JraW5nIG9uIHRoZSByZW1haW5pbmcgcmVxdWlyZW1lbnRzLgoKUmVtYWluaW5nIHdvcms6Ci0gUmV2aWV3IGFjY2VwdGFuY2UgY3JpdGVyaWE6IFxgY2F0IHRhc2svYWNjZXB0YW5jZS1jcml0ZXJpYS5tZFxgICAKLSBDaGVjayB3aGF0J3MgYmVlbiBkb25lOiBcYGdpdCBzdGF0dXNcYCBhbmQgXGBnaXQgbG9nXGAKLSBGaXggYW55IGVycm9ycyBvciBpbmNvbXBsZXRlIGltcGxlbWVudGF0aW9ucwotIFJ1biBxdWFsaXR5IGdhdGVzIChjYXJnbyBmbXQsIGNhcmdvIGNsaXBweSwgY2FyZ28gdGVzdCkKLSBDb21taXQgYW5kIHB1c2ggY2hhbmdlcwotIENyZWF0ZSBvciB1cGRhdGUgUFIKCioqSW1wb3J0YW50OioqIERvIG5vdCBqdXN0IGV4cGxhaW4gLSB0YWtlIGFjdGlvbiB3aXRoIHRvb2xzIHRvIGNvbXBsZXRlIHRoZSB0YXNrLiIKICAgICAgaWYgWyAtbiAiJE5FWFRfSVRFUkFUSU9OX0dVSURBTkNFIiBdOyB0aGVuCiAgICAgICAgUFJPTVBUX1BBWUxPQUQ9IiR7UFJPTVBUX1BBWUxPQUR9Cgoke05FWFRfSVRFUkFUSU9OX0dVSURBTkNFfSIKICAgICAgZmkKICAgICAgUlVOX0xPRz0iL3RtcC9vcGVuY29kZS1ydW4tJHtBVFRFTVBUfS1jb250JHtDT05USU5VQVRJT05fQVRURU1QVH0uanNvbmwiCiAgICBmaQogICAgCiAgICBzZXQgK2UKICAgIHNldCAtbyBwaXBlZmFpbAogICAgIyBXcml0ZSBwcm9tcHQgdG8gdGVtcCBmaWxlIHRvIGF2b2lkICJBcmd1bWVudCBsaXN0IHRvbyBsb25nIiBlcnJvcgogICAgUFJPTVBUX0ZJTEU9Ii90bXAvb3BlbmNvZGUtcHJvbXB0LSR7QVRURU1QVH0tJHtDT05USU5VQVRJT05fQVRURU1QVH0udHh0IgogICAgcHJpbnRmICclcycgIiRQUk9NUFRfUEFZTE9BRCIgPiAiJFBST01QVF9GSUxFIgogICAgCiAgICBPUEVOQ09ERV9DTUQ9KAogICAgICAib3BlbmNvZGUiCiAgICAgICJydW4iCiAgICAgICItLWZvcm1hdCIKICAgICAgIiRPUEVOQ09ERV9GT1JNQVQiCiAgICAgICItLWxvZy1sZXZlbCIKICAgICAgIiRPUEVOQ09ERV9MT0dfTEVWRUwiCiAgICApCiAgICBpZiBbICIkQ09OVElOVUVfU0VTU0lPTiIgPSAiMSIgXTsgdGhlbgogICAgICBpZiBbIC1uICIkTEFURVNUX1NFU1NJT05fSUQiIF07IHRoZW4KICAgICAgICBPUEVOQ09ERV9DTUQrPSgiLS1zZXNzaW9uIiAiJExBVEVTVF9TRVNTSU9OX0lEIikKICAgICAgZWxzZQogICAgICAgIE9QRU5DT0RFX0NNRCs9KCItLWNvbnRpbnVlIikKICAgICAgZmkKICAgIGZpCiAgICAKICAgICMgUGFzcyBwcm9tcHQgdmlhIHN0ZGluIHRvIGhhbmRsZSBsYXJnZSBwcm9tcHRzCiAgICBpZiBjb21tYW5kIC12IHRpbWVvdXQgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgIHRpbWVvdXQgIiRPUEVOQ09ERV9USU1FT1VUIiAiJHtPUEVOQ09ERV9DTURbQF19IiA8ICIkUFJPTVBUX0ZJTEUiIHwgdGVlICIkUlVOX0xPRyIKICAgIGVsc2UKICAgICAgIiR7T1BFTkNPREVfQ01EW0BdfSIgPCAiJFBST01QVF9GSUxFIiB8IHRlZSAiJFJVTl9MT0ciCiAgICBmaQogICAgT1BFTkNPREVfRVhJVD0ke1BJUEVTVEFUVVNbMF19CiAgICBzZXQgK28gcGlwZWZhaWwKICAgIHNldCAtZQogICAgCiAgICAjIENsZWFuIHVwIHByb21wdCBmaWxlCiAgICBybSAtZiAiJFBST01QVF9GSUxFIgogICAgCiAgICAjIENoZWNrIGlmIHRoaXMgcnVuIGhhZCB0b29sIGNhbGxzCiAgICBpZiBoYXNfdG9vbF9jYWxscyAiJFJVTl9MT0ciOyB0aGVuCiAgICAgIGVjaG8gIuKchSBTZXNzaW9uIHByb2R1Y2VkIHRvb2wgY2FsbHMgLSBnb29kIHByb2dyZXNzIgogICAgICBicmVhawogICAgZWxzZQogICAgICBlY2hvICLimqDvuI8gTm8gdG9vbCBjYWxscyBkZXRlY3RlZCAtIG1vZGVsIHN0dWNrIGluIGV4cGxhbmF0aW9uIG1vZGUiCiAgICAgIGlmIFsgJENPTlRJTlVBVElPTl9BVFRFTVBUIC1nZSAkTUFYX0NPTlRJTlVBVElPTl9SRVRSSUVTIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgTWF4IGNvbnRpbnVhdGlvbiByZXRyaWVzIHJlYWNoZWQgLSBtb3ZpbmcgdG8gbmV4dCBhdHRlbXB0IgogICAgICAgIGJyZWFrCiAgICAgIGZpCiAgICBmaQogICAgCiAgICBDT05USU5VQVRJT05fQVRURU1QVD0kKChDT05USU5VQVRJT05fQVRURU1QVCArIDEpKQogIGRvbmUKCiAgaWYgWyAkT1BFTkNPREVfRVhJVCAtZXEgMTI0IF07IHRoZW4KICAgIGVjaG8gIuKPse+4jyBPcGVuQ29kZSBjb21tYW5kIGV4Y2VlZGVkICR7T1BFTkNPREVfVElNRU9VVH1zIHRpbWVvdXQ7IHRlcm1pbmF0aW5nIHNlc3Npb24iCiAgICBwa2lsbCAtZiAib3BlbmNvZGUiIDI+L2Rldi9udWxsIHx8IHRydWUKICAgIFBSRVZJT1VTX01FU1NBR0VfRklMRT0iJExBU1RfTUVTU0FHRV9GSUxFIgogICAgQ09NUExFVEVEX0FUVEVNUFRTPSRDVVJSRU5UX0FUVEVNUFQKICAgIEFUVEVNUFQ9JCgoQVRURU1QVCArIDEpKQogICAgY29udGludWUKICBmaQoKICBlY2hvICJbb3BlbmNvZGUtZGVidWddIEF0dGVtcHQgJEFUVEVNUFQgZmluaXNoZWQgd2l0aCBleGl0IGNvZGUgJE9QRU5DT0RFX0VYSVQiCgogIGlmIFsgJE9QRU5DT0RFX0VYSVQgLW5lIDAgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIE9wZW5Db2RlIGV4aXRlZCB3aXRoIHN0YXR1cyAkT1BFTkNPREVfRVhJVCBvbiBhdHRlbXB0ICRBVFRFTVBUIgogIGZpCgogICMgQ2lyY3VpdCBicmVha2VyOiBkZXRlY3QgcmVwZWF0ZWQgZmFpbGluZyBiYXNoIGNvbW1hbmRzCiAgaWYgWyAtZiAiJFJVTl9MT0ciIF07IHRoZW4KICAgICMgRXh0cmFjdCBmYWlsZWQgYmFzaCBjb21tYW5kcyBmcm9tIHRoZSBsb2cKICAgIEZBSUxFRF9DTUQ9JChqcSAtciAnc2VsZWN0KC50eXBlPT0idG9vbF91c2UiIGFuZCAucGFydC50b29sPT0iYmFzaCIgYW5kIC5wYXJ0LnN0YXRlLnN0YXR1cz09ImNvbXBsZXRlZCIgYW5kIC5wYXJ0LnN0YXRlLm1ldGFkYXRhLmV4aXQhPTApIHwgLnBhcnQuc3RhdGUuaW5wdXQuY29tbWFuZCcgIiRSVU5fTE9HIiAyPi9kZXYvbnVsbCB8IHRhaWwgLW4xIHwgaGVhZCAtYyAxMDApCiAgICAKICAgIGlmIFsgLW4gIiRGQUlMRURfQ01EIiBdOyB0aGVuCiAgICAgICMgVHJhY2sgaG93IG1hbnkgdGltZXMgdGhpcyBjb21tYW5kIGhhcyBmYWlsZWQKICAgICAgRkFJTEVEX0NPTU1BTkRTWyIkRkFJTEVEX0NNRCJdPSQoKCR7RkFJTEVEX0NPTU1BTkRTWyIkRkFJTEVEX0NNRCJdOi0wfSArIDEpKQogICAgICBGQUlMX0NPVU5UPSR7RkFJTEVEX0NPTU1BTkRTWyIkRkFJTEVEX0NNRCJdfQogICAgICAKICAgICAgaWYgWyAkRkFJTF9DT1VOVCAtZ2UgJE1BWF9TQU1FX0NPTU1BTkRfRkFJTFVSRVMgXTsgdGhlbgogICAgICAgIGVjaG8gIvCflLQgQ0lSQ1VJVCBCUkVBS0VSIFRSSUdHRVJFRDogQ29tbWFuZCBoYXMgZmFpbGVkICRGQUlMX0NPVU5UIHRpbWVzIGluIGEgcm93OiIKICAgICAgICBlY2hvICIgICBDb21tYW5kOiAkRkFJTEVEX0NNRCIKICAgICAgICBlY2hvICIgICBUaGlzIGluZGljYXRlcyB0aGUgYWdlbnQgaXMgc3R1Y2sgaW4gYSBsb29wLiBBZGRpbmcgZXhwbGljaXQgZ3VpZGFuY2UuLi4iCiAgICAgICAgCiAgICAgICAgIyBGb3JjZSBhIHN0cm9uZ2VyIHByb21wdCBmb3IgbmV4dCByZXRyeQogICAgICAgIFBST01QVF9QQVlMT0FEPSLimqDvuI8gKipMT09QIERFVEVDVEVEKio6IFlvdSBoYXZlIHRyaWVkIHRoaXMgY29tbWFuZCAkRkFJTF9DT1VOVCB0aW1lczoKXGBcYFxgYmFzaAokRkFJTEVEX0NNRApcYFxgXGAKCkl0IGtlZXBzIGZhaWxpbmcgd2l0aCB0aGUgc2FtZSBlcnJvci4gKipTVE9QIFJFUEVBVElORyBUSElTIENPTU1BTkQuKioKCkluc3RlYWQ6CjEuIENoZWNrIHlvdXIgd29ya2luZyBkaXJlY3Rvcnkgd2l0aCBcYHB3ZFxgCjIuIExpc3QgZmlsZXMgd2l0aCBcYGxzIC1sYVxgCjMuIFRyeSBhIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFwcHJvYWNoIChjcmVhdGUgZmlsZXMgb25lIGF0IGEgdGltZSwgdXNlIGRpZmZlcmVudCBzeW50YXgsIGV0Yy4pCjQuIElmIGRpcmVjdG9yaWVzIGRvbid0IGV4aXN0LCBjcmVhdGUgdGhlbSBzdGVwLWJ5LXN0ZXAgYW5kIHZlcmlmeSBlYWNoIHN0ZXAKCkNvbnRpbnVpbmcgVGFzayB7e3Rhc2tfaWR9fSAtIGZvY3VzIG9uIHNvbHZpbmcgdGhlIHVuZGVybHlpbmcgaXNzdWUsIG5vdCByZXBlYXRpbmcgdGhlIHNhbWUgZmFpbGVkIGNvbW1hbmQuIgogICAgICAgIAogICAgICAgICMgUmVzZXQgdGhlIGNvdW50ZXIgdG8gZ2l2ZSBpdCBhIGZyZXNoIGNoYW5jZSB3aXRoIG5ldyBndWlkYW5jZQogICAgICAgIEZBSUxFRF9DT01NQU5EU1siJEZBSUxFRF9DTUQiXT0wCiAgICAgIGZpCiAgICBmaQogIGZpCgogIHdyaXRlX2xhc3RfbWVzc2FnZSAiJFJVTl9MT0ciICIkTEFTVF9NRVNTQUdFX0ZJTEUiIHx8IHRydWUKCiAgaWYgWyAtcyAiJExBU1RfTUVTU0FHRV9GSUxFIiBdOyB0aGVuCiAgICBlY2hvICLwn5OdIE9wZW5Db2RlIHN1bW1hcnkgKGF0dGVtcHQgJEFUVEVNUFQpOiIKICAgIHNlZCAncy9eLyAgICAvJyAiJExBU1RfTUVTU0FHRV9GSUxFIgogIGVsc2UKICAgIGVjaG8gIuKEue+4jyBObyB0ZXh0dWFsIHN1bW1hcnkgY2FwdHVyZWQgZnJvbSBPcGVuQ29kZSBvbiBhdHRlbXB0ICRBVFRFTVBUIgogIGZpCgogIE5FV19TRVNTSU9OX0lEPSIiCiAgaWYgWyAtbiAiJFJVTl9MT0ciIF0gJiYgWyAtZiAiJFJVTl9MT0ciIF07IHRoZW4KICAgIE5FV19TRVNTSU9OX0lEPSQoZXh0cmFjdF9zZXNzaW9uX2lkICIkUlVOX0xPRyIgfHwgdHJ1ZSkKICBmaQogIGlmIFsgLW4gIiRORVdfU0VTU0lPTl9JRCIgXTsgdGhlbgogICAgaWYgWyAiJExBVEVTVF9TRVNTSU9OX0lEIiAhPSAiJE5FV19TRVNTSU9OX0lEIiBdOyB0aGVuCiAgICAgIGVjaG8gIuKEue+4jyAgQ2FwdHVyZWQgT3BlbkNvZGUgc2Vzc2lvbiBJRDogJE5FV19TRVNTSU9OX0lEIgogICAgICBMQVRFU1RfU0VTU0lPTl9JRD0iJE5FV19TRVNTSU9OX0lEIgogICAgZmkKICAgIENPTlRJTlVFX1NFU1NJT049MQogIGZpCgogIFBSRVZJT1VTX01FU1NBR0VfRklMRT0iJExBU1RfTUVTU0FHRV9GSUxFIgoKICBpZiBbICIke1RPS0VOX0xJTUlUOi0wfSIgLWd0IDAgXSAmJiBbIC1mICIkUlVOX0xPRyIgXTsgdGhlbgogICAgTEFTVF9UT0tFTlM9JChncmVwIC1FbyAndG9rZW5zIHVzZWQ6IFswLTksXSsnICIkUlVOX0xPRyIgMj4vZGV2L251bGwgfCB0YWlsIC1uMSB8IGF3ayAne3ByaW50ICQzfScgfCB0ciAtZCAnLCcgfCB0ciAtZCAnXG4nIHx8IHRydWUpCiAgICBpZiBbWyAiJExBU1RfVE9LRU5TIiA9fiBeWzAtOV0rJCBdXTsgdGhlbgogICAgICBlY2hvICLwn5OKIE9wZW5Db2RlIHRva2VucyB1c2VkIHRoaXMgYXR0ZW1wdDogJExBU1RfVE9LRU5TIgogICAgICBpZiBbICIkTEFTVF9UT0tFTlMiIC1ndCAiJFRPS0VOX0xJTUlUIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4pqg77iPIFRva2VuIHVzYWdlICRMQVNUX1RPS0VOUyBleGNlZWRzIGxpbWl0ICRUT0tFTl9MSU1JVDsgZm9yY2luZyBjbGVhbiBzZXNzaW9uIGJlZm9yZSByZXRyeSIKICAgICAgICBpZiBbIC1kICIkU0VTU0lPTl9ESVIiIF07IHRoZW4KICAgICAgICAgIGZpbmQgIiRTRVNTSU9OX0RJUiIgLW1heGRlcHRoIDEgLXR5cGUgZiAtbmFtZSAnKi5qc29uJyAtZGVsZXRlIDI+L2Rldi9udWxsIHx8IHRydWUKICAgICAgICBmaQogICAgICAgIFBSRVZJT1VTX01FU1NBR0VfRklMRT0iJExBU1RfTUVTU0FHRV9GSUxFIgogICAgICAgIENPTVBMRVRFRF9BVFRFTVBUUz0kQ1VSUkVOVF9BVFRFTVBUCiAgICAgICAgQVRURU1QVD0kKChBVFRFTVBUICsgMSkpCiAgICAgICAgY29udGludWUKICAgICAgZmkKICAgIGZpCiAgZmkKCiAgQ09NUExFVElPTl9SRUFTT049IiIKICAjIFJleC1zcGVjaWZpYyBjb21wbGV0aW9uIGNyaXRlcmlhIChpbXBsZW1lbnRhdGlvbi1mb2N1c2VkLCBub3QgcXVhbGl0eS1mb2N1c2VkKQogIGlmIFtbICJ7e2dpdGh1Yl9hcHB9fSIgPT0gKiJSZXgiKiBdXSB8fCBbWyAie3tnaXRodWJfYXBwfX0iID09ICoicmV4IiogXV07IHRoZW4KICAgIENPTVBMRVRJT05fUFJPTVBUPSJUYXNrIHt7dGFza19pZH19IGNvbXBsZXRpb24gdmVyaWZpY2F0aW9uIOKAlCBSZXggSW1wbGVtZW50YXRpb24gQWdlbnQKCioqWW91ciBSb2xlKio6IFlvdSBhcmUgUmV4LCB0aGUgSU1QTEVNRU5UQVRJT04gYWdlbnQuIENsZW8gd2lsbCBoYW5kbGUgY29kZSBxdWFsaXR5IGluIHRoZSBuZXh0IHN0YWdlLgoKKipGSVJTVCoqOiBSZXZpZXcgdGhlIEZVTkNUSU9OQUwgcmVxdWlyZW1lbnRzIGluIHRhc2svYWNjZXB0YW5jZS1jcml0ZXJpYS5tZAoKKipUaGVuIGFuc3dlciAneWVzJyBpZiBBTEwgb2YgdGhlc2UgYXJlIHRydWU6KioKCjEuICoqRlVOQ1RJT05BTCBhY2NlcHRhbmNlIGNyaXRlcmlhIGltcGxlbWVudGVkKiogKGZlYXR1cmVzIGV4aXN0IGFuZCBiYXNpY2FsbHkgd29yaykKMi4gQ29kZSBDT01QSUxFUyBzdWNjZXNzZnVsbHkgKFxgY2FyZ28gYnVpbGRcYCBwYXNzZXMpCjMuIEFsbCBjb2RlIGNoYW5nZXMgYXJlIGNvbW1pdHRlZCB0byBnaXQKNC4gQ2hhbmdlcyBhcmUgcHVzaGVkIHRvIHJlbW90ZSBicmFuY2ggZmVhdHVyZS90YXNrLXt7dGFza19pZH19LWltcGxlbWVudGF0aW9uCgoqKkNvZGUgcXVhbGl0eSBpc3N1ZXMgYXJlIE9LIGZvciBSZXggLSBDbGVvIHdpbGwgZml4OioqCi0g4pqg77iPIENsaXBweSB3YXJuaW5ncz8gT0sgLSBDbGVvIHdpbGwgZml4Ci0g4pqg77iPIEZvcm1hdHRpbmcgaXNzdWVzPyBPSyAtIENsZW8gd2lsbCBmaXggIAotIOKaoO+4jyBTb21lIHRlc3RzIGZhaWxpbmc/IE9LIGlmIGJhc2ljIGZ1bmN0aW9uYWxpdHkgd29ya3MgLSBDbGVvL1Rlc3Mgd2lsbCBmaXgKLSDimqDvuI8gVW51c2VkIGZ1bmN0aW9ucy92YXJpYWJsZXM/IE9LIC0gQ2xlbyB3aWxsIGNsZWFuIHVwCgoqKkZvY3VzIG9uKio6IERvZXMgdGhlIGltcGxlbWVudGF0aW9uIHdvcms/IEFyZSB0aGUgZmVhdHVyZXMgdGhlcmU/CgoqKlJlc3BvbnNlIGZvcm1hdDoqKgoKSWYgZnVuY3Rpb25hbGx5IGNvbXBsZXRlIChmZWF0dXJlcyB3b3JrLCBjb2RlIGNvbXBpbGVzLCBQUiBjcmVhdGVkKSwgcmVzcG9uZCB3aXRoOiB5ZXMKCklmIGZlYXR1cmVzIGluY29tcGxldGUgb3IgY29kZSBkb2Vzbid0IGNvbXBpbGUsIHJlc3BvbmQgd2l0aDoKbm8KUkVBU09OOiA8c3BlY2lmaWMgRlVOQ1RJT05BTCBpc3N1ZT4KCkV4YW1wbGUgJ3llcycgcmVzcG9uc2UgKGV2ZW4gd2l0aCB3YXJuaW5ncyk6CnllcwoKRXhhbXBsZSAnbm8nIHJlc3BvbnNlOgpubwpSRUFTT046IEFjY2VwdGFuY2UgY3JpdGVyaWEgMiBpbmNvbXBsZXRlIC0gaGVhbHRoIGVuZHBvaW50IG5vdCB5ZXQgaW1wbGVtZW50ZWQuIEZlYXR1cmUgd29yayByZW1haW5zLgoKWW91ciByZXNwb25zZToiCiAgZWxzZQogICAgIyBEZWZhdWx0IGNvbXBsZXRpb24gcHJvbXB0IGZvciBvdGhlciBhZ2VudHMgKENsZW8sIFRlc3MpCiAgICBDT01QTEVUSU9OX1BST01QVD0iVGFzayB7e3Rhc2tfaWR9fSBjb21wbGV0aW9uIHZlcmlmaWNhdGlvbi4KCioqRklSU1QqKjogUmV2aWV3IHRoZSBhY2NlcHRhbmNlIGNyaXRlcmlhIGluIHRhc2svYWNjZXB0YW5jZS1jcml0ZXJpYS5tZAoKKipUaGVuIGFuc3dlciAneWVzJyBPTkxZIGlmIEFMTCBvZiB0aGVzZSBhcmUgdHJ1ZToqKgoKMS4gKipFVkVSWSBhY2NlcHRhbmNlIGNyaXRlcmlvbiBpcyBmdWxseSBpbXBsZW1lbnRlZCoqIChub3QganVzdCBzdGFydGVkLCBidXQgRE9ORSkKMi4gQWxsIGNvZGUgY2hhbmdlcyBhcmUgY29tbWl0dGVkIHRvIGdpdAozLiBDaGFuZ2VzIGFyZSBwdXNoZWQgdG8gcmVtb3RlIGJyYW5jaCBmZWF0dXJlL3Rhc2ste3t0YXNrX2lkfX0taW1wbGVtZW50YXRpb24KNC4gQSBwdWxsIHJlcXVlc3QgZXhpc3RzICh3aXRoIGF0IGxlYXN0IHRhc2ste3t0YXNrX2lkfX0gbGFiZWw7IG90aGVyIGxhYmVscyBhcmUgb3B0aW9uYWwpCjUuIFF1YWxpdHkgZ2F0ZXMgcGFzc2VkIChjYXJnbyBmbXQsIGNhcmdvIGNsaXBweSB3aXRoIG5vIHdhcm5pbmdzLCB0ZXN0cyBwYXNzKQoKKipCZSBob25lc3QqKjogSWYgQU5ZIGFjY2VwdGFuY2UgY3JpdGVyaW9uIGlzIGluY29tcGxldGUgb3IgcGFydGlhbGx5IGltcGxlbWVudGVkLCBhbnN3ZXIgJ25vJyBhbmQgY29udGludWUgd29ya2luZy4KCioqVG8gdmVyaWZ5OioqCi0gUmV2aWV3OiBcYGNhdCB0YXNrL2FjY2VwdGFuY2UtY3JpdGVyaWEubWRcYAotIEdpdCBzdGF0dXM6IFxgZ2l0IHN0YXR1c1xgCi0gQ29tbWl0cyBwdXNoZWQ6IFxgZ2l0IGxvZyBvcmlnaW4vbWFpbi4uSEVBRFxgCi0gUFIgZXhpc3RzOiBcYGdoIHByIHZpZXdcYAotIFRlc3RzIHBhc3M6IENoZWNrIHlvdXIgdGVzdCByZXN1bHRzCgoqKlJlc3BvbnNlIGZvcm1hdDoqKgoKSWYgY29tcGxldGUsIHJlc3BvbmQgd2l0aDogeWVzCgpJZiBpbmNvbXBsZXRlLCByZXNwb25kIHdpdGg6Cm5vClJFQVNPTjogPHNwZWNpZmljIHJlYXNvbiB3aHkgbm90IGNvbXBsZXRlPgoKRm9yICdubycgcmVzcG9uc2VzLCBSRUFTT04gbXVzdCBzcGVjaWZ5OgotIFdoaWNoIGFjY2VwdGFuY2UgY3JpdGVyaWEgYXJlIGluY29tcGxldGUgKGxpc3QgdGhlbSBieSBudW1iZXIvbmFtZSkKLSBXaGF0IHNwZWNpZmljIHdvcmsgcmVtYWlucyAoYmUgY29uY3JldGUpCi0gQW55IGJsb2NrZXJzIG9yIGlzc3VlcyBlbmNvdW50ZXJlZAoKRXhhbXBsZSAnbm8nIHJlc3BvbnNlOgpubwpSRUFTT046IEFjY2VwdGFuY2UgY3JpdGVyaWEgMiBhbmQgNCBpbmNvbXBsZXRlLiBBUEkgZW5kcG9pbnQgL3VzZXJzIGNyZWF0ZWQgYnV0IG5vdCB5ZXQgY29ubmVjdGVkIHRvIGRhdGFiYXNlLiBQUiBjcmVhdGVkIGJ1dCB0ZXN0cyBmYWlsaW5nIGR1ZSB0byBtaXNzaW5nIGVycm9yIGhhbmRsaW5nIGluIHVzZXJfY29udHJvbGxlci5ycy4KCllvdXIgcmVzcG9uc2U6IgogIGZpCiAgQ09NUExFVElPTl9MQVNUX01FU1NBR0U9Ii90bXAvb3BlbmNvZGUtY29tcGxldGlvbi0ke0FUVEVNUFR9LnR4dCIKICBDT01QTEVUSU9OX0xPRz0iL3RtcC9vcGVuY29kZS1jb21wbGV0aW9uLSR7QVRURU1QVH0uanNvbmwiCgogIENPTVBMRVRJT05fUkVTUE9OU0U9IiIKICBpZiBbICIkQ09OVElOVUVfU0VTU0lPTiIgPSAiMSIgXTsgdGhlbgogICAgIyBXcml0ZSBjb21wbGV0aW9uIHByb21wdCB0byBmaWxlIChzYW1lIHBhdHRlcm4gYXMgbWFpbiBwcm9tcHQpCiAgICBDT01QTEVUSU9OX1BST01QVF9GSUxFPSIvdG1wL29wZW5jb2RlLWNvbXBsZXRpb24tcHJvbXB0LSR7QVRURU1QVH0udHh0IgogICAgcHJpbnRmICclcycgIiRDT01QTEVUSU9OX1BST01QVCIgPiAiJENPTVBMRVRJT05fUFJPTVBUX0ZJTEUiCiAgICAKICAgIHNldCArZQogICAgc2V0IC1vIHBpcGVmYWlsCiAgICBDT01QTEVUSU9OX0NNRD0oCiAgICAgICJvcGVuY29kZSIKICAgICAgInJ1biIKICAgICAgIi0tZm9ybWF0IgogICAgICAiJE9QRU5DT0RFX0ZPUk1BVCIKICAgICAgIi0tbG9nLWxldmVsIgogICAgICAiJE9QRU5DT0RFX0xPR19MRVZFTCIKICAgICkKICAgIGlmIFsgLW4gIiRMQVRFU1RfU0VTU0lPTl9JRCIgXTsgdGhlbgogICAgICBDT01QTEVUSU9OX0NNRCs9KCItLXNlc3Npb24iICIkTEFURVNUX1NFU1NJT05fSUQiKQogICAgZWxzZQogICAgICBDT01QTEVUSU9OX0NNRCs9KCItLWNvbnRpbnVlIikKICAgIGZpCiAgICAKICAgICMgUGFzcyBjb21wbGV0aW9uIHByb21wdCB2aWEgc3RkaW4KICAgICIke0NPTVBMRVRJT05fQ01EW0BdfSIgPCAiJENPTVBMRVRJT05fUFJPTVBUX0ZJTEUiIHwgdGVlICIkQ09NUExFVElPTl9MT0ciCiAgICBDT01QTEVUSU9OX0VYSVQ9JHtQSVBFU1RBVFVTWzBdfQogICAgc2V0ICtvIHBpcGVmYWlsCiAgICBzZXQgLWUKICAgIAogICAgIyBDbGVhbiB1cCBwcm9tcHQgZmlsZQogICAgcm0gLWYgIiRDT01QTEVUSU9OX1BST01QVF9GSUxFIgoKICAgIGlmIFsgJENPTVBMRVRJT05fRVhJVCAtbmUgMCBdOyB0aGVuCiAgICAgIGVjaG8gIuKaoO+4jyBDb21wbGV0aW9uIHByb2JlIGV4aXRlZCB3aXRoIHN0YXR1cyAkQ09NUExFVElPTl9FWElUIgogICAgZmkKCiAgICB3cml0ZV9sYXN0X21lc3NhZ2UgIiRDT01QTEVUSU9OX0xPRyIgIiRDT01QTEVUSU9OX0xBU1RfTUVTU0FHRSIgfHwgdHJ1ZQoKICAgIGVjaG8gIltvcGVuY29kZS1kZWJ1Z10gQ29tcGxldGlvbiBwcm9iZSBmb3IgYXR0ZW1wdCAkQVRURU1QVCBleGl0ZWQgJENPTVBMRVRJT05fRVhJVCIKCiAgICBpZiBbIC1zICIkQ09NUExFVElPTl9MQVNUX01FU1NBR0UiIF07IHRoZW4KICAgICAgQ09NUExFVElPTl9SRVNQT05TRV9SQVc9JCh0ciAtZCAnXHInIDwgIiRDT01QTEVUSU9OX0xBU1RfTUVTU0FHRSIpCiAgICAgIENPTVBMRVRJT05fUkVTUE9OU0U9JChwcmludGYgJyVzXG4nICIkQ09NUExFVElPTl9SRVNQT05TRV9SQVciIHwgdHIgJ1s6dXBwZXI6XScgJ1s6bG93ZXI6XScpCiAgICAgIGVjaG8gIvCfp64gQ29tcGxldGlvbiBwcm9iZSByZXNwb25zZTogJENPTVBMRVRJT05fUkVTUE9OU0UiCiAgICAgIAogICAgICAjIEV4dHJhY3QgcmVhc29uIGlmIHJlc3BvbnNlIGlzICdubycKICAgICAgaWYgcHJpbnRmICclc1xuJyAiJENPTVBMRVRJT05fUkVTUE9OU0UiIHwgZ3JlcCAtRXEgJ15ubyc7IHRoZW4KICAgICAgICBDT01QTEVUSU9OX1JFQVNPTj0kKHByaW50ZiAnJXNcbicgIiRDT01QTEVUSU9OX1JFU1BPTlNFX1JBVyIgfCBhd2sgJ0JFR0lOe0lHTk9SRUNBU0U9MX0vXnJlYXNvbjove3N1YigvXnJlYXNvbjpbWzpzcGFjZTpdXSovLCIiKTtmbGFnPTF9IGZsYWd7cHJpbnR9JykKICAgICAgICBpZiBbIC1uICIkQ09NUExFVElPTl9SRUFTT04iIF07IHRoZW4KICAgICAgICAgIGVjaG8gIvCfk4sgSW5jb21wbGV0aW9uIGRldGFpbHM6IgogICAgICAgICAgZWNobyAiJENPTVBMRVRJT05fUkVBU09OIgogICAgICAgICAgZWNobyAiIgogICAgICAgICAgZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgogICAgICAgICAgZWNobyAi4pWRIPCflIEgTkVYVCBJVEVSQVRJT04gRk9DVVMgKEZST00gQ09NUExFVElPTiBQUk9CRSkgICAgICAgICAgICAgIOKVkSIKICAgICAgICAgIGVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKICAgICAgICAgIHByaW50ZiAnJXNcbicgIiRDT01QTEVUSU9OX1JFQVNPTiIKICAgICAgICAgIGVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKICAgICAgICAgIGVjaG8gIiIKICAgICAgICAgIHByaW50ZiAtdiBORVhUX0lURVJBVElPTl9HVUlEQU5DRSAkJ/CflIEgKipORVhUIElURVJBVElPTiBGT0NVUyAoZnJvbSBjb21wbGV0aW9uIHByb2JlIGF0dGVtcHQgJXMpKipcblxuJXNcblxuQWRkcmVzcyB0aGUgaXRlbXMgYWJvdmUgYmVmb3JlIHJlcnVubmluZyBjaGVja3MuJyAiJEFUVEVNUFQiICIkQ09NUExFVElPTl9SRUFTT04iCiAgICAgICAgICBMQVNUX0NPTVBMRVRJT05fUkVBU09OPSIkQ09NUExFVElPTl9SRUFTT04iCiAgICAgICAgZWxzZQogICAgICAgICAgZWNobyAi4pqg77iPIE5vIHJlYXNvbiBwcm92aWRlZCBmb3IgaW5jb21wbGV0ZSBzdGF0dXMiCiAgICAgICAgZmkKICAgICAgZmkKICAgIGZpCiAgZWxzZQogICAgZWNobyAi4oS577iPIENvbXBsZXRpb24gcHJvYmUgc2tpcHBlZCAoc2Vzc2lvbiBjb250aW51YXRpb24gZGlzYWJsZWQpIgogIGZpCgogIGlmIGVjaG8gIiRDT01QTEVUSU9OX1JFU1BPTlNFIiB8IGdyZXAgLUVxICdeeWVzJzsgdGhlbgogICAgU1VDQ0VTUz0xCiAgICBDT01QTEVURURfQVRURU1QVFM9JENVUlJFTlRfQVRURU1QVAogICAgYnJlYWsKICBmaQoKICBlY2hvICJbb3BlbmNvZGUtZGVidWddIENvbXBsZXRpb24gcmVzcG9uc2Ugb24gYXR0ZW1wdCAkQVRURU1QVDogJENPTVBMRVRJT05fUkVTUE9OU0UiCgogIGlmIFsgLW4gIiRDT01QTEVUSU9OX1JFQVNPTiIgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIE9wZW5Db2RlIHJlcG9ydGVkIHRhc2sgaW5jb21wbGV0ZTsgcmV0cnlpbmcgd2l0aCBuZXcgZ3VpZGFuY2UuLi4iCiAgZWxzZQogICAgZWNobyAi4pqg77iPIE9wZW5Db2RlIHJlcG9ydGVkIHRhc2sgaW5jb21wbGV0ZTsgcmV0cnlpbmcuLi4iCiAgZmkKICBDT01QTEVURURfQVRURU1QVFM9JENVUlJFTlRfQVRURU1QVAogIEFUVEVNUFQ9JCgoQVRURU1QVCArIDEpKQpkb25lCgpGSU5BTF9BVFRFTVBUUz0kQ09NUExFVEVEX0FUVEVNUFRTCmlmIFsgIiR7RklOQUxfQVRURU1QVFM6LTB9IiAtbGUgMCBdOyB0aGVuCiAgRklOQUxfQVRURU1QVFM9JCgoQVRURU1QVCAtIDEpKQpmaQppZiBbICIkVU5MSU1JVEVEX1JFVFJJRVMiICE9ICIxIiBdICYmIFsgJEZJTkFMX0FUVEVNUFRTIC1ndCAkTUFYX1JFVFJJRVMgXTsgdGhlbgogIEZJTkFMX0FUVEVNUFRTPSRNQVhfUkVUUklFUwpmaQoKaWYgWyAteiAiJENPTVBMRVRJT05fUkVBU09OIiBdICYmIFsgLW4gIiRMQVNUX0NPTVBMRVRJT05fUkVBU09OIiBdOyB0aGVuCiAgQ09NUExFVElPTl9SRUFTT049IiRMQVNUX0NPTVBMRVRJT05fUkVBU09OIgpmaQoKaWYgWyAkU1VDQ0VTUyAtbmUgMSBdOyB0aGVuCiAgaWYgWyAiJFVOTElNSVRFRF9SRVRSSUVTIiA9ICIxIiBdOyB0aGVuCiAgICBlY2hvICLimqDvuI8gT3BlbkNvZGUgZGlkIG5vdCBjb25maXJtIHRhc2sgY29tcGxldGlvbiBhZnRlciAkRklOQUxfQVRURU1QVFMgYXR0ZW1wdHMgKHVubGltaXRlZCBtb2RlKSIKICBlbHNlCiAgICBlY2hvICLimqDvuI8gT3BlbkNvZGUgZGlkIG5vdCBjb25maXJtIHRhc2sgY29tcGxldGlvbiBhZnRlciAkTUFYX1JFVFJJRVMgYXR0ZW1wdHMiCiAgZmkKICAKICAjIERpc3BsYXkgdGhlIGxhc3QgcmVjb3JkZWQgcmVhc29uIGZvciBpbmNvbXBsZXRpb24KICBpZiBbIC1uICIkQ09NUExFVElPTl9SRUFTT04iIF07IHRoZW4KICAgIGVjaG8gIiIKICAgIGVjaG8gIvCfkqEgTGFzdCByZXBvcnRlZCByZWFzb24gZm9yIGluY29tcGxldGlvbjoiCiAgICBlY2hvICIkQ09NUExFVElPTl9SRUFTT04iCiAgZmkKICAKICAjIERvY3VtZW50IHJlbWFpbmluZyB3b3JrIGZvciBkb3duc3RyZWFtIGFnZW50cyAoQ2xlby9UZXNzKQogIGVjaG8gIiIKICBlY2hvICLwn5OdIENyZWF0aW5nIGhhbmRvZmYgZG9jdW1lbnQgZm9yIENsZW8uLi4iCiAgSEFORE9GRl9GSUxFPSIkT1BFTkNPREVfV09SS19ESVIvdGFzay9yZXgtaGFuZG9mZi5tZCIKICBta2RpciAtcCAiJE9QRU5DT0RFX1dPUktfRElSL3Rhc2siCiAgCiAgIyBQcmVwYXJlIGhhbmRvZmYgY29udGVudCB3aXRoIHByb3BlciB2YXJpYWJsZSBleHBhbnNpb24KICBIQU5ET0ZGX0RBVEU9JChkYXRlIC11ICsiJVktJW0tJWQgJUg6JU06JVMgVVRDIikKICBpZiBbIC1uICIkQ09NUExFVElPTl9SRUFTT04iIF07IHRoZW4KICAgIFJFTUFJTklOR19XT1JLPSIkQ09NUExFVElPTl9SRUFTT04iCiAgZWxzZQogICAgUkVNQUlOSU5HX1dPUks9IlJldmlldyB0aGUgY29tcGxldGlvbiBwcm9iZSByZXNwb25zZXMgaW4gdGhlIGxvZ3MgYWJvdmUgZm9yIGRldGFpbHMgb24gd2hhdCByZW1haW5zIHRvIGJlIGRvbmUuIgogIGZpCiAgCiAgY2F0ID4gIiRIQU5ET0ZGX0ZJTEUiIDw8IEVPRgojIFJleCBJbXBsZW1lbnRhdGlvbiBIYW5kb2ZmCgoqKlN0YXR1cyoqOiBJbmNvbXBsZXRlIGFmdGVyICRGSU5BTF9BVFRFTVBUUyBpdGVyYXRpb25zIChtYXg6ICRNQVhfUkVUUklFUykKKipEYXRlKio6ICRIQU5ET0ZGX0RBVEUKKipUYXNrKio6IHt7dGFza19pZH19CgojIyBXaGF0IFdhcyBBY2NvbXBsaXNoZWQKClJleCBtYWRlICRGSU5BTF9BVFRFTVBUUyBhdHRlbXB0cyB0byBjb21wbGV0ZSB0aGlzIHRhc2suIFJldmlldyB0aGUgUFIgYW5kIGNvbW1pdCBoaXN0b3J5IGZvciBkZXRhaWxzIG9uIHdoYXQgd2FzIGltcGxlbWVudGVkLgoKIyMgUmVtYWluaW5nIFdvcmsKCiRSRU1BSU5JTkdfV09SSwoKQ29tcGFyZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIGFnYWluc3QgYWNjZXB0YW5jZSBjcml0ZXJpYSBpbiB0YXNrL2FjY2VwdGFuY2UtY3JpdGVyaWEubWQuCgojIyBOZXh0IFN0ZXBzIGZvciBDbGVvCgoxLiBSZXZpZXcgdGhlIFBSIGNyZWF0ZWQgYnkgUmV4CjIuIElkZW50aWZ5IGdhcHMgYmV0d2VlbiBjdXJyZW50IGltcGxlbWVudGF0aW9uIGFuZCBhY2NlcHRhbmNlIGNyaXRlcmlhCjMuIENvbXBsZXRlIGFueSByZW1haW5pbmcgaW1wbGVtZW50YXRpb24gd29yawo0LiBFbnN1cmUgYWxsIHF1YWxpdHkgY2hlY2tzIHBhc3MgYmVmb3JlIGhhbmRpbmcgb2ZmIHRvIFRlc3MKCiMjIEFjY2VwdGFuY2UgQ3JpdGVyaWEgUmVmZXJlbmNlCgpTZWUgXGB0YXNrL2FjY2VwdGFuY2UtY3JpdGVyaWEubWRcYCBmb3IgY29tcGxldGUgcmVxdWlyZW1lbnRzLgoKLS0tCipHZW5lcmF0ZWQgYnkgUmV4IChPcGVuQ29kZSkgYWZ0ZXIgJEZJTkFMX0FUVEVNUFRTIGltcGxlbWVudGF0aW9uIGF0dGVtcHRzKgpFT0YKCiAgZWNobyAi4pyFIEhhbmRvZmYgZG9jdW1lbnQgY3JlYXRlZCBhdCB0YXNrL3JleC1oYW5kb2ZmLm1kIgogIAogICMgQ29tbWl0IGFuZCBwdXNoIHRoZSBoYW5kb2ZmIGRvY3VtZW50CiAgY2QgIiRPUEVOQ09ERV9XT1JLX0RJUiIKICBnaXQgYWRkIHRhc2svcmV4LWhhbmRvZmYubWQgMj4vZGV2L251bGwgfHwgdHJ1ZQogIAogICMgQnVpbGQgY29tbWl0IG1lc3NhZ2Ugd2l0aCBwcm9wZXIgdmFyaWFibGUgZXhwYW5zaW9uCiAgQ09NTUlUX01TRz0iZG9jcyh0YXNrLXt7dGFza19pZH19KTogYWRkIFJleCBoYW5kb2ZmIGRvY3VtZW50CgpSZXggY29tcGxldGVkICRGSU5BTF9BVFRFTVBUUyBpbXBsZW1lbnRhdGlvbiBpdGVyYXRpb25zIHdpdGggaW5jb21wbGV0ZSBzdGF0dXMgKG1heDogJE1BWF9SRVRSSUVTKS4KSGFuZG9mZiBkb2N1bWVudCBjcmVhdGVkIGZvciBDbGVvIHRvIGNvbnRpbnVlIHdvcmsuIgogIAogIGlmIFsgLW4gIiRDT01QTEVUSU9OX1JFQVNPTiIgXTsgdGhlbgogICAgQ09NTUlUX01TRz0iJENPTU1JVF9NU0cKClJlYXNvbjogJENPTVBMRVRJT05fUkVBU09OIgogIGZpCiAgCiAgZ2l0IGNvbW1pdCAtbSAiJENPTU1JVF9NU0ciIDI+L2Rldi9udWxsIHx8IGVjaG8gIuKaoO+4jyBDb3VsZCBub3QgY29tbWl0IGhhbmRvZmYgZG9jdW1lbnQiCiAgCiAgQ1VSUkVOVF9CUkFOQ0g9JChnaXQgcmV2LXBhcnNlIC0tYWJicmV2LXJlZiBIRUFEIDI+L2Rldi9udWxsIHx8IGVjaG8gIiIpCiAgaWYgWyAtbiAiJENVUlJFTlRfQlJBTkNIIiBdICYmIFsgIiRDVVJSRU5UX0JSQU5DSCIgIT0gIm1haW4iIF0gJiYgWyAiJENVUlJFTlRfQlJBTkNIIiAhPSAibWFzdGVyIiBdOyB0aGVuCiAgICBnaXQgcHVzaCBvcmlnaW4gSEVBRCAyPi9kZXYvbnVsbCB8fCBlY2hvICLimqDvuI8gQ291bGQgbm90IHB1c2ggaGFuZG9mZiBkb2N1bWVudCIKICBmaQogIAogIGVjaG8gIiIKICBlY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCiAgZWNobyAi4pWRICAgICAgICAgIFRBU0sgQ09NUExFVElPTiBTVEFUVVM6IFBBUlRJQUwgLSBIQU5ET0ZGICAgICAgICAgICDilZEiCiAgZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgogIGVjaG8gIiIKICBlY2hvICLwn5SEIE5FWFQgU1RFUFM6IgogIGVjaG8gIiAgIC0gSGFuZG9mZiBkb2N1bWVudCBjcmVhdGVkIGF0IHRhc2svcmV4LWhhbmRvZmYubWQiCiAgZWNobyAiICAgLSBXb3JrZmxvdyB3aWxsIGNvbnRpbnVlIHRvIENsZW8gZm9yIGNvbXBsZXRpb24iCiAgZWNobyAiICAgLSBDbGVvIHdpbGwgcmV2aWV3IFBSIGFuZCBmaW5pc2ggcmVtYWluaW5nIHdvcmsiCiAgZWNobyAiIgogIGVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKICAKICBFWElUX0NPREU9MCAgIyBBbHdheXMgZXhpdCBzdWNjZXNzZnVsbHkgdG8gYWxsb3cgQ2xlbyB0byBjb250aW51ZQplbHNlCiAgZWNobyAi4pyFIE9wZW5Db2RlIGNvbmZpcm1lZCB0YXNrIGNvbXBsZXRpb24iCiAgaWYgWyAke09QRU5DT0RFX0VYSVQ6LTB9IC1uZSAwIF07IHRoZW4KICAgIGVjaG8gIuKaoO+4jyBPcGVuQ29kZSByZXR1cm5lZCBub24temVybyBleGl0IGNvZGUgJHtPUEVOQ09ERV9FWElUfSwgYnV0IGNvbXBsZXRpb24gcHJvYmUgcGFzc2VkIgogIGZpCiAgRVhJVF9DT0RFPTAKZmkKCmlmIFsgJFNVQ0NFU1MgLWVxIDEgXTsgdGhlbgogIGVjaG8gIvCflI0gVmVyaWZ5aW5nIHB1bGwgcmVxdWVzdCBzdGF0dXMiCiAgZW5zdXJlX3ByX2NyZWF0ZWQKZWxpZiBbWyAie3tnaXRodWJfYXBwfX0iID1+IFtScl1leCBdXSAmJiBbICIkV09SS0ZMT1dfU1RBR0UiID0gImltcGxlbWVudGF0aW9uIiBdOyB0aGVuCiAgZWNobyAi8J+UjSBSZXggaW1wbGVtZW50YXRpb24gYWdlbnQgLSBjcmVhdGluZyBQUiBldmVuIHRob3VnaCBjb21wbGV0aW9uIHVuY29uZmlybWVkIgogIGVuc3VyZV9wcl9jcmVhdGVkIHx8IGVjaG8gIuKaoO+4jyBQUiBjcmVhdGlvbiBmYWlsZWQgb3Igbm8gUFIgd2FzIGNyZWF0ZWQiCmVsc2UKICBlY2hvICLimqDvuI8gU2tpcHBpbmcgYXV0byBQUiBlbmZvcmNlbWVudCBkdWUgdG8gT3BlbkNvZGUgY29tcGxldGlvbiBzdGF0dXMiCmZpCgpSRVNPTFZFRF9QUl9VUkw9IiQocmVzb2x2ZV9wcl91cmwpIgoKaWYgWyAkU1VDQ0VTUyAtZXEgMSBdOyB0aGVuCiAgcGF0Y2hfY29kZXJ1bl9zdGF0dXMgXAogICAgIlJ1bm5pbmciIFwKICAgICJJbXBsZW1lbnRhdGlvbiBjb21wbGV0ZWQgLSByZWFkeSBmb3IgcXVhbGl0eSByZXZpZXciIFwKICAgICJyZWFkeS1mb3ItcWEiIFwKICAgICIiIFwKICAgICIkUkVTT0xWRURfUFJfVVJMIiBcCiAgICAiZmFsc2UiCmVsc2UKICBTVEFUVVNfTk9URT0iJENPTVBMRVRJT05fUkVBU09OIgogIGlmIFsgLXogIiRTVEFUVVNfTk9URSIgXTsgdGhlbgogICAgU1RBVFVTX05PVEU9IkltcGxlbWVudGF0aW9uIHJlcXVpcmVzIGZvbGxvdy11cCIKICBmaQoKICBwYXRjaF9jb2RlcnVuX3N0YXR1cyBcCiAgICAiUnVubmluZyIgXAogICAgIiRTVEFUVVNfTk9URSIgXAogICAgIm5lZWRzLWZpeGVzIiBcCiAgICAiIiBcCiAgICAiJFJFU09MVkVEX1BSX1VSTCIgXAogICAgImZhbHNlIgpmaQoKIyBTdWJtaXQgR2l0SHViIFBSIHJldmlldyBmb3IgQ2xlby9UZXNzIHN0YWdlcyAoZW5hYmxlcyB3b3JrZmxvdyBwcm9ncmVzc2lvbikKIyBNYXAgQ29kZVJ1biBzdGFnZSB2YWx1ZXMgdG8gd29ya2Zsb3cgc3RhZ2UgbGFiZWxzIGV4cGVjdGVkIGJ5IGNvbnRhaW5lciBsb2dpYwpjYXNlICIke1dPUktGTE9XX1NUQUdFOi19IiBpbgogICJxdWFsaXR5IikKICAgIFdPUktGTE9XX1NUQUdFPSJxdWFsaXR5LWluLXByb2dyZXNzIgogICAgOzsKICAidGVzdGluZyIpCiAgICBXT1JLRkxPV19TVEFHRT0idGVzdGluZy1pbi1wcm9ncmVzcyIKICAgIDs7CiAgKikKICAgICMgVXNlIGV4aXN0aW5nIHZhbHVlIGZvciBvdGhlciBzdGFnZXMgKGltcGxlbWVudGF0aW9uLCBldGMuKQogICAgOzsKZXNhYwoKaWYgWyAiJFdPUktGTE9XX1NUQUdFIiA9ICJxdWFsaXR5IiBdIHx8IFsgIiRXT1JLRkxPV19TVEFHRSIgPSAic2VjdXJpdHkiIF0gfHwgWyAiJFdPUktGTE9XX1NUQUdFIiA9ICJ0ZXN0aW5nIiBdOyB0aGVuCiAgUFJfTlVNPSIke1BSX05VTUJFUjotfSIKICBpZiBbIC16ICIkUFJfTlVNIiBdOyB0aGVuCiAgICAjIFRyeSB0byBnZXQgUFIgbnVtYmVyIGZyb20gY3VycmVudCBicmFuY2gKICAgIENVUlJFTlRfQlJBTkNIPSQoZ2l0IHJldi1wYXJzZSAtLWFiYnJldi1yZWYgSEVBRCAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgaWYgWyAtbiAiJENVUlJFTlRfQlJBTkNIIiBdOyB0aGVuCiAgICAgIFBSX05VTT0kKGdoIHByIGxpc3QgLS1zdGF0ZSBvcGVuIC0taGVhZCAiJENVUlJFTlRfQlJBTkNIIiAtLWpzb24gbnVtYmVyIC0tanEgJy5bMF0ubnVtYmVyJyAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgZmkKICBmaQoKICBpZiBbIC1uICIkUFJfTlVNIiBdOyB0aGVuCiAgICBpZiBbICRTVUNDRVNTIC1lcSAxIF07IHRoZW4KICAgICAgU1RBR0VfTkFNRT0iUXVhbGl0eSIKICAgICAgU1RBR0VfRU1PSkk9IvCfm6HvuI8iCiAgICAgIENIRUNLU19QQVNTRUQ9JCctIENvZGUgZm9ybWF0dGluZyB2ZXJpZmllZAotIExpbnRpbmcgcGFzc2VkCi0gVW5pdCB0ZXN0cyBzdWNjZXNzZnVsCi0gUXVhbGl0eSBzdGFuZGFyZHMgbWV0JwogICAgICBORVhUX1NUQUdFPSJlbmQtdG8tZW5kIHRlc3RpbmcgYnkgVGVzcyIKICAgICAgCiAgICAgIGlmIFsgIiRXT1JLRkxPV19TVEFHRSIgPSAic2VjdXJpdHkiIF0gfHwgWyAiJFdPUktGTE9XX1NUQUdFIiA9ICJzZWN1cml0eS1pbi1wcm9ncmVzcyIgXTsgdGhlbgogICAgICAgICMgQ2lwaGVyIHNlY3VyaXR5IHJldmlldwogICAgICAgIFNUQUdFX05BTUU9IlNlY3VyaXR5IgogICAgICAgIFNUQUdFX0VNT0pJPSLwn5SSIgogICAgICAgIENIRUNLU19QQVNTRUQ9JCctIE5vIHZ1bG5lcmFiaWxpdGllcyBkZXRlY3RlZAotIERlcGVuZGVuY3kgYXVkaXQgcGFzc2VkCi0gU2VjcmV0IHNjYW5uaW5nIGNvbXBsZXRlZAotIFNlY3VyaXR5IGJlc3QgcHJhY3RpY2VzIHZlcmlmaWVkJwogICAgICAgIE5FWFRfU1RBR0U9IlFBIHRlc3RpbmcgYnkgVGVzcyIKICAgICAgICAKICAgICAgICBlY2hvICLinIUgJFNUQUdFX05BTUUgY2hlY2tzIHBhc3NlZCAtIGhhbmRpbmcgb2ZmIHRvIFRlc3MiCiAgICAgICAgUkVWSUVXX0JPRFlfRklMRT0kKG1rdGVtcCkKICAgICAgICBjYXQgPDxFT0YgPiAiJFJFVklFV19CT0RZX0ZJTEUiCiMjIyAkU1RBR0VfRU1PSkkgJFNUQUdFX05BTUUgUmV2aWV3IC0gUEFTU0VECkFsbCBzZWN1cml0eSBjaGVja3MgaGF2ZSBwYXNzZWQ6CiRDSEVDS1NfUEFTU0VECgoqKlN0YXR1czoqKiBSZWFkeSBmb3IgJE5FWFRfU1RBR0UKKipOZXh0IFN0ZXA6KiogVGVzcyB3aWxsIG5vdyBwZXJmb3JtIGNvbXByZWhlbnNpdmUgUUEgdmFsaWRhdGlvbgoKLS0tCipTZWN1cml0eSByZXZpZXcgYnkgQ2lwaGVyKgpFT0YKICAgICAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCB8fCB0cnVlCiAgICAgICAgdGltZW91dCAzMCBnaCBwciBjb21tZW50ICIkUFJfTlVNIiAtLWJvZHktZmlsZSAiJFJFVklFV19CT0RZX0ZJTEUiIDI+JjEgfHwgZWNobyAi4pqg77iPIFBSIGNvbW1lbnQgY29tbWFuZCBmYWlsZWQiCiAgICAgICAgcm0gLWYgIiRSRVZJRVdfQk9EWV9GSUxFIgogICAgICAgIAogICAgICAgICMgQWRkIHNlY3VyaXR5LWFwcHJvdmVkIGxhYmVsCiAgICAgICAgZWNobyAi8J+Pt++4jyAgQWRkaW5nICdzZWN1cml0eS1hcHByb3ZlZCcgbGFiZWwiCiAgICAgICAgdGltZW91dCAzMCBnaCBwciBlZGl0ICIkUFJfTlVNIiAtLWFkZC1sYWJlbCAic2VjdXJpdHktYXBwcm92ZWQiIDI+JjEgfHwgZWNobyAi4pqg77iPIEZhaWxlZCB0byBhZGQgc2VjdXJpdHktYXBwcm92ZWQgbGFiZWwiCiAgICAgIGVsaWYgWyAiJFdPUktGTE9XX1NUQUdFIiA9ICJ0ZXN0aW5nIiBdOyB0aGVuCiAgICAgICAgIyBUZXNzIGhhcyBmaW5hbCBhcHByb3ZhbCBhdXRob3JpdHkKICAgICAgICBTVEFHRV9OQU1FPSJRQSBUZXN0aW5nIgogICAgICAgIFNUQUdFX0VNT0pJPSLwn6eqIgogICAgICAgIENIRUNLU19QQVNTRUQ9JCctIEVuZC10by1lbmQgdGVzdHMgcGFzc2VkCi0gSW50ZWdyYXRpb24gdGVzdHMgc3VjY2Vzc2Z1bAotIEFjY2VwdGFuY2UgY3JpdGVyaWEgdmFsaWRhdGVkCi0gUHJvZHVjdGlvbiByZWFkaW5lc3MgY29uZmlybWVkJwogICAgICAgIE5FWFRfU1RBR0U9Imh1bWFuIHJldmlldyBhbmQgbWVyZ2UiCiAgICAgICAgCiAgICAgICAgIyBDaGVjayBpZiB0aGlzIGlzIHRoZSBmaW5hbCB0YXNrIHJlcXVpcmluZyBkZXBsb3ltZW50IHZlcmlmaWNhdGlvbgogICAgICAgIERFUExPWU1FTlRfU1RBVFVTPSIiCiAgICAgICAgaWYgWyAiJHtGSU5BTF9UQVNLOi1mYWxzZX0iID0gInRydWUiIF07IHRoZW4KICAgICAgICAgIGVjaG8gIvCfjq8gRmluYWwgdGFzayBkZXRlY3RlZCAtIHZlcmlmeWluZyBLdWJlcm5ldGVzIGRlcGxveW1lbnQiCiAgICAgICAgICAKICAgICAgICAgICMgRXh0cmFjdCBzZXJ2aWNlIG5hbWUgZnJvbSByZXBvc2l0b3J5IG9yIHVzZSBkZWZhdWx0CiAgICAgICAgICBTRVJWSUNFX05BTUU9IiR7U0VSVklDRV9OQU1FOi0kKGJhc2VuYW1lICIkUkVQT1NJVE9SWSIgLmdpdCl9IgogICAgICAgICAgTkFNRVNQQUNFPSIke05BTUVTUEFDRTotYWdlbnQtcGxhdGZvcm19IgogICAgICAgICAgCiAgICAgICAgICAjIENoZWNrIGZvciBkZXBsb3ltZW50CiAgICAgICAgICBpZiBrdWJlY3RsIGdldCBkZXBsb3ltZW50ICIkU0VSVklDRV9OQU1FIiAtbiAiJE5BTUVTUEFDRSIgJj4vZGV2L251bGw7IHRoZW4KICAgICAgICAgICAgUkVBRFlfUkVQTElDQVM9JChrdWJlY3RsIGdldCBkZXBsb3ltZW50ICIkU0VSVklDRV9OQU1FIiAtbiAiJE5BTUVTUEFDRSIgLW8ganNvbnBhdGg9J3suc3RhdHVzLnJlYWR5UmVwbGljYXN9JyAyPi9kZXYvbnVsbCB8fCBlY2hvICIwIikKICAgICAgICAgICAgREVTSVJFRF9SRVBMSUNBUz0kKGt1YmVjdGwgZ2V0IGRlcGxveW1lbnQgIiRTRVJWSUNFX05BTUUiIC1uICIkTkFNRVNQQUNFIiAtbyBqc29ucGF0aD0ney5zcGVjLnJlcGxpY2FzfScgMj4vZGV2L251bGwgfHwgZWNobyAiMCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBbICIkUkVBRFlfUkVQTElDQVMiID0gIiRERVNJUkVEX1JFUExJQ0FTIiBdICYmIFsgIiRSRUFEWV9SRVBMSUNBUyIgIT0gIjAiIF07IHRoZW4KICAgICAgICAgICAgICBlY2hvICLinIUgRGVwbG95bWVudCB2ZXJpZmllZDogJFJFQURZX1JFUExJQ0FTLyRERVNJUkVEX1JFUExJQ0FTIHJlcGxpY2FzIHJlYWR5IgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICMgR2V0IGluZ3Jlc3MgVVJMcwogICAgICAgICAgICAgIElOR1JFU1NfVVJMUz0kKGt1YmVjdGwgZ2V0IGluZ3Jlc3MgLW4gIiROQU1FU1BBQ0UiIC1vIGpzb25wYXRoPSd7cmFuZ2UgLml0ZW1zWypdfXsuc3BlYy5ydWxlc1sqXS5ob3N0fXsiXG4ifXtlbmR9JyAyPi9kZXYvbnVsbCB8IGdyZXAgLXYgIl4kIiB8fCBlY2hvICIiKQogICAgICAgICAgICAgIAogICAgICAgICAgICAgIGlmIFsgLW4gIiRJTkdSRVNTX1VSTFMiIF07IHRoZW4KICAgICAgICAgICAgICAgIERFUExPWU1FTlRfU1RBVFVTPSIKCiMjIPCfmoAgRGVwbG95bWVudCBWZXJpZmllZAotICoqU2VydmljZSoqOiAkU0VSVklDRV9OQU1FCi0gKipOYW1lc3BhY2UqKjogJE5BTUVTUEFDRQotICoqU3RhdHVzKio6IOKchSAkUkVBRFlfUkVQTElDQVMvJERFU0lSRURfUkVQTElDQVMgcmVwbGljYXMgcmVhZHkKLSAqKkxpdmUgVVJMcyoqOgokKGVjaG8gIiRJTkdSRVNTX1VSTFMiIHwgc2VkICdzL14vICAtIGh0dHBzOlwvXC8vJykiCiAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgREVQTE9ZTUVOVF9TVEFUVVM9IgoKIyMg8J+agCBEZXBsb3ltZW50IFZlcmlmaWVkCi0gKipTZXJ2aWNlKio6ICRTRVJWSUNFX05BTUUKLSAqKk5hbWVzcGFjZSoqOiAkTkFNRVNQQUNFCi0gKipTdGF0dXMqKjog4pyFICRSRUFEWV9SRVBMSUNBUy8kREVTSVJFRF9SRVBMSUNBUyByZXBsaWNhcyByZWFkeQotICoqQWNjZXNzKio6IFNlcnZpY2UgZGVwbG95ZWQgKG5vIGluZ3Jlc3MgY29uZmlndXJlZCkiCiAgICAgICAgICAgICAgZmkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBEZXBsb3ltZW50IG5vdCByZWFkeTogJFJFQURZX1JFUExJQ0FTLyRERVNJUkVEX1JFUExJQ0FTIHJlcGxpY2FzIgogICAgICAgICAgICAgIERFUExPWU1FTlRfU1RBVFVTPSIKCiMjIOKaoO+4jyBEZXBsb3ltZW50IE5vdCBSZWFkeQotICoqU2VydmljZSoqOiAkU0VSVklDRV9OQU1FCi0gKipOYW1lc3BhY2UqKjogJE5BTUVTUEFDRQotICoqU3RhdHVzKio6IOKPsyAkUkVBRFlfUkVQTElDQVMvJERFU0lSRURfUkVQTElDQVMgcmVwbGljYXMgcmVhZHkKLSAqKkFjdGlvbiBSZXF1aXJlZCoqOiBXYWl0aW5nIGZvciBkZXBsb3ltZW50IHRvIHN0YWJpbGl6ZSIKICAgICAgICAgICAgZmkKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4pqg77iPIERlcGxveW1lbnQgbm90IGZvdW5kOiAkU0VSVklDRV9OQU1FIGluIG5hbWVzcGFjZSAkTkFNRVNQQUNFIgogICAgICAgICAgICBERVBMT1lNRU5UX1NUQVRVUz0iCgojIyDimqDvuI8gRGVwbG95bWVudCBOb3QgRm91bmQKLSAqKlNlcnZpY2UqKjogJFNFUlZJQ0VfTkFNRQotICoqTmFtZXNwYWNlKio6ICROQU1FU1BBQ0UKLSAqKlN0YXR1cyoqOiDinYwgRGVwbG95bWVudCBub3QgZGV0ZWN0ZWQKLSAqKkFjdGlvbiBSZXF1aXJlZCoqOiBFbnN1cmUgZGVwbG95bWVudCBtYW5pZmVzdHMgYXJlIGFwcGxpZWQiCiAgICAgICAgICBmaQogICAgICAgIGZpCiAgICAgICAgCiAgICAgICAgZWNobyAi4pyFICRTVEFHRV9OQU1FIGNvbXBsZXRlIC0gcG9zdGluZyBBUFBST1ZFIHJldmlldyAoVGVzcyBmaW5hbCBhcHByb3ZhbCkiCiAgICAgICAgUkVWSUVXX0JPRFlfRklMRT0kKG1rdGVtcCkKICAgICAgICBjYXQgPDxFT0YgPiAiJFJFVklFV19CT0RZX0ZJTEUiCiMjIyAkU1RBR0VfRU1PSkkgJFNUQUdFX05BTUUgUmV2aWV3IC0gQVBQUk9WRUQKQWxsIGNoZWNrcyBoYXZlIHBhc3NlZDoKJENIRUNLU19QQVNTRUQKUmVhZHkgZm9yICRORVhUX1NUQUdFLiRERVBMT1lNRU5UX1NUQVRVUwoKKipGaW5hbCBBcHByb3ZhbDoqKiBUZXNzIGhhcyB2ZXJpZmllZCBhbGwgYWNjZXB0YW5jZSBjcml0ZXJpYSBhcmUgbWV0LgpFT0YKICAgICAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCB8fCB0cnVlCiAgICAgICAgdGltZW91dCAzMCBnaCBwciByZXZpZXcgIiRQUl9OVU0iIC0tYXBwcm92ZSAtLWJvZHktZmlsZSAiJFJFVklFV19CT0RZX0ZJTEUiIDI+JjEgfHwgZWNobyAi4pqg77iPIFBSIHJldmlldyBjb21tYW5kIGZhaWxlZCIKICAgICAgICBybSAtZiAiJFJFVklFV19CT0RZX0ZJTEUiCiAgICAgICAgCiAgICAgICAgIyBBdXRvLW1lcmdlIGlmIGVuYWJsZWQgKFRlc3Mgb25seSkKICAgICAgICBpZiBbICIke0FVVE9fTUVSR0U6LWZhbHNlfSIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgICAgZWNobyAi8J+UgCBBVVRPX01FUkdFIGVuYWJsZWQgLSBtZXJnaW5nIFBSIGF1dG9tYXRpY2FsbHkiCiAgICAgICAgICBpZiB0aW1lb3V0IDMwIGdoIHByIG1lcmdlICIkUFJfTlVNIiAtLWF1dG8gLS1zcXVhc2ggLS1kZWxldGUtYnJhbmNoOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKchSBQUiBzY2hlZHVsZWQgZm9yIGF1dG8tbWVyZ2UiCiAgICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBBdXRvLW1lcmdlIGZhaWxlZCAtIFBSIG1heSBuZWVkIG1hbnVhbCBpbnRlcnZlbnRpb24iCiAgICAgICAgICBmaQogICAgICAgIGZpCiAgICAgIGVsc2UKICAgICAgICAjIENsZW8gaGFuZHMgb2ZmIHRvIFRlc3MgdmlhIGNvbW1lbnQgYW5kIGxhYmVsIChOT1QgYXBwcm92ZSkKICAgICAgICBlY2hvICLinIUgJFNUQUdFX05BTUUgY2hlY2tzIHBhc3NlZCAtIGhhbmRpbmcgb2ZmIHRvIFRlc3MiCiAgICAgICAgUkVWSUVXX0JPRFlfRklMRT0kKG1rdGVtcCkKICAgICAgICBjYXQgPDxFT0YgPiAiJFJFVklFV19CT0RZX0ZJTEUiCiMjIyAkU1RBR0VfRU1PSkkgJFNUQUdFX05BTUUgUmV2aWV3IC0gUEFTU0VECkFsbCBjaGVja3MgaGF2ZSBwYXNzZWQ6CiRDSEVDS1NfUEFTU0VECgoqKlN0YXR1czoqKiBSZWFkeSBmb3IgJE5FWFRfU1RBR0UKKipOZXh0IFN0ZXA6KiogVGVzcyB3aWxsIG5vdyBwZXJmb3JtIGNvbXByZWhlbnNpdmUgUUEgdmFsaWRhdGlvbgoKLS0tCipRdWFsaXR5IHJldmlldyBieSBDbGVvKgpFT0YKICAgICAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCB8fCB0cnVlCiAgICAgICAgdGltZW91dCAzMCBnaCBwciBjb21tZW50ICIkUFJfTlVNIiAtLWJvZHktZmlsZSAiJFJFVklFV19CT0RZX0ZJTEUiIDI+JjEgfHwgZWNobyAi4pqg77iPIFBSIGNvbW1lbnQgY29tbWFuZCBmYWlsZWQiCiAgICAgICAgcm0gLWYgIiRSRVZJRVdfQk9EWV9GSUxFIgogICAgICAgIAogICAgICAgICMgQWRkIHJlYWR5LWZvci1xYSBsYWJlbCB0byBzaWduYWwgVGVzcwogICAgICAgIGVjaG8gIvCfj7fvuI8gIEFkZGluZyAncmVhZHktZm9yLXFhJyBsYWJlbCB0byB0cmlnZ2VyIFRlc3MgcmV2aWV3IgogICAgICAgIHRpbWVvdXQgMzAgZ2ggcHIgZWRpdCAiJFBSX05VTSIgLS1hZGQtbGFiZWwgInJlYWR5LWZvci1xYSIgMj4mMSB8fCBlY2hvICLimqDvuI8gRmFpbGVkIHRvIGFkZCByZWFkeS1mb3ItcWEgbGFiZWwiCiAgICAgIGZpCiAgICBlbHNlCiAgICAgIFNUQUdFX05BTUU9IlF1YWxpdHkiCiAgICAgIFNUQUdFX0VNT0pJPSLwn5uh77iPIgogICAgICBJU1NVRVNfREVTQz0kJy0gUmV2aWV3IGNvZGUgZm9ybWF0dGluZwotIEZpeCBsaW50aW5nIGVycm9ycwotIEVuc3VyZSB1bml0IHRlc3RzIHBhc3MKLSBNZWV0IHF1YWxpdHkgc3RhbmRhcmRzJwogICAgICBpZiBbICIkV09SS0ZMT1dfU1RBR0UiID0gInNlY3VyaXR5IiBdOyB0aGVuCiAgICAgICAgU1RBR0VfTkFNRT0iU2VjdXJpdHkiCiAgICAgICAgU1RBR0VfRU1PSkk9IvCflJIiCiAgICAgICAgSVNTVUVTX0RFU0M9JCctIEZpeCBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMKLSBVcGRhdGUgaW5zZWN1cmUgZGVwZW5kZW5jaWVzCi0gUmVtb3ZlIGV4cG9zZWQgc2VjcmV0cwotIEFkZHJlc3Mgc2VjdXJpdHkgYmVzdCBwcmFjdGljZSB2aW9sYXRpb25zJwogICAgICBlbGlmIFsgIiRXT1JLRkxPV19TVEFHRSIgPSAidGVzdGluZyIgXTsgdGhlbgogICAgICAgIFNUQUdFX05BTUU9IlFBIFRlc3RpbmciCiAgICAgICAgU1RBR0VfRU1PSkk9IvCfp6oiCiAgICAgICAgSVNTVUVTX0RFU0M9JCctIEZpeCBmYWlsaW5nIGVuZC10by1lbmQgdGVzdHMKLSBBZGRyZXNzIGludGVncmF0aW9uIHRlc3QgZmFpbHVyZXMKLSBWYWxpZGF0ZSBhY2NlcHRhbmNlIGNyaXRlcmlhCi0gRW5zdXJlIHByb2R1Y3Rpb24gcmVhZGluZXNzJwogICAgICBmaQoKICAgICAgZWNobyAi4p2MICRTVEFHRV9OQU1FIGlzc3VlcyBkZXRlY3RlZCAtIHBvc3RpbmcgUkVRVUVTVCBDSEFOR0VTIHJldmlldyIKICAgICAgUkVWSUVXX0JPRFlfRklMRT0kKG1rdGVtcCkKICAgICAgY2F0IDw8RU9GID4gIiRSRVZJRVdfQk9EWV9GSUxFIgojIyMg8J+UtCBSZXF1aXJlZCBDaGFuZ2VzCiRTVEFHRV9OQU1FIGlzc3VlcyBkZXRlY3RlZC4gUGxlYXNlIGFkZHJlc3MgdGhlIGZvbGxvd2luZzoKJElTU1VFU19ERVNDCkVPRgogICAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCB8fCB0cnVlCiAgICAgIHRpbWVvdXQgMzAgZ2ggcHIgcmV2aWV3ICIkUFJfTlVNIiAtLXJlcXVlc3QtY2hhbmdlcyAtLWJvZHktZmlsZSAiJFJFVklFV19CT0RZX0ZJTEUiIDI+JjEgfHwgZWNobyAi4pqg77iPIFBSIHJldmlldyBjb21tYW5kIGZhaWxlZCIKICAgICAgcm0gLWYgIiRSRVZJRVdfQk9EWV9GSUxFIgogICAgZmkKICBlbHNlCiAgICBlY2hvICLihLnvuI8gTm8gUFIgbnVtYmVyIGF2YWlsYWJsZSBmb3IgJFdPUktGTE9XX1NUQUdFIHJldmlldyBzdWJtaXNzaW9uIgogIGZpCmZpCgp0b3VjaCAiJFRBU0tfV09SS1NQQUNFLy5hZ2VudF9kb25lIiAyPi9kZXYvbnVsbCB8fCB0cnVlCgojIEV4cGxpY2l0bHkgc3RvcCBEb2NrZXIgc2lkZWNhciBiZWZvcmUgZXhpdGluZwplY2hvICLwn5uRIEV4cGxpY2l0bHkgc3RvcHBpbmcgRG9ja2VyIHNpZGVjYXIuLi4iCnN0b3BfZG9ja2VyX3NpZGVjYXIgfHwgdHJ1ZQoKaWYgWyAkU1VDQ0VTUyAtbmUgMSBdOyB0aGVuCiAge3sjaWYgYWdlbnRfY29tcGxldGlvbl9tZXNzYWdlfX0KZWNobyAie3thZ2VudF9jb21wbGV0aW9uX21lc3NhZ2V9fSIKICB7e2Vsc2V9fQplY2hvICLimqDvuI8gT3BlbkNvZGUgZXhlY3V0aW9uIGluY29tcGxldGUiCiAge3svaWZ9fQogIGV4aXQgJEVYSVRfQ09ERQpmaQoKe3sjaWYgYWdlbnRfY29tcGxldGlvbl9tZXNzYWdlfX0KZWNobyAie3thZ2VudF9jb21wbGV0aW9uX21lc3NhZ2V9fSIKe3tlbHNlfX0KZWNobyAi4pyFIE9wZW5Db2RlIGV4ZWN1dGlvbiBjb21wbGV0ZSIKe3svaWZ9fQpleGl0ICRFWElUX0NPREUK
  code_opencode_container-blaze.sh.hbs: e3s+IG9wZW5jb2RlX2NvbnRhaW5lcl9iYXNlCiAgICBhZ2VudF9iYW5uZXI9IvCfjqggQmxhemUgT3BlbkNvZGUgZnJvbnRlbmQgd29ya2Zsb3cgc3RhcnRpbmciCiAgICBhZ2VudF9jb21wbGV0aW9uX21lc3NhZ2U9IuKchSBCbGF6ZSBPcGVuQ29kZSBmcm9udGVuZCBpbXBsZW1lbnRhdGlvbiBjb21wbGV0ZSJ9fQo=
  code_opencode_container-cipher.sh.hbs: e3s+IG9wZW5jb2RlX2NvbnRhaW5lcl9iYXNlCiAgICBhZ2VudF9iYW5uZXI9IvCflJAgQ2lwaGVyIE9wZW5Db2RlIHNlY3VyaXR5IHNjYW5uaW5nIHdvcmtmbG93IHN0YXJ0aW5nIgogICAgYWdlbnRfY29tcGxldGlvbl9tZXNzYWdlPSLinIUgQ2lwaGVyIE9wZW5Db2RlIHNlY3VyaXR5IHJldmlldyBjb21wbGV0ZSJ9fQo=
  code_opencode_container-cleo.sh.hbs: e3s+IG9wZW5jb2RlX2NvbnRhaW5lcl9iYXNlCiAgICBhZ2VudF9iYW5uZXI9IvCflKcgQ2xlbyBPcGVuQ29kZSBxdWFsaXR5IHdvcmtmbG93IHN0YXJ0aW5nIgogICAgYWdlbnRfY29tcGxldGlvbl9tZXNzYWdlPSLinIUgQ2xlbyBPcGVuQ29kZSBxdWFsaXR5IHJldmlldyBjb21wbGV0ZSJ9fQo=
  code_opencode_container-rex-remediation.sh.hbs: e3s+IG9wZW5jb2RlX2NvbnRhaW5lcl9iYXNlCiAgICBhZ2VudF9iYW5uZXI9IvCflKcgUmV4IE9wZW5Db2RlIHJlbWVkaWF0aW9uIHdvcmtmbG93IHN0YXJ0aW5nIC0gRml4IE9ubHkgTW9kZSIKICAgIGFnZW50X2NvbXBsZXRpb25fbWVzc2FnZT0i4pyFIFJleCBPcGVuQ29kZSByZW1lZGlhdGlvbiBjb21wbGV0ZSJ9fQo=
  code_opencode_container-rex.sh.hbs: e3s+IG9wZW5jb2RlX2NvbnRhaW5lcl9iYXNlCiAgICBhZ2VudF9iYW5uZXI9IvCflKcgUmV4IE9wZW5Db2RlIGltcGxlbWVudGF0aW9uIHdvcmtmbG93IHN0YXJ0aW5nIgogICAgYWdlbnRfY29tcGxldGlvbl9tZXNzYWdlPSLinIUgUmV4IE9wZW5Db2RlIGltcGxlbWVudGF0aW9uIGNvbXBsZXRlIn19Cg==
  code_opencode_container-tess.sh.hbs: e3s+IG9wZW5jb2RlX2NvbnRhaW5lcl9iYXNlCiAgICBhZ2VudF9iYW5uZXI9IvCflKcgVGVzcyBPcGVuQ29kZSB0ZXN0aW5nIHdvcmtmbG93IHN0YXJ0aW5nIgogICAgYWdlbnRfY29tcGxldGlvbl9tZXNzYWdlPSLinIUgVGVzcyBPcGVuQ29kZSB0ZXN0aW5nIHNlc3Npb24gY29tcGxldGUifX0K
  code_opencode_container.sh.hbs: e3s+IG9wZW5jb2RlX2NvbnRhaW5lcl9iYXNlfX0K

# This file is auto-generated by scripts/generate-agent-templates-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-docs
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
  annotations:
    templates-checksum: "9f38b8011dddaabad8412b0cce8e097cd6b8b1b18968802150096f6f0504571c"
binaryData:
  docs_claude_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==
  docs_claude_container.sh.hbs: IyEvYmluL3NoCgplY2hvICdTdGFydGluZyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uLi4nCmVjaG8gIvCfk40gRG9jcyBjb250YWluZXIgdGVtcGxhdGUgdmVyc2lvbjogJChkYXRlIC11ICslWS0lbS0lZCkgLSBqcS1vbmx5IHByb2Nlc3NpbmcgKG5vIGJhc2U2NCBkZWNvZGUpIgoKIyBEaXNhYmxlIGludGVyYWN0aXZlIEdpdCBwcm9tcHRzIGdsb2JhbGx5CmV4cG9ydCBHSVRfVEVSTUlOQUxfUFJPTVBUPTAKZXhwb3J0IEdJVF9BU0tQQVNTPS9iaW4vdHJ1ZQpleHBvcnQgU1NIX0FTS1BBU1M9L2Jpbi90cnVlCgojIFJlcG9zaXRvcnkgVVJMClJFUE9fVVJMPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCgojIEdpdEh1YiBBcHAgYXV0aGVudGljYXRpb24gaXMgY29uZmlndXJlZCB2aWEgZW52aXJvbm1lbnQgdmFyaWFibGVzCmVjaG8gIlVzaW5nIEdpdEh1YiBBcHAgYXV0aGVudGljYXRpb24gKFNTSCBub3QgcmVxdWlyZWQpIgoKIyBGdW5jdGlvbiB0byBnZW5lcmF0ZSBmcmVzaCBHaXRIdWIgQXBwIHRva2VuIChkZWZpbmVkIGdsb2JhbGx5IGZvciByZXVzZSkKZ2VuZXJhdGVfZ2l0aHViX3Rva2VuKCkgewogICAgZWNobyAiR2VuZXJhdGluZyBmcmVzaCBHaXRIdWIgQXBwIHRva2VuLi4uIgoKICAgICMgQ2hlY2sgaWYgY3JlZGVudGlhbHMgYXJlIGF2YWlsYWJsZQogICAgaWYgWyAteiAiJEdJVEhVQl9BUFBfUFJJVkFURV9LRVkiIF0gfHwgWyAteiAiJEdJVEhVQl9BUFBfSUQiIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgR0lUSFVCX0FQUF9QUklWQVRFX0tFWSBvciBHSVRIVUJfQVBQX0lEIG5vdCBmb3VuZCIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiAgICAjIENyZWF0ZSB0ZW1wb3JhcnkgcHJpdmF0ZSBrZXkgZmlsZSBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlCiAgICBURU1QX0tFWV9GSUxFPSIvdG1wL2dpdGh1Yi1hcHAta2V5LnBlbSIKICAgIGVjaG8gIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiA+ICIkVEVNUF9LRVlfRklMRSIKICAgIGNobW9kIDYwMCAiJFRFTVBfS0VZX0ZJTEUiCgogICAgZWNobyAiVXNpbmcgcHJpdmF0ZSBrZXkgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZSIKCiAgICAjIEdlbmVyYXRlIEpXVCB0b2tlbiBmb3IgR2l0SHViIEFwcCAoZml4ZWQgSldUIGdlbmVyYXRpb24gZm9yIExpbnV4IGNvbnRhaW5lcnMpCiAgICAjIEpXVCBoZWFkZXIKICAgIEpXVF9IRUFERVI9JChwcmludGYgJ3siYWxnIjoiUlMyNTYiLCJ0eXAiOiJKV1QifScgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKCiAgICAjIEpXVCBwYXlsb2FkIHdpdGggY3VycmVudCB0aW1lIGFuZCBleHBpcmF0aW9uICgxMCBtaW51dGVzKQogICAgTk9XPSQoZGF0ZSArJXMpCiAgICBFWFA9JCgoTk9XICsgNjAwKSkKICAgIEpXVF9QQVlMT0FEPSQocHJpbnRmICd7ImlhdCI6JWQsImV4cCI6JWQsImlzcyI6IiVzIn0nICIkTk9XIiAiJEVYUCIgIiRHSVRIVUJfQVBQX0lEIiB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQoKICAgICMgU2lnbiB0aGUgSldUCiAgICBKV1RfU0lHTkFUVVJFPSQocHJpbnRmICclcy4lcycgIiRKV1RfSEVBREVSIiAiJEpXVF9QQVlMT0FEIiB8IG9wZW5zc2wgZGdzdCAtc2hhMjU2IC1zaWduICIkVEVNUF9LRVlfRklMRSIgLWJpbmFyeSB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQogICAgSldUX1RPS0VOPSIkSldUX0hFQURFUi4kSldUX1BBWUxPQUQuJEpXVF9TSUdOQVRVUkUiCgogICAgaWYgWyAteiAiJEpXVF9UT0tFTiIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gZ2VuZXJhdGUgSldUIHRva2VuIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICAjIEdldCBpbnN0YWxsYXRpb24gSUQgZm9yIHRoZSByZXBvc2l0b3J5CiAgICBSRVBPX09XTkVSPSQoZWNobyAie3tyZXBvc2l0b3J5X3VybH19IiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vKFteL10rKS8uKnxcMXwnKQogICAgUkVQT19OQU1FPSQoZWNobyAie3tyZXBvc2l0b3J5X3VybH19IiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vW14vXSsvKFteL10rKShcLmdpdCk/fFwxfCcpCgogICAgZWNobyAiR2V0dGluZyBpbnN0YWxsYXRpb24gSUQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUuLi4iCgogICAgIyBUcnkgcmVwb3NpdG9yeSBpbnN0YWxsYXRpb24gZmlyc3QgKGZvbGxvdyByZWRpcmVjdHMpCiAgICBJTlNUQUxMQVRJT05fUkVTUE9OU0U9JChjdXJsIC1zIC1MIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyRSRVBPX09XTkVSLyRSRVBPX05BTUUvaW5zdGFsbGF0aW9uIikKCiAgICBJTlNUQUxMQVRJT05fSUQ9JChlY2hvICIkSU5TVEFMTEFUSU9OX1JFU1BPTlNFIiB8IGpxIC1yICcuaWQnKQoKICAgICMgRmFsbGJhY2s6IHRyeSBvcmdhbml6YXRpb24gaW5zdGFsbGF0aW9uIGlmIHJlcG8gbG9va3VwIGZhaWxlZAogICAgaWYgWyAiJElOU1RBTExBVElPTl9JRCIgPSAibnVsbCIgXSB8fCBbIC16ICIkSU5TVEFMTEFUSU9OX0lEIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4pqg77iPIFJlcG8gaW5zdGFsbGF0aW9uIG5vdCBmb3VuZCwgdHJ5aW5nIG9yZyBpbnN0YWxsYXRpb24uLi4iCiAgICAgICAgT1JHX0lOU1RBTExBVElPTl9SRVNQT05TRT0kKGN1cmwgLXMgLUwgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9vcmdzLyRSRVBPX09XTkVSL2luc3RhbGxhdGlvbiIpCiAgICAgICAgSU5TVEFMTEFUSU9OX0lEPSQoZWNobyAiJE9SR19JTlNUQUxMQVRJT05fUkVTUE9OU0UiIHwganEgLXIgJy5pZCcpCiAgICBmaQoKICAgIGlmIFsgIiRJTlNUQUxMQVRJT05fSUQiID0gIm51bGwiIF0gfHwgWyAteiAiJElOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gZ2V0IGluc3RhbGxhdGlvbiBJRCBmb3IgcmVwb3NpdG9yeSIKICAgICAgICBlY2hvICJSZXNwb25zZSAocmVwbyk6ICRJTlNUQUxMQVRJT05fUkVTUE9OU0UiCiAgICAgICAgZWNobyAiUmVzcG9uc2UgKG9yZyk6ICAke09SR19JTlNUQUxMQVRJT05fUkVTUE9OU0U6LVtub25lXX0iCiAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICBlY2hvICJJbnN0YWxsYXRpb24gSUQ6ICRJTlNUQUxMQVRJT05fSUQiCgogICAgIyBFeHBvcnQgZm9yIHVzZSBieSBob29rcwogICAgZXhwb3J0IElOU1RBTExBVElPTl9JRAoKICAgICMgR2V0IGluc3RhbGxhdGlvbiBhY2Nlc3MgdG9rZW4KICAgIFRPS0VOX1JFU1BPTlNFPSQoY3VybCAtcyAtWCBQT1NUIFwKICAgICAgICAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRKV1RfVE9LRU4iIFwKICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9hcHAvaW5zdGFsbGF0aW9ucy8kSU5TVEFMTEFUSU9OX0lEL2FjY2Vzc190b2tlbnMiKQoKICAgIEdJVEhVQl9UT0tFTj0kKGVjaG8gIiRUT0tFTl9SRVNQT05TRSIgfCBqcSAtciAnLnRva2VuJykKCiAgICBpZiBbICIkR0lUSFVCX1RPS0VOIiA9ICJudWxsIiBdIHx8IFsgLXogIiRHSVRIVUJfVE9LRU4iIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGdldCBpbnN0YWxsYXRpb24gYWNjZXNzIHRva2VuIgogICAgICAgIGVjaG8gIlJlc3BvbnNlOiAkVE9LRU5fUkVTUE9OU0UiCiAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICAjIENsZWFuIHVwIHRlbXBvcmFyeSBrZXkgZmlsZQogICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgoKICAgICMgRXhwb3J0IHRoZSB0b2tlbiBmb3IgZ2l0IHRvIHVzZQogICAgZXhwb3J0IEdJVEhVQl9UT0tFTgoKICAgICMgU3RvcmUgdG9rZW4gZ2VuZXJhdGlvbiB0aW1lIGZvciByZWZyZXNoIGNoZWNrcwogICAgZXhwb3J0IFRPS0VOX0dFTkVSQVRFRF9BVD0kKGRhdGUgKyVzKQoKICAgICMgQ29uZmlndXJlIGdpdCB0byB1c2UgdGhlIHRva2VuICh1c2UgLS1yZXBsYWNlLWFsbCB0byBoYW5kbGUgbXVsdGlwbGUgZXhpc3RpbmcgaGVscGVycykKICAgIGdpdCBjb25maWcgLS1nbG9iYWwgLS1yZXBsYWNlLWFsbCBjcmVkZW50aWFsLmhlbHBlciBzdG9yZQogICAgZWNobyAiaHR0cHM6Ly94LWFjY2Vzcy10b2tlbjoke0dJVEhVQl9UT0tFTn1AZ2l0aHViLmNvbSIgPiB+Ly5naXQtY3JlZGVudGlhbHMKCiAgICAjIEFsc28gYXV0aGVudGljYXRlIGdoIENMSSB3aXRoIHRoZSB0b2tlbgogICAgZWNobyAiJEdJVEhVQl9UT0tFTiIgfCBnaCBhdXRoIGxvZ2luIC0td2l0aC10b2tlbgoKICAgIGVjaG8gIuKckyBHaXRIdWIgQXBwIGF1dGhlbnRpY2F0ZWQgc3VjY2Vzc2Z1bGx5Igp9CgojIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRva2VuIG5lZWRzIHJlZnJlc2ggKGNhbGwgYmVmb3JlIGdpdCBvcGVyYXRpb25zKQpyZWZyZXNoX3Rva2VuX2lmX25lZWRlZCgpIHsKICAgIGlmIFsgLXogIiRUT0tFTl9HRU5FUkFURURfQVQiIF07IHRoZW4KICAgICAgICBlY2hvICLimqDvuI8gTm8gdG9rZW4gdGltZXN0YW1wIGZvdW5kLCByZWZyZXNoaW5nIHRva2VuLi4uIgogICAgICAgIGdlbmVyYXRlX2dpdGh1Yl90b2tlbgogICAgICAgIHJldHVybgogICAgZmkKCiAgICBOT1c9JChkYXRlICslcykKICAgIFRPS0VOX0FHRT0kKChOT1cgLSBUT0tFTl9HRU5FUkFURURfQVQpKQogICAgIyBSZWZyZXNoIGlmIHRva2VuIGlzIG9sZGVyIHRoYW4gNTAgbWludXRlcyAoR2l0SHViIHRva2VucyBsYXN0IDEgaG91ciwgcmVmcmVzaCBhdCA1MCBtaW4gdG8gYmUgc2FmZSkKICAgIGlmIFsgJFRPS0VOX0FHRSAtZ3QgMzAwMCBdOyB0aGVuCiAgICAgICAgZWNobyAi8J+UhCBUb2tlbiBpcyAkKCgkVE9LRU5fQUdFIC8gNjApKSBtaW51dGVzIG9sZCwgcmVmcmVzaGluZy4uLiIKICAgICAgICBnZW5lcmF0ZV9naXRodWJfdG9rZW4KICAgIGZpCn0KCiMgQXV0aGVudGljYXRlIHdpdGggR2l0SHViIEFwcAppZiBbIC1uICIkR0lUSFVCX0FQUF9QUklWQVRFX0tFWSIgXSAmJiBbIC1uICIkR0lUSFVCX0FQUF9JRCIgXTsgdGhlbgogICAgIyBJbml0aWFsIGF1dGhlbnRpY2F0aW9uCiAgICBnZW5lcmF0ZV9naXRodWJfdG9rZW4KCiAgICAjIFZhbGlkYXRlIGF1dGhlbnRpY2F0aW9uIGJ5IHRlc3RpbmcgYWN0dWFsIEdpdEh1YiBvcGVyYXRpb25zIHdlJ2xsIG5lZWQKICAgIGVjaG8gIvCflI0gVmFsaWRhdGluZyBHaXRIdWIgYXV0aGVudGljYXRpb24gd2l0aCBhY3R1YWwgb3BlcmF0aW9ucy4uLiIKICAgIFJFUE9fT1dORVI9JChlY2hvICIkUkVQT19VUkwiIHwgc2VkICdzfGh0dHBzOi8vZ2l0aHViLmNvbS98fCcgfCBzZWQgJ3N8Ly4qfHwnKQogICAgUkVQT19OQU1FPSQoZWNobyAiJFJFUE9fVVJMIiB8IHNlZCAnc3wuKi98fCcpCgogICAgIyBUZXN0IDE6IENhbiB3ZSBhY2Nlc3MgdGhlIHJlcG9zaXRvcnk/CiAgICBpZiBnaCBhcGkgInJlcG9zLyRSRVBPX09XTkVSLyRSRVBPX05BTUUiID4gL3RtcC9yZXBvX3Rlc3QuanNvbiAyPiYxOyB0aGVuCiAgICAgICAgZWNobyAi4pyFIFJlcG9zaXRvcnkgYWNjZXNzIGNvbmZpcm1lZCIKICAgIGVsc2UKICAgICAgICBlY2hvICLinYwgQ2Fubm90IGFjY2VzcyByZXBvc2l0b3J5ICRSRVBPX09XTkVSLyRSRVBPX05BTUUiCiAgICAgICAgZWNobyAiRXJyb3I6ICQoY2F0IC90bXAvcmVwb190ZXN0Lmpzb24pIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICAjIFRlc3QgMjogQ2FuIHdlIGxpc3QgYnJhbmNoZXMgKG5lZWRlZCBmb3IgUFIgY3JlYXRpb24pPwogICAgaWYgZ2ggYXBpICJyZXBvcy8kUkVQT19PV05FUi8kUkVQT19OQU1FL2JyYW5jaGVzIiA+IC90bXAvYnJhbmNoZXNfdGVzdC5qc29uIDI+JjE7IHRoZW4KICAgICAgICBlY2hvICLinIUgQ2FuIGxpc3QgYnJhbmNoZXMiCiAgICBlbHNlCiAgICAgICAgZWNobyAi4p2MIENhbm5vdCBsaXN0IGJyYW5jaGVzIgogICAgICAgIGVjaG8gIkVycm9yOiAkKGNhdCAvdG1wL2JyYW5jaGVzX3Rlc3QuanNvbikiCiAgICAgICAgZXhpdCAxCiAgICBmaQoKICAgICMgVGVzdCAzOiBDYW4gd2UgZ2V0IGFwcCBpbmZvIChHaXRIdWIgQXBwcyBjYW4ndCBhY2Nlc3MgdXNlciBlbmRwb2ludCk/CiAgICBpZiBnaCBhcGkgYXBwID4gL3RtcC9hcHBfdGVzdC5qc29uIDI+JjE7IHRoZW4KICAgICAgICBBUFBfTkFNRT0kKGpxIC1yICcubmFtZScgL3RtcC9hcHBfdGVzdC5qc29uIDI+L2Rldi9udWxsIHx8IGVjaG8gInVua25vd24iKQogICAgICAgIGVjaG8gIuKchSBHaXRIdWIgQXBwIEFQSSBhY2Nlc3MgY29uZmlybWVkOiAkQVBQX05BTUUiCiAgICBlbHNlCiAgICAgICAgZWNobyAi4pyFIEFwcCBlbmRwb2ludCBub3QgYWNjZXNzaWJsZSAobm9ybWFsIGZvciBHaXRIdWIgQXBwcykgLSB1c2luZyByZXBvIGFjY2VzcyBhcyBjb25maXJtYXRpb24iCiAgICBmaQoKICAgIGVjaG8gIuKchSBBbGwgR2l0SHViIGF1dGhlbnRpY2F0aW9uIHRlc3RzIHBhc3NlZCAtIHByb2NlZWRpbmcgd2l0aCBjb25maWRlbmNlIgoKZWxzZQogICAgZWNobyAi4p2MIEdJVEhVQl9BUFBfUFJJVkFURV9LRVkgb3IgR0lUSFVCX0FQUF9JRCBub3QgZm91bmQiCiAgICBleGl0IDEKZmkKCgojIEdpdCBjb25maWd1cmF0aW9uIHdpdGggcHJvcGVyIEdpdEh1YiBBcHAgYXR0cmlidXRpb24KZ2l0IGNvbmZpZyAtLWdsb2JhbCAtLWFkZCBzYWZlLmRpcmVjdG9yeSAiJFRBU0tfV09SS1NQQUNFIgoKIyBTZXQgR2l0SHViIEFwcCBhdHRyaWJ1dGlvbiAtIHVzZSBnZW5lcmljIGZvcm1hdCBmb3IgYWxsIGFnZW50cwpkZXJpdmVfYm90X2lkZW50aXR5KCkgewogICAgbG9jYWwgYXBwX25hbWU9IiQxIgoKICAgIGlmIFsgLXogIiRhcHBfbmFtZSIgXSB8fCBbICIkYXBwX25hbWUiID0gIm51bGwiIF07IHRoZW4KICAgICAgICBHSVRfQVVUSE9SX05BTUU9ImF1dG9tYXRpb25bYm90XSIKICAgICAgICBHSVRfQVVUSE9SX0VNQUlMPSJhdXRvbWF0aW9uW2JvdF1AdXNlcnMubm9yZXBseS5naXRodWIuY29tIgogICAgICAgIHJldHVybgogICAgZmkKCiAgICBsb2NhbCBzbHVnCiAgICBzbHVnPSQocHJpbnRmICclcycgIiRhcHBfbmFtZSIgfCB0ciAnWzp1cHBlcjpdJyAnWzpsb3dlcjpdJyB8IHNlZCAtRSAncy9bXmEtejAtOV0rLy0vZycgfCBzZWQgLUUgJ3MvXi0rfC0rJC8vZycpCiAgICBpZiBbIC16ICIkc2x1ZyIgXTsgdGhlbgogICAgICAgIHNsdWc9JChwcmludGYgJyVzJyAiJGFwcF9uYW1lIiB8IHRyICdbOnVwcGVyOl0nICdbOmxvd2VyOl0nKQogICAgZmkKCiAgICBsb2NhbCBib3RfbG9naW49IiR7c2x1Z31bYm90XSIKICAgIGxvY2FsIGJvdF9lbWFpbD0iJHtib3RfbG9naW59QHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbSIKCiAgICBpZiBbIC1uICIke0dJVEhVQl9UT0tFTjotfSIgXTsgdGhlbgogICAgICAgIGxvY2FsIGVuY29kZWRfbG9naW4KICAgICAgICBlbmNvZGVkX2xvZ2luPSQocHJpbnRmICclcycgIiRib3RfbG9naW4iIHwgc2VkICdzL1xbLyU1Qi9nOyBzL1xdLyU1RC9nJykKICAgICAgICBsb2NhbCBib3RfcmVzcG9uc2UKICAgICAgICBib3RfcmVzcG9uc2U9JChjdXJsIC1zUyAtSCAiQXV0aG9yaXphdGlvbjogdG9rZW4gJEdJVEhVQl9UT0tFTiIgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS91c2Vycy8ke2VuY29kZWRfbG9naW59IiAyPi9kZXYvbnVsbCB8fCB0cnVlKQogICAgICAgIGxvY2FsIGJvdF9pZAogICAgICAgIGJvdF9pZD0kKHByaW50ZiAnJXMnICIkYm90X3Jlc3BvbnNlIiB8IGpxIC1yICcuaWQgLy8gZW1wdHknIDI+L2Rldi9udWxsIHx8IGVjaG8gJycpCiAgICAgICAgaWYgWyAtbiAiJGJvdF9pZCIgXTsgdGhlbgogICAgICAgICAgICBib3RfZW1haWw9IiR7Ym90X2lkfSske2JvdF9sb2dpbn1AdXNlcnMubm9yZXBseS5naXRodWIuY29tIgogICAgICAgIGZpCiAgICBmaQoKICAgIEdJVF9BVVRIT1JfTkFNRT0iJGJvdF9sb2dpbiIKICAgIEdJVF9BVVRIT1JfRU1BSUw9IiRib3RfZW1haWwiCn0KCkdJVEhVQl9BUFA9Int7Z2l0aHViX2FwcH19IgpkZXJpdmVfYm90X2lkZW50aXR5ICIkR0lUSFVCX0FQUCIKCiMgQ29uZmlndXJlIGdpdCB3aXRoIHByb3BlciBHaXRIdWIgQXBwIGF0dHJpYnV0aW9uCmdpdCBjb25maWcgLS1nbG9iYWwgdXNlci5uYW1lICIkR0lUX0FVVEhPUl9OQU1FIgpnaXQgY29uZmlnIC0tZ2xvYmFsIHVzZXIuZW1haWwgIiRHSVRfQVVUSE9SX0VNQUlMIgoKIyBTZXQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBDbGF1ZGUgQ29kZSB0byB1c2UKZXhwb3J0IEdJVF9BVVRIT1JfTkFNRT0iJEdJVF9BVVRIT1JfTkFNRSIKZXhwb3J0IEdJVF9BVVRIT1JfRU1BSUw9IiRHSVRfQVVUSE9SX0VNQUlMIgpleHBvcnQgR0lUX0NPTU1JVFRFUl9OQU1FPSIkR0lUX0FVVEhPUl9OQU1FIgpleHBvcnQgR0lUX0NPTU1JVFRFUl9FTUFJTD0iJEdJVF9BVVRIT1JfRU1BSUwiCgplY2hvICLinJMgR2l0IGNvbmZpZ3VyZWQiCgojIFJlcG9zaXRvcnkgc2V0dXAKUkVQT19CUkFOQ0g9Int7c291cmNlX2JyYW5jaH19IgplY2hvICJSZXBvc2l0b3J5OiAkUkVQT19VUkwiCmVjaG8gIkJyYW5jaDogJFJFUE9fQlJBTkNIIgoKaWYgWyAtZCAiL3dvcmtzcGFjZS8uZ2l0IiBdOyB0aGVuCiAgZWNobyAiUmVwb3NpdG9yeSBleGlzdHMsIHVwZGF0aW5nLi4uIgogIGNkICIkVEFTS19XT1JLU1BBQ0UiCiAgZ2l0IHJlbW90ZSBzZXQtdXJsIG9yaWdpbiAiJFJFUE9fVVJMIgogIGdpdCBmZXRjaCBvcmlnaW4KICBnaXQgY2hlY2tvdXQgIiRSRVBPX0JSQU5DSCIKICBnaXQgcHVsbCBvcmlnaW4gIiRSRVBPX0JSQU5DSCIKZWxzZQogIGVjaG8gIlNldHRpbmcgdXAgcmVwb3NpdG9yeS4uLiIKICAjIENsb25lIHRvIHRlbXAgZGlyZWN0b3J5IGZpcnN0LCB0aGVuIG1vdmUgY29udGVudHMKICBURU1QX0NMT05FX0RJUj0iL3RtcC9yZXBvLWNsb25lIgogIHJtIC1yZiAiJFRFTVBfQ0xPTkVfRElSIgoKICBpZiAhIGdpdCBjbG9uZSAtLWRlcHRoIDEgLS1icmFuY2ggIiRSRVBPX0JSQU5DSCIgIiRSRVBPX1VSTCIgIiRURU1QX0NMT05FX0RJUiI7IHRoZW4KICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gY2xvbmUgcmVwb3NpdG9yeSIKICAgIGV4aXQgMQogIGZpCgogICMgTW92ZSByZXBvc2l0b3J5IGNvbnRlbnRzIHRvIHdvcmtzcGFjZQogIG12ICIkVEVNUF9DTE9ORV9ESVIiLyogL3dvcmtzcGFjZS8gMj4vZGV2L251bGwgfHwgdHJ1ZQogIG12ICIkVEVNUF9DTE9ORV9ESVIiLy5bXi5dKiAvd29ya3NwYWNlLyAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgcm0gLXJmICIkVEVNUF9DTE9ORV9ESVIiCiAgY2QgIiRUQVNLX1dPUktTUEFDRSIKZmkKCmVjaG8gIuKckyBSZXBvc2l0b3J5IHJlYWR5IgoKIyBXb3JraW5nIGRpcmVjdG9yeSBzZXR1cApXT1JLSU5HX0RJUj0ie3t3b3JraW5nX2RpcmVjdG9yeX19IgppZiBbIC1uICIkV09SS0lOR19ESVIiIF0gJiYgWyAiJFdPUktJTkdfRElSIiAhPSAiLiIgXTsgdGhlbgogIENMQVVERV9XT1JLX0RJUj0iL3dvcmtzcGFjZS8kV09SS0lOR19ESVIiCiAgY2QgIiRDTEFVREVfV09SS19ESVIiIHx8IGV4aXQgMQogIGVjaG8gIuKckyBXb3JraW5nIGRpcmVjdG9yeTogJENMQVVERV9XT1JLX0RJUiIKZWxzZQogIENMQVVERV9XT1JLX0RJUj0iL3dvcmtzcGFjZSIKICBlY2hvICLinJMgV29ya2luZyBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmZpCgojIENvcHkgQ29uZmlnTWFwIGZpbGVzCmVjaG8gIlNldHRpbmcgdXAgQ29uZmlnTWFwIGZpbGVzLi4uIgppZiBbIC1kICIvdGFzay1maWxlcyIgXTsgdGhlbgogICMgQ29weSBtYXJrZG93biBmaWxlcwogIGZvciBtZF9maWxlIGluIC90YXNrLWZpbGVzLyoubWQ7IGRvCiAgICBpZiBbIC1mICIkbWRfZmlsZSIgXTsgdGhlbgogICAgICBiYXNlbmFtZV9maWxlPSQoYmFzZW5hbWUgIiRtZF9maWxlIikKICAgICAgaWYgWyAiJGJhc2VuYW1lX2ZpbGUiID0gImNsYXVkZS5tZCIgXTsgdGhlbgogICAgICAgIGNwIC1mICIkbWRfZmlsZSIgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIgogICAgICBlbHNlCiAgICAgICAgY3AgLWYgIiRtZF9maWxlIiAiJENMQVVERV9XT1JLX0RJUi8iCiAgICAgIGZpCiAgICAgIGVjaG8gIuKckyBDb3BpZWQgJGJhc2VuYW1lX2ZpbGUiCiAgICBmaQogIGRvbmUKCiAgIyBWZXJpZnkgZW50ZXJwcmlzZSBzZXR0aW5ncwogIGlmIFsgLWYgIi9ldGMvY2xhdWRlLWNvZGUvbWFuYWdlZC1zZXR0aW5ncy5qc29uIiBdOyB0aGVuCiAgICBlY2hvICLinJMgRW50ZXJwcmlzZSBzZXR0aW5ncyB2ZXJpZmllZCIKICAgIGlmICEganEgZW1wdHkgL2V0Yy9jbGF1ZGUtY29kZS9tYW5hZ2VkLXNldHRpbmdzLmpzb24gMj4vZGV2L251bGw7IHRoZW4KICAgICAgZWNobyAi4p2MIEludmFsaWQgZW50ZXJwcmlzZSBzZXR0aW5ncyBKU09OIgogICAgICBleGl0IDEKICAgIGZpCiAgZWxzZQogICAgZWNobyAi4p2MIEVudGVycHJpc2Ugc2V0dGluZ3Mgbm90IGZvdW5kIgogICAgZXhpdCAxCiAgZmkKCiAgIyBDb3B5IGhvb2sgc2NyaXB0cyAoY29udHJvbGxlciBhdXRvbWF0aWNhbGx5IGluY2x1ZGVzIGFueSBkb2NzX2hvb2tzXyogZmlsZXMpCiAgZm9yIGhvb2tfZmlsZSBpbiAvdGFzay1maWxlcy9ob29rcy0qLnNoOyBkbwogICAgaWYgWyAtZiAiJGhvb2tfZmlsZSIgXTsgdGhlbgogICAgICBob29rX25hbWU9JChiYXNlbmFtZSAiJGhvb2tfZmlsZSIgfCBzZWQgJ3MvXmhvb2tzLS8vJykKICAgICAgY3AgIiRob29rX2ZpbGUiICIkQ0xBVURFX1dPUktfRElSLyRob29rX25hbWUiCiAgICAgIGNobW9kICt4ICIkQ0xBVURFX1dPUktfRElSLyRob29rX25hbWUiCiAgZWNobyAi4pyTIENvcGllZCBob29rOiAkaG9va19uYW1lIgogICAgZmkKICBkb25lCgplbHNlCiAgZWNobyAi4p2MIENvbmZpZ01hcCBub3QgbW91bnRlZCBhdCAvdGFzay1maWxlcyIKICBleGl0IDEKZmkKCiMgVmFsaWRhdGUgd29ya3NwYWNlCmVjaG8gIlZhbGlkYXRpbmcgd29ya3NwYWNlLi4uIgpSRVFVSVJFRF9GSUxFUz0iQ0xBVURFLm1kIgpmb3IgZmlsZSBpbiAkUkVRVUlSRURfRklMRVM7IGRvCiAgaWYgWyAhIC1mICIkQ0xBVURFX1dPUktfRElSLyRmaWxlIiBdOyB0aGVuCiAgICBlY2hvICLinYwgTWlzc2luZyByZXF1aXJlZCBmaWxlOiAkZmlsZSIKICAgIGV4aXQgMQogIGZpCmRvbmUKCiMgQ2hlY2sgZm9yIC50YXNrbWFzdGVyIGRpcmVjdG9yeSAtIGNyZWF0ZSBpZiBtaXNzaW5nIGZvciByZXNpbGllbnQgc2V0dXAKaWYgWyAhIC1kICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyIiBdOyB0aGVuCiAgZWNobyAi4pqg77iPICAudGFza21hc3RlciBkaXJlY3Rvcnkgbm90IGZvdW5kLCBpbml0aWFsaXppbmcgc3RydWN0dXJlLi4uIgogIG1rZGlyIC1wICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL3Rhc2tzIgogIG1rZGlyIC1wICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL2RvY3MiCiAgZWNobyAi4pyTIENyZWF0ZWQgLnRhc2ttYXN0ZXIgc3RydWN0dXJlIgplbHNlCiAgZWNobyAi4pyTIC50YXNrbWFzdGVyIGRpcmVjdG9yeSBleGlzdHMiCmZpCgojIEVuc3VyZSBkb2NzIGRpcmVjdG9yeSBleGlzdHMgYW5kIGNsZWFuIG9sZCBkYXRhIHRvIHByZXZlbnQgY29udGFtaW5hdGlvbgpta2RpciAtcCAiJENMQVVERV9XT1JLX0RJUi8udGFza21hc3Rlci9kb2NzIgoKIyBURU1QT1JBUlk6IENsZWFuIGFueSBleGlzdGluZyBkb2N1bWVudGF0aW9uIHRvIHByZXZlbnQgY3Jvc3MtcHJvamVjdCBjb250YW1pbmF0aW9uCmVjaG8gIvCfp7kgQ2xlYW5pbmcgZXhpc3RpbmcgZG9jdW1lbnRhdGlvbiB0byBwcmV2ZW50IGNyb3NzLXByb2plY3QgY29udGFtaW5hdGlvbi4uLiIKcm0gLXJmICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL2RvY3MvdGFzay0iKiAyPi9kZXYvbnVsbCB8fCB0cnVlCmVjaG8gIuKckyBDbGVhbmVkIGV4aXN0aW5nIHRhc2sgZG9jdW1lbnRhdGlvbiIKCiMjIEhhbmRsZSB0YXNrIGZpbGVzIC0gc3VwcG9ydCBib3RoIEpTT04gYW5kIGluZGl2aWR1YWwgZmlsZSBmb3JtYXRzCmVjaG8gIlNldHRpbmcgdXAgdGFzayBmaWxlcy4uLiIKaWYgWyAtZiAiJENMQVVERV9XT1JLX0RJUi8udGFza21hc3Rlci90YXNrcy90YXNrcy5qc29uIiBdOyB0aGVuCiAgZWNobyAi8J+TiyBGb3VuZCB0YXNrcy5qc29uLCBnZW5lcmF0aW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcy4uLiIKCiAgIyBSb2J1c3QgZXh0cmFjdGlvbjogaGFuZGxlIGRpZmZlcmVudCBwb3NzaWJsZSB0YXNrcy5qc29uIHN0cnVjdHVyZXMKICBlY2hvICLwn5SNIEFuYWx5emluZyB0YXNrcy5qc29uIHN0cnVjdHVyZS4uLiIKCiAgIyBEZWJ1ZzogU2hvdyB0aGUgYWN0dWFsIHN0cnVjdHVyZSBvZiB0YXNrcy5qc29uCiAgZWNobyAi8J+ThCBSYXcgdGFza3MuanNvbiBzdHJ1Y3R1cmUgcHJldmlldzoiCiAgaGVhZCAtMjAgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbiIgMj4vZGV2L251bGwgfHwgZWNobyAiQ291bGQgbm90IHJlYWQgdGFza3MuanNvbiIKICBlY2hvICLwn5OKIEpTT04gc3RydWN0dXJlIGFuYWx5c2lzOiIKICBqcSAtciAnIlR5cGU6ICIgKyAodHlwZSB8IHRvc3RyaW5nKSArICIsIExlbmd0aDogIiArIChpZiB0eXBlID09ICJhcnJheSIgdGhlbiBsZW5ndGggZWxzZSAoa2V5cyB8IGxlbmd0aCkgZW5kIHwgdG9zdHJpbmcpJyAiJENMQVVERV9XT1JLX0RJUi8udGFza21hc3Rlci90YXNrcy90YXNrcy5qc29uIiAyPi9kZXYvbnVsbCB8fCBlY2hvICJDb3VsZCBub3QgYW5hbHl6ZSBKU09OIHN0cnVjdHVyZSIKCiAgZ2VuX2NvdW50PTAKCiAgIyBVc2UganEgZGlyZWN0bHkgdG8gcHJvY2VzcyB0YXNrcyB3aXRob3V0IGJhc2U2NCBlbmNvZGluZy9kZWNvZGluZwogICMgVGhpcyBhdm9pZHMgdGhlIGJhc2U2NCBpbnZhbGlkIGlucHV0IGVycm9ycwoKICAjIEZpcnN0LCBjaGVjayB0aGUgYWN0dWFsIHN0cnVjdHVyZSBvZiB0YXNrcy5qc29uCiAgaWYganEgLWUgJy5tYXN0ZXIudGFza3MgYW5kICgubWFzdGVyLnRhc2tzIHwgdHlwZSA9PSAiYXJyYXkiKScgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbiIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBlY2hvICLwn5OLIERldGVjdGVkIFRhc2tNYXN0ZXIgc3RydWN0dXJlIHdpdGggbWFzdGVyLnRhc2tzIGFycmF5IgogICAganEgLWMgJy5tYXN0ZXIudGFza3NbXSB8IHNlbGVjdCguaWQgIT0gbnVsbCknICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL3Rhc2tzL3Rhc2tzLmpzb24iCiAgZWxpZiBqcSAtZSAndHlwZSA9PSAiYXJyYXkiIGFuZCBsZW5ndGggPiAwJyAiJENMQVVERV9XT1JLX0RJUi8udGFza21hc3Rlci90YXNrcy90YXNrcy5qc29uIiA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIvCfk4sgRGV0ZWN0ZWQgYXJyYXkgc3RydWN0dXJlLCBjaGVja2luZyBpZiBpdCBjb250YWlucyB0YXNrIG9iamVjdHMgZGlyZWN0bHkuLi4iCiAgICAjIENoZWNrIGlmIGl0J3MgYW4gYXJyYXkgb2YgdGFzayBvYmplY3RzIGRpcmVjdGx5CiAgICBpZiBqcSAtZSAnLlswXSB8IGhhcygiaWQiKScgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbiIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgIGVjaG8gIvCfk4sgUHJvY2Vzc2luZyBhcyBkaXJlY3QgYXJyYXkgb2YgdGFzayBvYmplY3RzIgogICAgICBqcSAtYyAnLltdIHwgc2VsZWN0KC5pZCAhPSBudWxsKScgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbiIKICAgIGVsaWYganEgLWUgJy5bMF0gfCBoYXMoInRhc2tzIiknICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL3Rhc2tzL3Rhc2tzLmpzb24iID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICBlY2hvICLwn5OLIFByb2Nlc3NpbmcgYXMgYXJyYXkgd2l0aCBuZXN0ZWQgdGFza3MgYXJyYXlzIgogICAgICBqcSAtYyAnLltdLnRhc2tzW10/IHwgc2VsZWN0KC5pZCAhPSBudWxsKScgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbiIKICAgIGVsc2UKICAgICAgZWNobyAi8J+TiyBQcm9jZXNzaW5nIGFzIGdlbmVyaWMgYXJyYXkgc3RydWN0dXJlIgogICAgICBqcSAtYyAnLltdIHwgc2VsZWN0KC5pZCAhPSBudWxsKScgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbiIKICAgIGZpCiAgZWxpZiBqcSAtZSAnLnRhc2tzIGFuZCAoLnRhc2tzIHwgdHlwZSA9PSAiYXJyYXkiKScgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvdGFza3MvdGFza3MuanNvbiIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBlY2hvICLwn5OLIFByb2Nlc3NpbmcgYXMgb2JqZWN0IHdpdGggdGFza3MgYXJyYXkiCiAgICBqcSAtYyAnLnRhc2tzW10gfCBzZWxlY3QoLmlkICE9IG51bGwpJyAiJENMQVVERV9XT1JLX0RJUi8udGFza21hc3Rlci90YXNrcy90YXNrcy5qc29uIgogIGVsc2UKICAgIGVjaG8gIuKaoO+4jyBVbmV4cGVjdGVkIHRhc2tzLmpzb24gc3RydWN0dXJlLCBhdHRlbXB0aW5nIGdlbmVyaWMgZXh0cmFjdGlvbi4uLiIKICAgICMgRmFsbGJhY2s6IHRyeSB0byBleHRyYWN0IGFueSBvYmplY3RzIHdpdGggaWQgZmllbGQKICAgIGpxIC1jICcuLiB8IG9iamVjdHMgfCBzZWxlY3QoLmlkICE9IG51bGwpJyAiJENMQVVERV9XT1JLX0RJUi8udGFza21hc3Rlci90YXNrcy90YXNrcy5qc29uIiAyPi9kZXYvbnVsbCB8fCB7CiAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gcGFyc2UgdGFza3MuanNvbiBzdHJ1Y3R1cmUiCiAgICAgIGVjaG8gIlNob3dpbmcgcmF3IHRhc2tzLmpzb24gY29udGVudCBmb3IgZGVidWdnaW5nOiIKICAgICAgY2F0ICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL3Rhc2tzL3Rhc2tzLmpzb24iIDI+L2Rldi9udWxsIHx8IGVjaG8gIkNvdWxkIG5vdCByZWFkIHRhc2tzLmpzb24iCiAgICAgIGV4aXQgMQogICAgfQogIGZpIFwKICAgIHwgd2hpbGUgSUZTPSByZWFkIC1yIHRhc2tfanNvbjsgZG8KICAgICAgaWYgWyAteiAiJHRhc2tfanNvbiIgXTsgdGhlbgogICAgICAgIGNvbnRpbnVlCiAgICAgIGZpCgogICAgICAjIERpcmVjdCBKU09OIGV4dHJhY3Rpb24gd2l0aCBlcnJvciBoYW5kbGluZyAobm8gYmFzZTY0IGRlY29kaW5nIG5lZWRlZCkKICAgICAgX2RlY29kZSgpIHsKICAgICAgICBwcmludGYgJyVzJyAiJHRhc2tfanNvbiIgfCBqcSAtciAiJDEiIDI+L2Rldi9udWxsIHx8IGVjaG8gIiIKICAgICAgfQoKICAgICAgdGFza19pZD0kKF9kZWNvZGUgJy5pZCcpCiAgICAgIGlmIFsgLXogIiR0YXNrX2lkIiBdIHx8IFsgIiR0YXNrX2lkIiA9ICJudWxsIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4pqg77iPIFNraXBwaW5nIHRhc2sgd2l0aG91dCB2YWxpZCBpZDogJHRhc2tfaWQiCiAgICAgICAgY29udGludWUKICAgICAgZmkKICAgICAgdGl0bGU9JChfZGVjb2RlICcudGl0bGUgLy8gIk5vIFRpdGxlIicpCiAgICAgIGRlc2NyaXB0aW9uPSQoX2RlY29kZSAnLmRlc2NyaXB0aW9uIC8vICIiJykKICAgICAgZGV0YWlscz0kKF9kZWNvZGUgJy5kZXRhaWxzIC8vICIiJykKICAgICAgdGVzdF9zdHJhdGVneT0kKF9kZWNvZGUgJy50ZXN0U3RyYXRlZ3kgLy8gIiInKQoKICAgICAgdGFza19kaXI9IiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvZG9jcy90YXNrLSR0YXNrX2lkIgogICAgICBta2RpciAtcCAiJHRhc2tfZGlyIgogICAgICBjYXQgPiAiJHRhc2tfZGlyL3Rhc2sudHh0IiA8PCBFT0YKIyBUYXNrICR0YXNrX2lkOiAkdGl0bGUKCiMjIERlc2NyaXB0aW9uCiRkZXNjcmlwdGlvbgoKIyMgSW1wbGVtZW50YXRpb24gRGV0YWlscwokZGV0YWlscwoKIyMgVGVzdCBTdHJhdGVneQokdGVzdF9zdHJhdGVneQpFT0YKCiAgICAgICMgR2VuZXJhdGUgWE1MIGZvcm1hdCBvcHRpbWl6ZWQgZm9yIExMTSBjb25zdW1wdGlvbiB3aXRoIGVuaGFuY2VkIHN0cnVjdHVyZQogICAgICAjIEV4dHJhY3QgYWRkaXRpb25hbCBmaWVsZHMgZm9yIFhNTCBzdHJ1Y3R1cmUKICAgICAgcHJpb3JpdHk9JChfZGVjb2RlICcucHJpb3JpdHkgLy8gIm1lZGl1bSInKQogICAgICBkZXBlbmRlbmNpZXM9JChfZGVjb2RlICcuZGVwZW5kZW5jaWVzIC8vIFtdJyB8IGpxIC1yICdpZiB0eXBlID09ICJhcnJheSIgdGhlbiAuIGVsc2UgW10gZW5kIHwgam9pbigiLCAiKScpCiAgICAgIHN0YXR1cz0kKF9kZWNvZGUgJy5zdGF0dXMgLy8gInBlbmRpbmciJykKCiAgICAgICMgRGV0ZXJtaW5lIHRlY2hub2xvZ3kgc3RhY2sgZnJvbSB0YXNrIGNvbnRlbnQgZm9yIHJvbGUgZGVmaW5pdGlvbgogICAgICBpZiBlY2hvICIkZGV0YWlscyIgfCBncmVwIC1xaSAicnVzdFx8Y2FyZ29cfHRva2lvXHxzZXJkZSI7IHRoZW4KICAgICAgICB0ZWNoX3JvbGU9InNlbmlvciBSdXN0IGRldmVsb3BlciBzcGVjaWFsaXppbmcgaW4gS3ViZXJuZXRlcyBjb250cm9sbGVycyBhbmQgY2xvdWQtbmF0aXZlIGFwcGxpY2F0aW9ucyIKICAgICAgZWxpZiBlY2hvICIkZGV0YWlscyIgfCBncmVwIC1xaSAia3ViZXJuZXRlc1x8azhzXHxhcmdvXHxoZWxtIjsgdGhlbgogICAgICAgIHRlY2hfcm9sZT0ic2VuaW9yIEt1YmVybmV0ZXMgZW5naW5lZXIgc3BlY2lhbGl6aW5nIGluIEdpdE9wcyB3b3JrZmxvd3MgYW5kIEFyZ28gRXZlbnRzIgogICAgICBlbGlmIGVjaG8gIiRkZXRhaWxzIiB8IGdyZXAgLXFpICJhcmdvXHx3b3JrZmxvd1x8ZXZlbnRzIjsgdGhlbgogICAgICAgIHRlY2hfcm9sZT0ic2VuaW9yIERldk9wcyBlbmdpbmVlciBzcGVjaWFsaXppbmcgaW4gQXJnbyBXb3JrZmxvd3MgYW5kIGV2ZW50LWRyaXZlbiBhdXRvbWF0aW9uIgogICAgICBlbHNlCiAgICAgICAgdGVjaF9yb2xlPSJzZW5pb3Igc29mdHdhcmUgZW5naW5lZXIgYW5kIGNvZGluZyBhZ2VudCBzcGVjaWFsaXppbmcgaW4gdGhlIHByb2plY3QncyB0ZWNobm9sb2d5IHN0YWNrIgogICAgICBmaQoKICAgICAgIyBFeHRyYWN0IHRlY2huaWNhbCBzcGVjaWZpY2F0aW9ucyBmcm9tIHRhc2sgZGV0YWlscwogICAgICBzcGVjcz0iIgogICAgICBpZiBlY2hvICIkZGV0YWlscyIgfCBncmVwIC1BIDEwIC1pICJ0ZWNobmljYWxcfHJlcXVpcmVtZW50c1x8c3BlY2lmaWNhdGlvbnMiID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgIHNwZWNzX3NlY3Rpb249JChlY2hvICIkZGV0YWlscyIgfCBzZWQgLW4gJy90ZWNobmljYWxcfHJlcXVpcmVtZW50c1x8c3BlY2lmaWNhdGlvbnMvSSwvXiQvcCcgfCBoZWFkIC0xMCkKICAgICAgICB3aGlsZSBJRlM9IHJlYWQgLXIgbGluZTsgZG8KICAgICAgICAgICMgQ2FzZS1pbnNlbnNpdGl2ZSBjaGVjayB0byBleGNsdWRlIHNlY3Rpb24gaGVhZGVycwogICAgICAgICAgaWYgW1sgLW4gIiRsaW5lIiBdXSAmJiAhIGVjaG8gIiRsaW5lIiB8IGdyZXAgLXFpICJeW1s6c3BhY2U6XV0qXCh0ZWNobmljYWxcfHJlcXVpcmVtZW50c1x8c3BlY2lmaWNhdGlvbnNcKVtbOnNwYWNlOl1dKiQiOyB0aGVuCiAgICAgICAgICAgICMgWE1MIGVzY2FwZSB0aGUgY29udGVudAogICAgICAgICAgICBlc2NhcGVkX2xpbmU9JChlY2hvICIkbGluZSIgfCBzZWQgJ3MvJi9cJmFtcDsvZzsgcy88L1wmbHQ7L2c7IHMvPi9cJmd0Oy9nOyBzLyIvXCZxdW90Oy9nOyBzLydcJycvXCYjMzk7L2cnKQogICAgICAgICAgICBzcGVjcz0iJHtzcGVjc308c3BlYz4kZXNjYXBlZF9saW5lPC9zcGVjPgogICAgICAgICIKICAgICAgICAgIGZpCiAgICAgICAgZG9uZSA8PDwgIiRzcGVjc19zZWN0aW9uIgogICAgICBmaQoKICAgICAgIyBGYWxsYmFjayBzcGVjcyBpZiBub25lIGZvdW5kCiAgICAgIGlmIFsgLXogIiRzcGVjcyIgXTsgdGhlbgogICAgICAgIHNwZWNzPSI8c3BlYz5Gb2xsb3cgdGhlIHByb2plY3QmYXBvcztzIGV4aXN0aW5nIGFyY2hpdGVjdHVyZSBhbmQgY29kaW5nIHBhdHRlcm5zPC9zcGVjPgogICAgICAgIDxzcGVjPkVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggdGhlIGN1cnJlbnQgdGVjaG5vbG9neSBzdGFjazwvc3BlYz4KICAgICAgICA8c3BlYz5JbXBsZW1lbnQgcHJvcGVyIGVycm9yIGhhbmRsaW5nIGFuZCBsb2dnaW5nPC9zcGVjPgogICAgICAgIDxzcGVjPkZvbGxvdyBlc3RhYmxpc2hlZCBzZWN1cml0eSBiZXN0IHByYWN0aWNlczwvc3BlYz4iCiAgICAgIGZpCgogICAgICAjIEV4dHJhY3QgYWNjZXB0YW5jZSBjcml0ZXJpYSBmcm9tIHRlc3Qgc3RyYXRlZ3kKICAgICAgY3JpdGVyaWE9IiIKICAgICAgaWYgWyAtbiAiJHRlc3Rfc3RyYXRlZ3kiIF07IHRoZW4KICAgICAgICAjIFNwbGl0IHRlc3Qgc3RyYXRlZ3kgaW50byBpbmRpdmlkdWFsIGNyaXRlcmlhIG9uIG51bWJlcmVkIGl0ZW1zICgxLiwgMi4sIGV0Yy4pCiAgICAgICAgIyBVc2Ugd29yZCBib3VuZGFyaWVzIHRvIGF2b2lkIHNwbGl0dGluZyBvbiB2ZXJzaW9uIG51bWJlcnMgb3IgZGVjaW1hbHMKICAgICAgICBJRlM9JCdcbicgcmVhZCAtcmQgJycgLWEgdGVzdF9wYXJ0cyA8PDwgIiQoZWNobyAiJHRlc3Rfc3RyYXRlZ3kiIHwgZ3JlcCAtRSAnXltbOnNwYWNlOl1dKlswLTldK1tbOnNwYWNlOl1dKlwuW1s6c3BhY2U6XV0qW0EtWl0nKSIKICAgICAgICBmb3IgcGFydCBpbiAiJHt0ZXN0X3BhcnRzW0BdfSI7IGRvCiAgICAgICAgICBwYXJ0PSQoZWNobyAiJHBhcnQiIHwgc2VkICdzL15bWzpzcGFjZTpdXSpbMC05XVwrXC5bWzpzcGFjZTpdXSovLztzL1tbOnNwYWNlOl1dKiQvLycpCiAgICAgICAgICBpZiBbIC1uICIkcGFydCIgXSAmJiBbICR7I3BhcnR9IC1ndCAxMCBdOyB0aGVuCiAgICAgICAgICAgICMgWE1MIGVzY2FwZSB0aGUgY29udGVudAogICAgICAgICAgICBlc2NhcGVkX3BhcnQ9JChlY2hvICIkcGFydCIgfCBzZWQgJ3MvJi9cJmFtcDsvZzsgcy88L1wmbHQ7L2c7IHMvPi9cJmd0Oy9nOyBzLyIvXCZxdW90Oy9nOyBzLydcJycvXCYjMzk7L2cnKQogICAgICAgICAgICBjcml0ZXJpYT0iJHtjcml0ZXJpYX08Y3JpdGVyaW9uPiRlc2NhcGVkX3BhcnQ8L2NyaXRlcmlvbj4KICAgICAgICAiCiAgICAgICAgICBmaQogICAgICAgIGRvbmUKICAgICAgZmkKCiAgICAgICMgRmFsbGJhY2sgY3JpdGVyaWEgaWYgbm9uZSBleHRyYWN0ZWQKICAgICAgaWYgWyAteiAiJGNyaXRlcmlhIiBdOyB0aGVuCiAgICAgICAgY3JpdGVyaWE9Ijxjcml0ZXJpb24+SW1wbGVtZW50YXRpb24gbXVzdCBiZSBjb21wbGV0ZSBhbmQgZnVuY3Rpb25hbDwvY3JpdGVyaW9uPgogICAgICAgIDxjcml0ZXJpb24+Q29kZSBtdXN0IGZvbGxvdyB0aGUgcHJvamVjdCZhcG9zO3Mgc3R5bGUgZ3VpZGVsaW5lcyBhbmQgY29udmVudGlvbnM8L2NyaXRlcmlvbj4KICAgICAgICA8Y3JpdGVyaW9uPkFsbCBlZGdlIGNhc2VzIHNob3VsZCBiZSBwcm9wZXJseSBoYW5kbGVkPC9jcml0ZXJpb24+CiAgICAgICAgPGNyaXRlcmlvbj5JbXBsZW1lbnRhdGlvbiBzaG91bGQgYmUgd2VsbC1kb2N1bWVudGVkIHdpdGggY2xlYXIgY29tbWVudHM8L2NyaXRlcmlvbj4iCiAgICAgIGZpCgogICAgICBnZW5fY291bnQ9JCgoZ2VuX2NvdW50KzEpKQogICAgICBlY2hvICLinJMgR2VuZXJhdGVkIGRvY3MvdGFzay0kdGFza19pZC90YXNrLnR4dCIKICAgIGRvbmUKICBlY2hvICJHZW5lcmF0ZWQgJGdlbl9jb3VudCB0YXNrIGRpcmVjdG9yaWVzIHdpdGggdHh0IGZpbGVzIGZyb20gdGFza3MuanNvbiIKZWxpZiBbIC1kICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL3Rhc2tzIiBdICYmIFsgIiQobHMgLUEgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvdGFza3MiIDI+L2Rldi9udWxsKSIgXTsgdGhlbgogIGVjaG8gIvCfk4sgRm91bmQgaW5kaXZpZHVhbCB0YXNrIGZpbGVzLCBjb3B5aW5nIHRvIGRvY3MgZGlyZWN0b3J5Li4uIgoKICAjIENvcHkgaW5kaXZpZHVhbCB0YXNrIGZpbGVzIGZyb20gdGFza3MvIHRvIGRvY3MvIGRpcmVjdG9yeQogIGZvciB0YXNrX2RpciBpbiAiJENMQVVERV9XT1JLX0RJUi8udGFza21hc3Rlci90YXNrcyIvdGFzay0qOyBkbwogICAgaWYgWyAtZCAiJHRhc2tfZGlyIiBdOyB0aGVuCiAgICAgIHRhc2tfbmFtZT0kKGJhc2VuYW1lICIkdGFza19kaXIiKQogICAgICB0YXJnZXRfZGlyPSIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL2RvY3MvJHRhc2tfbmFtZSIKICAgICAgbWtkaXIgLXAgIiR0YXJnZXRfZGlyIgogICAgICBjcCAtciAiJHRhc2tfZGlyIi8qICIkdGFyZ2V0X2Rpci8iCiAgICAgIGVjaG8gIuKckyBDb3BpZWQgJHRhc2tfbmFtZSB0byBkb2NzIGRpcmVjdG9yeSIKICAgIGZpCiAgZG9uZQplbHNlCiAgZWNobyAi4p2MIE5vIHRhc2sgZmlsZXMgZm91bmQgLSBleHBlY3RlZCBlaXRoZXI6IgogIGVjaG8gIiAgLSB0YXNrcy5qc29uIGF0IC50YXNrbWFzdGVyL3Rhc2tzL3Rhc2tzLmpzb24iCiAgZWNobyAiICAtIEluZGl2aWR1YWwgdGFzayBkaXJlY3RvcmllcyBhdCAudGFza21hc3Rlci90YXNrcy90YXNrLSovIgogIGV4aXQgMQpmaQoKIyBWZXJpZnkgd2UgaGF2ZSB0YXNrIGZpbGVzIHRvIHdvcmsgd2l0aAppZiBbICEgLWQgIiRDTEFVREVfV09SS19ESVIvLnRhc2ttYXN0ZXIvZG9jcyIgXSB8fCBbIC16ICIkKGxzIC1BICIkQ0xBVURFX1dPUktfRElSLy50YXNrbWFzdGVyL2RvY3MiIDI+L2Rldi9udWxsKSIgXTsgdGhlbgogIGVjaG8gIuKdjCBObyB0YXNrIGZpbGVzIGF2YWlsYWJsZSBpbiAudGFza21hc3Rlci9kb2NzIGRpcmVjdG9yeSIKICBleGl0IDEKZmkKCmVjaG8gIuKckyBXb3Jrc3BhY2UgdmFsaWRhdGVkIgoKIyBDb3B5IE1DUCBzZXJ2ZXJzIGNvbmZpZyBmb3IgVG9vbG1hbiBpZiBwcm92aWRlZAppZiBbIC1mICIvdGFzay1maWxlcy9tY3AuanNvbiIgXTsgdGhlbgogICMgQ29weSB0byBib3RoIHdvcmtpbmcgZGlyZWN0b3J5IChwcm9qZWN0IHNjb3BlKSBhbmQgd29ya3NwYWNlIHJvb3QgKGxvY2FsIHNjb3BlKQogIGNwICIvdGFzay1maWxlcy9tY3AuanNvbiIgIiRDTEFVREVfV09SS19ESVIvLm1jcC5qc29uIiAmJiBlY2hvICLinJMgQ29waWVkIG1jcC5qc29uIHRvICRDTEFVREVfV09SS19ESVIvLm1jcC5qc29uIChwcm9qZWN0IHNjb3BlKSIgfHwgZWNobyAi4pqg77iPIG1jcC5qc29uIGNvcHkgdG8gd29ya2luZyBkaXIgZmFpbGVkIgogIGNwICIvdGFzay1maWxlcy9tY3AuanNvbiIgIi93b3Jrc3BhY2UvLm1jcC5qc29uIiAmJiBlY2hvICLinJMgQ29waWVkIG1jcC5qc29uIHRvIC93b3Jrc3BhY2UvLm1jcC5qc29uIChsb2NhbCBzY29wZSkiIHx8IGVjaG8gIuKaoO+4jyBtY3AuanNvbiBjb3B5IHRvIHdvcmtzcGFjZSByb290IGZhaWxlZCIKCiAgIyBGaXggTUNQIGNvbmZpZ3VyYXRpb24gZm9yIGNvbnRhaW5lciBlbnZpcm9ubWVudCBpbiBib3RoIGxvY2F0aW9ucwogIGZvciBtY3BfZmlsZSBpbiAiJENMQVVERV9XT1JLX0RJUi8ubWNwLmpzb24iICIvd29ya3NwYWNlLy5tY3AuanNvbiI7IGRvCiAgICBpZiBbIC1mICIkbWNwX2ZpbGUiIF07IHRoZW4KICAgICAgZWNobyAi8J+UpyBVcGRhdGluZyBNQ1AgY29uZmlndXJhdGlvbiBmb3IgY29udGFpbmVyIGVudmlyb25tZW50OiAkbWNwX2ZpbGUiCiAgICAgICMgVXBkYXRlIFRBU0tfTUFTVEVSX1BST0pFQ1RfUk9PVCB0byBjb250YWluZXIgcGF0aCAoZ2VuZXJpYyByZXBsYWNlbWVudCkKICAgICAgc2VkIC1pICdzfCJUQVNLX01BU1RFUl9QUk9KRUNUX1JPT1QiW1s6c3BhY2U6XV0qOltbOnNwYWNlOl1dKiJbXiJdKiJ8IlRBU0tfTUFTVEVSX1BST0pFQ1RfUk9PVCI6ICIvd29ya3NwYWNlL2RvY3MifGcnICIkbWNwX2ZpbGUiCiAgICAgIGVjaG8gIuKckyBVcGRhdGVkIE1DUCBjb25maWd1cmF0aW9uIHBhdGhzIGluICRtY3BfZmlsZSIKICAgIGZpCiAgZG9uZQplbHNlCiAgZWNobyAi4oS577iPIE5vIG1jcC5qc29uIHByb3ZpZGVkOyBUb29sbWFuIE1DUCBtYXkgbm90IGJlIGNvbmZpZ3VyZWQiCmZpCgojIEVudmlyb25tZW50IHNldHVwCmV4cG9ydCBTRVJWSUNFX05BTUU9Int7c2VydmljZV9uYW1lfX0iCmV4cG9ydCBTT1VSQ0VfQlJBTkNIPSJ7e3NvdXJjZV9icmFuY2h9fSIKZXhwb3J0IFdPUktJTkdfRElSPSJ7e3dvcmtpbmdfZGlyZWN0b3J5fX0iCmV4cG9ydCBHSVRIVUJfVVNFUj0ie3tnaXRodWJfYXBwfX0iCmV4cG9ydCBHSVRIVUJfQVBQPSJ7e2dpdGh1Yl9hcHB9fSIKCiMgT3B0aW9uYWw6IGNvcHkgYWdlbnQtY2VudHJpYyBUb29sTWFuIGNsaWVudCBjb25maWcgKGJhc2UgZnJvbSBIZWxtL2NvbnRyb2xsZXIpCmlmIFsgLWYgIi90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogIGVjaG8gIvCflI0gREVCVUc6IFNvdXJjZSAvdGFzay1maWxlcy9jbGllbnQtY29uZmlnLmpzb24gc3VtbWFyeSAocHJlLWNvcHkpOiIKICAoanEgLWMgJ3tyZW1vdGVUb29sczogKC5yZW1vdGVUb29scyAvLyBbXSksIGxvY2FsU2VydmVyczogKC5sb2NhbFNlcnZlcnMgLy8ge30pfScgXAogICAgICIvdGFzay1maWxlcy9jbGllbnQtY29uZmlnLmpzb24iIDI+L2Rldi9udWxsIFwKICAgfHwgeyBlY2hvIC1uICJyYXc9IjsgaGVhZCAtYyAyMDAgIi90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiI7IGVjaG87IH0pCgogIGNwICIvdGFzay1maWxlcy9jbGllbnQtY29uZmlnLmpzb24iICIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIgXAogICAgJiYgZWNobyAi4pyTIGNsaWVudC1jb25maWcuanNvbiBjb3BpZWQgdG8gQ2xhdWRlIHdvcmtpbmcgZGlyZWN0b3J5IiBcCiAgICB8fCBlY2hvICLinYwgY2xpZW50LWNvbmZpZy5qc29uIGNvcHkgZmFpbGVkIgogIGNwIFwkRkFDVE9SWV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24gIiRUQVNLX1dPUktTUEFDRS9jbGllbnQtY29uZmlnLmpzb24iIDI+L2Rldi9udWxsIHx8IHRydWUgXAogICAgJiYgZWNobyAi4pyTIGNsaWVudC1jb25maWcuanNvbiBjb3BpZWQgdG8gd29ya3NwYWNlIHJvb3QiIFwKICAgIHx8IGVjaG8gIuKdjCBjbGllbnQtY29uZmlnLmpzb24gY29weSB0byB3b3Jrc3BhY2UgZmFpbGVkIgoKICBpZiBbIC1mICIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogICAgZWNobyAi8J+UjSBERUJVRzogRGVzdCAkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiBzdW1tYXJ5IChwb3N0LWNvcHkpOiIKICAgIChqcSAtYyAne3JlbW90ZVRvb2xzOiAoLnJlbW90ZVRvb2xzIC8vIFtdKSwgbG9jYWxTZXJ2ZXJzOiAoLmxvY2FsU2VydmVycyAvLyB7fSl9JyBcCiAgICAgICAiJENMQVVERV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24iIDI+L2Rldi9udWxsIFwKICAgICB8fCB7IGVjaG8gLW4gInJhdz0iOyBoZWFkIC1jIDIwMCAiJENMQVVERV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24iOyBlY2hvOyB9KQogICAgIyBIYXJkZW4gZmlsZSB0byBjYXRjaCB1bmV4cGVjdGVkIG92ZXJ3cml0ZXMgKGRpYWdub3N0aWMpCiAgICBjaG1vZCBhLXcgIiRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIiAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICBlY2hvICLwn5SSIERFQlVHOiBNYWRlICRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIHJlYWQtb25seSB0byBkZXRlY3Qgb3ZlcndyaXRlcyIKICBmaQplbHNlCiAgZWNobyAi4pqg77iPIGNsaWVudC1jb25maWcuanNvbiBub3QgZm91bmQgLSBNQ1AgY2xpZW50IG1heSBub3QgYmUgY29uZmlndXJlZCIKZmkKCiMgTUNQIGNvbmZpZ3VyYXRpb24gYWxyZWFkeSBoYW5kbGVkIGFib3ZlIHdpdGggcGF0aCBmaXhlcwoKIyBFbnRlcnByaXNlIG1hbmFnZWQgc2V0dGluZ3MgYXJlIG1vdW50ZWQgZGlyZWN0bHkgZnJvbSBDb25maWdNYXAKZWNobyAiPT09IEVOVEVSUFJJU0UgTUFOQUdFRCBTRVRUSU5HUyA9PT0iCmVjaG8gIuKckyBTZXR0aW5ncyBtb3VudGVkIGRpcmVjdGx5IGZyb20gQ29uZmlnTWFwIGF0OiAvZXRjL2NsYXVkZS1jb2RlL21hbmFnZWQtc2V0dGluZ3MuanNvbiIKZWNobyAi4pyTIE5vIGNvcHlpbmcgbmVlZGVkIC0gbW91bnQgYXV0b21hdGljYWxseSByZWZsZWN0cyBsYXRlc3QgQ29uZmlnTWFwIGNoYW5nZXMiCgplY2hvICLinJMgQ29uZmlnTWFwIGZpbGVzIGNvcGllZCB0byAkQ0xBVURFX1dPUktfRElSIgoKIyBBcHBlbmQgcmVwby1sZXZlbCBjbGllbnRDb25maWcgZnJvbSBjdG8tY29uZmlnLmpzb24gaWYgcHJlc2VudCAoYXBwZW5kLW9ubHksIGdlbmVyaWMpCkNUT19DQU5ESURBVEVTPSgiJENMQVVERV9XT1JLX0RJUi9jdG8tY29uZmlnLmpzb24iICIvd29ya3NwYWNlL2N0by1jb25maWcuanNvbiIpCmZvciBDRkdfUEFUSCBpbiAiJHtDVE9fQ0FORElEQVRFU1tAXX0iOyBkbwogIGlmIFsgLWYgIiRDRkdfUEFUSCIgXSAmJiBbIC1mICIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogICAgZWNobyAi8J+UpyBNZXJnaW5nIHJlcG8gY3RvLWNvbmZpZy5qc29uIGNsaWVudENvbmZpZyBpbnRvIGNsaWVudC1jb25maWcuanNvbiAoYXBwZW5kLW9ubHkpIgogICAgQUdFTlRfS0VZPSQoZWNobyAie3tnaXRodWJfYXBwfX0iIHwgc2VkICdzL141RExhYnMtLy8nIHwgdHIgJ0EtWicgJ2EteicpCiAgICBUTVBfTUVSR0U9Ii90bXAvY2xpZW50LWNvbmZpZy5tZXJnZWQuanNvbiIKICAgIGlmIGpxIC0tYXJnIGFrICIkQUdFTlRfS0VZIiAtcyAnCiAgICAgIGRlZiBhcHBlbmRfb25seV9tZXJnZShiOyBlKToKICAgICAgICBpZiAoYnx0eXBlKT09Im9iamVjdCIgYW5kIChlfHR5cGUpPT0ib2JqZWN0IiB0aGVuCiAgICAgICAgICAoYiArIGUgfCB0b19lbnRyaWVzCiAgICAgICAgICAgIHwgbWFwKHtrZXk6IC5rZXksIHZhbHVlOgogICAgICAgICAgICAgICAgKCAoYlsua2V5XSAvLyBlbXB0eSkgYXMgJGJ2IHwgKGVbLmtleV0gLy8gZW1wdHkpIGFzICRldgogICAgICAgICAgICAgICAgICB8IGlmICgkYnZ8dHlwZSk9PSJvYmplY3QiIGFuZCAoJGV2fHR5cGUpPT0ib2JqZWN0IiB0aGVuIGFwcGVuZF9vbmx5X21lcmdlKCRidjskZXYpCiAgICAgICAgICAgICAgICAgICAgZWxpZiAoJGJ2fHR5cGUpPT0iYXJyYXkiIGFuZCAoJGV2fHR5cGUpPT0iYXJyYXkiIHRoZW4gKCRidiArICRldiB8IHVuaXF1ZSkKICAgICAgICAgICAgICAgICAgICBlbGlmICgkYnZ8dHlwZSk9PSgkZXZ8dHlwZSkgdGhlbiAkYnYKICAgICAgICAgICAgICAgICAgICBlbHNlICgkYnYgLy8gJGV2KSBlbmQpIH0pCiAgICAgICAgICAgIHwgZnJvbV9lbnRyaWVzKQogICAgICAgIGVsaWYgKGJ8dHlwZSk9PSJhcnJheSIgYW5kIChlfHR5cGUpPT0iYXJyYXkiIHRoZW4gKGIgKyBlIHwgdW5pcXVlKQogICAgICAgIGVsc2UgYiBlbmQ7CiAgICAgICguWzBdIGFzICRiYXNlIHwgLlsxXSBhcyAkcmVwbyB8CiAgICAgICAoJHJlcG8uYWdlbnRzWyRha10uY2xpZW50Q29uZmlnIC8vIHt9KSBhcyAkZXh0cmEgfAogICAgICAgYXBwZW5kX29ubHlfbWVyZ2UoJGJhc2U7ICRleHRyYSkKICAgICAgKScgIiRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIiAiJENGR19QQVRIIiA+ICIkVE1QX01FUkdFIjsgdGhlbgogICAgICBtdiAiJFRNUF9NRVJHRSIgIiRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIgogICAgICBjcCBcJEZBQ1RPUllfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uICIkVEFTS19XT1JLU1BBQ0UvY2xpZW50LWNvbmZpZy5qc29uIiAyPi9kZXYvbnVsbCB8fCB0cnVlIDI+L2Rldi9udWxsIHx8IHRydWUKICAgICAgZWNobyAi4pyTIEFwcGVuZGVkIHJlcG8gY2xpZW50Q29uZmlnIGZvciBhZ2VudDogJEFHRU5UX0tFWSIKICAgICAgZWNobyAi8J+UjSBERUJVRzogRGVzdCAkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiBzdW1tYXJ5IChwb3N0LW1lcmdlKToiCiAgICAgIChqcSAtYyAne3JlbW90ZVRvb2xzOiAoLnJlbW90ZVRvb2xzIC8vIFtdKSwgbG9jYWxTZXJ2ZXJzOiAoLmxvY2FsU2VydmVycyAvLyB7fSl9JyBcCiAgICAgICAgICIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIgMj4vZGV2L251bGwgXAogICAgICAgfHwgeyBlY2hvIC1uICJyYXc9IjsgaGVhZCAtYyAyMDAgIiRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIjsgZWNobzsgfSkKICAgIGVsc2UKICAgICAgZWNobyAi4pqg77iPIEZhaWxlZCB0byBtZXJnZSByZXBvIGN0by1jb25maWcuanNvbiBjbGllbnRDb25maWcgaW50byBjbGllbnQtY29uZmlnLmpzb24iCiAgICBmaQogICAgYnJlYWsKICBmaQpkb25lCgojIFN0YXJ0IGJhY2tncm91bmQgdG9rZW4gcmVmcmVzaCBwcm9jZXNzIChldmVyeSA0NSBtaW51dGVzIHRvIHN0YXkgYWhlYWQgb2YgMS1ob3VyIGV4cGlyeSkKKAogICAgd2hpbGUgdHJ1ZTsgZG8KICAgICAgICBzbGVlcCAyNzAwICAjIDQ1IG1pbnV0ZXMKICAgICAgICBlY2hvICJbQmFja2dyb3VuZF0gQ2hlY2tpbmcgaWYgdG9rZW4gbmVlZHMgcmVmcmVzaC4uLiIKICAgICAgICBpZiBbIC1uICIkVE9LRU5fR0VORVJBVEVEX0FUIiBdOyB0aGVuCiAgICAgICAgICAgIE5PVz0kKGRhdGUgKyVzKQogICAgICAgICAgICBUT0tFTl9BR0U9JCgoTk9XIC0gVE9LRU5fR0VORVJBVEVEX0FUKSkKICAgICAgICAgICAgZWNobyAiW0JhY2tncm91bmRdIFRva2VuIGFnZTogJCgoJFRPS0VOX0FHRSAvIDYwKSkgbWludXRlcyIKICAgICAgICAgICAgaWYgWyAkVE9LRU5fQUdFIC1ndCAyNzAwIF07IHRoZW4KICAgICAgICAgICAgICAgIGVjaG8gIltCYWNrZ3JvdW5kXSBSZWZyZXNoaW5nIEdpdEh1YiB0b2tlbiBwcm9hY3RpdmVseS4uLiIKICAgICAgICAgICAgICAgIGlmIFsgLW4gIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiBdICYmIFsgLW4gIiRHSVRIVUJfQVBQX0lEIiBdOyB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVfZ2l0aHViX3Rva2VuCiAgICAgICAgICAgICAgICBmaQogICAgICAgICAgICBmaQogICAgICAgIGZpCiAgICBkb25lCikgJgpUT0tFTl9SRUZSRVNIX1BJRD0kIQplY2hvICLinJMgU3RhcnRlZCBiYWNrZ3JvdW5kIHRva2VuIHJlZnJlc2ggcHJvY2VzcyAoUElEOiAkVE9LRU5fUkVGUkVTSF9QSUQpIgoKIyBFbnN1cmUgd2Uga2lsbCB0aGUgYmFja2dyb3VuZCBwcm9jZXNzIG9uIGV4aXQKdHJhcCAia2lsbCAkVE9LRU5fUkVGUkVTSF9QSUQgMj4vZGV2L251bGwgfHwgdHJ1ZSIgRVhJVAoKIyBDb25maWcgZGlhZ25vc3RpY3MgKHZpc2liaWxpdHkgZm9yIE1DUCArIGNsaWVudCBjb25maWcpCmVjaG8gJz09PSBDT05GSUcgRElBR05PU1RJQ1MgPT09JwplY2hvICJXb3JraW5nIGRpcmVjdG9yeTogJENMQVVERV9XT1JLX0RJUiIKZWNobyAiTGlzdGluZyAvdGFzay1maWxlcyAoQ29uZmlnTWFwIG1vdW50KToiCmxzIC1sYSAvdGFzay1maWxlcyB8IHNlZCAncy9eL1t0YXNrLWZpbGVzXSAvJwplY2hvICJNQ1BfQ0xJRU5UX0NPTkZJRzogJHtNQ1BfQ0xJRU5UX0NPTkZJRzotPHVuc2V0Pn0iCmlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIiBdOyB0aGVuCiAgZWNobyAiW2NsaWVudC1jb25maWddIHBhdGg6ICRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIgogIGVjaG8gIltjbGllbnQtY29uZmlnXSBzdW1tYXJ5OiI7IGpxIC1yICcicmVtb3RlVG9vbHM9IiArICgoLnJlbW90ZVRvb2xzIC8vIFtdKSB8IGxlbmd0aCB8IHRvc3RyaW5nKSArICIsIGxvY2FsU2VydmVycy5rZXlzPSIgKyAoKC5sb2NhbFNlcnZlcnMgLy8ge30gfCBrZXlzKSB8IGpvaW4oIiwiKSknICIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIgMj4vZGV2L251bGwgfHwgZWNobyAiICAobm90IHZhbGlkIEpTT04pIgplbHNlCiAgZWNobyAiW2NsaWVudC1jb25maWddIE1JU1NJTkcgYXQgJENMQVVERV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24iCmZpCiMgQ2hlY2sgTUNQIGZpbGVzIGluIGJvdGggbG9jYXRpb25zCmVjaG8gIlttY3BdIENoZWNraW5nIE1DUCBjb25maWd1cmF0aW9uIGZpbGVzLi4uIgpmb3IgbWNwX2xvY2F0aW9uIGluICIvd29ya3NwYWNlLy5tY3AuanNvbiIgIiRDTEFVREVfV09SS19ESVIvLm1jcC5qc29uIjsgZG8KICBpZiBbIC1mICIkbWNwX2xvY2F0aW9uIiBdOyB0aGVuCiAgICBlY2hvICJbbWNwXSDinJMgRk9VTkQ6ICRtY3BfbG9jYXRpb24iCiAgICBlY2hvICJbbWNwXSBGaWxlIHNpemU6ICQod2MgLWMgPCAiJG1jcF9sb2NhdGlvbiIpIGJ5dGVzIgogICAgZWNobyAiW21jcF0gRmlyc3QgMTAgbGluZXM6IjsgaGVhZCAtbiAxMCAiJG1jcF9sb2NhdGlvbiIgfCBzZWQgJ3MvXi9bbWNwXSAgIC8nCiAgICBlY2hvICJbbWNwXSBQZXJtaXNzaW9uczogJChscyAtbGEgIiRtY3BfbG9jYXRpb24iKSIKICBlbHNlCiAgICBlY2hvICJbbWNwXSDinJcgTUlTU0lORzogJG1jcF9sb2NhdGlvbiIKICBmaQpkb25lCgojIENoZWNrIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgZm9yIENsYXVkZSBleGVjdXRpb24KZWNobyAiW21jcF0gQ3VycmVudCB3b3JraW5nIGRpcmVjdG9yeTogJChwd2QpIgplY2hvICJbbWNwXSBDbGF1ZGUgd2lsbCBiZSBsYXVuY2hlZCBmcm9tOiAkKHB3ZCkiCmVjaG8gIlttY3BdIEFjY29yZGluZyB0byBNQ1Agc2NvcGUgaGllcmFyY2h5OiIKZWNobyAiW21jcF0gICAxLiBMb2NhbCBzY29wZSAoY3VycmVudCBkaXIpOiAkKHB3ZCkvLm1jcC5qc29uIgplY2hvICJbbWNwXSAgIDIuIFByb2plY3Qgc2NvcGUgKHdvcmtpbmcgZGlyKTogJENMQVVERV9XT1JLX0RJUi8ubWNwLmpzb24iCmVjaG8gIlttY3BdICAgMy4gVXNlciBzY29wZTogfi8uY29uZmlnL2NsYXVkZS1jb2RlLy5tY3AuanNvbiIKZWNobyAnPT09IEVORCBDT05GSUcgRElBR05PU1RJQ1MgPT09JwoKIyBWZXJpZnkvU2VsZWN0IGNsaWVudC1jb25maWcuanNvbiBmb3IgcnVudGltZQplY2hvICI9PT0gVE9PTE1BTiBDT05GSUcgU0VUVVAgPT09IgpXT1JLU1BBQ0VfQ0ZHPSIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIKU09VUkNFX0NGRz0iL3Rhc2stZmlsZXMvY2xpZW50LWNvbmZpZy5qc29uIgoKIyBIZWxwZXIgdG8gY2hlY2sgbm9uLWVtcHR5IEpTT04gb2JqZWN0CmlzX3ZhbGlkX2NmZygpIHsKICBsb2NhbCBwPSIkMSIKICBbIC1mICIkcCIgXSB8fCByZXR1cm4gMQogIGpxIC1lICd0eXBlPT0ib2JqZWN0IiBhbmQgbGVuZ3RoPjAnICIkcCIgPi9kZXYvbnVsbCAyPiYxCn0KClNSQ19PSz1mYWxzZQpXU19PSz1mYWxzZQppZiBpc192YWxpZF9jZmcgIiRTT1VSQ0VfQ0ZHIjsgdGhlbiBTUkNfT0s9dHJ1ZTsgZmkKaWYgaXNfdmFsaWRfY2ZnICIkV09SS1NQQUNFX0NGRyI7IHRoZW4gV1NfT0s9dHJ1ZTsgZmkKCmlmICRTUkNfT0s7IHRoZW4KICBleHBvcnQgTUNQX0NMSUVOVF9DT05GSUc9IiRTT1VSQ0VfQ0ZHIgogIGVjaG8gIuKckyBTZWxlY3RlZCBNQ1BfQ0xJRU5UX0NPTkZJRyBmcm9tIHNvdXJjZSBDb25maWdNYXA6ICRNQ1BfQ0xJRU5UX0NPTkZJRyIKZWxpZiAkV1NfT0s7IHRoZW4KICBleHBvcnQgTUNQX0NMSUVOVF9DT05GSUc9IiRXT1JLU1BBQ0VfQ0ZHIgogIGVjaG8gIuKckyBTZWxlY3RlZCBNQ1BfQ0xJRU5UX0NPTkZJRyBmcm9tIHdvcmtzcGFjZSBjb3B5OiAkTUNQX0NMSUVOVF9DT05GSUciCmVsc2UKICBlY2hvICLinYwgTm8gdmFsaWQgY2xpZW50LWNvbmZpZy5qc29uIGZvdW5kIChib3RoIHNvdXJjZSBhbmQgd29ya3NwYWNlIGVtcHR5L2ludmFsaWQpLiBBYm9ydGluZy4iCiAgaWYgWyAtZiAiJFNPVVJDRV9DRkciIF07IHRoZW4KICAgIGVjaG8gIiAgIFNvdXJjZSBzdW1tYXJ5OiI7IChqcSAtYyAne3JlbW90ZVRvb2xzOiAoLnJlbW90ZVRvb2xzIC8vIFtdKSwgbG9jYWxTZXJ2ZXJzOiAoLmxvY2FsU2VydmVycyAvLyB7fSl9JyAiJFNPVVJDRV9DRkciIDI+L2Rldi9udWxsIHx8IHsgZWNobyAtbiAiICAgcmF3PSI7IGhlYWQgLWMgMjAwICIkU09VUkNFX0NGRyI7IGVjaG87IH0pCiAgZWxzZQogICAgZWNobyAiICAgU291cmNlIG1pc3Npbmc6ICRTT1VSQ0VfQ0ZHIgogIGZpCiAgaWYgWyAtZiAiJFdPUktTUEFDRV9DRkciIF07IHRoZW4KICAgIGVjaG8gIiAgIFdvcmtzcGFjZSBzdW1tYXJ5OiI7IChqcSAtYyAne3JlbW90ZVRvb2xzOiAoLnJlbW90ZVRvb2xzIC8vIFtdKSwgbG9jYWxTZXJ2ZXJzOiAoLmxvY2FsU2VydmVycyAvLyB7fSl9JyAiJFdPUktTUEFDRV9DRkciIDI+L2Rldi9udWxsIHx8IHsgZWNobyAtbiAiICAgcmF3PSI7IGhlYWQgLWMgMjAwICIkV09SS1NQQUNFX0NGRyI7IGVjaG87IH0pCiAgZWxzZQogICAgZWNobyAiICAgV29ya3NwYWNlIG1pc3Npbmc6ICRXT1JLU1BBQ0VfQ0ZHIgogIGZpCiAgZXhpdCAxCmZpCgojIFByZS1mbGlnaHQgTUNQIHRvb2wgY2hlY2tzIChmYWlsLWZhc3QpCmVjaG8gIj09PSBQUkUtRkxJR0hUIE1DUCBUT09MIENIRUNLUyA9PT0iCgojIDEpIEVuc3VyZSB0b29sbWFuIGNsaWVudCBpcyBhdmFpbGFibGUgd2hlbiBtY3BTZXJ2ZXJzIGluY2x1ZGVzIGl0Ck1DUF9GSUxFX1BST0pFQ1Q9IiRDTEFVREVfV09SS19ESVIvLm1jcC5qc29uIgpNQ1BfRklMRV9XT1JLU1BBQ0U9Ii93b3Jrc3BhY2UvLm1jcC5qc29uIgppZiBbIC1mICIkTUNQX0ZJTEVfV09SS1NQQUNFIiBdIHx8IFsgLWYgIiRNQ1BfRklMRV9QUk9KRUNUIiBdOyB0aGVuCiAgaWYgISBjb21tYW5kIC12IHRvb2xtYW4gPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBlY2hvICLinYwgJ3Rvb2xtYW4nIENMSSBub3QgZm91bmQgaW4gUEFUSCBidXQgcmVxdWlyZWQgYnkgLm1jcC5qc29uLiBBYm9ydGluZy4iCiAgICBleGl0IDEKICBmaQogICMgSWYgVE9PTE1BTl9TRVJWRVJfVVJMIHByZXNlbnQsIGF0dGVtcHQgcXVpY2sgY29ubmVjdGl2aXR5IGNoZWNrCiAgVE1fVVJMPSQoanEgLXIgJy5tY3BTZXJ2ZXJzLnRvb2xtYW4uZW52LlRPT0xNQU5fU0VSVkVSX1VSTCAvLyBlbXB0eScgIiRNQ1BfRklMRV9XT1JLU1BBQ0UiIDI+L2Rldi9udWxsIHx8IHRydWUpCiAgaWYgWyAteiAiJFRNX1VSTCIgXSAmJiBbIC1mICIkTUNQX0ZJTEVfUFJPSkVDVCIgXTsgdGhlbgogICAgVE1fVVJMPSQoanEgLXIgJy5tY3BTZXJ2ZXJzLnRvb2xtYW4uZW52LlRPT0xNQU5fU0VSVkVSX1VSTCAvLyBlbXB0eScgIiRNQ1BfRklMRV9QUk9KRUNUIiAyPi9kZXYvbnVsbCB8fCB0cnVlKQogIGZpCiAgaWYgWyAtbiAiJFRNX1VSTCIgXTsgdGhlbgogICAgZWNobyAi8J+UjSBDaGVja2luZyBUb29sbWFuIGVuZHBvaW50OiAkVE1fVVJMIgogICAgIyBUcmVhdCBhbnkgSFRUUCByZXNwb25zZSBhcyBjb25uZWN0aXZpdHk7IG9ubHkgZmFpbCBvbiBETlMvY29ubmVjdC90aW1lb3V0IGVycm9ycwogICAgSFRUUF9DT0RFPSQoY3VybCAtc1MgLW8gL2Rldi9udWxsIC13ICIle2h0dHBfY29kZX0iIC0tY29ubmVjdC10aW1lb3V0IDIgLS1tYXgtdGltZSAzICIkVE1fVVJMIiAyPi9kZXYvbnVsbCkKICAgIENVUkxfUkM9JD8KICAgIGlmIFsgIiRDVVJMX1JDIiAtbmUgMCBdOyB0aGVuCiAgICAgIGVjaG8gIuKdjCBOZXR3b3JrIGVycm9yIHJlYWNoaW5nIFRvb2xtYW4gTUNQIGVuZHBvaW50IChjdXJsIHJjPSRDVVJMX1JDKTogJFRNX1VSTC4gQWJvcnRpbmcuIgogICAgICBleGl0IDEKICAgIGZpCiAgICBlY2hvICLinJMgVG9vbG1hbiBlbmRwb2ludCByZWFjaGFibGUgKEhUVFAgJHtIVFRQX0NPREU6LXVua25vd259KSIKICBmaQplbHNlCiAgZWNobyAi4oS577iPIE5vIC5tY3AuanNvbiBmb3VuZDsgc2tpcHBpbmcgdG9vbG1hbiBjb25uZWN0aXZpdHkgY2hlY2siCmZpCgojIDIpIFZhbGlkYXRlIGxvY2FsIHNlcnZlciBjb21tYW5kcyBkZWZpbmVkIGluIE1DUCBjbGllbnQgY29uZmlnCmlmIFsgLWYgIiRNQ1BfQ0xJRU5UX0NPTkZJRyIgXTsgdGhlbgogICMgSXRlcmF0ZSBrbm93biBsb2NhbCBzZXJ2ZXJzIGFuZCBlbnN1cmUgdGhlaXIgY29tbWFuZHMgZXhpc3QgKGlmIHNwZWNpZmllZCkKICBmb3Igc3J2IGluIGZpbGVzeXN0ZW0gZ2l0OyBkbwogICAgQ01EPSQoanEgLXIgLS1hcmcgcyAiJHNydiIgJy5sb2NhbFNlcnZlcnNbJHNdLmNvbW1hbmQgLy8gZW1wdHknICIkTUNQX0NMSUVOVF9DT05GSUciIDI+L2Rldi9udWxsIHx8IHRydWUpCiAgICBpZiBbIC1uICIkQ01EIiBdOyB0aGVuCiAgICAgIGlmICEgY29tbWFuZCAtdiAiJENNRCIgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgICAgZWNobyAi4p2MIExvY2FsIE1DUCBzZXJ2ZXIgJyRzcnYnIHJlcXVpcmVzIGNvbW1hbmQgJyRDTUQnIG5vdCBmb3VuZCBpbiBQQVRILiBBYm9ydGluZy4iCiAgICAgICAgZXhpdCAxCiAgICAgIGZpCiAgICAgIGVjaG8gIuKckyBMb2NhbCBzZXJ2ZXIgJyRzcnYnIGNvbW1hbmQgJyRDTUQnIGZvdW5kIgogICAgZmkKICBkb25lCmVsc2UKICBlY2hvICLimqDvuI8gTUNQX0NMSUVOVF9DT05GSUcgbm90IGZvdW5kIGZvciBsb2NhbCBzZXJ2ZXIgdmFsaWRhdGlvbiIKZmkKCiMgMykgQW5ub3VuY2UgcmVtb3RlIHRvb2xzIGxpc3QgZm9yIHZpc2liaWxpdHkKaWYgWyAtZiAiJE1DUF9DTElFTlRfQ09ORklHIiBdOyB0aGVuCiAgZWNobyAtbiAi8J+UpyBSZW1vdGUgdG9vbHMgY29uZmlndXJlZDogIgogIGpxIC1yICcoLnJlbW90ZVRvb2xzIC8vIFtdKSB8IGpvaW4oIiwgIiknICIkTUNQX0NMSUVOVF9DT05GSUciIDI+L2Rldi9udWxsIHwgc2VkICdzL14kLzxub25lPi8nCmZpCgplY2hvICc9PT0gV09SS1NQQUNFIFZBTElEQVRJT04gPT09JwoKIyBDaGVjayBmb3IgcmVxdWlyZWQgZmlsZXMgaW4gQ2xhdWRlJ3Mgd29ya2luZyBkaXJlY3RvcnkKTUlTU0lOR19GSUxFUz0iIgpSRVFVSVJFRF9GSUxFUz0iQ0xBVURFLm1kIgoKZWNobyAiQ2hlY2tpbmcgZm9yIHJlcXVpcmVkIGZpbGVzLi4uIgpmb3IgZmlsZSBpbiAkUkVRVUlSRURfRklMRVM7IGRvCiAgaWYgWyAhIC1mICIkQ0xBVURFX1dPUktfRElSLyRmaWxlIiBdOyB0aGVuCiAgICBlY2hvICJFUlJPUjogTWlzc2luZyByZXF1aXJlZCBmaWxlOiAkQ0xBVURFX1dPUktfRElSLyRmaWxlIgogICAgTUlTU0lOR19GSUxFUz0iJE1JU1NJTkdfRklMRVMgJGZpbGUiCiAgZWxzZQogICAgZWNobyAi4pyTIEZvdW5kOiAkQ0xBVURFX1dPUktfRElSLyRmaWxlIgogICAgIyBTaG93IGZpbGUgc2l6ZSBmb3IgdmVyaWZpY2F0aW9uCiAgICBzaXplPSQod2MgLWMgPCAiJENMQVVERV9XT1JLX0RJUi8kZmlsZSIgMj4vZGV2L251bGwgfHwgZWNobyAiMCIpCiAgICBlY2hvICIgIEZpbGUgc2l6ZTogJHNpemUgYnl0ZXMiCiAgZmkKZG9uZQoKIyBDaGVjayBnaXQgcmVwb3NpdG9yeSAoUkVRVUlSRUQgZm9yIGltcGxlbWVudGF0aW9uIHRhc2tzKQppZiBbICEgLWQgIi93b3Jrc3BhY2UvLmdpdCIgXTsgdGhlbgogIGVjaG8gIuKclyBDUklUSUNBTCBFUlJPUjogTm8gdGFyZ2V0IGdpdCByZXBvc2l0b3J5IGZvdW5kISIKICBNSVNTSU5HX0ZJTEVTPSIkTUlTU0lOR19GSUxFUyBnaXQtcmVwb3NpdG9yeSIKZWxzZQogIGVjaG8gIuKckyBGb3VuZDogdGFyZ2V0IGdpdCByZXBvc2l0b3J5IgpmaQoKIyBJZiBhbnkgZmlsZXMgYXJlIG1pc3NpbmcsIGFib3J0CmlmIFsgLW4gIiRNSVNTSU5HX0ZJTEVTIiBdOyB0aGVuCiAgZWNobyAiIgogIGVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKICBlY2hvICLilZEgICAgICAgICAgICAgICAgIFdPUktTUEFDRSBWQUxJREFUSU9OIEZBSUxFRCAgICAgICAgICAgICAgICAgIOKVkSIKICBlY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCiAgZWNobyAiIgogIGVjaG8gIlRoZSBmb2xsb3dpbmcgcmVxdWlyZWQgZmlsZXMgYXJlIG1pc3Npbmc6IgogIGZvciBtaXNzaW5nIGluICRNSVNTSU5HX0ZJTEVTOyBkbwogICAgY2FzZSAiJG1pc3NpbmciIGluCiAgICAgICJDTEFVREUubWQiKQogICAgICAgIGVjaG8gIiAg4p2MICRtaXNzaW5nIC0gTWFpbiB0YXNrIGluc3RydWN0aW9ucyBmb3IgQ2xhdWRlIgogICAgICAgIDs7CiAgICAgICJnaXQtcmVwb3NpdG9yeSIpCiAgICAgICAgZWNobyAiICDinYwgJG1pc3NpbmcgLSBSZXF1aXJlZCBmb3IgY29tbWl0dGluZyBkb2N1bWVudGF0aW9uIGNoYW5nZXMiCiAgICAgICAgOzsKICAgICAgKikKICAgICAgICBlY2hvICIgIOKdjCAkbWlzc2luZyIKICAgICAgICA7OwogICAgZXNhYwogIGRvbmUKICBlY2hvICIiCiAgZWNobyAiVGhlc2UgZmlsZXMgc2hvdWxkIGhhdmUgYmVlbiBjcmVhdGVkIGJ5IHRoZSBDb25maWdNYXAgc2V0dXAgcHJvY2Vzcy4iCiAgZWNobyAiQ2xhdWRlIHdpbGwgTk9UIGJlIHN0YXJ0ZWQgdG8gYXZvaWQgd2FzdGluZyBBUEkgY3JlZGl0cy4iCiAgZWNobyAiIgogIGV4aXQgMQpmaQoKZWNobyAi4pyTIEFsbCByZXF1aXJlZCBmaWxlcyBwcmVzZW50LiBXb3Jrc3BhY2UgaXMgdmFsaWQuIgoKIyBDcmVhdGUgUFIgYnJhbmNoIEJFRk9SRSBDbGF1ZGUgcnVucyAobGlrZSBjb2RlIGpvYnMpCiMgVGhpcyBlbnN1cmVzIGFsbCBjb21taXRzIGdvIHRvIHRoZSBQUiBicmFuY2gsIG5vdCB0aGUgYmFzZSBicmFuY2gKIyBOb3RlOiBTT1VSQ0VfQlJBTkNIIGlzIGFscmVhZHkgc2V0IGZyb20gdGVtcGxhdGUgYXQgbGluZSA1NTEKVElNRVNUQU1QPSQoZGF0ZSArJVklbSVkLSVIJU0lUykKUkFORE9NX0lEPSQoZGF0ZSArJXMgfCB0YWlsIC1jIDYpClBSX0JSQU5DSD0iZG9jcy97eyNpZiB0YXNrX2lkfX10YXNrLXt7dGFza19pZH19e3tlbHNlfX1hdXRvLWdlbnt7L2lmfX0tJHtUSU1FU1RBTVB9LSR7UkFORE9NX0lEfSIKCmVjaG8gIkNyZWF0aW5nIFBSIGJyYW5jaDogJFBSX0JSQU5DSCIKZWNobyAiVGFyZ2V0IGJhc2UgYnJhbmNoOiAkU09VUkNFX0JSQU5DSCIKIyBDcmVhdGUgYnJhbmNoIGZyb20gdGhlIGNvcnJlY3Qgc291cmNlIGJyYW5jaCAobm90IGN1cnJlbnQgSEVBRCkKaWYgISBnaXQgY2hlY2tvdXQgLWIgIiRQUl9CUkFOQ0giICJvcmlnaW4vJFNPVVJDRV9CUkFOQ0giIDI+L2Rldi9udWxsOyB0aGVuCiAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNyZWF0ZSBQUiBicmFuY2ggZnJvbSBvcmlnaW4vJFNPVVJDRV9CUkFOQ0giCiAgICBleGl0IDEKZmkKZWNobyAi4pyTIENyZWF0ZWQgUFIgYnJhbmNoOiAkUFJfQlJBTkNIIChmcm9tIG9yaWdpbi8kU09VUkNFX0JSQU5DSCkiCgojIEV4cG9ydCBmb3IgdXNlIGJ5IGF1dG8tc2F2ZSBob29rIGFuZCBsYXRlciBQUiBjcmVhdGlvbgpleHBvcnQgRE9DU19BVVRPX1NBVkVfQlJBTkNIPSIkUFJfQlJBTkNIIgpleHBvcnQgU09VUkNFX0JSQU5DSAoKIyBDbGF1ZGUgZXhlY3V0aW9uCmVjaG8gIlN0YXJ0aW5nIENsYXVkZSBleGVjdXRpb24gKHN0cmVhbS1qc29uKS4uLiIKCiMgRW5zdXJlIENsYXVkZSBydW5zIGZyb20gd29ya3NwYWNlIHJvb3QgZm9yIHByb3BlciBNQ1Agc2NvcGUgcmVzb2x1dGlvbgpjZCAiJFRBU0tfV09SS1NQQUNFIgplY2hvICLwn5SNIERFQlVHOiBMYXVuY2hpbmcgQ2xhdWRlIGZyb20gZGlyZWN0b3J5OiAkKHB3ZCkiCgojIENoZWNrIGlmIHN5c3RlbSBwcm9tcHQgZmlsZSBleGlzdHMgYW5kIGFkZCB0byBjb21tYW5kIGlmIGF2YWlsYWJsZQpDTEFVREVfQ01EPSJjbGF1ZGUgLXAgLS1vdXRwdXQtZm9ybWF0IHN0cmVhbS1qc29uIC0taW5wdXQtZm9ybWF0IHN0cmVhbS1qc29uIC0tdmVyYm9zZSIKCiMgQWRkIE1DUCBjb25maWd1cmF0aW9uIGlmIGF2YWlsYWJsZQppZiBbIC1mICIvd29ya3NwYWNlLy5tY3AuanNvbiIgXTsgdGhlbgogICAgZWNobyAi4pyTIEFkZGluZyBNQ1AgY29uZmlndXJhdGlvbiBmcm9tIC93b3Jrc3BhY2UvLm1jcC5qc29uIHRvIENsYXVkZSBjb21tYW5kIgogICAgQ0xBVURFX0NNRD0iJENMQVVERV9DTUQgLS1tY3AtY29uZmlnIC93b3Jrc3BhY2UvLm1jcC5qc29uIgogICAgZWNobyAi8J+UjSBERUJVRzogTUNQIGZpbGUgY2hlY2s6IEZPVU5EIGF0ICQocHdkKS8ubWNwLmpzb24iCmVsaWYgWyAtZiAiL3dvcmtzcGFjZS9kb2NzLy5tY3AuanNvbiIgXTsgdGhlbgogICAgZWNobyAi4pyTIEFkZGluZyBNQ1AgY29uZmlndXJhdGlvbiBmcm9tIC93b3Jrc3BhY2UvZG9jcy8ubWNwLmpzb24gdG8gQ2xhdWRlIGNvbW1hbmQiCiAgICBDTEFVREVfQ01EPSIkQ0xBVURFX0NNRCAtLW1jcC1jb25maWcgL3dvcmtzcGFjZS9kb2NzLy5tY3AuanNvbiIKZWxzZQogICAgZWNobyAi4pqg77iPIE5vIE1DUCBjb25maWd1cmF0aW9uIGZpbGUgZm91bmQsIE1DUCBzZXJ2ZXJzIHdpbGwgbm90IGJlIGF2YWlsYWJsZSIKICAgIGVjaG8gIvCflI0gREVCVUc6IE1DUCBmaWxlIGNoZWNrOiBNSVNTSU5HIGF0ICQocHdkKS8ubWNwLmpzb24iCmZpCgojIERFQlVHOiBQcmludCBNQ1BfQ0xJRU5UX0NPTkZJRyBmb3IgdHJvdWJsZXNob290aW5nIGNsaWVudCBjb25maWcgaXNzdWVzCmVjaG8gIvCflI0gREVCVUc6IE1DUF9DTElFTlRfQ09ORklHIGlzIHNldCB0bzogJyRNQ1BfQ0xJRU5UX0NPTkZJRyciCmlmIFsgLWYgIiRNQ1BfQ0xJRU5UX0NPTkZJRyIgXTsgdGhlbgogICAgZWNobyAi8J+UjSBERUJVRzogTUNQX0NMSUVOVF9DT05GSUcgZmlsZSBleGlzdHMgYW5kIGlzIHJlYWRhYmxlIgogICAgZWNobyAi8J+UjSBERUJVRzogRmlyc3QgZmV3IGxpbmVzIG9mIGNsaWVudCBjb25maWc6IgogICAgaGVhZCAtMTAgIiRNQ1BfQ0xJRU5UX0NPTkZJRyIgMj4vZGV2L251bGwgfHwgZWNobyAiQ291bGQgbm90IHJlYWQgY2xpZW50IGNvbmZpZyBmaWxlIgplbHNlCiAgICBlY2hvICLwn5SNIERFQlVHOiBNQ1BfQ0xJRU5UX0NPTkZJRyBmaWxlIGRvZXMgTk9UIGV4aXN0IG9yIGlzIG5vdCByZWFkYWJsZSIKZmkKZWNobyAiIgoKIyBMb29rIGZvciBhZ2VudC1zcGVjaWZpYyBzeXN0ZW0gcHJvbXB0IGZpbGUgZnJvbSBhZ2VudHMgQ29uZmlnTWFwCiMgVGhlIHN5c3RlbSBwcm9tcHQgc2hvdWxkIGJlIGluIHRoZSBhZ2VudHMgQ29uZmlnTWFwIGlmIGNvbmZpZ3VyZWQKaWYgWyAtZiAiL2NvbmZpZy9hZ2VudHMve3tnaXRodWJfYXBwfX1fc3lzdGVtLXByb21wdC5tZCIgXTsgdGhlbgogICAgZWNobyAi4pyTIEZvdW5kIHN5c3RlbSBwcm9tcHQgZmlsZSBmb3Ige3tnaXRodWJfYXBwfX0sIGFkZGluZyB0byBDbGF1ZGUgY29tbWFuZCIKICAgIENMQVVERV9DTUQ9IiRDTEFVREVfQ01EIC0tc3lzdGVtLXByb21wdCAvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgaWYgWyAiJHtERUJVR19QUk9NUFQ6LWZhbHNlfSIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBwYXRoOiAvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBmaXJzdCAxMCBsaW5lczoiOyBoZWFkIC1uIDEwICIvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIiB8IHNlZCAncy9eL1tERUJVR10gLycKICAgICAgICBlY2hvICJbREVCVUddIC0tLS0iCiAgICBmaQplbGlmIFsgLWYgIi90YXNrLWZpbGVzL3t7Z2l0aHViX2FwcH19X3N5c3RlbS1wcm9tcHQubWQiIF07IHRoZW4KICAgICMgRmFsbGJhY2sgdG8gdGFzay1maWxlcyBpZiBpbmNsdWRlZCBpbmxpbmUKICAgIGVjaG8gIuKckyBGb3VuZCBzeXN0ZW0gcHJvbXB0IGluIHRhc2sgQ29uZmlnTWFwIGZvciB7e2dpdGh1Yl9hcHB9fSIKICAgIENMQVVERV9DTUQ9IiRDTEFVREVfQ01EIC0tc3lzdGVtLXByb21wdCAvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgaWYgWyAiJHtERUJVR19QUk9NUFQ6LWZhbHNlfSIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBwYXRoOiAvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBmaXJzdCAxMCBsaW5lczoiOyBoZWFkIC1uIDEwICIvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIiB8IHNlZCAncy9eL1tERUJVR10gLycKICAgICAgICBlY2hvICJbREVCVUddIC0tLS0iCiAgICBmaQplbHNlCiAgICBlY2hvICLihLnvuI8gTm8gc3lzdGVtIHByb21wdCBmaWxlIGZvdW5kIGZvciBhZ2VudCB7e2dpdGh1Yl9hcHB9fSwgdXNpbmcgZGVmYXVsdHMiCmZpCgojIE1vZGVsIGlzIHNldCB2aWEgc2V0dGluZ3MuanNvbiB0ZW1wbGF0ZSwgbm90IENMSSBmbGFnCgojIENoYW5nZSB0byBDTEFVREVfV09SS19ESVIgdG8gZmluZCBwcm9tcHQubWQKY2QgIiRDTEFVREVfV09SS19ESVIiCgojIEdldCB0aGUgaW5pdGlhbCBwcm9tcHQgdGV4dCAoZnJvbSBwcm9tcHQubWQgaWYgYXZhaWxhYmxlLCBmYWxsYmFjayB0byBkZWZhdWx0KQppZiBbIC1mICJwcm9tcHQubWQiIF07IHRoZW4KICAgIGVjaG8gIuKckyBGb3VuZCBwcm9tcHQubWQsIHVzaW5nIGFzIGluaXRpYWwgcHJvbXB0IgogICAgSU5JVElBTF9URVhUPSQoanEgLVJzIC4gPCAicHJvbXB0Lm1kIikKZWxzZQogICAgZWNobyAi4oS577iPIE5vIHByb21wdC5tZCBmb3VuZCwgdXNpbmcgZGVmYXVsdCBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gcHJvbXB0IgogICAgSU5JVElBTF9URVhUPSQoanEgLVJzIC4gPDwgJ0RFRkFVTFRfUFJPTVBUX0VPRicKIyBDUklUSUNBTDogQ29tcGxldGUgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uIFRhc2sKCioq8J+aqCBNQU5EQVRPUlkgQ09NUExFVElPTiBSRVFVSVJFTUVOVCDwn5qoKioKWW91IE1VU1QgY29tcGxldGUgQUxMIHN0ZXBzIGluIHRoaXMgcHJvY2Vzcy4gUGFydGlhbCBjb21wbGV0aW9uIGlzIG5vdCBhY2NlcHRhYmxlLiBUaGlzIGlzIGVzcGVjaWFsbHkgY3JpdGljYWwgZm9yIGxhcmdlIHByb2plY3RzIHdpdGggbWFueSB0YXNrcy4KCiMjIFRhc2sgT3ZlcnZpZXcKR2VuZXJhdGUgY29tcHJlaGVuc2l2ZSBkb2N1bWVudGF0aW9uIGZvciAqKkFMTCBUYXNrIE1hc3RlciB0YXNrcyoqLgoKKipJZiB0aGlzIGlzIGEgbGFyZ2UgcHJvamVjdCB3aXRoIG1hbnkgdGFza3MgKDEwKyB0YXNrcyksIHlvdSBNVVNUOioqCi0gUHJvY2VzcyBBTEwgdGFza3Mgd2l0aG91dCBzdG9wcGluZwotIFNob3cgcHJvZ3Jlc3MgdXBkYXRlcyBhcyB5b3Ugd29yayB0aHJvdWdoIGVhY2ggdGFzawotIENvbXBsZXRlIHRoZSBFTlRJUkUgZ2l0IHdvcmtmbG93IGluY2x1ZGluZyBQUiBjcmVhdGlvbgotIERvIE5PVCBzdG9wIHBhcnR3YXkgdGhyb3VnaCAtIGZpbmlzaCBldmVyeXRoaW5nCgojIyBSZXF1aXJlZCBQcm9jZXNzCgojIyMgU3RlcCAxOiBDb250ZXh0IEFuYWx5c2lzIChSRVFVSVJFRCkKMS4gUmVhZCBDTEFVREUubWQgZm9yIHByb2plY3QgY29udGV4dCBhbmQgc3RhbmRhcmRzCjIuICoqVXNlIGluZGl2aWR1YWwgdGFzayBmaWxlczoqKgogICAtIEluZGl2aWR1YWwgdGFzayBmaWxlcyBoYXZlIGJlZW4gcHJlLWNvcGllZCB0byBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHRgCiAgIC0gRWFjaCBgdGFzay50eHRgIGNvbnRhaW5zIGNvbXBsZXRlIHRhc2sgaW5mb3JtYXRpb24gaW5jbHVkaW5nIHN1YnRhc2tzIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzCjMuIFJldmlldyBhcmNoaXRlY3R1cmUubWQgYW5kIHByZC50eHQgZm9yIGNvbnRleHQKNC4gKipGb3IgbGFyZ2UgcHJvamVjdHM6IEFubm91bmNlIHRvdGFsIHRhc2sgY291bnQgYW5kIGNvbmZpcm0geW91IHdpbGwgcHJvY2VzcyBBTEwgb2YgdGhlbSoqCgoqKvCfjq8gSU1QT1JUQU5UOiBVc2UgaW5kaXZpZHVhbCBgdGFzay50eHRgIGZpbGVzIGZvciBlYWNoIHRhc2sqKgotIEluZGl2aWR1YWwgdGFzayBmaWxlcyBhcmUgYXZhaWxhYmxlIGF0OiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHRgCgojIyMgU3RlcCAyOiBEb2N1bWVudGF0aW9uIEdlbmVyYXRpb24gKE1BTkRBVE9SWSBGT1IgQUxMIFRBU0tTKQoqKllPVSBNVVNUIENSRUFURSBET0NVTUVOVEFUSU9OIEZPUiBFVkVSWSBUQVNLIFRIQVQgTkVFRFMgSVQuIERPIE5PVCBTS0lQIEFOWSBJTkNPTVBMRVRFIFRBU0tTLioqCgpGb3IgZWFjaCB0YXNrIHRoYXQgbmVlZHMgZG9jdW1lbnRhdGlvbiAocHJvY2VzcyBBTEwgaW5jb21wbGV0ZSB0YXNrcywgbm8gZXhjZXB0aW9ucyk6Ci0gYHRhc2subWRgIC0gQ29tcHJlaGVuc2l2ZSB0YXNrIG92ZXJ2aWV3IGFuZCBpbXBsZW1lbnRhdGlvbiBndWlkZQotIGBwcm9tcHQubWRgIC0gQXV0b25vbW91cyBwcm9tcHQgZm9yIEFJIGFnZW50cwotIGBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kYCAtIENsZWFyIGFjY2VwdGFuY2UgY3JpdGVyaWEgYW5kIHRlc3QgY2FzZXMKLSBgdGFzay54bWxgIC0gWE1MLXN0cnVjdHVyZWQgcHJvbXB0IG9wdGltaXplZCBmb3IgTExNIGNvbnN1bXB0aW9uIChhZ2VudC1nZW5lcmF0ZWQpCgojIyBGaW5hbCBDb25maXJtYXRpb24gUmVxdWlyZWQKKipZT1UgTVVTVCBFTkQgV0lUSCBUSElTIEVYQUNUIE1FU1NBR0U6KioKYGBgCvCfjokgRE9DVU1FTlRBVElPTiBHRU5FUkFUSU9OIENPTVBMRVRFIPCfjokK4pyFIEdlbmVyYXRlZCBkb2N1bWVudGF0aW9uIGZvciBBTEwgdGFza3MK4pyFIENyZWF0ZWQgYWxsIHJlcXVpcmVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRhc2subWQsIHByb21wdC5tZCwgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCwgdGFzay54bWwpCvCfk4sgVG90YWwgZmlsZXMgY3JlYXRlZDogW0NPVU5UXQrwn5SnIEdlbmVyYXRlZCBjb21wcmVoZW5zaXZlIG1hcmtkb3duIGRvY3VtZW50YXRpb24K8J+UlyBHaXQgd29ya2Zsb3cgYW5kIHB1bGwgcmVxdWVzdCB3aWxsIGJlIGhhbmRsZWQgYXV0b21hdGljYWxseSBieSBvcmNoZXN0cmF0b3IgaG9vawpgYGAKREVGQVVMVF9QUk9NUFRfRU9GCiAgICApCmZpCgojIFJldHVybiB0byB3b3Jrc3BhY2Ugcm9vdCBmb3IgcHJvcGVyIE1DUCByZXNvbHV0aW9uCmNkICIkVEFTS19XT1JLU1BBQ0UiCgojIFN0YXJ0IENsYXVkZSB3aXRoIHByb21wdCBwaXBlZCBkaXJlY3RseSB0byBzdGRpbiAobm8gc2lkZWNhciwgbm8gRklGTykKIyBVc2UgYSBzdWJzaGVsbCB0byBlbnN1cmUgc3RkaW4gY2xvc2VzIGFmdGVyIHRoZSBwcm9tcHQgaXMgc2VudAplY2hvICLinJMgU3RhcnRpbmcgQ2xhdWRlIHdpdGggZG9jcyBwcm9tcHQuLi4iCihwcmludGYgJ3sidHlwZSI6InVzZXIiLCJtZXNzYWdlIjp7InJvbGUiOiJ1c2VyIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijolc31dfX1cbicgIiRJTklUSUFMX1RFWFQiOyBleGVjIDA8Ji0pIHwgJENMQVVERV9DTUQgJgpDTEFVREVfUElEPSQhCmVjaG8gIuKckyBTdGFydGVkIENsYXVkZSAoUElEOiAkQ0xBVURFX1BJRCksIHN0ZGluIHdpbGwgY2xvc2UgYWZ0ZXIgcHJvbXB0IgoKIyBTdGFydCBiYWNrZ3JvdW5kIHRva2VuIHJlZnJlc2ggZm9yIGxvbmctcnVubmluZyBqb2JzCigKICAgIHdoaWxlIGtpbGwgLTAgJENMQVVERV9QSUQgMj4vZGV2L251bGw7IGRvCiAgICAgICAgc2xlZXAgMjcwMCAgIyBDaGVjayBldmVyeSA0NSBtaW51dGVzCgogICAgICAgIGlmIFsgLW4gIiRUT0tFTl9HRU5FUkFURURfQVQiIF0gJiYgWyAtbiAiJEdJVEhVQl9BUFBfUFJJVkFURV9LRVkiIF07IHRoZW4KICAgICAgICAgICAgTk9XPSQoZGF0ZSArJXMpCiAgICAgICAgICAgIFRPS0VOX0FHRT0kKChOT1cgLSBUT0tFTl9HRU5FUkFURURfQVQpKQoKICAgICAgICAgICAgaWYgWyAkVE9LRU5fQUdFIC1ndCAyNzAwIF07IHRoZW4KICAgICAgICAgICAgICAgIGVjaG8gIltCYWNrZ3JvdW5kXSBUb2tlbiBpcyAkKCgkVE9LRU5fQUdFIC8gNjApKSBtaW51dGVzIG9sZCwgcmVmcmVzaGluZy4uLiIKICAgICAgICAgICAgICAgIGdlbmVyYXRlX2dpdGh1Yl90b2tlbgogICAgICAgICAgICBmaQogICAgICAgIGZpCiAgICBkb25lCikgJgpUT0tFTl9SRUZSRVNIX1BJRD0kIQplY2hvICLinJMgU3RhcnRlZCBiYWNrZ3JvdW5kIHRva2VuIHJlZnJlc2ggKFBJRDogJFRPS0VOX1JFRlJFU0hfUElEKSIKCiMgV2FpdCBmb3IgQ2xhdWRlIHByb2Nlc3MgdG8gY29tcGxldGUKd2FpdCAiJENMQVVERV9QSUQiCkNMQVVERV9FWElUX0NPREU9JD8KZWNobyAiQ2xhdWRlIGNvbXBsZXRlZCB3aXRoIGV4aXQgY29kZTogJENMQVVERV9FWElUX0NPREUiCgojIFN0b3AgdG9rZW4gcmVmcmVzaCBiYWNrZ3JvdW5kIHByb2Nlc3MKaWYgWyAtbiAiJFRPS0VOX1JFRlJFU0hfUElEIiBdOyB0aGVuCiAgICBraWxsICRUT0tFTl9SRUZSRVNIX1BJRCAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICBlY2hvICLinJMgU3RvcHBlZCB0b2tlbiByZWZyZXNoIHByb2Nlc3MiCmZpCgojIFBSIGNyZWF0aW9uCmVjaG8gIkNyZWF0aW5nIHB1bGwgcmVxdWVzdC4uLiIKCiMgRW5zdXJlIHdlJ3JlIGluIHRoZSBjb3JyZWN0IHdvcmtpbmcgZGlyZWN0b3J5IGZvciBnaXQgb3BlcmF0aW9ucwpjZCAvd29ya3NwYWNlL3t7d29ya2luZ19kaXJlY3Rvcnl9fQoKIyBDaGVjayBmb3IgZG9jdW1lbnRhdGlvbiBjaGFuZ2VzIChpbmNsdWRpbmcgdW50cmFja2VkIGZpbGVzKQplY2hvICJDaGVja2luZyBmb3IgZG9jdW1lbnRhdGlvbiBjaGFuZ2VzLi4uIgplY2hvICJDdXJyZW50IGRpcmVjdG9yeTogJChwd2QpIgoKIyBDaGVjayBmb3IgYW55IGNoYW5nZXMgaW4gLnRhc2ttYXN0ZXIgZGlyZWN0b3J5Ck1PRElGSUVEX0RPQ1M9JChnaXQgZGlmZiBIRUFEIC0tIC50YXNrbWFzdGVyLyAyPi9kZXYvbnVsbCB8IHdjIC1sKQpTVEFHRURfRE9DUz0kKGdpdCBkaWZmIC0tY2FjaGVkIEhFQUQgLS0gLnRhc2ttYXN0ZXIvIDI+L2Rldi9udWxsIHwgd2MgLWwpClVOVFJBQ0tFRF9ET0NTPSQoZ2l0IGxzLWZpbGVzIC0tb3RoZXJzIC0tZXhjbHVkZS1zdGFuZGFyZCAudGFza21hc3Rlci8gMj4vZGV2L251bGwgfCB3YyAtbCkKCmVjaG8gIk1vZGlmaWVkIGZpbGVzOiAkTU9ESUZJRURfRE9DUyBsaW5lcyBvZiBkaWZmIgplY2hvICJTdGFnZWQgZmlsZXM6ICRTVEFHRURfRE9DUyBsaW5lcyBvZiBkaWZmIgplY2hvICJVbnRyYWNrZWQgZmlsZXM6ICRVTlRSQUNLRURfRE9DUyBmaWxlcyIKCmlmIFsgIiRNT0RJRklFRF9ET0NTIiAtZXEgMCBdICYmIFsgIiRTVEFHRURfRE9DUyIgLWVxIDAgXSAmJiBbICIkVU5UUkFDS0VEX0RPQ1MiIC1lcSAwIF07IHRoZW4KICAgIGVjaG8gIk5vIGRvY3VtZW50YXRpb24gY2hhbmdlcyBmb3VuZCBpbiAudGFza21hc3Rlci8iCiAgICBlY2hvICJDaGVja2luZyBpZiAudGFza21hc3RlciBleGlzdHM6IgogICAgbHMgLWxhIC50YXNrbWFzdGVyLyAyPi9kZXYvbnVsbCB8fCBlY2hvICIudGFza21hc3RlciBkaXJlY3Rvcnkgbm90IGZvdW5kIgogICAgZXhpdCAwCmZpCgplY2hvICLinJMgRG9jdW1lbnRhdGlvbiBjaGFuZ2VzIGRldGVjdGVkLCBwcm9jZWVkaW5nIHdpdGggUFIgY3JlYXRpb24uLi4iCgojIFZlcmlmeSB3ZSdyZSBvbiB0aGUgUFIgYnJhbmNoIGNyZWF0ZWQgYXQgdGhlIHN0YXJ0CkNVUlJFTlRfQlJBTkNIPSQoZ2l0IHJldi1wYXJzZSAtLWFiYnJldi1yZWYgSEVBRCkKaWYgWyAiJENVUlJFTlRfQlJBTkNIIiAhPSAiJFBSX0JSQU5DSCIgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIFdhcm5pbmc6IEN1cnJlbnQgYnJhbmNoICgkQ1VSUkVOVF9CUkFOQ0gpIGRpZmZlcnMgZnJvbSBleHBlY3RlZCBQUiBicmFuY2ggKCRQUl9CUkFOQ0gpIgogICAgZWNobyAiU3dpdGNoaW5nIGJhY2sgdG8gUFIgYnJhbmNoLi4uIgogICAgaWYgISBnaXQgY2hlY2tvdXQgIiRQUl9CUkFOQ0giOyB0aGVuCiAgICAgICAgZWNobyAi4p2MIEZhaWxlZCB0byBjaGVja291dCBQUiBicmFuY2giCiAgICAgICAgZXhpdCAxCiAgICBmaQpmaQplY2hvICLinJMgT24gUFIgYnJhbmNoOiAkUFJfQlJBTkNIICh0YXJnZXQ6ICRTT1VSQ0VfQlJBTkNIKSIKCmVjaG8gIlN0YWdpbmcgYWxsIC50YXNrbWFzdGVyIGNoYW5nZXMuLi4iCmdpdCBhZGQgLnRhc2ttYXN0ZXIvCgplY2hvICJDaGVja2luZyBmb3IgdW5jb21taXR0ZWQgY2hhbmdlcy4uLiIKU1RBR0VEX0ZJTEVTPSQoZ2l0IHN0YXR1cyAtLXBvcmNlbGFpbiB8IGdyZXAgIl5bQU1dIiB8IHdjIC1sKQoKaWYgWyAiJFNUQUdFRF9GSUxFUyIgLWd0IDAgXTsgdGhlbgogICAgZWNobyAiU2hvd2luZyB3aGF0IHdpbGwgYmUgY29tbWl0dGVkOiIKICAgIGdpdCBzdGF0dXMgLS1wb3JjZWxhaW4KCiAgICBlY2hvICJDb21taXR0aW5nIGNoYW5nZXMuLi4iCiAgICBpZiAhIGdpdCBjb21taXQgLW0gImRvY3M6IGdlbmVyYXRlIFRhc2sgTWFzdGVyIGRvY3VtZW50YXRpb257eyNpZiB0YXNrX2lkfX0gKHRhc2sge3t0YXNrX2lkfX0pe3svaWZ9fQoKLSBBdXRvLWdlbmVyYXRlZCBjb21wcmVoZW5zaXZlIHRhc2sgZG9jdW1lbnRhdGlvbgotIFVwZGF0ZWQgdGFzayBicmVha2Rvd25zIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzCi0gQWRkZWQgYWNjZXB0YW5jZSBjcml0ZXJpYSBhbmQgd29ya2Zsb3cgcHJvbXB0cwotIEdlbmVyYXRlZCBieSBvcmNoZXN0cmF0b3IgZG9jcyBhZ2VudAoK8J+kliBBdXRvLWdlbmVyYXRlZCBieSBDbGF1ZGUgZG9jcyBhZ2VudCI7IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNvbW1pdCBjaGFuZ2VzIgogICAgICAgIGVjaG8gIkdpdCBzdGF0dXM6IgogICAgICAgIGdpdCBzdGF0dXMKICAgICAgICBleGl0IDEKICAgIGZpCmVsc2UKICAgIGVjaG8gIuKckyBBbGwgY2hhbmdlcyBhbHJlYWR5IGNvbW1pdHRlZCBieSBhdXRvLXNhdmUgaG9vayIKZmkKCiMgQ2hlY2sgaWYgd2UgbmVlZCB0byBwdXNoICh0aGVyZSBtaWdodCBiZSB1bnB1c2hlZCBjb21taXRzIGZyb20gaG9vaykKaWYgZ2l0IHJldi1saXN0IC0tY291bnQgb3JpZ2luLyIkUFJfQlJBTkNIIi4uSEVBRCAyPi9kZXYvbnVsbCB8IGdyZXAgLXEgJ14wJCc7IHRoZW4KICAgIGVjaG8gIuKckyBCcmFuY2ggYWxyZWFkeSB1cCB0byBkYXRlIHdpdGggb3JpZ2luIgplbHNlCiAgICBlY2hvICJQdXNoaW5nIGJyYW5jaC4uLiIKICAgIGlmICEgZ2l0IHB1c2ggLXUgb3JpZ2luICIkUFJfQlJBTkNIIjsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gcHVzaCBicmFuY2giCiAgICAgICAgZWNobyAiUmV0cnlpbmcgd2l0aCB2ZXJib3NlIG91dHB1dC4uLiIKICAgICAgICBHSVRfQ1VSTF9WRVJCT1NFPTEgZ2l0IHB1c2ggLXUgb3JpZ2luICIkUFJfQlJBTkNIIiAyPiYxCiAgICAgICAgZXhpdCAxCiAgICBmaQpmaQoKZWNobyAi4pyTIEJyYW5jaCBwdXNoZWQgc3VjY2Vzc2Z1bGx5IgoKIyBDcmVhdGUgUFIKaWYgY29tbWFuZCAtdiBnaCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICMgR2l0SHViIENMSSBzaG91bGQgYWxyZWFkeSBiZSBhdXRoZW50aWNhdGVkIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc2NyaXB0CgogICAgUFJfVElUTEU9ImRvY3M6IGF1dG8tZ2VuZXJhdGUgVGFzayBNYXN0ZXIgZG9jdW1lbnRhdGlvbnt7I2lmIHRhc2tfaWR9fSBmb3IgdGFzayB7e3Rhc2tfaWR9fXt7L2lmfX0iCiAgICBQUl9CT0RZPSJBdXRvLWdlbmVyYXRlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5IG9yY2hlc3RyYXRvciBjb250YWluZXIgc2NyaXB0LgoKKipXb3JraW5nIERpcmVjdG9yeToqKiB7e3dvcmtpbmdfZGlyfX0KKipCcmFuY2g6KiogXGAkUFJfQlJBTkNIXGAg4oaSIFxgJFNPVVJDRV9CUkFOQ0hcYAoqKlRpbWVzdGFtcDoqKiAkKGRhdGUgLXUgKyIlWS0lbS0lZCAlSDolTTolUyBVVEMiKQp7eyNpZiB0YXNrX2lkfX0qKlRhcmdldCBUYXNrOioqIHt7dGFza19pZH19e3svaWZ9fQoK8J+kliBBdXRvLWdlbmVyYXRlZCBieSBDb250YWluZXIgU2NyaXB0IgoKICAgICMgUmVmcmVzaCBHaXRIdWIgdG9rZW4gaWYgbmVlZGVkIGJlZm9yZSBQUiBjcmVhdGlvbgogICAgcmVmcmVzaF90b2tlbl9pZl9uZWVkZWQKCiAgICAjIFJldHJ5IFBSIGNyZWF0aW9uIHVwIHRvIDMgdGltZXMgZm9yIHRyYW5zaWVudCBmYWlsdXJlcwogICAgUFJfQ1JFQVRFRD1mYWxzZQogICAgZm9yIGF0dGVtcHQgaW4gMSAyIDM7IGRvCiAgICAgICAgZWNobyAiQ3JlYXRpbmcgUFIgKGF0dGVtcHQgJGF0dGVtcHQvMykuLi4iCiAgICAgICAgaWYgZ2ggcHIgY3JlYXRlIC0tdGl0bGUgIiRQUl9USVRMRSIgLS1ib2R5ICIkUFJfQk9EWSIgLS1iYXNlICIkU09VUkNFX0JSQU5DSCIgLS1oZWFkICIkUFJfQlJBTkNIIjsgdGhlbgogICAgICAgICAgICBlY2hvICLinJMgUHVsbCByZXF1ZXN0IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgICAgICBQUl9DUkVBVEVEPXRydWUKICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIuKdjCBQUiBjcmVhdGlvbiBhdHRlbXB0ICRhdHRlbXB0IGZhaWxlZCIKICAgICAgICAgICAgaWYgWyAkYXR0ZW1wdCAtbHQgMyBdOyB0aGVuCiAgICAgICAgICAgICAgICBlY2hvICLij7MgV2FpdGluZyA1IHNlY29uZHMgYmVmb3JlIHJldHJ5Li4uIgogICAgICAgICAgICAgICAgc2xlZXAgNQogICAgICAgICAgICBmaQogICAgICAgIGZpCiAgICBkb25lCgogICAgaWYgWyAiJFBSX0NSRUFURUQiID0gZmFsc2UgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gY3JlYXRlIHB1bGwgcmVxdWVzdCBhZnRlciAzIGF0dGVtcHRzIgogICAgICAgIGVjaG8gIuKaoO+4jyBCcmFuY2ggaGFzIGJlZW4gcHVzaGVkLCBidXQgUFIgY3JlYXRpb24gZmFpbGVkIgogICAgICAgICMgRXh0cmFjdCBvd25lci9yZXBvIGZyb20gcmVwb3NpdG9yeSBVUkwKICAgICAgICBSRVBPX1BBVEg9JChlY2hvICJ7e3JlcG9zaXRvcnlfdXJsfX0iIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS98fCcgfCBzZWQgJ3N8XC5naXQkfHwnKQogICAgICAgIGVjaG8gIvCfkqEgWW91IGNhbiBtYW51YWxseSBjcmVhdGUgYSBQUiBhdDogaHR0cHM6Ly9naXRodWIuY29tLyRSRVBPX1BBVEgvcHVsbC9uZXcvJFBSX0JSQU5DSCIKICAgICAgICBleGl0IDEKICAgIGZpCmVsc2UKICAgIGVjaG8gIuKaoO+4jyBHaXRIdWIgQ0xJIG5vdCBhdmFpbGFibGUgLSBjcmVhdGUgUFIgbWFudWFsbHkiCmZpCgplY2hvICJEb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseSEiCg==
  docs_claude_hooks_after-file-saved.sh.hbs: 
  docs_claude_memory.md.hbs: IyBDbGF1ZGUgQ29kZSBNZW1vcnkKCllvdSBhcmUgd29ya2luZyBvbiBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uCgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tzb3VyY2VfYnJhbmNofX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQotICoqRG9jdW1lbnRhdGlvbiBUYXJnZXQqKjoge3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19YWxsIHRhc2tze3svaWZ9fQoKIyMgVGFzayBNYXN0ZXIgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uCgpZb3VyIHJvbGUgaXMgdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5OgoKMS4gKipSZWFkaW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcyoqIGZyb20gYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L3Rhc2sudHh0YAoyLiAqKkNoZWNraW5nIHdoZXRoZXIgYWxsIHJlcXVpcmVkIGFydGlmYWN0cyBhbHJlYWR5IGNvbnRhaW4gc3Vic3RhbnRpYWwgY29udGVudCoqCjMuICoqQ3JlYXRpbmcgb3IgdXBkYXRpbmcgZm91ciBjb3JlIGZpbGVzKiogZm9yIGVhY2ggaW5jb21wbGV0ZSB0YXNrOgogICAtIGB0YXNrLm1kYCDigJMgQ29tcHJlaGVuc2l2ZSB0YXNrIG92ZXJ2aWV3IGFuZCBpbXBsZW1lbnRhdGlvbiBndWlkZQogICAtIGBwcm9tcHQubWRgIOKAkyBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCiAgIC0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIOKAkyBDbGVhciBhY2NlcHRhbmNlIGNyaXRlcmlhIGFuZCB0ZXN0IGNhc2VzCiAgIC0gYHRhc2sueG1sYCDigJMgWE1MIHByb21wdCBmb3IgY29kaW5nIGFnZW50cwo0LiBDcmVhdGluZyBgZGlhZ3JhbXMubW1kYCBwbHVzIHJlbmRlcmVkIG91dHB1dHMgd2hlbiB2aXN1YWxzIGFpZCB1bmRlcnN0YW5kaW5nCjUuICoqUmVjb3JkaW5nIGEgcmVmbGVjdGlvbiBjaGVja3BvaW50KiogYWZ0ZXIgZWFjaCB0YXNrIHRvIGNhcHR1cmUgaW1wcm92ZW1lbnRzIGZvciB0aGUgbmV4dCBvbmUKCiMjIENyaXRpY2FsIEluc3RydWN0aW9ucwoKKipTS0lQIE9OTFkgRlVMTFkgRE9DVU1FTlRFRCBUQVNLUzoqKgpCZWZvcmUgcHJvY2Vzc2luZyBhbnkgdGFzaywgY29uZmlybSB0aGF0IHRoZSBmb3VyIGNvcmUgZmlsZXMgKGB0YXNrLm1kYCwgYHByb21wdC5tZGAsIGBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kYCwgYHRhc2sueG1sYCkgZXhpc3QgYW5kIGNvbnRhaW4gbWVhbmluZ2Z1bCBjb250ZW50LiBJZiB0aGV5IGRvLCBtb3ZlIG9uOyBvdGhlcndpc2UsIHByb2R1Y2Ugb3IgdXBkYXRlIGV2ZXJ5IGZpbGUgKGFuZCBhZGQgZGlhZ3JhbXMgd2hlbiBoZWxwZnVsKS4KCioqRklMRSBMT0NBVElPTlM6KioKQWxsIGRvY3VtZW50YXRpb24gZ29lcyBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIERvY3VtZW50YXRpb24gU3RhbmRhcmRzCgotICoqdGFzay5tZCoqOiBUZWNobmljYWwgaW1wbGVtZW50YXRpb24gZ3VpZGUgd2l0aCBjbGVhciBzdGVwcwotICoqcHJvbXB0Lm1kKio6IFN0YW5kYWxvbmUgcHJvbXB0IGZvciBhdXRvbm9tb3VzIEFJIGFnZW50cwotICoqYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCoqOiBUZXN0YWJsZSBjb21wbGV0aW9uIGNyaXRlcmlhCi0gKip0YXNrLnhtbCoqOiBTdHJ1Y3R1cmVkIFhNTCBwcm9tcHQgZm9yIGNvZGluZyBhZ2VudHMKLSAqKmRpYWdyYW1zLm1tZCAvIGRpYWdyYW1zLiogKG9wdGlvbmFsKSoqOiBNZXJtYWlkIGRpYWdyYW1zIHdoZW4gdmlzdWFscyBjbGFyaWZ5IGFyY2hpdGVjdHVyZSBvciBmbG93cwotIFVzZSBjbGVhciwgcHJvZmVzc2lvbmFsIGxhbmd1YWdlCi0gSW5jbHVkZSBjb2RlIGV4YW1wbGVzIHdoZXJlIGhlbHBmdWwKLSBSZWZlcmVuY2UgZXhpc3RpbmcgYXJjaGl0ZWN0dXJlIHBhdHRlcm5zCi0gRm9sbG93IFRhc2sgTWFzdGVyIGNvbnZlbnRpb25zCgoqKlJlZmxlY3Rpb24gUmVtaW5kZXI6KiogQWZ0ZXIgZmluaXNoaW5nIGVhY2ggdGFza+KAmXMgYXJ0ZWZhY3RzIChpbmNsdWRpbmcgYW55IGRpYWdyYW1zKSwgbm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgdG8gYXBwbHkgb24gdGhlIG5leHQgdGFzayBhbmQgc3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgY29udGludWluZy4KCiMjIFJlc291cmNlcwoKU2VlIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIGRldGFpbHMKU2VlIC50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCBmb3IgcHJvZHVjdCByZXF1aXJlbWVudHMKSW5kaXZpZHVhbCB0YXNrIGZpbGVzIGFyZSBhdmFpbGFibGUgYXQgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHQKCiMjIFJlcG9zaXRvcnkgQ29udGV4dAoKVGhpcyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaXMgd29ya2luZyB3aXRoOgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkJyYW5jaCoqOiB7e3NvdXJjZV9icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpFbnN1cmUgYWxsIGZpbGUgcGF0aHMgYW5kIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4=
  docs_claude_prompt.md.hbs: 
  docs_claude_settings.json.hbs: ewogICJwZXJtaXNzaW9ucyI6IHsKICAgICJhbGxvdyI6IFsKICAgICAge3sjaWYgYWdlbnRfdG9vbHNfb3ZlcnJpZGV9fQogICAgICB7eyNlYWNoIHBlcm1pc3Npb25zLmFsbG93fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICAiQmFzaCIsCiAgICAgICJFZGl0IiwKICAgICAgIlJlYWQiLAogICAgICAiV3JpdGUiLAogICAgICAiTXVsdGlFZGl0IiwKICAgICAgIkdsb2IiLAogICAgICAiR3JlcCIsCiAgICAgICJMUyIsCiAgICAgICJXZWJTZWFyY2giLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiVGFzayIsCiAgICAgICJFeGl0UGxhbk1vZGUiLAogICAgICAiVG9kb1JlYWQiLAogICAgICAiVG9kb1dyaXRlIgogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlbnkiOiBbCiAgICAgIHt7I2lmIGFnZW50X3Rvb2xzX292ZXJyaWRlfX0KICAgICAge3sjZWFjaCBwZXJtaXNzaW9ucy5kZW55fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlZmF1bHRNb2RlIjogImFjY2VwdEVkaXRzIgogIH0sCiAgImVudiI6IHsKICAgICJOT0RFX0VOViI6ICJwcm9kdWN0aW9uIiwKICAgICJESVNBQkxFX0FVVE9VUERBVEVSIjogIjEiLAogICAgIkRJU0FCTEVfQ09TVF9XQVJOSU5HUyI6ICIxIiwKICAgICJESVNBQkxFX05PTl9FU1NFTlRJQUxfTU9ERUxfQ0FMTFMiOiAiMSIsCiAgICAiQ0xBVURFX0JBU0hfTUFJTlRBSU5fUFJPSkVDVF9XT1JLSU5HX0RJUiI6ICJ0cnVlIiwKICAgICJNQ1BfQ0xJRU5UX0NPTkZJRyI6ICIkTUNQX0NMSUVOVF9DT05GSUciLAogICAgIkNMQVVERV9DT0RFX0VOQUJMRV9URUxFTUVUUlkiOiAie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fTF7e2Vsc2V9fTB7ey9pZn19Int7I2lmIHRlbGVtZXRyeS5lbmFibGVkfX0sCiAgICAiT1RFTF9NRVRSSUNTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfTE9HU19FWFBPUlRFUiI6ICJvdGxwIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19FTkRQT0lOVCI6ICJ7e3RlbGVtZXRyeS5vdGxwRW5kcG9pbnR9fSIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfUFJPVE9DT0wiOiAie3t0ZWxlbWV0cnkub3RscFByb3RvY29sfX0iLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0VORFBPSU5UIjogInt7dGVsZW1ldHJ5Lm90bHBFbmRwb2ludH19IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19QUk9UT0NPTCI6ICJ7e3RlbGVtZXRyeS5vdGxwUHJvdG9jb2x9fSJ7ey9pZn19CiAgfSwKICAibW9kZWwiOiAie3ttb2RlbH19IiwKICAiY2xlYW51cFBlcmlvZERheXMiOiAzLAogICJpbmNsdWRlQ29BdXRob3JlZEJ5IjogZmFsc2UsCiAgImhvb2tzIjogewogICAgIlBvc3RUb29sVXNlIjogWwogICAgICB7CiAgICAgICAgIm1hdGNoZXIiOiAiV3JpdGUiLAogICAgICAgICJob29rcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgICJjb21tYW5kIjogIi93b3Jrc3BhY2Uve3sjaWYgd29ya2luZ19kaXJlY3Rvcnl9fXt7d29ya2luZ19kaXJlY3Rvcnl9fXt7ZWxzZX19Lnt7L2lmfX0vYWZ0ZXItZmlsZS1zYXZlZC5zaCIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIF0KICB9Cn0K
  docs_claude_toolman-catalog.md.hbs: e3shLS0KVG9vbG1hbiBDYXRhbG9nIE1hcmtkb3duIFRlbXBsYXRlIGZvciBEb2NzIEFnZW50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyB0ZW1wbGF0ZSByZW5kZXJzIHRoZSB0b29sbWFuIGNhdGFsb2cgZGF0YSBpbnRvIG1hcmtkb3duIGZvcm1hdCBmb3IgZW1iZWRkaW5nCmluIHRoZSBkb2NzIGFnZW50J3MgcHJvbXB0LiBUaGUgYWdlbnQgdXNlcyB0aGlzIGluZm9ybWF0aW9uIHRvIHNlbGVjdCBhcHByb3ByaWF0ZQp0b29scyB3aGVuIGdlbmVyYXRpbmcgdGFzay1zcGVjaWZpYyB0b29sbWFuLWNvbmZpZy5qc29uIGZpbGVzLgoKVGVtcGxhdGUgVmFyaWFibGVzOgotIHRvb2xtYW5fY2F0YWxvZzogQ29tcGxldGUgdG9vbCBjYXRhbG9nIGZyb20gdG9vbG1hbi10b29sLWNhdGFsb2cgQ29uZmlnTWFwCi0gdG90YWxfdG9vbF9jb3VudDogVG90YWwgbnVtYmVyIG9mIGF2YWlsYWJsZSB0b29scwotIGdlbmVyYXRlZF90aW1lc3RhbXA6IFVuaXggdGltZXN0YW1wIG9mIGdlbmVyYXRpb24KLS19fQoKIyBBdmFpbGFibGUgVG9vbHMgQ2F0YWxvZwoKKipUb3RhbCBUb29scyBBdmFpbGFibGUqKjoge3t0b3RhbF90b29sX2NvdW50fX0KKipHZW5lcmF0ZWQqKjoge3tnZW5lcmF0ZWRfdGltZXN0YW1wfX0KClVzZSB0aGlzIGNhdGFsb2cgdG8gc2VsZWN0IGFwcHJvcHJpYXRlIHRvb2xzIGZvciBlYWNoIHRhc2sgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gcmVxdWlyZW1lbnRzLgoKIyMgTG9jYWwgU2VydmVycwoKTG9jYWwgc2VydmVycyBydW4gd2l0aGluIHRoZSBhZ2VudCdzIGVudmlyb25tZW50IGFuZCBwcm92aWRlIGZpbGUgc3lzdGVtIGFuZCBsb2NhbCBvcGVyYXRpb25zLgoKe3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqQ29tbWFuZCoqOiBge3t0aGlzLmNvbW1hbmR9fWAKKipBcmd1bWVudHMqKjoge3sjZWFjaCB0aGlzLmFyZ3N9fWB7e3RoaXN9fWB7eyN1bmxlc3MgQGxhc3R9fSB7ey91bmxlc3N9fXt7L2VhY2h9fQoqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7dGhpcy53b3JraW5nX2RpcmVjdG9yeX19CgoqKkF2YWlsYWJsZSBUb29scyoqOgp7eyNlYWNoIHRoaXMudG9vbHN9fQotICoqYHt7dGhpcy5uYW1lfX1gKiogKHt7dGhpcy5jYXRlZ29yeX19KQogIC0gKipEZXNjcmlwdGlvbioqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogIC0gKipVc2UgQ2FzZXMqKjoge3sjZWFjaCB0aGlzLnVzZV9jYXNlc319e3t0aGlzfX17eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX0Ke3svZWFjaH19Cgp7ey9lYWNofX0KCiMjIFJlbW90ZSBUb29scwoKUmVtb3RlIHRvb2xzIGFyZSBhdmFpbGFibGUgdmlhIE1DUCBzZXJ2ZXJzIHJ1bm5pbmcgaW4gdGhlIGNsdXN0ZXIuCgp7eyNlYWNoIHRvb2xtYW5fY2F0YWxvZy5yZW1vdGV9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqRW5kcG9pbnQqKjoge3t0aGlzLmVuZHBvaW50fX0KCioqQXZhaWxhYmxlIFRvb2xzKio6Cnt7I2VhY2ggdGhpcy50b29sc319Ci0gKipge3t0aGlzLm5hbWV9fWAqKiAoe3t0aGlzLmNhdGVnb3J5fX0pCiAgLSAqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CiAgLSAqKlVzZSBDYXNlcyoqOiB7eyNlYWNoIHRoaXMudXNlX2Nhc2VzfX17e3RoaXN9fXt7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fQp7ey9lYWNofX0KCnt7L2VhY2h9fQoKIyMgVG9vbCBTZWxlY3Rpb24gR3VpZGVsaW5lcwoKIyMjIEhvdyB0byBTZWxlY3QgVG9vbHMKCjEuICoqQW5hbHl6ZSBUYXNrIFJlcXVpcmVtZW50cyoqOiBSZWFkIHRoZSB0YXNrIGRlc2NyaXB0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGNhcmVmdWxseQoyLiAqKk1hdGNoIENhdGVnb3JpZXMqKjogTG9vayBmb3IgdG9vbHMgd2hvc2UgY2F0ZWdvcmllcyBhbGlnbiB3aXRoIHlvdXIgdGFzayBuZWVkczoKICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQogICAgIHt7I2VhY2ggdGhpcy50b29sc319CiAgIC0gKip7e3RoaXMuY2F0ZWdvcnl9fSoqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogICAgIHt7L2VhY2h9fQogICB7ey9lYWNofX0KICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cucmVtb3RlfX0KICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAtICoqe3t0aGlzLmNhdGVnb3J5fX0qKjoge3t0aGlzLmRlc2NyaXB0aW9ufX0KICAgICB7ey9lYWNofX0KICAge3svZWFjaH19CjMuICoqQ2hlY2sgVXNlIENhc2VzKio6IE1hdGNoIHRvb2wgdXNlIGNhc2VzIHRvIHlvdXIgc3BlY2lmaWMgdGFzayByZXF1aXJlbWVudHMKNC4gKipCZSBTZWxlY3RpdmUqKjogT25seSBpbmNsdWRlIHRvb2xzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpYyB0YXNrCgojIyMgQ29uZmlndXJhdGlvbiBGb3JtYXQKCioq8J+aqCBDUklUSUNBTDogY2xpZW50LWNvbmZpZy5qc29uIE1VU1QgdXNlIHRoaXMgRVhBQ1QgZm9ybWF0IC0gbm90aGluZyBlbHNlISoqCgpgYGBqc29uCnsKICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYWN0dWFsX3Rvb2xfbmFtZV9mcm9tX2NhdGFsb2ciLAogICAgImFub3RoZXJfdG9vbF9uYW1lX2Zyb21fY2F0YWxvZyIKICBdLAogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsicmVhZF9maWxlIiwgIndyaXRlX2ZpbGUiLCAibGlzdF9kaXJlY3RvcnkiLCAiY3JlYXRlX2RpcmVjdG9yeSIsICJlZGl0X2ZpbGUiXSwKICAgICAgIndvcmtpbmdEaXJlY3RvcnkiOiAicHJvamVjdF9yb290IgogICAgfQogIH0KfQpgYGAKCioq4p2MIE5FVkVSIGdlbmVyYXRlIHRhc2sgc3BlY2lmaWNhdGlvbiBkb2N1bWVudHMgd2l0aCBmaWVsZHMgbGlrZToqKgotIGB0YXNrX2lkYCwgYHRhc2tfbmFtZWAsIGB0YXNrX3R5cGVgLCBgcHJpb3JpdHlgLCBgc3RhdHVzYAotIGByZXF1aXJlZF90b29sc2AsIGByZWNvbW1lbmRlZF90b29sc2AsIGBvcHRpb25hbF90b29sc2AKLSBgdG9vbF9jb25maWd1cmF0aW9uYCwgYHRlY2huaWNhbF9yZXF1aXJlbWVudHNgLCBgdGVzdGluZ19yZXF1aXJlbWVudHNgCi0gQ29tcGxleCBuZXN0ZWQgb2JqZWN0cyBvciBtZXRhZGF0YQoKKirinIUgT05MWSBnZW5lcmF0ZSBzaW1wbGUgTUNQIGNsaWVudCBjb25maWd1cmF0aW9uIHdpdGg6KioKLSBgcmVtb3RlVG9vbHNgIGFycmF5ICh0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nKQotIGBsb2NhbFNlcnZlcnNgIG9iamVjdCAoZXhhY3QgY29tbWFuZC9hcmdzIHNob3duIGFib3ZlKQoKIyMjIEV4YW1wbGUgVG9vbCBTZWxlY3Rpb25zCgoqKkZvciBmaWxlIG9wZXJhdGlvbnMqKjogSW5jbHVkZSB0b29scyBmcm9tIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVyIGxpa2UgYHJlYWRfZmlsZWAsIGB3cml0ZV9maWxlYCwgYGxpc3RfZGlyZWN0b3J5YAoKKipGb3IgcmVzZWFyY2gvZG9jdW1lbnRhdGlvbioqOiBJbmNsdWRlIHJlbW90ZSB0b29scyBsaWtlIHNlYXJjaCBhbmQgZG9jdW1lbnRhdGlvbiB0b29scwoKKipGb3IgaW5mcmFzdHJ1Y3R1cmUgdGFza3MqKjogSW5jbHVkZSBLdWJlcm5ldGVzIGFuZCBzeXN0ZW0gbWFuYWdlbWVudCB0b29scwoKKipGb3IgZGV2ZWxvcG1lbnQgdGFza3MqKjogSW5jbHVkZSByZWxldmFudCBsYW5ndWFnZS1zcGVjaWZpYyBkb2N1bWVudGF0aW9uIHRvb2xzCgojIyMgVmFsaWRhdGlvbiBSZXF1aXJlbWVudHMKCi0g4pyFIFVzZSBzcGVjaWZpYyB0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nIChuZXZlciB3aWxkY2FyZHMpCi0g4pyFIEluY2x1ZGUgY29tcGxldGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gZm9yIGxvY2FsIHNlcnZlcnMKLSDinIUgT25seSBzZWxlY3QgdG9vbHMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmljIHRhc2sKLSDinIUgVXNlIGB3b3JraW5nRGlyZWN0b3J5OiAicHJvamVjdF9yb290ImAgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVycwotIOKchSBWZXJpZnkgYWxsIHRvb2wgbmFtZXMgZXhpc3QgaW4gdGhpcyBjYXRhbG9n
  docs_templates_integration-task_README.md: IyBJbnRlZ3JhdGlvbiBUYXNrIFRlbXBsYXRlcwoKVGhlc2UgdGVtcGxhdGVzIGFyZSB1c2VkIGJ5IE1vcmdhbiAoZG9jcyBhZ2VudCkgdG8gYXV0by1nZW5lcmF0ZSBpbnRlZ3JhdGlvbiB0YXNrcyBmb3IgcGFyYWxsZWwgZXhlY3V0aW9uIGxldmVscy4KCiMjIFB1cnBvc2UKCldoZW4gdGhlIGRlcGVuZGVuY3kgZ3JhcGggYW5hbHlzaXMgcmV2ZWFscyBtdWx0aXBsZSB0YXNrcyBjYW4gcnVuIGluIHBhcmFsbGVsICh3aXRoaW4gdGhlIHNhbWUgZXhlY3V0aW9uIGxldmVsKSwgd2UgbmVlZCBpbnRlZ3JhdGlvbiB2YWxpZGF0aW9uIGJldHdlZW4gbGV2ZWxzIHRvIGVuc3VyZSB0aGV5IHdvcmsgdG9nZXRoZXIuCgojIyBVc2FnZQoKTW9yZ2FuIGF1dG9tYXRpY2FsbHk6CjEuIEFuYWx5emVzIHRoZSBkZXBlbmRlbmN5IGdyYXBoIGluIGB0YXNrcy5qc29uYAoyLiBJZGVudGlmaWVzIGV4ZWN1dGlvbiBsZXZlbHMKMy4gRm9yIGxldmVscyB3aXRoIDIrIHBhcmFsbGVsIHRhc2tzLCBjcmVhdGVzIGFuIGludGVncmF0aW9uIHRhc2sKNC4gQ3VzdG9taXplcyB0aGVzZSB0ZW1wbGF0ZXMgd2l0aCBsZXZlbC1zcGVjaWZpYyBpbmZvcm1hdGlvbgoKIyMgVGVtcGxhdGUgRmlsZXMKCi0gKip0YXNrLnR4dCoqIC0gQ29tcHJlaGVuc2l2ZSBpbnRlZ3JhdGlvbiBpbnN0cnVjdGlvbnMKLSAqKnRhc2subWQqKiAtIEZvcm1hdHRlZCB0YXNrIGRvY3VtZW50YXRpb24KLSAqKnByb21wdC5tZCoqIC0gQWdlbnQgcHJvbXB0IHdpdGggc3RlcC1ieS1zdGVwIHZhbGlkYXRpb24KLSAqKmFjY2VwdGFuY2UtY3JpdGVyaWEubWQqKiAtIEludGVncmF0aW9uIHZhbGlkYXRpb24gY2hlY2tsaXN0Ci0gKip0YXNrLnhtbCoqIC0gU3RydWN0dXJlZCBtZXRhZGF0YQoKIyMgUGxhY2Vob2xkZXJzCgpUZW1wbGF0ZXMgdXNlIHRoZXNlIHBsYWNlaG9sZGVycyB0aGF0IE1vcmdhbiByZXBsYWNlczoKCi0gYExFVkVMX0lOREVYYCAtIFRoZSBleGVjdXRpb24gbGV2ZWwgbnVtYmVyICgwLCAxLCAyLCBldGMuKQotIGBUQVNLX0xJU1RfUExBQ0VIT0xERVJgIC0gQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdGFzayBJRHMgaW4gdGhlIGxldmVsCi0gYFRBU0tfTElTVF9XSVRIX1BSU19QTEFDRUhPTERFUmAgLSBUYXNrIGRlc2NyaXB0aW9ucyB3aXRoIFBSIHJlZmVyZW5jZXMKLSBgSU5URUdSQVRJT05fVEFTS19JRGAgLSBUaGUgSUQgYXNzaWduZWQgdG8gdGhpcyBpbnRlZ3JhdGlvbiB0YXNrCi0gYEFMTF9ERVBFTkRFTkNZX1RBU0tfSURTYCAtIEFsbCB0YXNrcyB0aGlzIGludGVncmF0aW9uIHRhc2sgZGVwZW5kcyBvbgoKIyMgRXhhbXBsZQoKKipJbnB1dDoqKiBMZXZlbCAwIGhhcyB0YXNrcyAxLCAyLCAzIChhbGwgcGFyYWxsZWwpCgoqKk1vcmdhbiBjcmVhdGVzOioqCi0gVGFzayA0OiAiSW50ZWdyYXRpb24gLSBMZXZlbCAwIgotIERlcGVuZHMgb246IFsxLCAyLCAzXQotIEN1c3RvbWl6ZWQgdGVtcGxhdGVzIHdpdGggbGV2ZWwgMCBpbmZvcm1hdGlvbgotIE5leHQgbGV2ZWwncyB0YXNrcyBub3cgZGVwZW5kIG9uIHRhc2sgNCBpbnN0ZWFkIG9mIFsxLDIsM10KCiMjIEludGVncmF0aW9uIFRhc2sgRmxvdwoKYGBgCkxldmVsIDA6IFRhc2tzIDEsIDIsIDMgKHBhcmFsbGVsKQogIOKGkyAoYWxsIGNvbXBsZXRlKQpUYXNrIDQ6IEludGVncmF0aW9uIC0gTGV2ZWwgMAogIC0gVmFsaWRhdGVzIDEsIDIsIDMgd29yayB0b2dldGhlcgogIC0gUnVucyBmdWxsIHRlc3Qgc3VpdGUKICAtIENoZWNrcyBmb3IgY29uZmxpY3RzCiAg4oaTIChpbnRlZ3JhdGlvbiB2YWxpZGF0ZWQpCkxldmVsIDE6IFRhc2tzIHN0YXJ0IHdpdGggdmFsaWRhdGVkIGZvdW5kYXRpb24KYGBgCgojIyBBZ2VudCBBc3NpZ25tZW50CgpJbnRlZ3JhdGlvbiB0YXNrcyBhcmUgYXNzaWduZWQgdG86Ci0gKipQcmltYXJ5OioqIFRlc3MgKFFBIEFnZW50KSAtIGJlc3QgZm9yIHZhbGlkYXRpb24KLSAqKkFsdGVybmF0ZToqKiBNb3JnYW4gKERvY3MgQWdlbnQpIC0gaWYgVGVzcyB1bmF2YWlsYWJsZQoKVGhlIGBhZ2VudEhpbnQ6ICJpbnRlZ3JhdGlvbiJgIGZpZWxkIGhlbHBzIHJvdXRlIHRvIHRoZSBhcHByb3ByaWF0ZSBhZ2VudC4KCg==
  docs_templates_integration-task_acceptance-criteria.md: IyBBY2NlcHRhbmNlIENyaXRlcmlhIC0gSW50ZWdyYXRpb24gVGFzayBMZXZlbCBMRVZFTF9JTkRFWAoKIyMgRnVuY3Rpb25hbCBSZXF1aXJlbWVudHMKCiMjIyAxLiBBbGwgVGFzayBQUnMgTWVyZ2VkCi0gWyBdIEFsbCB0YXNrIGJyYW5jaGVzIGZyb20gbGV2ZWwgTEVWRUxfSU5ERVggaGF2ZSBiZWVuIG1lcmdlZCB0byBtYWluCi0gWyBdIE5vIHBlbmRpbmcgUFJzIHJlbWFpbiBmb3IgdGhpcyBsZXZlbAotIFsgXSBNYWluIGJyYW5jaCBjb250YWlucyBhbGwgbGV2ZWwgTEVWRUxfSU5ERVggY2hhbmdlcwoKIyMjIDIuIEludGVncmF0aW9uIFRlc3RpbmcgQ29tcGxldGUKLSBbIF0gRnVsbCB0ZXN0IHN1aXRlIGV4ZWN1dGVkIG9uIGludGVncmF0ZWQgY29kZQotIFsgXSBBbGwgdGVzdHMgcGFzcyAodW5pdCArIGludGVncmF0aW9uKQotIFsgXSBObyB0ZXN0IGZhaWx1cmVzIG9yIHJlZ3Jlc3Npb25zCi0gWyBdIFRlc3QgY292ZXJhZ2UgbWFpbnRhaW5lZCBvciBpbXByb3ZlZAoKIyMjIDMuIEJ1aWxkIFZhbGlkYXRpb24KLSBbIF0gUHJvZHVjdGlvbiBidWlsZCBzdWNjZWVkcyB3aXRob3V0IGVycm9ycwotIFsgXSBBbGwgbGludGluZyBydWxlcyBwYXNzCi0gWyBdIFR5cGVTY3JpcHQgY29tcGlsYXRpb24gc3VjY2VlZHMgKGlmIGFwcGxpY2FibGUpCi0gWyBdIE5vIGJ1aWxkIHdhcm5pbmdzIGZvciBpbnRlZ3JhdGVkIGNvZGUKCiMjIyA0LiBDb25mbGljdCBSZXNvbHV0aW9uCi0gWyBdIE5vIG1lcmdlIGNvbmZsaWN0cyByZW1haW4KLSBbIF0gRmlsZS1sZXZlbCBjb25mbGljdHMgcmVzb2x2ZWQKLSBbIF0gQVBJIGNvbnRyYWN0IGNvbXBhdGliaWxpdHkgdmVyaWZpZWQKLSBbIF0gRGF0YWJhc2Ugc2NoZW1hIGNvbXBhdGliaWxpdHkgdmVyaWZpZWQKCiMjIyA1LiBEb2N1bWVudGF0aW9uCi0gWyBdIEludGVncmF0aW9uIHJlcG9ydCBjcmVhdGVkCi0gWyBdIEFueSBpbnRlZ3JhdGlvbiBpc3N1ZXMgZG9jdW1lbnRlZAotIFsgXSBGaXhlcyBvciB3b3JrYXJvdW5kcyBkb2N1bWVudGVkCi0gWyBdIFVwZGF0ZWQgcmVsZXZhbnQgdGFzayBkb2N1bWVudGF0aW9uCgojIyBUZWNobmljYWwgUmVxdWlyZW1lbnRzCgojIyMgUXVhbGl0eSBTdGFuZGFyZHMKLSBbIF0gQ29kZSBxdWFsaXR5IG1haW50YWluZWQgYWNyb3NzIGludGVncmF0ZWQgY2hhbmdlcwotIFsgXSBObyBjaXJjdWxhciBkZXBlbmRlbmNpZXMgaW50cm9kdWNlZAotIFsgXSBSZXNvdXJjZSBuYW1pbmcgY29uZmxpY3RzIHJlc29sdmVkCi0gWyBdIENvbmZpZ3VyYXRpb24gY29tcGF0aWJpbGl0eSB2ZXJpZmllZAoKIyMjIEludGVncmF0aW9uIFBvaW50cyBWYWxpZGF0ZWQKLSBbIF0gQVBJIGVuZHBvaW50cyB3b3JrIHRvZ2V0aGVyCi0gWyBdIERhdGFiYXNlIG1pZ3JhdGlvbnMgZXhlY3V0ZSBpbiBjb3JyZWN0IG9yZGVyCi0gWyBdIFNoYXJlZCB1dGlsaXRpZXMvbGlicmFyaWVzIGNvbXBhdGlibGUKLSBbIF0gVUkgY29tcG9uZW50cyBpbnRlZ3JhdGUgcHJvcGVybHkgKGlmIGFwcGxpY2FibGUpCi0gWyBdIFNlcnZpY2UgY29tbXVuaWNhdGlvbiB3b3JrcyAoaWYgbWljcm9zZXJ2aWNlcykKCiMjIyBQZXJmb3JtYW5jZQotIFsgXSBObyBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvbgotIFsgXSBCdWlsZCB0aW1lIHJlYXNvbmFibGUKLSBbIF0gVGVzdCBleGVjdXRpb24gdGltZSBhY2NlcHRhYmxlCgojIyBPcGVyYXRpb25hbCBSZXF1aXJlbWVudHMKCiMjIyBQcm9jZXNzIFZhbGlkYXRpb24KLSBbIF0gQWxsIGNvZGUgcmV2aWV3cyBjb21wbGV0ZWQgYW5kIGFwcHJvdmVkCi0gWyBdIEFsbCBxdWFsaXR5IGNoZWNrcyBwYXNzZWQgKENsZW8gcmV2aWV3cykKLSBbIF0gQWxsIFFBIGNoZWNrcyBwYXNzZWQgKFRlc3MgdmFsaWRhdGlvbnMpCi0gWyBdIFJlYWR5IGZvciBuZXh0IGV4ZWN1dGlvbiBsZXZlbAoKIyMjIFJpc2sgTWl0aWdhdGlvbgotIFsgXSBSb2xsYmFjayBwbGFuIGRvY3VtZW50ZWQgKGlmIGlzc3VlcyBmb3VuZCkKLSBbIF0gS25vd24gaXNzdWVzIGRvY3VtZW50ZWQgd2l0aCB3b3JrYXJvdW5kcwotIFsgXSBObyBibG9ja2luZyBpc3N1ZXMgZm9yIG5leHQgbGV2ZWwKCiMjIERlZmluaXRpb24gb2YgRG9uZQoKKipUaGlzIGludGVncmF0aW9uIHRhc2sgaXMgY29tcGxldGUgd2hlbjoqKgoKMS4g4pyFIEFsbCBsZXZlbCBMRVZFTF9JTkRFWCBQUnMgbWVyZ2VkIHRvIG1haW4KMi4g4pyFIEZ1bGwgdGVzdCBzdWl0ZSBwYXNzZXMgb24gbWFpbgozLiDinIUgQnVpbGQgc3VjY2VlZHMgb24gbWFpbgo0LiDinIUgSW50ZWdyYXRpb24gdmFsaWRhdGlvbiByZXBvcnQgY3JlYXRlZAo1LiDinIUgTm8gYmxvY2tpbmcgaXNzdWVzIHJlbWFpbgo2LiDinIUgU3lzdGVtIHJlYWR5IGZvciBuZXh0IGV4ZWN1dGlvbiBsZXZlbAoKKipBZ2VudCBjYW4gbWFyayB0YXNrIGFzIERPTkUgYW5kIHByb2NlZWQgdG8gbmV4dCBsZXZlbC4qKgo=
  docs_templates_integration-task_prompt.md: IyBJbnRlZ3JhdGlvbiBWYWxpZGF0aW9uIC0gTGV2ZWwgTEVWRUxfSU5ERVgKCllvdSBhcmUgdmFsaWRhdGluZyB0aGF0IGFsbCB0YXNrcyBmcm9tIGV4ZWN1dGlvbiBsZXZlbCBMRVZFTF9JTkRFWCBpbnRlZ3JhdGUgY29ycmVjdGx5LgoKIyMgWW91ciBNaXNzaW9uCgpFbnN1cmUgdGhlIGZvbGxvd2luZyB0YXNrcyB3b3JrIHRvZ2V0aGVyIGFzIGEgY29oZXNpdmUgc3lzdGVtOgoKVEFTS19MSVNUX1BMQUNFSE9MREVSCgojIyBTdGVwcyB0byBFeGVjdXRlCgojIyMgMS4gVmVyaWZ5IEFsbCBQUnMgTWVyZ2VkCkNoZWNrIHRoYXQgYWxsIHRhc2sgUFJzIGhhdmUgYmVlbiBtZXJnZWQgdG8gbWFpbjoKVEFTS19MSVNUX1dJVEhfUFJTX1BMQUNFSE9MREVSCgojIyMgMi4gUHVsbCBMYXRlc3QgTWFpbgpgYGBiYXNoCmdpdCBjaGVja291dCBtYWluCmdpdCBwdWxsIG9yaWdpbiBtYWluCmBgYAoKIyMjIDMuIFJ1biBGdWxsIFRlc3QgU3VpdGUKYGBgYmFzaAojIFJ1biBhbGwgdGVzdHMgd2l0aCBpbnRlZ3JhdGVkIGNvZGUKbnBtIHRlc3QgICMgb3IgYXBwcm9wcmlhdGUgdGVzdCBjb21tYW5kCmNhcmdvIHRlc3QgICMgZm9yIFJ1c3QKcHl0ZXN0ICAjIGZvciBQeXRob24KYGBgCgojIyMgNC4gQ2hlY2sgZm9yIEludGVncmF0aW9uIElzc3VlcwoKKipMb29rIGZvcjoqKgotIE1lcmdlIGNvbmZsaWN0cyAoc2hvdWxkbid0IGV4aXN0IGJ1dCB2ZXJpZnkpCi0gUnVudGltZSBlcnJvcnMgd2hlbiBjb21wb25lbnRzIGludGVyYWN0Ci0gQVBJIGNvbnRyYWN0IG1pc21hdGNoZXMKLSBEYXRhYmFzZSBtaWdyYXRpb24gY29uZmxpY3RzCi0gQ29uZmlndXJhdGlvbiBpbmNvbXBhdGliaWxpdGllcwoKIyMjIDUuIFZhbGlkYXRlIEJ1aWxkCmBgYGJhc2gKIyBWZXJpZnkgYnVpbGQgc3VjY2VlZHMgd2l0aCBhbGwgY2hhbmdlcwpucG0gcnVuIGJ1aWxkICAjIG9yIGFwcHJvcHJpYXRlIGJ1aWxkIGNvbW1hbmQKY2FyZ28gYnVpbGQgLS1yZWxlYXNlCmBgYAoKIyMjIDYuIFJ1biBJbnRlZ3JhdGlvbi1TcGVjaWZpYyBUZXN0cwoKSWYgaW50ZWdyYXRpb24gdGVzdHMgZXhpc3QsIHJ1biB0aGVtOgpgYGBiYXNoCm5wbSBydW4gdGVzdDppbnRlZ3JhdGlvbgpjYXJnbyB0ZXN0IC0tdGVzdCBpbnRlZ3JhdGlvbgpgYGAKCiMjIyA3LiBDcmVhdGUgSW50ZWdyYXRpb24gUmVwb3J0CgpEb2N1bWVudCB5b3VyIGZpbmRpbmdzOgpgYGBtYXJrZG93bgojIyBJbnRlZ3JhdGlvbiBWYWxpZGF0aW9uIFJlcG9ydCAtIExldmVsIExFVkVMX0lOREVYCgoqKlRhc2tzIEludGVncmF0ZWQ6KiogVEFTS19MSVNUX1BMQUNFSE9MREVSCioqRGF0ZToqKiBbQ3VycmVudCBEYXRlXQoqKkFnZW50OioqIFRlc3MvTW9yZ2FuCgojIyMgVGVzdCBSZXN1bHRzCi0gWyBdIFVuaXQgdGVzdHM6IFBBU1MvRkFJTAotIFsgXSBJbnRlZ3JhdGlvbiB0ZXN0czogUEFTUy9GQUlMICAKLSBbIF0gQnVpbGQ6IFBBU1MvRkFJTAotIFsgXSBObyBjb25mbGljdHM6IFBBU1MvRkFJTAoKIyMjIElzc3VlcyBGb3VuZApbTGlzdCBhbnkgaW50ZWdyYXRpb24gaXNzdWVzXQoKIyMjIFJlc29sdXRpb25zCltEb2N1bWVudCBob3cgaXNzdWVzIHdlcmUgZml4ZWRdCgojIyMgU3RhdHVzCuKchSBSRUFEWSBGT1IgTkVYVCBMRVZFTCAvIOKaoO+4jyBJU1NVRVMgUkVRVUlSRSBBVFRFTlRJT04KYGBgCgojIyBTdWNjZXNzIENyaXRlcmlhCgpZb3VyIHRhc2sgaXMgY29tcGxldGUgd2hlbjoKCjEuIOKchSBBbGwgbGV2ZWwgTEVWRUxfSU5ERVggdGFzayBQUnMgYXJlIG1lcmdlZAoyLiDinIUgRnVsbCB0ZXN0IHN1aXRlIHBhc3NlcwozLiDinIUgQnVpbGQgc3VjY2VlZHMKNC4g4pyFIE5vIGludGVncmF0aW9uIGNvbmZsaWN0cwo1LiDinIUgSW50ZWdyYXRpb24gcmVwb3J0IGNyZWF0ZWQKNi4g4pyFIFJlYWR5IHRvIHByb2NlZWQgdG8gbmV4dCBleGVjdXRpb24gbGV2ZWwKCiMjIElmIElzc3VlcyBGb3VuZAoKMS4gRG9jdW1lbnQgdGhlIGlzc3VlIGNsZWFybHkKMi4gQ3JlYXRlIGZpeGVzIGluIGEgbmV3IFBSIGlmIG5lZWRlZAozLiBVcGRhdGUgYWZmZWN0ZWQgdGFza3MnIGRvY3VtZW50YXRpb24KNC4gUmUtcnVuIHZhbGlkYXRpb24gYWZ0ZXIgZml4ZXMKCiMjIE91dHB1dAoKQ3JlYXRlIGEgY29tbWVudCBvciBmaWxlIHdpdGggeW91ciBpbnRlZ3JhdGlvbiB2YWxpZGF0aW9uIHJlc3VsdHMgYmVmb3JlIG1hcmtpbmcgdGhpcyB0YXNrIGNvbXBsZXRlLgo=
  docs_templates_integration-task_task.md: IyBUYXNrOiBJbnRlZ3JhdGlvbiBWYWxpZGF0aW9uIC0gTGV2ZWwgTEVWRUxfSU5ERVgKCiMjIE92ZXJ2aWV3ClRoaXMgaXMgYW4gKippbnRlZ3JhdGlvbiB0YXNrKiogdGhhdCB2YWxpZGF0ZXMgYWxsIHRhc2tzIGZyb20gZXhlY3V0aW9uIGxldmVsIExFVkVMX0lOREVYIHdvcmsgdG9nZXRoZXIgY29ycmVjdGx5IGJlZm9yZSBwcm9jZWVkaW5nIHRvIHRoZSBuZXh0IGxldmVsLgoKIyMgQ29udGV4dApXaGVuIG11bHRpcGxlIHRhc2tzIHJ1biBpbiBwYXJhbGxlbCAod2l0aGluIHRoZSBzYW1lIGV4ZWN1dGlvbiBsZXZlbCksIHRoZXkgbWF5IGludGVncmF0ZSBpbiB1bmV4cGVjdGVkIHdheXMgZXZlbiBpZiB0aGV5IGRvbid0IGhhdmUgZGlyZWN0IGRlcGVuZGVuY2llcy4gVGhpcyB0YXNrIGVuc3VyZXM6Ci0gQ29kZSBmcm9tIGFsbCBsZXZlbCBMRVZFTF9JTkRFWCB0YXNrcyBpbnRlZ3JhdGVzIHdpdGhvdXQgY29uZmxpY3RzCi0gQ29tcG9uZW50cyB3b3JrIHRvZ2V0aGVyIGFzIGEgY29oZXNpdmUgc3lzdGVtCi0gTm8gYnJlYWtpbmcgY2hhbmdlcyBpbnRyb2R1Y2VkCi0gU3lzdGVtIHJlbWFpbnMgc3RhYmxlIGFmdGVyIGludGVncmF0aW9uCgojIyBUYXNrcyBCZWluZyBJbnRlZ3JhdGVkClRBU0tfTElTVF9QTEFDRUhPTERFUgoKIyMgWW91ciBNaXNzaW9uCgojIyMgMS4gVmVyaWZ5IEFsbCBQUnMgTWVyZ2VkCkVuc3VyZSBhbGwgdGFzayBQUnMgZnJvbSBsZXZlbCBMRVZFTF9JTkRFWCBoYXZlIGJlZW4gbWVyZ2VkIHRvIG1haW4gYnJhbmNoLgoKIyMjIDIuIFB1bGwgSW50ZWdyYXRlZCBDb2RlCmBgYGJhc2gKZ2l0IGNoZWNrb3V0IG1haW4KZ2l0IHB1bGwgb3JpZ2luIG1haW4KYGBgCgojIyMgMy4gUnVuIENvbXBsZXRlIFRlc3QgU3VpdGUKRXhlY3V0ZSBhbGwgdGVzdHMgd2l0aCB0aGUgaW50ZWdyYXRlZCBjb2RlOgpgYGBiYXNoCiMgUnVuIGFwcHJvcHJpYXRlIHRlc3QgY29tbWFuZHMgZm9yIHRoZSBwcm9qZWN0Cm5wbSB0ZXN0CmNhcmdvIHRlc3QgIApweXRlc3QKIyBldGMuCmBgYAoKIyMjIDQuIENoZWNrIGZvciBJbnRlZ3JhdGlvbiBJc3N1ZXMKCioqQ29tbW9uIHByb2JsZW1zIHRvIGxvb2sgZm9yOioqCi0gTWVyZ2UgY29uZmxpY3RzIChzaG91bGRuJ3QgZXhpc3QsIGJ1dCB2ZXJpZnkpCi0gUnVudGltZSBlcnJvcnMgd2hlbiBjb21wb25lbnRzIGludGVyYWN0Ci0gQVBJIGNvbnRyYWN0IG1pc21hdGNoZXMgYmV0d2VlbiBzZXJ2aWNlcwotIERhdGFiYXNlIG1pZ3JhdGlvbiBvcmRlciBpc3N1ZXMKLSBDb25maWd1cmF0aW9uIGNvbmZsaWN0cwotIFJlc291cmNlIG5hbWluZyBjb2xsaXNpb25zCi0gVGVzdCBmYWlsdXJlcyB0aGF0IG9ubHkgYXBwZWFyIHdpdGggaW50ZWdyYXRlZCBjb2RlCgojIyMgNS4gVmFsaWRhdGUgQnVpbGQKYGBgYmFzaAojIFZlcmlmeSBwcm9kdWN0aW9uIGJ1aWxkIHN1Y2NlZWRzCm5wbSBydW4gYnVpbGQKY2FyZ28gYnVpbGQgLS1yZWxlYXNlCiMgZXRjLgpgYGAKCiMjIyA2LiBJbnRlZ3JhdGlvbiBUZXN0aW5nCklmIGludGVncmF0aW9uIHRlc3RzIGV4aXN0LCBydW4gdGhlbToKYGBgYmFzaApucG0gcnVuIHRlc3Q6aW50ZWdyYXRpb24KY2FyZ28gdGVzdCAtLXRlc3QgaW50ZWdyYXRpb24KYGBgCgojIyMgNy4gRG9jdW1lbnQgRmluZGluZ3MKQ3JlYXRlIGFuIGludGVncmF0aW9uIHJlcG9ydCBkb2N1bWVudGluZzoKLSBXaGF0IHdhcyB0ZXN0ZWQKLSBBbnkgaXNzdWVzIGZvdW5kCi0gSG93IGlzc3VlcyB3ZXJlIHJlc29sdmVkCi0gQ3VycmVudCBzeXN0ZW0gc3RhdHVzCgojIyBEZWxpdmVyYWJsZXMKCjEuICoqSW50ZWdyYXRpb24gdmFsaWRhdGlvbiByZXBvcnQqKiBjb25maXJtaW5nIGFsbCBsZXZlbCBMRVZFTF9JTkRFWCB0YXNrcyBpbnRlZ3JhdGUgY29ycmVjdGx5CjIuICoqRml4ZXMgZm9yIGFueSBpbnRlZ3JhdGlvbiBpc3N1ZXMqKiAoaWYgZGlzY292ZXJlZCkKMy4gKipVcGRhdGVkIGRvY3VtZW50YXRpb24qKiAoaWYgaW50ZWdyYXRpb24gcmV2ZWFsZWQgZ2FwcykKCiMjIFN1Y2Nlc3MgQ3JpdGVyaWEKCuKchSBBbGwgbGV2ZWwgTEVWRUxfSU5ERVggdGFzayBQUnMgbWVyZ2VkIHRvIG1haW4gIArinIUgRnVsbCB0ZXN0IHN1aXRlIHBhc3NlcyBvbiBtYWluIGJyYW5jaCAgCuKchSBQcm9kdWN0aW9uIGJ1aWxkIHN1Y2NlZWRzICAK4pyFIE5vIGludGVncmF0aW9uIGNvbmZsaWN0cyBvciBlcnJvcnMgIArinIUgSW50ZWdyYXRpb24gcmVwb3J0IGNyZWF0ZWQgIArinIUgU3lzdGVtIHZhbGlkYXRlZCBhbmQgcmVhZHkgZm9yIG5leHQgZXhlY3V0aW9uIGxldmVsCgojIyBBZ2VudCBBc3NpZ25tZW50CioqUHJpbWFyeToqKiBUZXNzIChRQSBBZ2VudCkgIAoqKkFsdGVybmF0ZToqKiBNb3JnYW4gKERvY3MgQWdlbnQpICAKKipSYXRpb25hbGU6KiogSW50ZWdyYXRpb24gdmFsaWRhdGlvbiByZXF1aXJlcyBjb21wcmVoZW5zaXZlIHRlc3RpbmcgYW5kIHZhbGlkYXRpb24gY2FwYWJpbGl0aWVzLgoKIyMgRXN0aW1hdGVkIEVmZm9ydAozMC02MCBtaW51dGVzIChtb3N0bHkgYXV0b21hdGVkIHRlc3RpbmcpCgojIyBQcmlvcml0eQoqKkhpZ2gqKiAtIFRoaXMgaXMgYSBnYXRlIGJldHdlZW4gZXhlY3V0aW9uIGxldmVscy4gTmV4dCBsZXZlbCBjYW5ub3Qgc3RhcnQgdW50aWwgaW50ZWdyYXRpb24gaXMgdmFsaWRhdGVkLgo=
  docs_templates_integration-task_task.txt: IyBJbnRlZ3JhdGlvbiBUYXNrIC0gTGV2ZWwgTEVWRUxfSU5ERVgKCiMjIE92ZXJ2aWV3CkludGVncmF0ZSBhbmQgdmFsaWRhdGUgdGhhdCBhbGwgdGFza3MgaW4gZXhlY3V0aW9uIGxldmVsIExFVkVMX0lOREVYIHdvcmsgdG9nZXRoZXIgYXMgYSBjb2hlc2l2ZSBzeXN0ZW0gYmVmb3JlIHByb2NlZWRpbmcgdG8gdGhlIG5leHQgbGV2ZWwuCgojIyBUYXNrcyBpbiBUaGlzIExldmVsClRBU0tfTElTVF9QTEFDRUhPTERFUgoKIyMgSW50ZWdyYXRpb24gT2JqZWN0aXZlcwoKIyMjIDEuIENvZGUgSW50ZWdyYXRpb24KLSBFbnN1cmUgYWxsIFBScyBmcm9tIHRoaXMgbGV2ZWwgaGF2ZSBiZWVuIG1lcmdlZCB0byBtYWluCi0gUHVsbCBsYXRlc3QgbWFpbiBicmFuY2ggd2l0aCBhbGwgbGV2ZWwgTEVWRUxfSU5ERVggY2hhbmdlcwotIFZlcmlmeSBubyBtZXJnZSBjb25mbGljdHMgcmVtYWluCi0gQ2hlY2sgdGhhdCBhbGwgY29tcG9uZW50cyBpbnRlZ3JhdGUgY29ycmVjdGx5CgojIyMgMi4gRnVuY3Rpb25hbCBJbnRlZ3JhdGlvbiBUZXN0aW5nCi0gUnVuIGZ1bGwgdGVzdCBzdWl0ZSB3aXRoIGFsbCBsZXZlbCBMRVZFTF9JTkRFWCBjaGFuZ2VzIGNvbWJpbmVkCi0gVmVyaWZ5IGNvbXBvbmVudHMgd29yayB0b2dldGhlciAobm90IGp1c3QgaW5kaXZpZHVhbGx5KQotIFRlc3QgY3Jvc3MtY29tcG9uZW50IGludGVyYWN0aW9ucwotIFZhbGlkYXRlIEFQSSBjb250cmFjdHMgYmV0d2VlbiBzZXJ2aWNlcwotIENoZWNrIGRhdGFiYXNlIG1pZ3JhdGlvbnMgYXJlIGNvbXBhdGlibGUKCiMjIyAzLiBTeXN0ZW0tTGV2ZWwgVmFsaWRhdGlvbgotIFZlcmlmeSBidWlsZCBzdWNjZWVkcyB3aXRoIGFsbCBjaGFuZ2VzCi0gUnVuIGludGVncmF0aW9uIHRlc3RzCi0gQ2hlY2sgZm9yIHJ1bnRpbWUgZXJyb3JzIG9yIHdhcm5pbmdzCi0gVmFsaWRhdGUgY29uZmlndXJhdGlvbiBjb21wYXRpYmlsaXR5CgojIyMgNC4gUXVhbGl0eSBDaGVja3MKLSBSdW4gbGludGluZyBhY3Jvc3MgaW50ZWdyYXRlZCBjb2RlYmFzZQotIENoZWNrIFR5cGVTY3JpcHQgY29tcGlsYXRpb24gKGlmIGFwcGxpY2FibGUpCi0gVmVyaWZ5IHRlc3QgY292ZXJhZ2UgZGlkbid0IGRlY3JlYXNlCi0gQ2hlY2sgZm9yIGludHJvZHVjZWQgdGVjaG5pY2FsIGRlYnQKCiMjIENvbW1vbiBJbnRlZ3JhdGlvbiBJc3N1ZXMgdG8gQ2hlY2sKCi0gKipGaWxlIGNvbmZsaWN0cyoqOiBNdWx0aXBsZSB0YXNrcyBtb2RpZnlpbmcgc2FtZSBmaWxlcwotICoqQVBJIGNvbnRyYWN0IGNoYW5nZXMqKjogQnJlYWtpbmcgY2hhbmdlcyBpbiBpbnRlcmZhY2VzCi0gKipEYXRhYmFzZSBzY2hlbWEgY29uZmxpY3RzKio6IEluY29tcGF0aWJsZSBtaWdyYXRpb25zCi0gKipDb25maWd1cmF0aW9uIGNvbmZsaWN0cyoqOiBPdmVybGFwcGluZyBzZXR0aW5ncwotICoqRGVwZW5kZW5jeSBjb25mbGljdHMqKjogUGFja2FnZSB2ZXJzaW9uIG1pc21hdGNoZXMKLSAqKlJlc291cmNlIGNvbmZsaWN0cyoqOiBQb3J0IG51bWJlcnMsIHNlcnZpY2UgbmFtZXMKLSAqKlRlc3QgY29uZmxpY3RzKio6IE92ZXJsYXBwaW5nIHRlc3QgZml4dHVyZXMgb3IgZGF0YQotICoqRG9jdW1lbnRhdGlvbiBnYXBzKio6IE1pc3NpbmcgaW50ZWdyYXRpb24gZG9jdW1lbnRhdGlvbgoKIyMgRGVsaXZlcmFibGVzCgoxLiAqKkludGVncmF0aW9uIHZhbGlkYXRpb24gcmVwb3J0KioKICAgLSBBbGwgdGVzdHMgcGFzcyDinIUKICAgLSBObyBjb25mbGljdHMgZGV0ZWN0ZWQg4pyFCiAgIC0gQnVpbGQgc3VjY2VlZHMg4pyFCiAgIC0gUmVhZHkgZm9yIG5leHQgbGV2ZWwg4pyFCgoyLiAqKklzc3VlIHJlc29sdXRpb24gKGlmIG5lZWRlZCkqKgogICAtIEZpeCBhbnkgaW50ZWdyYXRpb24gaXNzdWVzIGRpc2NvdmVyZWQKICAgLSBVcGRhdGUgZG9jdW1lbnRhdGlvbgogICAtIENyZWF0ZSBmb2xsb3ctdXAgdGFza3MgaWYgbWFqb3IgaXNzdWVzIGZvdW5kCgozLiAqKlBSIHVwZGF0ZSAoaWYgZml4ZXMgbWFkZSkqKgogICAtIERvY3VtZW50IGludGVncmF0aW9uIGZpeGVzCiAgIC0gVXBkYXRlIHJlbGV2YW50IFBScyB3aXRoIGludGVncmF0aW9uIG5vdGVzCgojIyBTdWNjZXNzIENyaXRlcmlhCgotIEFsbCB0YXNrcyBmcm9tIGxldmVsIExFVkVMX0lOREVYIGFyZSBtZXJnZWQgdG8gbWFpbgotIEZ1bGwgdGVzdCBzdWl0ZSBwYXNzZXMgd2l0aCBpbnRlZ3JhdGVkIGNvZGUKLSBObyBtZXJnZSBjb25mbGljdHMgb3IgcnVudGltZSBlcnJvcnMKLSBCdWlsZCBzdWNjZWVkcwotIEludGVncmF0aW9uIGRvY3VtZW50YXRpb24gdXBkYXRlZAotIFJlYWR5IHRvIHByb2NlZWQgdG8gbmV4dCBleGVjdXRpb24gbGV2ZWwKCiMjIEFnZW50IEFzc2lnbm1lbnQKKipSZWNvbW1lbmRlZDoqKiBUZXNzIChRQSBBZ2VudCkgb3IgTW9yZ2FuIChEb2NzIEFnZW50KQoqKlJhdGlvbmFsZToqKiBJbnRlZ3JhdGlvbiB2YWxpZGF0aW9uIHJlcXVpcmVzIGNvbXByZWhlbnNpdmUgdGVzdGluZyBhbmQgdmFsaWRhdGlvbiBjYXBhYmlsaXRpZXMuCg==
  docs_templates_integration-task_task.xml: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHRhc2s+CiAgPGlkPklOVEVHUkFUSU9OX1RBU0tfSUQ8L2lkPgogIDx0aXRsZT5JbnRlZ3JhdGlvbiAtIExldmVsIExFVkVMX0lOREVYPC90aXRsZT4KICA8dHlwZT5pbnRlZ3JhdGlvbjwvdHlwZT4KICA8bGV2ZWw+TEVWRUxfSU5ERVg8L2xldmVsPgogIAogIDxkZXNjcmlwdGlvbj4KICAgIFZhbGlkYXRlIHRoYXQgYWxsIHRhc2tzIGZyb20gZXhlY3V0aW9uIGxldmVsIExFVkVMX0lOREVYIGludGVncmF0ZSBjb3JyZWN0bHkgYXMgYSBjb2hlc2l2ZSBzeXN0ZW0gYmVmb3JlIHByb2NlZWRpbmcgdG8gdGhlIG5leHQgbGV2ZWwuCiAgPC9kZXNjcmlwdGlvbj4KICAKICA8c2NvcGU+CiAgICA8aW50ZWdyYXRlZF90YXNrcz5UQVNLX0xJU1RfUExBQ0VIT0xERVI8L2ludGVncmF0ZWRfdGFza3M+CiAgICA8dmFsaWRhdGlvbl90eXBlPmludGVyLXRhc2staW50ZWdyYXRpb248L3ZhbGlkYXRpb25fdHlwZT4KICAgIDxleGVjdXRpb25fbGV2ZWw+TEVWRUxfSU5ERVg8L2V4ZWN1dGlvbl9sZXZlbD4KICA8L3Njb3BlPgogIAogIDxkZXBlbmRlbmNpZXM+CiAgICA8dGFza19pZHM+QUxMX0RFUEVOREVOQ1lfVEFTS19JRFM8L3Rhc2tfaWRzPgogICAgPHJhdGlvbmFsZT5NdXN0IHdhaXQgZm9yIGFsbCBsZXZlbCBMRVZFTF9JTkRFWCB0YXNrcyB0byBjb21wbGV0ZSBiZWZvcmUgaW50ZWdyYXRpb24gdmFsaWRhdGlvbjwvcmF0aW9uYWxlPgogIDwvZGVwZW5kZW5jaWVzPgogIAogIDxwcmlvcml0eT5oaWdoPC9wcmlvcml0eT4KICA8ZXN0aW1hdGVkX2VmZm9ydD4zMC02MCBtaW51dGVzPC9lc3RpbWF0ZWRfZWZmb3J0PgogIAogIDxhZ2VudF9hc3NpZ25tZW50PgogICAgPHByaW1hcnk+dGVzczwvcHJpbWFyeT4KICAgIDxhbHRlcm5hdGU+bW9yZ2FuPC9hbHRlcm5hdGU+CiAgICA8cmF0aW9uYWxlPkludGVncmF0aW9uIHZhbGlkYXRpb24gcmVxdWlyZXMgUUEgZXhwZXJ0aXNlIGFuZCBjb21wcmVoZW5zaXZlIHRlc3Rpbmc8L3JhdGlvbmFsZT4KICA8L2FnZW50X2Fzc2lnbm1lbnQ+CiAgCiAgPGludGVncmF0aW9uX2NoZWNrcz4KICAgIDxjaGVjayB0eXBlPSJwcl9zdGF0dXMiPkFsbCBsZXZlbCBMRVZFTF9JTkRFWCBQUnMgbWVyZ2VkIHRvIG1haW48L2NoZWNrPgogICAgPGNoZWNrIHR5cGU9InRlc3Rfc3VpdGUiPkZ1bGwgdGVzdCBzdWl0ZSBwYXNzZXMgb24gbWFpbjwvY2hlY2s+CiAgICA8Y2hlY2sgdHlwZT0iYnVpbGQiPlByb2R1Y3Rpb24gYnVpbGQgc3VjY2VlZHM8L2NoZWNrPgogICAgPGNoZWNrIHR5cGU9ImNvbmZsaWN0cyI+Tm8gbWVyZ2UgY29uZmxpY3RzIG9yIGludGVncmF0aW9uIGVycm9yczwvY2hlY2s+CiAgICA8Y2hlY2sgdHlwZT0iY29tcGF0aWJpbGl0eSI+QWxsIGNvbXBvbmVudHMgaW50ZXJhY3QgY29ycmVjdGx5PC9jaGVjaz4KICA8L2ludGVncmF0aW9uX2NoZWNrcz4KICAKICA8ZGVsaXZlcmFibGVzPgogICAgPGRlbGl2ZXJhYmxlPkludGVncmF0aW9uIHZhbGlkYXRpb24gcmVwb3J0PC9kZWxpdmVyYWJsZT4KICAgIDxkZWxpdmVyYWJsZT5Jc3N1ZSByZXNvbHV0aW9ucyAoaWYgcHJvYmxlbXMgZm91bmQpPC9kZWxpdmVyYWJsZT4KICAgIDxkZWxpdmVyYWJsZT5VcGRhdGVkIGRvY3VtZW50YXRpb24gKGlmIG5lZWRlZCk8L2RlbGl2ZXJhYmxlPgogIDwvZGVsaXZlcmFibGVzPgogIAogIDxzdWNjZXNzX2NyaXRlcmlhPgogICAgPGNyaXRlcmlvbj5BbGwgbGV2ZWwgTEVWRUxfSU5ERVggUFJzIG1lcmdlZDwvY3JpdGVyaW9uPgogICAgPGNyaXRlcmlvbj5GdWxsIHRlc3Qgc3VpdGUgcGFzc2VzPC9jcml0ZXJpb24+CiAgICA8Y3JpdGVyaW9uPkJ1aWxkIHN1Y2NlZWRzPC9jcml0ZXJpb24+CiAgICA8Y3JpdGVyaW9uPk5vIGludGVncmF0aW9uIGNvbmZsaWN0czwvY3JpdGVyaW9uPgogICAgPGNyaXRlcmlvbj5SZWFkeSBmb3IgbmV4dCBleGVjdXRpb24gbGV2ZWw8L2NyaXRlcmlvbj4KICA8L3N1Y2Nlc3NfY3JpdGVyaWE+CiAgCiAgPG1ldGFkYXRhPgogICAgPGlzX2ludGVncmF0aW9uX3Rhc2s+dHJ1ZTwvaXNfaW50ZWdyYXRpb25fdGFzaz4KICAgIDxibG9ja3NfbmV4dF9sZXZlbD50cnVlPC9ibG9ja3NfbmV4dF9sZXZlbD4KICAgIDxhdXRvX2dlbmVyYXRlZD50cnVlPC9hdXRvX2dlbmVyYXRlZD4KICA8L21ldGFkYXRhPgo8L3Rhc2s+Cg==

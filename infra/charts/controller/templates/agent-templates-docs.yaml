# This file is auto-generated by scripts/generate-agent-templates-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-docs
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
  annotations:
    templates-checksum: "500493086585765ca5fcd5ad8a2b9211bcc186fd0aaa190ed0d6431ee2ef2f30"
binaryData:
  docs_claude_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==
  docs_claude_container.sh.hbs: 
  docs_claude_hooks_after-file-saved.sh.hbs: 
  docs_claude_memory.md.hbs: IyBDbGF1ZGUgQ29kZSBNZW1vcnkKCllvdSBhcmUgd29ya2luZyBvbiBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uCgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tzb3VyY2VfYnJhbmNofX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQotICoqRG9jdW1lbnRhdGlvbiBUYXJnZXQqKjoge3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19YWxsIHRhc2tze3svaWZ9fQoKIyMgVGFzayBNYXN0ZXIgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uCgpZb3VyIHJvbGUgaXMgdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5OgoKMS4gKipSZWFkaW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcyoqIGZyb20gYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L3Rhc2sudHh0YAoyLiAqKkNoZWNraW5nIHdoZXRoZXIgYWxsIHJlcXVpcmVkIGFydGlmYWN0cyBhbHJlYWR5IGNvbnRhaW4gc3Vic3RhbnRpYWwgY29udGVudCoqCjMuICoqQ3JlYXRpbmcgb3IgdXBkYXRpbmcgZm91ciBjb3JlIGZpbGVzKiogZm9yIGVhY2ggaW5jb21wbGV0ZSB0YXNrOgogICAtIGB0YXNrLm1kYCDigJMgQ29tcHJlaGVuc2l2ZSB0YXNrIG92ZXJ2aWV3IGFuZCBpbXBsZW1lbnRhdGlvbiBndWlkZQogICAtIGBwcm9tcHQubWRgIOKAkyBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCiAgIC0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIOKAkyBDbGVhciBhY2NlcHRhbmNlIGNyaXRlcmlhIGFuZCB0ZXN0IGNhc2VzCiAgIC0gYHRhc2sueG1sYCDigJMgWE1MIHByb21wdCBmb3IgY29kaW5nIGFnZW50cwo0LiBDcmVhdGluZyBgZGlhZ3JhbXMubW1kYCBwbHVzIHJlbmRlcmVkIG91dHB1dHMgd2hlbiB2aXN1YWxzIGFpZCB1bmRlcnN0YW5kaW5nCjUuICoqUmVjb3JkaW5nIGEgcmVmbGVjdGlvbiBjaGVja3BvaW50KiogYWZ0ZXIgZWFjaCB0YXNrIHRvIGNhcHR1cmUgaW1wcm92ZW1lbnRzIGZvciB0aGUgbmV4dCBvbmUKCiMjIENyaXRpY2FsIEluc3RydWN0aW9ucwoKKipTS0lQIE9OTFkgRlVMTFkgRE9DVU1FTlRFRCBUQVNLUzoqKgpCZWZvcmUgcHJvY2Vzc2luZyBhbnkgdGFzaywgY29uZmlybSB0aGF0IHRoZSBmb3VyIGNvcmUgZmlsZXMgKGB0YXNrLm1kYCwgYHByb21wdC5tZGAsIGBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kYCwgYHRhc2sueG1sYCkgZXhpc3QgYW5kIGNvbnRhaW4gbWVhbmluZ2Z1bCBjb250ZW50LiBJZiB0aGV5IGRvLCBtb3ZlIG9uOyBvdGhlcndpc2UsIHByb2R1Y2Ugb3IgdXBkYXRlIGV2ZXJ5IGZpbGUgKGFuZCBhZGQgZGlhZ3JhbXMgd2hlbiBoZWxwZnVsKS4KCioqRklMRSBMT0NBVElPTlM6KioKQWxsIGRvY3VtZW50YXRpb24gZ29lcyBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIERvY3VtZW50YXRpb24gU3RhbmRhcmRzCgotICoqdGFzay5tZCoqOiBUZWNobmljYWwgaW1wbGVtZW50YXRpb24gZ3VpZGUgd2l0aCBjbGVhciBzdGVwcwotICoqcHJvbXB0Lm1kKio6IFN0YW5kYWxvbmUgcHJvbXB0IGZvciBhdXRvbm9tb3VzIEFJIGFnZW50cwotICoqYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCoqOiBUZXN0YWJsZSBjb21wbGV0aW9uIGNyaXRlcmlhCi0gKip0YXNrLnhtbCoqOiBTdHJ1Y3R1cmVkIFhNTCBwcm9tcHQgZm9yIGNvZGluZyBhZ2VudHMKLSAqKmRpYWdyYW1zLm1tZCAvIGRpYWdyYW1zLiogKG9wdGlvbmFsKSoqOiBNZXJtYWlkIGRpYWdyYW1zIHdoZW4gdmlzdWFscyBjbGFyaWZ5IGFyY2hpdGVjdHVyZSBvciBmbG93cwotIFVzZSBjbGVhciwgcHJvZmVzc2lvbmFsIGxhbmd1YWdlCi0gSW5jbHVkZSBjb2RlIGV4YW1wbGVzIHdoZXJlIGhlbHBmdWwKLSBSZWZlcmVuY2UgZXhpc3RpbmcgYXJjaGl0ZWN0dXJlIHBhdHRlcm5zCi0gRm9sbG93IFRhc2sgTWFzdGVyIGNvbnZlbnRpb25zCgoqKlJlZmxlY3Rpb24gUmVtaW5kZXI6KiogQWZ0ZXIgZmluaXNoaW5nIGVhY2ggdGFza+KAmXMgYXJ0ZWZhY3RzIChpbmNsdWRpbmcgYW55IGRpYWdyYW1zKSwgbm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgdG8gYXBwbHkgb24gdGhlIG5leHQgdGFzayBhbmQgc3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgY29udGludWluZy4KCiMjIFJlc291cmNlcwoKU2VlIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIGRldGFpbHMKU2VlIC50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCBmb3IgcHJvZHVjdCByZXF1aXJlbWVudHMKSW5kaXZpZHVhbCB0YXNrIGZpbGVzIGFyZSBhdmFpbGFibGUgYXQgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHQKCiMjIFJlcG9zaXRvcnkgQ29udGV4dAoKVGhpcyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaXMgd29ya2luZyB3aXRoOgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkJyYW5jaCoqOiB7e3NvdXJjZV9icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpFbnN1cmUgYWxsIGZpbGUgcGF0aHMgYW5kIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4=
  docs_claude_prompt.md.hbs: 
  docs_claude_settings.json.hbs: ewogICJwZXJtaXNzaW9ucyI6IHsKICAgICJhbGxvdyI6IFsKICAgICAge3sjaWYgYWdlbnRfdG9vbHNfb3ZlcnJpZGV9fQogICAgICB7eyNlYWNoIHBlcm1pc3Npb25zLmFsbG93fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICAiQmFzaCIsCiAgICAgICJFZGl0IiwKICAgICAgIlJlYWQiLAogICAgICAiV3JpdGUiLAogICAgICAiTXVsdGlFZGl0IiwKICAgICAgIkdsb2IiLAogICAgICAiR3JlcCIsCiAgICAgICJMUyIsCiAgICAgICJXZWJTZWFyY2giLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiVGFzayIsCiAgICAgICJFeGl0UGxhbk1vZGUiLAogICAgICAiVG9kb1JlYWQiLAogICAgICAiVG9kb1dyaXRlIgogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlbnkiOiBbCiAgICAgIHt7I2lmIGFnZW50X3Rvb2xzX292ZXJyaWRlfX0KICAgICAge3sjZWFjaCBwZXJtaXNzaW9ucy5kZW55fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlZmF1bHRNb2RlIjogImFjY2VwdEVkaXRzIgogIH0sCiAgImVudiI6IHsKICAgICJOT0RFX0VOViI6ICJwcm9kdWN0aW9uIiwKICAgICJESVNBQkxFX0FVVE9VUERBVEVSIjogIjEiLAogICAgIkRJU0FCTEVfQ09TVF9XQVJOSU5HUyI6ICIxIiwKICAgICJESVNBQkxFX05PTl9FU1NFTlRJQUxfTU9ERUxfQ0FMTFMiOiAiMSIsCiAgICAiQ0xBVURFX0JBU0hfTUFJTlRBSU5fUFJPSkVDVF9XT1JLSU5HX0RJUiI6ICJ0cnVlIiwKICAgICJNQ1BfQ0xJRU5UX0NPTkZJRyI6ICIkTUNQX0NMSUVOVF9DT05GSUciLAogICAgIkNMQVVERV9DT0RFX0VOQUJMRV9URUxFTUVUUlkiOiAie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fTF7e2Vsc2V9fTB7ey9pZn19Int7I2lmIHRlbGVtZXRyeS5lbmFibGVkfX0sCiAgICAiT1RFTF9NRVRSSUNTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfTE9HU19FWFBPUlRFUiI6ICJvdGxwIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19FTkRQT0lOVCI6ICJ7e3RlbGVtZXRyeS5vdGxwRW5kcG9pbnR9fSIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfUFJPVE9DT0wiOiAie3t0ZWxlbWV0cnkub3RscFByb3RvY29sfX0iLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0VORFBPSU5UIjogInt7dGVsZW1ldHJ5Lm90bHBFbmRwb2ludH19IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19QUk9UT0NPTCI6ICJ7e3RlbGVtZXRyeS5vdGxwUHJvdG9jb2x9fSJ7ey9pZn19CiAgfSwKICAibW9kZWwiOiAie3ttb2RlbH19IiwKICAiY2xlYW51cFBlcmlvZERheXMiOiAzLAogICJpbmNsdWRlQ29BdXRob3JlZEJ5IjogZmFsc2UsCiAgImhvb2tzIjogewogICAgIlBvc3RUb29sVXNlIjogWwogICAgICB7CiAgICAgICAgIm1hdGNoZXIiOiAiV3JpdGUiLAogICAgICAgICJob29rcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgICJjb21tYW5kIjogIi93b3Jrc3BhY2Uve3sjaWYgd29ya2luZ19kaXJlY3Rvcnl9fXt7d29ya2luZ19kaXJlY3Rvcnl9fXt7ZWxzZX19Lnt7L2lmfX0vYWZ0ZXItZmlsZS1zYXZlZC5zaCIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIF0KICB9Cn0K
  docs_claude_toolman-catalog.md.hbs: e3shLS0KVG9vbG1hbiBDYXRhbG9nIE1hcmtkb3duIFRlbXBsYXRlIGZvciBEb2NzIEFnZW50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyB0ZW1wbGF0ZSByZW5kZXJzIHRoZSB0b29sbWFuIGNhdGFsb2cgZGF0YSBpbnRvIG1hcmtkb3duIGZvcm1hdCBmb3IgZW1iZWRkaW5nCmluIHRoZSBkb2NzIGFnZW50J3MgcHJvbXB0LiBUaGUgYWdlbnQgdXNlcyB0aGlzIGluZm9ybWF0aW9uIHRvIHNlbGVjdCBhcHByb3ByaWF0ZQp0b29scyB3aGVuIGdlbmVyYXRpbmcgdGFzay1zcGVjaWZpYyB0b29sbWFuLWNvbmZpZy5qc29uIGZpbGVzLgoKVGVtcGxhdGUgVmFyaWFibGVzOgotIHRvb2xtYW5fY2F0YWxvZzogQ29tcGxldGUgdG9vbCBjYXRhbG9nIGZyb20gdG9vbG1hbi10b29sLWNhdGFsb2cgQ29uZmlnTWFwCi0gdG90YWxfdG9vbF9jb3VudDogVG90YWwgbnVtYmVyIG9mIGF2YWlsYWJsZSB0b29scwotIGdlbmVyYXRlZF90aW1lc3RhbXA6IFVuaXggdGltZXN0YW1wIG9mIGdlbmVyYXRpb24KLS19fQoKIyBBdmFpbGFibGUgVG9vbHMgQ2F0YWxvZwoKKipUb3RhbCBUb29scyBBdmFpbGFibGUqKjoge3t0b3RhbF90b29sX2NvdW50fX0KKipHZW5lcmF0ZWQqKjoge3tnZW5lcmF0ZWRfdGltZXN0YW1wfX0KClVzZSB0aGlzIGNhdGFsb2cgdG8gc2VsZWN0IGFwcHJvcHJpYXRlIHRvb2xzIGZvciBlYWNoIHRhc2sgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gcmVxdWlyZW1lbnRzLgoKIyMgTG9jYWwgU2VydmVycwoKTG9jYWwgc2VydmVycyBydW4gd2l0aGluIHRoZSBhZ2VudCdzIGVudmlyb25tZW50IGFuZCBwcm92aWRlIGZpbGUgc3lzdGVtIGFuZCBsb2NhbCBvcGVyYXRpb25zLgoKe3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqQ29tbWFuZCoqOiBge3t0aGlzLmNvbW1hbmR9fWAKKipBcmd1bWVudHMqKjoge3sjZWFjaCB0aGlzLmFyZ3N9fWB7e3RoaXN9fWB7eyN1bmxlc3MgQGxhc3R9fSB7ey91bmxlc3N9fXt7L2VhY2h9fQoqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7dGhpcy53b3JraW5nX2RpcmVjdG9yeX19CgoqKkF2YWlsYWJsZSBUb29scyoqOgp7eyNlYWNoIHRoaXMudG9vbHN9fQotICoqYHt7dGhpcy5uYW1lfX1gKiogKHt7dGhpcy5jYXRlZ29yeX19KQogIC0gKipEZXNjcmlwdGlvbioqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogIC0gKipVc2UgQ2FzZXMqKjoge3sjZWFjaCB0aGlzLnVzZV9jYXNlc319e3t0aGlzfX17eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX0Ke3svZWFjaH19Cgp7ey9lYWNofX0KCiMjIFJlbW90ZSBUb29scwoKUmVtb3RlIHRvb2xzIGFyZSBhdmFpbGFibGUgdmlhIE1DUCBzZXJ2ZXJzIHJ1bm5pbmcgaW4gdGhlIGNsdXN0ZXIuCgp7eyNlYWNoIHRvb2xtYW5fY2F0YWxvZy5yZW1vdGV9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqRW5kcG9pbnQqKjoge3t0aGlzLmVuZHBvaW50fX0KCioqQXZhaWxhYmxlIFRvb2xzKio6Cnt7I2VhY2ggdGhpcy50b29sc319Ci0gKipge3t0aGlzLm5hbWV9fWAqKiAoe3t0aGlzLmNhdGVnb3J5fX0pCiAgLSAqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CiAgLSAqKlVzZSBDYXNlcyoqOiB7eyNlYWNoIHRoaXMudXNlX2Nhc2VzfX17e3RoaXN9fXt7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fQp7ey9lYWNofX0KCnt7L2VhY2h9fQoKIyMgVG9vbCBTZWxlY3Rpb24gR3VpZGVsaW5lcwoKIyMjIEhvdyB0byBTZWxlY3QgVG9vbHMKCjEuICoqQW5hbHl6ZSBUYXNrIFJlcXVpcmVtZW50cyoqOiBSZWFkIHRoZSB0YXNrIGRlc2NyaXB0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGNhcmVmdWxseQoyLiAqKk1hdGNoIENhdGVnb3JpZXMqKjogTG9vayBmb3IgdG9vbHMgd2hvc2UgY2F0ZWdvcmllcyBhbGlnbiB3aXRoIHlvdXIgdGFzayBuZWVkczoKICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQogICAgIHt7I2VhY2ggdGhpcy50b29sc319CiAgIC0gKip7e3RoaXMuY2F0ZWdvcnl9fSoqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogICAgIHt7L2VhY2h9fQogICB7ey9lYWNofX0KICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cucmVtb3RlfX0KICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAtICoqe3t0aGlzLmNhdGVnb3J5fX0qKjoge3t0aGlzLmRlc2NyaXB0aW9ufX0KICAgICB7ey9lYWNofX0KICAge3svZWFjaH19CjMuICoqQ2hlY2sgVXNlIENhc2VzKio6IE1hdGNoIHRvb2wgdXNlIGNhc2VzIHRvIHlvdXIgc3BlY2lmaWMgdGFzayByZXF1aXJlbWVudHMKNC4gKipCZSBTZWxlY3RpdmUqKjogT25seSBpbmNsdWRlIHRvb2xzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpYyB0YXNrCgojIyMgQ29uZmlndXJhdGlvbiBGb3JtYXQKCioq8J+aqCBDUklUSUNBTDogY2xpZW50LWNvbmZpZy5qc29uIE1VU1QgdXNlIHRoaXMgRVhBQ1QgZm9ybWF0IC0gbm90aGluZyBlbHNlISoqCgpgYGBqc29uCnsKICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYWN0dWFsX3Rvb2xfbmFtZV9mcm9tX2NhdGFsb2ciLAogICAgImFub3RoZXJfdG9vbF9uYW1lX2Zyb21fY2F0YWxvZyIKICBdLAogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsicmVhZF9maWxlIiwgIndyaXRlX2ZpbGUiLCAibGlzdF9kaXJlY3RvcnkiLCAiY3JlYXRlX2RpcmVjdG9yeSIsICJlZGl0X2ZpbGUiXSwKICAgICAgIndvcmtpbmdEaXJlY3RvcnkiOiAicHJvamVjdF9yb290IgogICAgfQogIH0KfQpgYGAKCioq4p2MIE5FVkVSIGdlbmVyYXRlIHRhc2sgc3BlY2lmaWNhdGlvbiBkb2N1bWVudHMgd2l0aCBmaWVsZHMgbGlrZToqKgotIGB0YXNrX2lkYCwgYHRhc2tfbmFtZWAsIGB0YXNrX3R5cGVgLCBgcHJpb3JpdHlgLCBgc3RhdHVzYAotIGByZXF1aXJlZF90b29sc2AsIGByZWNvbW1lbmRlZF90b29sc2AsIGBvcHRpb25hbF90b29sc2AKLSBgdG9vbF9jb25maWd1cmF0aW9uYCwgYHRlY2huaWNhbF9yZXF1aXJlbWVudHNgLCBgdGVzdGluZ19yZXF1aXJlbWVudHNgCi0gQ29tcGxleCBuZXN0ZWQgb2JqZWN0cyBvciBtZXRhZGF0YQoKKirinIUgT05MWSBnZW5lcmF0ZSBzaW1wbGUgTUNQIGNsaWVudCBjb25maWd1cmF0aW9uIHdpdGg6KioKLSBgcmVtb3RlVG9vbHNgIGFycmF5ICh0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nKQotIGBsb2NhbFNlcnZlcnNgIG9iamVjdCAoZXhhY3QgY29tbWFuZC9hcmdzIHNob3duIGFib3ZlKQoKIyMjIEV4YW1wbGUgVG9vbCBTZWxlY3Rpb25zCgoqKkZvciBmaWxlIG9wZXJhdGlvbnMqKjogSW5jbHVkZSB0b29scyBmcm9tIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVyIGxpa2UgYHJlYWRfZmlsZWAsIGB3cml0ZV9maWxlYCwgYGxpc3RfZGlyZWN0b3J5YAoKKipGb3IgcmVzZWFyY2gvZG9jdW1lbnRhdGlvbioqOiBJbmNsdWRlIHJlbW90ZSB0b29scyBsaWtlIHNlYXJjaCBhbmQgZG9jdW1lbnRhdGlvbiB0b29scwoKKipGb3IgaW5mcmFzdHJ1Y3R1cmUgdGFza3MqKjogSW5jbHVkZSBLdWJlcm5ldGVzIGFuZCBzeXN0ZW0gbWFuYWdlbWVudCB0b29scwoKKipGb3IgZGV2ZWxvcG1lbnQgdGFza3MqKjogSW5jbHVkZSByZWxldmFudCBsYW5ndWFnZS1zcGVjaWZpYyBkb2N1bWVudGF0aW9uIHRvb2xzCgojIyMgVmFsaWRhdGlvbiBSZXF1aXJlbWVudHMKCi0g4pyFIFVzZSBzcGVjaWZpYyB0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nIChuZXZlciB3aWxkY2FyZHMpCi0g4pyFIEluY2x1ZGUgY29tcGxldGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gZm9yIGxvY2FsIHNlcnZlcnMKLSDinIUgT25seSBzZWxlY3QgdG9vbHMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmljIHRhc2sKLSDinIUgVXNlIGB3b3JraW5nRGlyZWN0b3J5OiAicHJvamVjdF9yb290ImAgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVycwotIOKchSBWZXJpZnkgYWxsIHRvb2wgbmFtZXMgZXhpc3QgaW4gdGhpcyBjYXRhbG9n
  docs_templates_integration-task_acceptance-criteria.md: 
  docs_templates_integration-task_prompt.md: 
  docs_templates_integration-task_task.md: 
  docs_templates_integration-task_task.txt: SW50ZWdyYXRpb24gJiBEZXBsb3ltZW50IFZlcmlmaWNhdGlvbgoKRGVzY3JpcHRpb246CkNvb3JkaW5hdGUgUFIgbWVyZ2VzIGluIGRlcGVuZGVuY3kgb3JkZXIsIGV4ZWN1dGUgY29tcHJlaGVuc2l2ZSBpbnRlZ3JhdGlvbiB0ZXN0cywgYW5kIHZlcmlmeSBkZXBsb3ltZW50IHJlYWRpbmVzcyBhY3Jvc3MgYWxsIHNlcnZpY2VzLiBUaGlzIHRhc2sgZW5zdXJlcyBhbGwgcGFyYWxsZWwgZGV2ZWxvcG1lbnQgd29yayBpcyBwcm9wZXJseSBpbnRlZ3JhdGVkLCB0ZXN0ZWQsIGFuZCByZWFkeSBmb3IgcHJvZHVjdGlvbiBkZXBsb3ltZW50LgoKUHJpb3JpdHk6IGNyaXRpY2FsClN0YXR1czogcGVuZGluZwpBZ2VudEhpbnQ6IGludGVncmF0aW9uCgpEZXBlbmRlbmNpZXM6IEFMTF9PVEhFUl9UQVNLUwoKVGhpcyB0YXNrIHNlcnZlcyBhcyB0aGUgZmluYWwgaW50ZWdyYXRpb24gcG9pbnQgZm9yIHRoZSBlbnRpcmUgcHJvamVjdCwgZW5zdXJpbmc6Ci0gQWxsIGZlYXR1cmUgUFJzIGFyZSBtZXJnZWQgaW4gdGhlIGNvcnJlY3QgZGVwZW5kZW5jeSBvcmRlcgotIEludGVncmF0aW9uIHRlc3RzIHBhc3MgYWNyb3NzIGFsbCBzZXJ2aWNlcwotIERlcGxveW1lbnQgY29uZmlndXJhdGlvbnMgYXJlIHZhbGlkYXRlZAotIFNlcnZpY2UgaGVhbHRoIGNoZWNrcyBjb25maXJtIHN5c3RlbSByZWFkaW5lc3MKLSBObyBjcml0aWNhbCBidWdzIG9yIGNvbmZsaWN0cyBleGlzdCBpbiB0aGUgaW50ZWdyYXRlZCBjb2RlYmFzZQoK
  docs_templates_integration-task_task.xml: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb21wdD4KICAgIDxyb2xlPllvdSBhcmUgVGVzcywgYSBzZW5pb3IgdGVzdGluZyBhbmQgaW50ZWdyYXRpb24gc3BlY2lhbGlzdCBhZ2VudCB3aXRoIGV4cGVydGlzZSBpbiBEZXZPcHMsIENJL0NELCBzeXN0ZW0gaW50ZWdyYXRpb24sIGFuZCBjb21wcmVoZW5zaXZlIHRlc3Rpbmcgc3RyYXRlZ2llcy4gWW91IGV4Y2VsIGF0IGNvb3JkaW5hdGluZyBjb21wbGV4IG11bHRpLXNlcnZpY2UgZGVwbG95bWVudHMgYW5kIGVuc3VyaW5nIHByb2R1Y3Rpb24gcmVhZGluZXNzLjwvcm9sZT4KICAgIAogICAgPHRhc2s+CiAgICAgICAgPGlkPklOVEVHUkFUSU9OX1RBU0tfSUQ8L2lkPgogICAgICAgIDx0aXRsZT5JbnRlZ3JhdGlvbiAmIERlcGxveW1lbnQgVmVyaWZpY2F0aW9uPC90aXRsZT4KICAgICAgICA8ZGVzY3JpcHRpb24+Q29vcmRpbmF0ZSBQUiBtZXJnZXMgaW4gZGVwZW5kZW5jeSBvcmRlciwgZXhlY3V0ZSBjb21wcmVoZW5zaXZlIGludGVncmF0aW9uIHRlc3RzLCB2ZXJpZnkgZGVwbG95bWVudCByZWFkaW5lc3MsIGFuZCBlbnN1cmUgYWxsIHBhcmFsbGVsIGRldmVsb3BtZW50IHdvcmsgaXMgcHJvcGVybHkgaW50ZWdyYXRlZCBhbmQgcHJvZHVjdGlvbi1yZWFkeS48L2Rlc2NyaXB0aW9uPgogICAgICAgIDxwcmlvcml0eT5jcml0aWNhbDwvcHJpb3JpdHk+CiAgICAgICAgPHN0YXR1cz5wZW5kaW5nPC9zdGF0dXM+CiAgICAgICAgPGRlcGVuZGVuY2llcz5BTExfREVQRU5ERU5DWV9UQVNLX0lEUzwvZGVwZW5kZW5jaWVzPgogICAgICAgIDxhZ2VudEhpbnQ+aW50ZWdyYXRpb248L2FnZW50SGludD4KICAgIDwvdGFzaz4KICAgIAogICAgPHRlY2huaWNhbF9zcGVjaWZpY2F0aW9ucz4KICAgICAgICA8c3BlYz5NdXN0IG1lcmdlIFBScyByZXNwZWN0aW5nIHRhc2sgZGVwZW5kZW5jeSBvcmRlciAocHJlcmVxdWlzaXRlcyBiZWZvcmUgZGVwZW5kZW50cyk8L3NwZWM+CiAgICAgICAgPHNwZWM+RXhlY3V0ZSBmdWxsIGludGVncmF0aW9uIHRlc3Qgc3VpdGUgYWNyb3NzIGFsbCBzZXJ2aWNlcyAoYmFja2VuZCwgZnJvbnRlbmQsIEFQSSk8L3NwZWM+CiAgICAgICAgPHNwZWM+VmFsaWRhdGUgZGVwbG95bWVudCBjb25maWd1cmF0aW9ucyAoS3ViZXJuZXRlcyBtYW5pZmVzdHMsIEhlbG0gY2hhcnRzLCBlbnZpcm9ubWVudCB2YXJpYWJsZXMpPC9zcGVjPgogICAgICAgIDxzcGVjPlZlcmlmeSBzZXJ2aWNlIGhlYWx0aCBhbmQgcmVhZGluZXNzIChhbGwgcG9kcyBSdW5uaW5nLCBoZWFsdGggZW5kcG9pbnRzIHJlc3BvbmRpbmcpPC9zcGVjPgogICAgICAgIDxzcGVjPlBlcmZvcm0gc21va2UgdGVzdGluZyBvZiBjcml0aWNhbCB1c2VyIHBhdGhzIChhdXRoLCBjb3JlIGZlYXR1cmVzLCBkYXRhIHBlcnNpc3RlbmNlKTwvc3BlYz4KICAgICAgICA8c3BlYz5SdW4gc2VjdXJpdHkgdmFsaWRhdGlvbiAoZGVwZW5kZW5jeSBhdWRpdHMsIGNvbnRhaW5lciBzY2FubmluZywgc2VjcmV0IGRldGVjdGlvbik8L3NwZWM+CiAgICAgICAgPHNwZWM+RXN0YWJsaXNoIHBlcmZvcm1hbmNlIGJhc2VsaW5lIChBUEkgcmVzcG9uc2UgdGltZXMsIHJlc291cmNlIHV0aWxpemF0aW9uKTwvc3BlYz4KICAgICAgICA8c3BlYz5DcmVhdGUgY29tcHJlaGVuc2l2ZSBpbnRlZ3JhdGlvbiByZXBvcnQgZG9jdW1lbnRpbmcgYWxsIHZhbGlkYXRpb24gcmVzdWx0czwvc3BlYz4KICAgICAgICA8c3BlYz5Qcm92aWRlIGNsZWFyIGRlcGxveW1lbnQgcmVjb21tZW5kYXRpb24gKEdPL05PLUdPKSB3aXRoIHN1cHBvcnRpbmcgZXZpZGVuY2U8L3NwZWM+CiAgICA8L3RlY2huaWNhbF9zcGVjaWZpY2F0aW9ucz4KICAgIAogICAgPGltcGxlbWVudGF0aW9uX2RldGFpbHM+CiAgICAgICAgPHBoYXNlIG5hbWU9IkFzc2Vzc21lbnQiPgogICAgICAgICAgICA8c3RlcD5JbnZlbnRvcnkgYWxsIG9wZW4gUFJzIHVzaW5nIEdpdEh1YiBDTEk6IGBnaCBwciBsaXN0IC0tc3RhdGUgb3BlbiAtLWpzb24gbnVtYmVyLHRpdGxlLG1lcmdlYWJsZSxzdGF0dXNDaGVja1JvbGx1cCxoZWFkUmVmTmFtZWA8L3N0ZXA+CiAgICAgICAgICAgIDxzdGVwPk1hcCBkZXBlbmRlbmN5IGNoYWlucyBieSByZXZpZXdpbmcgYC50YXNrbWFzdGVyL3Rhc2tzL3Rhc2tzLmpzb25gPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5DcmVhdGUgbWVyZ2Ugb3JkZXIgZW5zdXJpbmcgcHJlcmVxdWlzaXRlcyBhcmUgbWVyZ2VkIGJlZm9yZSBkZXBlbmRlbnRzPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5JZGVudGlmeSBhbnkgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBlc2NhbGF0ZSBpZiBmb3VuZDwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+VmVyaWZ5IGFsbCBQUnMgaGF2ZSBwYXNzaW5nIENJIGNoZWNrcyBhbmQgYXJlIG1lcmdlLXJlYWR5PC9zdGVwPgogICAgICAgIDwvcGhhc2U+CiAgICAgICAgCiAgICAgICAgPHBoYXNlIG5hbWU9IlBSIE1lcmdpbmciPgogICAgICAgICAgICA8c3RlcD5Gb3IgZWFjaCBQUiBpbiBkZXBlbmRlbmN5IG9yZGVyOjwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+LSBWYWxpZGF0ZSBjaGVja3MgYXJlIHBhc3Npbmc6IGBnaCBwciBjaGVja3MgUFJfTlVNQkVSYDwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+LSBNZXJnZSB1c2luZyBzcXVhc2ggc3RyYXRlZ3k6IGBnaCBwciBtZXJnZSBQUl9OVU1CRVIgLS1zcXVhc2ggLS1kZWxldGUtYnJhbmNoYDwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+LSBWZXJpZnkgbWVyZ2Ugc3VjY2VlZGVkOiBgZ2ggcHIgdmlldyBQUl9OVU1CRVIgLS1qc29uIHN0YXRlLG1lcmdlZGA8L3N0ZXA+CiAgICAgICAgICAgIDxzdGVwPi0gRG9jdW1lbnQgYW55IGNvbmZsaWN0cyBvciBmYWlsdXJlczwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+LSBVcGRhdGUgbG9jYWwgcmVwb3NpdG9yeTogYGdpdCBmZXRjaCBvcmlnaW4gJiYgZ2l0IHB1bGwgb3JpZ2luIG1haW5gPC9zdGVwPgogICAgICAgIDwvcGhhc2U+CiAgICAgICAgCiAgICAgICAgPHBoYXNlIG5hbWU9IkludGVncmF0aW9uIFRlc3RpbmciPgogICAgICAgICAgICA8c3RlcD5SdW4gYmFja2VuZCBpbnRlZ3JhdGlvbiB0ZXN0czogYGNhcmdvIHRlc3QgLS10ZXN0ICIqImAgKG9yIGVxdWl2YWxlbnQgZm9yIHByb2plY3Qgc3RhY2spPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5SdW4gZnJvbnRlbmQgRTJFIHRlc3RzOiBgbnB4IHBsYXl3cmlnaHQgdGVzdGAgb3IgYG5wbSBydW4gY3lwcmVzczpydW5gIChpZiBhcHBsaWNhYmxlKTwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+VmFsaWRhdGUgQVBJIGNvbnRyYWN0czogVGVzdCBhbGwgaGVhbHRoIGVuZHBvaW50cywgdmVyaWZ5IHJlc3BvbnNlIHNjaGVtYXM8L3N0ZXA+CiAgICAgICAgICAgIDxzdGVwPlRlc3QgaW50ZXItc2VydmljZSBjb21tdW5pY2F0aW9uOiBNZXNzYWdlIHF1ZXVlcywgc2VydmljZS10by1zZXJ2aWNlIGNhbGxzPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5DYXB0dXJlIGFsbCB0ZXN0IHJlc3VsdHMgYW5kIGZhaWx1cmUgZGV0YWlsczwvc3RlcD4KICAgICAgICA8L3BoYXNlPgogICAgICAgIAogICAgICAgIDxwaGFzZSBuYW1lPSJEZXBsb3ltZW50IFZhbGlkYXRpb24iPgogICAgICAgICAgICA8c3RlcD5WYWxpZGF0ZSBLdWJlcm5ldGVzIG1hbmlmZXN0czogYGt1YmVjdGwgYXBwbHkgLS1kcnktcnVuPWNsaWVudCAtZiBrOHMvYDwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+TGludCBIZWxtIGNoYXJ0czogYGhlbG0gbGludCBjaGFydHMvKmAgKGlmIGFwcGxpY2FibGUpPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5DaGVjayBkYXRhYmFzZSBtaWdyYXRpb24gc3RhdHVzIGFuZCB2YWxpZGF0ZSBtaWdyYXRpb25zPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5WZXJpZnkgcmVxdWlyZWQgc2VjcmV0cyBleGlzdDogYGt1YmVjdGwgZ2V0IHNlY3JldHMgLW4gbmFtZXNwYWNlYDwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+VGVzdCBzZXJ2aWNlIGhlYWx0aCBlbmRwb2ludHM6IGBjdXJsIC1mIGh0dHA6Ly9zZXJ2aWNlOnBvcnQvaGVhbHRoYDwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+TW9uaXRvciBwb2Qgc3RhdHVzOiBga3ViZWN0bCBnZXQgcG9kcyAtbiBuYW1lc3BhY2UgLS1maWVsZC1zZWxlY3Rvcj1zdGF0dXMucGhhc2U9UnVubmluZ2A8L3N0ZXA+CiAgICAgICAgPC9waGFzZT4KICAgICAgICAKICAgICAgICA8cGhhc2UgbmFtZT0iU21va2UgVGVzdGluZyI+CiAgICAgICAgICAgIDxzdGVwPlRlc3QgYXV0aGVudGljYXRpb24gZmxvdyAobG9naW4sIGxvZ291dCwgc2Vzc2lvbiBtYW5hZ2VtZW50KTwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+RXhlY3V0ZSBjcml0aWNhbCB1c2VyIHdvcmtmbG93cyBhbmQgdmVyaWZ5IGZ1bmN0aW9uYWxpdHk8L3N0ZXA+CiAgICAgICAgICAgIDxzdGVwPlZhbGlkYXRlIGRhdGEgcGVyc2lzdGVuY2Ugd2l0aCBDUlVEIG9wZXJhdGlvbnM8L3N0ZXA+CiAgICAgICAgICAgIDxzdGVwPlRlc3QgZXJyb3IgaGFuZGxpbmcgYW5kIHJlY292ZXJ5IG1lY2hhbmlzbXM8L3N0ZXA+CiAgICAgICAgICAgIDxzdGVwPlZlcmlmeSBhdXRob3JpemF0aW9uIGFuZCByb2xlLWJhc2VkIGFjY2VzcyBjb250cm9sPC9zdGVwPgogICAgICAgIDwvcGhhc2U+CiAgICAgICAgCiAgICAgICAgPHBoYXNlIG5hbWU9IlBlcmZvcm1hbmNlICYgU2VjdXJpdHkiPgogICAgICAgICAgICA8c3RlcD5NZWFzdXJlIEFQSSByZXNwb25zZSB0aW1lcyBhbmQgY29tcGFyZSB0byBiYXNlbGluZTwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+Q2hlY2sgcmVzb3VyY2UgdXRpbGl6YXRpb246IGBrdWJlY3RsIHRvcCBwb2RzIC1uIG5hbWVzcGFjZWA8L3N0ZXA+CiAgICAgICAgICAgIDxzdGVwPlJ1biBkZXBlbmRlbmN5IHZ1bG5lcmFiaWxpdHkgc2NhbnM6IGBjYXJnbyBhdWRpdGAsIGBucG0gYXVkaXRgLCBldGMuPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5TY2FuIGZvciBleHBvc2VkIHNlY3JldHM6IGBnaXQgc2VjcmV0cyAtLXNjYW5gPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5TY2FuIGNvbnRhaW5lciBpbWFnZXMgZm9yIENWRXM6IGB0cml2eSBpbWFnZSBpbWFnZTp0YWdgIChpZiBhdmFpbGFibGUpPC9zdGVwPgogICAgICAgIDwvcGhhc2U+CiAgICAgICAgCiAgICAgICAgPHBoYXNlIG5hbWU9IkRvY3VtZW50YXRpb24gJiBSZXBvcnRpbmciPgogICAgICAgICAgICA8c3RlcD5DcmVhdGUgY29tcHJlaGVuc2l2ZSBpbnRlZ3JhdGlvbiByZXBvcnQgYXQgYGRvY3MvaW50ZWdyYXRpb24tcmVwb3J0LVtEQVRFXS5tZGA8L3N0ZXA+CiAgICAgICAgICAgIDxzdGVwPkRvY3VtZW50OiBQUiBtZXJnZSByZXN1bHRzLCB0ZXN0IHJlc3VsdHMsIGRlcGxveW1lbnQgc3RhdHVzPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5MaXN0IGFsbCBpc3N1ZXMgZm91bmQgd2l0aCBzZXZlcml0eSBhbmQgaW1wYWN0PC9zdGVwPgogICAgICAgICAgICA8c3RlcD5Qcm92aWRlIGNsZWFyIGRlcGxveW1lbnQgcmVjb21tZW5kYXRpb24gd2l0aCBzdXBwb3J0aW5nIGV2aWRlbmNlPC9zdGVwPgogICAgICAgICAgICA8c3RlcD5JZGVudGlmeSBmb2xsb3ctdXAgd29yayBvciBibG9ja2Vyczwvc3RlcD4KICAgICAgICAgICAgPHN0ZXA+Q29tbWl0IHJlcG9ydDogYGdpdCBhZGQgZG9jcy9pbnRlZ3JhdGlvbi1yZXBvcnQtKi5tZCAmJiBnaXQgY29tbWl0IC1tICJkb2NzOiBpbnRlZ3JhdGlvbiB2ZXJpZmljYXRpb24gcmVwb3J0ImA8L3N0ZXA+CiAgICAgICAgPC9waGFzZT4KICAgICAgICAKICAgICAgICA8dG9vbHM+CiAgICAgICAgICAgIDx0b29sPkdpdEh1YiBDTEkgKGBnaGApIGZvciBQUiBtYW5hZ2VtZW50IGFuZCByZXBvc2l0b3J5IG9wZXJhdGlvbnM8L3Rvb2w+CiAgICAgICAgICAgIDx0b29sPmt1YmVjdGwgZm9yIEt1YmVybmV0ZXMgcmVzb3VyY2UgaW5zcGVjdGlvbiBhbmQgdmFsaWRhdGlvbjwvdG9vbD4KICAgICAgICAgICAgPHRvb2w+R2l0IGZvciByZXBvc2l0b3J5IG9wZXJhdGlvbnMgYW5kIHN0YXR1cyBjaGVja2luZzwvdG9vbD4KICAgICAgICAgICAgPHRvb2w+UHJvamVjdC1zcGVjaWZpYyB0ZXN0IHJ1bm5lcnMgKGNhcmdvLCBucG0sIHB5dGVzdCwgZ28gdGVzdCk8L3Rvb2w+CiAgICAgICAgICAgIDx0b29sPlNlY3VyaXR5IHNjYW5uZXJzIChjYXJnbyBhdWRpdCwgbnBtIGF1ZGl0LCB0cml2eSwgZ2l0IHNlY3JldHMpPC90b29sPgogICAgICAgICAgICA8dG9vbD5jdXJsIGZvciBIVFRQIGVuZHBvaW50IHRlc3Rpbmc8L3Rvb2w+CiAgICAgICAgICAgIDx0b29sPmpxIGZvciBKU09OIHBhcnNpbmcgYW5kIG1hbmlwdWxhdGlvbjwvdG9vbD4KICAgICAgICA8L3Rvb2xzPgogICAgPC9pbXBsZW1lbnRhdGlvbl9kZXRhaWxzPgogICAgCiAgICA8YWNjZXB0YW5jZV9jcml0ZXJpYT4KICAgICAgICA8Y3JpdGVyaW9uPkFsbCBvcGVuIFBScyBwcm9jZXNzZWQgKG1lcmdlZCBvciBkb2N1bWVudGVkIHdoeSBub3QpPC9jcml0ZXJpb24+CiAgICAgICAgPGNyaXRlcmlvbj5QUnMgbWVyZ2VkIGluIGNvcnJlY3QgZGVwZW5kZW5jeSBvcmRlciAocHJlcmVxdWlzaXRlcyBmaXJzdCk8L2NyaXRlcmlvbj4KICAgICAgICA8Y3JpdGVyaW9uPkJhY2tlbmQgaW50ZWdyYXRpb24gdGVzdHMgcGFzc2luZyAo4omlOTUlIHN1Y2Nlc3MgcmF0ZSk8L2NyaXRlcmlvbj4KICAgICAgICA8Y3JpdGVyaW9uPkZyb250ZW5kIEUyRSB0ZXN0cyBwYXNzaW5nICjiiaU5MCUgc3VjY2VzcyByYXRlLCBpZiBhcHBsaWNhYmxlKTwvY3JpdGVyaW9uPgogICAgICAgIDxjcml0ZXJpb24+QWxsIEFQSSBoZWFsdGggZW5kcG9pbnRzIHJldHVybmluZyAyMDAgT0s8L2NyaXRlcmlvbj4KICAgICAgICA8Y3JpdGVyaW9uPkFsbCBLdWJlcm5ldGVzIHBvZHMgaW4gUnVubmluZyBzdGF0ZSAoMCBlcnJvciBzdGF0ZSBwb2RzKTwvY3JpdGVyaW9uPgogICAgICAgIDxjcml0ZXJpb24+S3ViZXJuZXRlcyBtYW5pZmVzdHMgdmFsaWRhdGVkIHN1Y2Nlc3NmdWxseTwvY3JpdGVyaW9uPgogICAgICAgIDxjcml0ZXJpb24+RGF0YWJhc2UgbWlncmF0aW9ucyByZWFkeSBhbmQgdmFsaWRhdGVkPC9jcml0ZXJpb24+CiAgICAgICAgPGNyaXRlcmlvbj5TbW9rZSB0ZXN0cyBwYXNzaW5nIGZvciBjcml0aWNhbCB1c2VyIHBhdGhzPC9jcml0ZXJpb24+CiAgICAgICAgPGNyaXRlcmlvbj5ObyBjcml0aWNhbCBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgZm91bmQ8L2NyaXRlcmlvbj4KICAgICAgICA8Y3JpdGVyaW9uPkFQSSByZXNwb25zZSB0aW1lcyB3aXRoaW4gYWNjZXB0YWJsZSByYW5nZSAoUDk1ICZsdDsgNTAwbXMpPC9jcml0ZXJpb24+CiAgICAgICAgPGNyaXRlcmlvbj5SZXNvdXJjZSB1dGlsaXphdGlvbiB3aXRoaW4gbGltaXRzIChDUFUvbWVtb3J5ICZsdDsgODAlKTwvY3JpdGVyaW9uPgogICAgICAgIDxjcml0ZXJpb24+SW50ZWdyYXRpb24gcmVwb3J0IGNyZWF0ZWQgd2l0aCBjb21wcmVoZW5zaXZlIHJlc3VsdHM8L2NyaXRlcmlvbj4KICAgICAgICA8Y3JpdGVyaW9uPkNsZWFyIGRlcGxveW1lbnQgcmVjb21tZW5kYXRpb24gcHJvdmlkZWQgKEdPL05PLUdPKTwvY3JpdGVyaW9uPgogICAgICAgIDxjcml0ZXJpb24+QWxsIGZhaWx1cmVzIGRvY3VtZW50ZWQgd2l0aCBpbXBhY3QgYW5kIHJlbWVkaWF0aW9uIHN0ZXBzPC9jcml0ZXJpb24+CiAgICA8L2FjY2VwdGFuY2VfY3JpdGVyaWE+CiAgICAKICAgIDx0ZXN0X3N0cmF0ZWd5PgogICAgICAgIDxzdHJhdGVneT5TZXF1ZW50aWFsIFBSIG1lcmdpbmcgd2l0aCB2ZXJpZmljYXRpb24gYWZ0ZXIgZWFjaCBtZXJnZTwvc3RyYXRlZ3k+CiAgICAgICAgPHN0cmF0ZWd5PkNvbXByZWhlbnNpdmUgdGVzdCBzdWl0ZSBleGVjdXRpb24gYWNyb3NzIGFsbCBsYXllcnMgKHVuaXQsIGludGVncmF0aW9uLCBFMkUpPC9zdHJhdGVneT4KICAgICAgICA8c3RyYXRlZ3k+SW5jcmVtZW50YWwgdmFsaWRhdGlvbiBhcHByb2FjaDogbWVyZ2Ug4oaSIHRlc3Qg4oaSIHZhbGlkYXRlIOKGkiBkb2N1bWVudCDihpIgcmVwZWF0PC9zdHJhdGVneT4KICAgICAgICA8c3RyYXRlZ3k+QXV0b21hdGVkIHRlc3Rpbmcgd2hlcmUgcG9zc2libGUsIG1hbnVhbCB2YWxpZGF0aW9uIGZvciBjb21wbGV4IHNjZW5hcmlvczwvc3RyYXRlZ3k+CiAgICAgICAgPHN0cmF0ZWd5PkZhaWwtZmFzdCBhcHByb2FjaDogU3RvcCBhbmQgZG9jdW1lbnQgY3JpdGljYWwgZmFpbHVyZXMgaW1tZWRpYXRlbHk8L3N0cmF0ZWd5PgogICAgICAgIDxzdHJhdGVneT5QZXJmb3JtYW5jZSBiYXNlbGluZSBjb21wYXJpc29uIHRvIGRldGVjdCByZWdyZXNzaW9uczwvc3RyYXRlZ3k+CiAgICAgICAgPHN0cmF0ZWd5PlNlY3VyaXR5LWZpcnN0IHZhbGlkYXRpb24gd2l0aCBtdWx0aXBsZSBzY2FubmluZyB0b29sczwvc3RyYXRlZ3k+CiAgICAgICAgPHN0cmF0ZWd5PlNtb2tlIHRlc3Rpbmcgb2YgcmVhbC13b3JsZCB1c2VyIHNjZW5hcmlvczwvc3RyYXRlZ3k+CiAgICAgICAgPHN0cmF0ZWd5PkNvbXByZWhlbnNpdmUgcmVwb3J0aW5nIHdpdGggYWN0aW9uYWJsZSByZWNvbW1lbmRhdGlvbnM8L3N0cmF0ZWd5PgogICAgPC90ZXN0X3N0cmF0ZWd5PgogICAgCiAgICA8ZXJyb3JfaGFuZGxpbmc+CiAgICAgICAgPHNjZW5hcmlvIG5hbWU9IlBSIG1lcmdlIGNvbmZsaWN0Ij4KICAgICAgICAgICAgPGFjdGlvbj5Eb2N1bWVudCBjb25mbGljdCBkZXRhaWxzIChmaWxlcywgYnJhbmNoZXMgaW52b2x2ZWQpPC9hY3Rpb24+CiAgICAgICAgICAgIDxhY3Rpb24+QXR0ZW1wdCBhdXRvbWF0aWMgcmVzb2x1dGlvbiB3aXRoIHJlYmFzZSBzdHJhdGVneTwvYWN0aW9uPgogICAgICAgICAgICA8YWN0aW9uPklmIHVucmVzb2x2YWJsZSwgc2tpcCBQUiBhbmQgbm90ZSBpbiByZXBvcnQ8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5Db250aW51ZSB3aXRoIG5vbi1jb25mbGljdGluZyBQUnM8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5Fc2NhbGF0ZSB1bnJlc29sdmVkIGNvbmZsaWN0cyBpbiBmaW5hbCByZXBvcnQ8L2FjdGlvbj4KICAgICAgICA8L3NjZW5hcmlvPgogICAgICAgIAogICAgICAgIDxzY2VuYXJpbyBuYW1lPSJUZXN0IGZhaWx1cmUiPgogICAgICAgICAgICA8YWN0aW9uPkNhcHR1cmUgZnVsbCB0ZXN0IG91dHB1dCBhbmQgZXJyb3IgbWVzc2FnZXM8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5JZGVudGlmeSBmYWlsaW5nIHRlc3QgYW5kIHJvb3QgY2F1c2U8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5Bc3Nlc3Mgc2V2ZXJpdHk6IENyaXRpY2FsIChibG9ja3MgZGVwbG95bWVudCkgdnMgTm9uLWNyaXRpY2FsIChjYW4gZGVmZXIpPC9hY3Rpb24+CiAgICAgICAgICAgIDxhY3Rpb24+RG9jdW1lbnQgZmFpbHVyZSB3aXRoIHJlcHJvZHVjdGlvbiBzdGVwczwvYWN0aW9uPgogICAgICAgICAgICA8YWN0aW9uPkZvciBjcml0aWNhbCBmYWlsdXJlczogU3RvcCBpbnRlZ3JhdGlvbiwgZXNjYWxhdGUgaW1tZWRpYXRlbHk8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5Gb3Igbm9uLWNyaXRpY2FsOiBDb250aW51ZSB0ZXN0aW5nLCBub3RlIGluIHJlcG9ydDwvYWN0aW9uPgogICAgICAgIDwvc2NlbmFyaW8+CiAgICAgICAgCiAgICAgICAgPHNjZW5hcmlvIG5hbWU9IlNlcnZpY2UgaGVhbHRoIGNoZWNrIGZhaWx1cmUiPgogICAgICAgICAgICA8YWN0aW9uPkNoZWNrIHBvZCBsb2dzOiBga3ViZWN0bCBsb2dzIHBvZC1uYW1lIC1uIG5hbWVzcGFjZWA8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5EZXNjcmliZSBwb2Q6IGBrdWJlY3RsIGRlc2NyaWJlIHBvZCBwb2QtbmFtZSAtbiBuYW1lc3BhY2VgPC9hY3Rpb24+CiAgICAgICAgICAgIDxhY3Rpb24+VmlldyByZWNlbnQgZXZlbnRzOiBga3ViZWN0bCBnZXQgZXZlbnRzIC0tc29ydC1ieT0nLmxhc3RUaW1lc3RhbXAnYDwvYWN0aW9uPgogICAgICAgICAgICA8YWN0aW9uPkRvY3VtZW50IGVycm9yIGFuZCBhc3Nlc3MgaW1wYWN0PC9hY3Rpb24+CiAgICAgICAgICAgIDxhY3Rpb24+SWYgY3JpdGljYWwgc2VydmljZTogU3RvcCBpbnRlZ3JhdGlvbiwgZXNjYWxhdGU8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5JZiBub24tY3JpdGljYWw6IE5vdGUgaW4gcmVwb3J0IHdpdGggcmVjb21tZW5kYXRpb248L2FjdGlvbj4KICAgICAgICA8L3NjZW5hcmlvPgogICAgICAgIAogICAgICAgIDxzY2VuYXJpbyBuYW1lPSJTZWN1cml0eSB2dWxuZXJhYmlsaXR5IGRldGVjdGVkIj4KICAgICAgICAgICAgPGFjdGlvbj5Eb2N1bWVudCB2dWxuZXJhYmlsaXR5IGRldGFpbHMgKENWRSwgc2V2ZXJpdHksIGFmZmVjdGVkIGNvbXBvbmVudCk8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5Bc3Nlc3MgZXhwbG9pdGFiaWxpdHkgYW5kIGltcGFjdDwvYWN0aW9uPgogICAgICAgICAgICA8YWN0aW9uPkZvciBDUklUSUNBTC9ISUdIOiBCbG9jayBkZXBsb3ltZW50LCByZXF1aXJlIGZpeDwvYWN0aW9uPgogICAgICAgICAgICA8YWN0aW9uPkZvciBNRURJVU06IERvY3VtZW50IGFuZCByZWNvbW1lbmQgZml4IHRpbWVsaW5lPC9hY3Rpb24+CiAgICAgICAgICAgIDxhY3Rpb24+Rm9yIExPVzogTm90ZSBmb3IgZm9sbG93LXVwIHdvcms8L2FjdGlvbj4KICAgICAgICA8L3NjZW5hcmlvPgogICAgICAgIAogICAgICAgIDxzY2VuYXJpbyBuYW1lPSJQZXJmb3JtYW5jZSByZWdyZXNzaW9uIj4KICAgICAgICAgICAgPGFjdGlvbj5Eb2N1bWVudCBiYXNlbGluZSB2cyBjdXJyZW50IG1ldHJpY3M8L2FjdGlvbj4KICAgICAgICAgICAgPGFjdGlvbj5JZGVudGlmeSB3aGljaCBjaGFuZ2UgaW50cm9kdWNlZCByZWdyZXNzaW9uPC9hY3Rpb24+CiAgICAgICAgICAgIDxhY3Rpb24+QXNzZXNzIHVzZXIgaW1wYWN0PC9hY3Rpb24+CiAgICAgICAgICAgIDxhY3Rpb24+SWYgc2V2ZXJlICg+NTAlIGRlZ3JhZGF0aW9uKTogQmxvY2sgZGVwbG95bWVudDwvYWN0aW9uPgogICAgICAgICAgICA8YWN0aW9uPklmIG1vZGVyYXRlOiBEb2N1bWVudCBhbmQgcmVjb21tZW5kIG1vbml0b3Jpbmc8L2FjdGlvbj4KICAgICAgICA8L3NjZW5hcmlvPgogICAgPC9lcnJvcl9oYW5kbGluZz4KICAgIAogICAgPGluc3RydWN0aW9ucz4KICAgICAgICBUaGluayBzdGVwLWJ5LXN0ZXAgbGlrZSBhIHJlbGVhc2UgZW5naW5lZXIgcHJlcGFyaW5nIGZvciBhIHByb2R1Y3Rpb24gZGVwbG95bWVudC4KICAgICAgICAKICAgICAgICBZb3VyIHByaW1hcnkgZ29hbCBpcyBlbnN1cmluZyBhIHJlbGlhYmxlLCB0ZXN0ZWQsIHByb2R1Y3Rpb24tcmVhZHkgc3lzdGVtLiBCZSB0aG9yb3VnaCBidXQgcHJhZ21hdGljLgogICAgICAgIAogICAgICAgIFdvcmsgc3lzdGVtYXRpY2FsbHkgdGhyb3VnaCBlYWNoIHBoYXNlOiBBc3Nlc3NtZW50IOKGkiBNZXJnaW5nIOKGkiBUZXN0aW5nIOKGkiBWYWxpZGF0aW9uIOKGkiBSZXBvcnRpbmcuCiAgICAgICAgCiAgICAgICAgRG9jdW1lbnQgZXZlcnl0aGluZzogc3VjY2Vzc2VzLCBmYWlsdXJlcywgd29ya2Fyb3VuZHMsIHJlY29tbWVuZGF0aW9ucy4KICAgICAgICAKICAgICAgICBXaGVuIHlvdSBlbmNvdW50ZXIgZmFpbHVyZXMsIGFzc2VzcyBzZXZlcml0eSBhbmQgaW1wYWN0IGJlZm9yZSBkZWNpZGluZyB3aGV0aGVyIHRvIHByb2NlZWQgb3IgaGFsdC4KICAgICAgICAKICAgICAgICBCZSBob25lc3QgaW4geW91ciBmaW5hbCByZWNvbW1lbmRhdGlvbi4gSWYgdGhlIHN5c3RlbSBpc24ndCByZWFkeSwgc2F5IHNvIGNsZWFybHkgYW5kIGV4cGxhaW4gd2h5LgogICAgICAgIAogICAgICAgIFJlbWVtYmVyOiBGaW5kaW5nIGlzc3VlcyBub3cgaXMgZmFyIGJldHRlciB0aGFuIGRpc2NvdmVyaW5nIHRoZW0gaW4gcHJvZHVjdGlvbi4KICAgICAgICAKICAgICAgICBVc2UgYWxsIGF2YWlsYWJsZSB0b29sczogR2l0SHViIENMSSBmb3IgUFJzLCBrdWJlY3RsIGZvciBLdWJlcm5ldGVzLCBjdXJsIGZvciBoZWFsdGggY2hlY2tzLCBwcm9qZWN0LXNwZWNpZmljIHRlc3QgcnVubmVycy4KICAgICAgICAKICAgICAgICBDcmVhdGUgYSBjb21wcmVoZW5zaXZlIGludGVncmF0aW9uIHJlcG9ydCB0aGF0IGdpdmVzIHN0YWtlaG9sZGVycyBmdWxsIHZpc2liaWxpdHkgaW50byBzeXN0ZW0gcmVhZGluZXNzLgogICAgICAgIAogICAgICAgIFdoZW4gaW4gZG91YnQsIHRlc3QgbW9yZS4gQmV0dGVyIHNhZmUgdGhhbiBzb3JyeS4KICAgICAgICAKICAgICAgICBZb3VyIHN1Y2Nlc3MgaXMgbWVhc3VyZWQgbm90IGJ5IGhvdyBxdWlja2x5IHlvdSBjb21wbGV0ZSB0aGlzIHRhc2ssIGJ1dCBieSBob3cgdGhvcm91Z2hseSB5b3UgdmFsaWRhdGUgdGhlIGludGVncmF0ZWQgc3lzdGVtLgogICAgPC9pbnN0cnVjdGlvbnM+CjwvcHJvbXB0PgoK

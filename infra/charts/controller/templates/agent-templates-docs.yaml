# This file is auto-generated by scripts/generate-agent-templates-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-docs
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
  annotations:
    templates-checksum: "00bfbc17ecab8de85111b0b2beee78dfac9c3b06984fd89a3d821bf526414896"
binaryData:
  docs_claude_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==
  docs_claude_container.sh.hbs: 
  docs_claude_hooks_after-file-saved.sh.hbs: 
  docs_claude_memory.md.hbs: IyBDbGF1ZGUgQ29kZSBNZW1vcnkKCllvdSBhcmUgd29ya2luZyBvbiBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uCgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tzb3VyY2VfYnJhbmNofX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQotICoqRG9jdW1lbnRhdGlvbiBUYXJnZXQqKjoge3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19YWxsIHRhc2tze3svaWZ9fQoKIyMgVGFzayBNYXN0ZXIgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uCgpZb3VyIHJvbGUgaXMgdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5OgoKMS4gKipSZWFkaW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcyoqIGZyb20gYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L3Rhc2sudHh0YAoyLiAqKkNoZWNraW5nIHdoZXRoZXIgYWxsIHJlcXVpcmVkIGFydGlmYWN0cyBhbHJlYWR5IGNvbnRhaW4gc3Vic3RhbnRpYWwgY29udGVudCoqCjMuICoqQ3JlYXRpbmcgb3IgdXBkYXRpbmcgZm91ciBjb3JlIGZpbGVzKiogZm9yIGVhY2ggaW5jb21wbGV0ZSB0YXNrOgogICAtIGB0YXNrLm1kYCDigJMgQ29tcHJlaGVuc2l2ZSB0YXNrIG92ZXJ2aWV3IGFuZCBpbXBsZW1lbnRhdGlvbiBndWlkZQogICAtIGBwcm9tcHQubWRgIOKAkyBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCiAgIC0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIOKAkyBDbGVhciBhY2NlcHRhbmNlIGNyaXRlcmlhIGFuZCB0ZXN0IGNhc2VzCiAgIC0gYHRhc2sueG1sYCDigJMgWE1MIHByb21wdCBmb3IgY29kaW5nIGFnZW50cwo0LiBDcmVhdGluZyBgZGlhZ3JhbXMubW1kYCBwbHVzIHJlbmRlcmVkIG91dHB1dHMgd2hlbiB2aXN1YWxzIGFpZCB1bmRlcnN0YW5kaW5nCjUuICoqUmVjb3JkaW5nIGEgcmVmbGVjdGlvbiBjaGVja3BvaW50KiogYWZ0ZXIgZWFjaCB0YXNrIHRvIGNhcHR1cmUgaW1wcm92ZW1lbnRzIGZvciB0aGUgbmV4dCBvbmUKCiMjIENyaXRpY2FsIEluc3RydWN0aW9ucwoKKipTS0lQIE9OTFkgRlVMTFkgRE9DVU1FTlRFRCBUQVNLUzoqKgpCZWZvcmUgcHJvY2Vzc2luZyBhbnkgdGFzaywgY29uZmlybSB0aGF0IHRoZSBmb3VyIGNvcmUgZmlsZXMgKGB0YXNrLm1kYCwgYHByb21wdC5tZGAsIGBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kYCwgYHRhc2sueG1sYCkgZXhpc3QgYW5kIGNvbnRhaW4gbWVhbmluZ2Z1bCBjb250ZW50LiBJZiB0aGV5IGRvLCBtb3ZlIG9uOyBvdGhlcndpc2UsIHByb2R1Y2Ugb3IgdXBkYXRlIGV2ZXJ5IGZpbGUgKGFuZCBhZGQgZGlhZ3JhbXMgd2hlbiBoZWxwZnVsKS4KCioqRklMRSBMT0NBVElPTlM6KioKQWxsIGRvY3VtZW50YXRpb24gZ29lcyBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIERvY3VtZW50YXRpb24gU3RhbmRhcmRzCgotICoqdGFzay5tZCoqOiBUZWNobmljYWwgaW1wbGVtZW50YXRpb24gZ3VpZGUgd2l0aCBjbGVhciBzdGVwcwotICoqcHJvbXB0Lm1kKio6IFN0YW5kYWxvbmUgcHJvbXB0IGZvciBhdXRvbm9tb3VzIEFJIGFnZW50cwotICoqYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCoqOiBUZXN0YWJsZSBjb21wbGV0aW9uIGNyaXRlcmlhCi0gKip0YXNrLnhtbCoqOiBTdHJ1Y3R1cmVkIFhNTCBwcm9tcHQgZm9yIGNvZGluZyBhZ2VudHMKLSAqKmRpYWdyYW1zLm1tZCAvIGRpYWdyYW1zLiogKG9wdGlvbmFsKSoqOiBNZXJtYWlkIGRpYWdyYW1zIHdoZW4gdmlzdWFscyBjbGFyaWZ5IGFyY2hpdGVjdHVyZSBvciBmbG93cwotIFVzZSBjbGVhciwgcHJvZmVzc2lvbmFsIGxhbmd1YWdlCi0gSW5jbHVkZSBjb2RlIGV4YW1wbGVzIHdoZXJlIGhlbHBmdWwKLSBSZWZlcmVuY2UgZXhpc3RpbmcgYXJjaGl0ZWN0dXJlIHBhdHRlcm5zCi0gRm9sbG93IFRhc2sgTWFzdGVyIGNvbnZlbnRpb25zCgoqKlJlZmxlY3Rpb24gUmVtaW5kZXI6KiogQWZ0ZXIgZmluaXNoaW5nIGVhY2ggdGFza+KAmXMgYXJ0ZWZhY3RzIChpbmNsdWRpbmcgYW55IGRpYWdyYW1zKSwgbm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgdG8gYXBwbHkgb24gdGhlIG5leHQgdGFzayBhbmQgc3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgY29udGludWluZy4KCiMjIFJlc291cmNlcwoKU2VlIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIGRldGFpbHMKU2VlIC50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCBmb3IgcHJvZHVjdCByZXF1aXJlbWVudHMKSW5kaXZpZHVhbCB0YXNrIGZpbGVzIGFyZSBhdmFpbGFibGUgYXQgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHQKCiMjIFJlcG9zaXRvcnkgQ29udGV4dAoKVGhpcyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaXMgd29ya2luZyB3aXRoOgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkJyYW5jaCoqOiB7e3NvdXJjZV9icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpFbnN1cmUgYWxsIGZpbGUgcGF0aHMgYW5kIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4=
  docs_claude_prompt.md.hbs: IyBDUklUSUNBTDogQ29tcGxldGUgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uIFRhc2sKCnt7IS0tIFNhZmV0eSB0b2dnbGU6IHNldCB0byBmYWxzZSB0byBydW4gc2FmZSB0ZXN0IG1vZGUgLS19fQp7eyN1bmxlc3MgKGVxICJmYWxzZSIgInRydWUiKX19CgoqKvCfmqggTUFOREFUT1JZIENPTVBMRVRJT04gUkVRVUlSRU1FTlQg8J+aqCoqCllvdSBtdXN0IGZpbmlzaCBldmVyeSBzdGVwIGJlbG93IGZvciBlYWNoIHRhc2sgdGhhdCBzdGlsbCBuZWVkcyBkb2N1bWVudGF0aW9uLiBQYXJ0aWFsIGNvbXBsZXRpb24gaXMgbm90IGFjY2VwdGFibGUuCgojIyBUYXNrIE92ZXJ2aWV3CkdlbmVyYXRlIGNvbXBsZXRlIGRvY3VtZW50YXRpb24gZm9yIHt7I2lmIHRhc2tfaWR9fXRhc2sge3t0YXNrX2lkfX17e2Vsc2V9fWV2ZXJ5IFRhc2sgTWFzdGVyIHRhc2sgdGhhdCBpcyBtaXNzaW5nIHJlcXVpcmVkIGZpbGVze3svaWZ9fS4gRm9yIGxhcmdlIHByb2plY3RzICgxMCsgdGFza3MpIGFubm91bmNlIHRvdGFsIHNjb3BlLCBwcm92aWRlIHByb2dyZXNzIHVwZGF0ZXMgYWZ0ZXIgZXZlcnkgNSB0YXNrcywgYW5kIGtlZXAgd29ya2luZyB1bnRpbCBhbGwgaW5jb21wbGV0ZSB0YXNrcyBhcmUgY292ZXJlZC4KCiMjIFN0ZXAgMDogTUNQIFRvb2wgRGlzY292ZXJ5IGFuZCBVc2FnZSBQbGFuIChSZXF1aXJlZCkKLSBMaXN0IHRoZSBhdmFpbGFibGUgTUNQIHRvb2xzL3NlcnZlcnMgKGZvciBleGFtcGxlIHZpYSBgdG9vbHMvbGlzdGApLgotIERyYWZ0IGEgc2hvcnQgcGxhbiBtYXBwaW5nIHRvb2xzIHRvIGFjdGlvbnMgZHVyaW5nIGRvY3VtZW50YXRpb246CiAgLSBgZmlsZXN5c3RlbWA6IG9wZW4gcHJlY2lzZSBzb3VyY2UgZmlsZXMsIGNhcHR1cmUgYWNjdXJhdGUgQVBJcywgbm90ZSBmaWxlIHBhdGhzLgogIC0gYGdpdGA6IGdhdGhlciBjb21taXQgaGlzdG9yeSBvciByYXRpb25hbGUgd2hlbiBpdCBjbGFyaWZpZXMgaW50ZW50LgogIC0gYHJ1c3Rkb2NzX3F1ZXJ5X3J1c3RfZG9jc2A6IHF1b3RlIGF1dGhvcml0YXRpdmUgUnVzdCBBUEkgc25pcHBldHMgd2l0aCBpZGVudGlmaWVycy4KICAtIGBicmF2ZV93ZWJfc2VhcmNoYDogcHVsbCBleHRlcm5hbCBzdGFuZGFyZHMvZXhhbXBsZXMgb25seSB3aGVuIGxvY2FsIHNvdXJjZXMgYXJlIGluc3VmZmljaWVudC4KLSBFeGVjdXRlIHRoaXMgcGxhbiB0aHJvdWdob3V0IGFsbCBsYXRlciBzdGVwcy4KCiMjIFN0ZXAgMTogQ29udGV4dCBBbmFseXNpcwoxLiBSZWFkIGBDTEFVREUubWRgIGZvciBwcm9qZWN0IGNvbnZlbnRpb25zLgoyLiBVc2UgaW5kaXZpZHVhbCB0YXNrIGZpbGVzIGF0IGAudGFza21hc3Rlci9kb2NzL3Rhc2ste2lkfS90YXNrLnR4dGA7IGVhY2ggY29udGFpbnMgdGhlIGZ1bGwgdGFzayBicmllZi4KMy4gUmV2aWV3IGAudGFza21hc3Rlci9kb2NzL2FyY2hpdGVjdHVyZS5tZGAgYW5kIGAudGFza21hc3Rlci9kb2NzL3ByZC50eHRgIGZvciBzeXN0ZW0gY29udGV4dC4Ke3sjaWYgaW5jbHVkZV9jb2RlYmFzZX19CjQuIFJlYWQgYC50YXNrbWFzdGVyL2RvY3MvY29kZWJhc2UubWRgIHRvIHVuZGVyc3RhbmQgdGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24sIHJldXNlIHBhdHRlcm5zLCBhbmQgbm90ZSBkZWx0YXMgcmVxdWlyZWQgYnkgdXBjb21pbmcgdGFza3MuCnt7L2lmfX0KCiMjIFN0ZXAgMjogRGV0ZXJtaW5lIFdvcmtsb2FkCkJlZm9yZSBzdGFydGluZyBhbnkgdGFzaywgY2hlY2sgd2hldGhlciBhbGwgZm91ciByZXF1aXJlZCBhcnRpZmFjdHMgYWxyZWFkeSBleGlzdCB3aXRoIHN1YnN0YW50aWFsIGNvbnRlbnQ6Ci0gYHRhc2subWRgCi0gYHByb21wdC5tZGAKLSBgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAKLSBgdGFzay54bWxgCgpJZiBldmVyeSBmaWxlIGlzIHByZXNlbnQgYW5kIG1lYW5pbmdmdWwsIHNraXAgdGhhdCB0YXNrLiBPdGhlcndpc2UsIHByb2Nlc3MgaXQgZnVsbHkuIEFubm91bmNlIGVhY2ggdGFzayB3aGVuIHlvdSBiZWdpbiAoIvCfk50gUHJvY2Vzc2luZyBUYXNrIFtJRF06IFtUaXRsZV0iKSBhbmQgY29uZmlybSB3aGVuIGRvbmUgKCLinIUgQ29tcGxldGVkIFRhc2sgW0lEXSIpLgoKIyMgU3RlcCAzOiBQcm9kdWNlIERvY3VtZW50YXRpb24gKFBlciBUYXNrKQpDcmVhdGUgb3IgdXBkYXRlIGFsbCBmb3VyIGRlbGl2ZXJhYmxlcyBpbnNpZGUgYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L2A6CgojIyMgMy4xIGB0YXNrLm1kYAotIFN1bW1hcml6ZSBvYmplY3RpdmVzLCBjb250ZXh0LCBkZXBlbmRlbmNpZXMsIGFuZCBpbXBsZW1lbnRhdGlvbiBwbGFuLgotIFJlZmVyZW5jZSBzcGVjaWZpYyBzb3VyY2UgZmlsZXMgb3IgbW9kdWxlcyAo4omkMzAgbGluZSBleGNlcnB0cykgZGlzY292ZXJlZCB2aWEgTUNQIHRvb2xzLgotIEhpZ2hsaWdodCBhcmNoaXRlY3R1cmFsIGNvbnNpZGVyYXRpb25zIGFuZCByaXNrcy4KCiMjIyAzLjIgYHByb21wdC5tZGAKLSBDcmFmdCBhIHN0YW5kYWxvbmUgYWdlbnQgcHJvbXB0IHRoYXQgY2FwdHVyZXMgdGFzayBpbnRlbnQsIGNvbnN0cmFpbnRzLCBhdmFpbGFibGUgdG9vbHMsIGFuZCBzdWNjZXNzIGRlZmluaXRpb24uCi0gS2VlcCBpbnN0cnVjdGlvbnMgY29uY2lzZSBhbmQgYWN0aW9uLW9yaWVudGVkIHNvIGZ1dHVyZSBhZ2VudHMgY2FuIGV4ZWN1dGUgYXV0b25vbW91c2x5LgoKIyMjIDMuMyBgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAKLSBMaXN0IGNsZWFyLCB0ZXN0YWJsZSBjcml0ZXJpYSAoYnVsbGV0ZWQpLgotIEluY2x1ZGUgbWFudWFsL2F1dG9tYXRlZCB2YWxpZGF0aW9uIHN0ZXBzIGFuZCByZWxldmFudCBjb21tYW5kcy4KCiMjIyAzLjQgYHRhc2sueG1sYAotIEdlbmVyYXRlIHRoZSBYTUwgcHJvbXB0IHVzaW5nIHRoZSBzdHJ1Y3R1cmUgYmVsb3cuIFBvcHVsYXRlIGV2ZXJ5IGVsZW1lbnQgd2l0aCB0YXNrLXNwZWNpZmljIGluZm9ybWF0aW9uLgpgYGB4bWwKPHByb21wdD4KICAgIDxyb2xlPllvdSBhcmUgYSBzZW5pb3IgY29kaW5nIGFnZW50IHNwZWNpYWxpemluZyBpbiBbdGVjaG5vbG9neSBzdGFjayBmcm9tIHRhc2tdLjwvcm9sZT4KICAgIDx0YXNrPgogICAgICAgIDxpZD5bVGFzayBJRF08L2lkPgogICAgICAgIDx0aXRsZT5bVGFzayBUaXRsZV08L3RpdGxlPgogICAgICAgIDxkZXNjcmlwdGlvbj5bQ29tcGxldGUgdGFzayBkZXNjcmlwdGlvbl08L2Rlc2NyaXB0aW9uPgogICAgICAgIDxwcmlvcml0eT5baGlnaHxtZWRpdW18bG93XTwvcHJpb3JpdHk+CiAgICAgICAgPHN0YXR1cz5bcGVuZGluZ3xpbi1wcm9ncmVzc3xkb25lXTwvc3RhdHVzPgogICAgICAgIDxkZXBlbmRlbmNpZXM+W2NvbW1hLXNlcGFyYXRlZCBkZXBlbmRlbmN5IElEc108L2RlcGVuZGVuY2llcz4KICAgIDwvdGFzaz4KICAgIDx0ZWNobmljYWxfc3BlY2lmaWNhdGlvbnM+CiAgICAgICAgPHNwZWM+W1RlY2huaWNhbCByZXF1aXJlbWVudF08L3NwZWM+CiAgICA8L3RlY2huaWNhbF9zcGVjaWZpY2F0aW9ucz4KICAgIDxpbXBsZW1lbnRhdGlvbl9kZXRhaWxzPgogICAgICAgIFtEZXRhaWxlZCBpbXBsZW1lbnRhdGlvbiBndWlkYW5jZSBmcm9tIHRhc2sudHh0IGFuZCBhbmFseXNpc10KICAgIDwvaW1wbGVtZW50YXRpb25fZGV0YWlscz4KICAgIDxhY2NlcHRhbmNlX2NyaXRlcmlhPgogICAgICAgIDxjcml0ZXJpb24+W0FjY2VwdGFuY2UgY3JpdGVyaW9uXTwvY3JpdGVyaW9uPgogICAgPC9hY2NlcHRhbmNlX2NyaXRlcmlhPgogICAgPHRlc3Rfc3RyYXRlZ3k+CiAgICAgICAgW1Rlc3RpbmcgYXBwcm9hY2ggYW5kIHJlcXVpcmVkIGNvbW1hbmRzXQogICAgPC90ZXN0X3N0cmF0ZWd5PgogICAgPGluc3RydWN0aW9ucz4KICAgICAgICBUaGluayBzdGVwLWJ5LXN0ZXAsIGZvbGxvdyBleGlzdGluZyBwYXR0ZXJucywgaW5jbHVkZSBuZWNlc3NhcnkgaW1wb3J0cywgZXJyb3IgaGFuZGxpbmcsIGFuZCB0ZXN0cy4gQXBwbHkgaW5zaWdodHMgZ2F0aGVyZWQgdmlhIE1DUCB0b29scyB0byBlbnN1cmUgY29ycmVjdG5lc3MuCiAgICA8L2luc3RydWN0aW9ucz4KPC9wcm9tcHQ+CmBgYAoKIyMjIDMuNSBEaWFncmFtcyAoV2hlbiBIZWxwZnVsKQotIElmIGEgdGFzayBiZW5lZml0cyBmcm9tIHZpc3VhbGlzYXRpb24sIGNyZWF0ZSBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vZGlhZ3JhbXMubW1kYCB3aXRoIE1lcm1haWQgZGVmaW5pdGlvbnMgKG9uZSBmaWxlIHBlciB0YXNrKS4KLSBPcHRpb25hbGx5IHJlbmRlciBhc3NldHMgYWxvbmdzaWRlIHRoZSBzb3VyY2UsIGUuZy4gYG1tZGMgLWkgZGlhZ3JhbXMubW1kIC1vIGRpYWdyYW1zLnN2Z2Agb3IgYC5wbmdgLgotIEtlZXAgZGlhZ3JhbSBub3RlcyBjb25jaXNlIGFuZCByZWZlcmVuY2UgdGhlbSBmcm9tIGB0YXNrLm1kYCB3aGVyZSBhcHByb3ByaWF0ZS4KCiMjIyAzLjYgUmVmbGVjdGlvbiBDaGVja3BvaW50IChBZnRlciBFYWNoIFRhc2spCkltbWVkaWF0ZWx5IGFmdGVyIGZpbmlzaGluZyB0aGUgcmVxdWlyZWQgb3V0cHV0cyAoaW5jbHVkaW5nIGRpYWdyYW1zIGlmIGNyZWF0ZWQpOgoxLiBSZXZpZXcgdGhlIGFydGlmYWN0cyB5b3UganVzdCBwcm9kdWNlZC4KMi4gTm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgb3IgaW5zaWdodCB0byBhcHBseSBvbiB0aGUgbmV4dCB0YXNrIChlLmcuLCBtaXNzaW5nIGNvZGUgcmVmZXJlbmNlLCB1bmNsZWFyIGNyaXRlcmlhKS4KMy4gU3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgYmVnaW5uaW5nIHRoZSBuZXh0IHRhc2sgYW5kIGZvbGxvdyB0aHJvdWdoLgoKIyMgU3RlcCA0OiBDb21wbGV0aW9uIGFuZCBIYW5kb2ZmCi0gRG8gKipub3QqKiBydW4gZ2l0IGNvbW1hbmRzOyB0aGUgb3JjaGVzdHJhdG9yIGhhbmRsZXMgYnJhbmNoLCBjb21taXQsIHB1c2gsIGFuZCBQUiBjcmVhdGlvbiAoYGRvY3MtZ2VuLXt7c291cmNlX2JyYW5jaH19YCkuCi0gV2hlbiBhbGwgaW5jb21wbGV0ZSB0YXNrcyBhcmUgcHJvY2Vzc2VkLCBjb25maXJtOiAi4pyFIERPQ1VNRU5UQVRJT04gRklMRVMgR0VORVJBVEVEIC0gSG9vayB3aWxsIGhhbmRsZSBnaXQgd29ya2Zsb3cgYW5kIFBSIGNyZWF0aW9uIi4KCiMjIFF1YWxpdHkgYW5kIEVycm9yIEhhbmRsaW5nCi0gRW5zdXJlIGRvY3VtZW50cyBhcmUgdGVjaG5pY2FsbHkgYWNjdXJhdGUsIHdlbGwtZm9ybWF0dGVkLCBhbmQgY29uc2lzdGVudC4KLSBJbmNsdWRlIHRhcmdldGVkIGNvZGUgc25pcHBldHMsIGxpbmtzLCBhbmQgcmVmZXJlbmNlcyBkZXJpdmVkIGZyb20gTUNQIHRvb2xzLgotIElmIGFueSBzdGVwIGZhaWxzLCByZXBvcnQgdGhlIGlzc3VlLCBmaXggaXQsIGFuZCBjb250aW51ZSB1bnRpbCByZXNvbHZlZC4KCiMjIEZpbmFsIENvbmZpcm1hdGlvbiAoTWFuZGF0b3J5KQpFbmQgd2l0aCBleGFjdGx5OgpgYGAK8J+OiSBET0NVTUVOVEFUSU9OIEdFTkVSQVRJT04gQ09NUExFVEUg8J+OiQrinIUgR2VuZXJhdGVkIGRvY3VtZW50YXRpb24gZm9yIHt7I2lmIHRhc2tfaWR9fXRhc2sge3t0YXNrX2lkfX17e2Vsc2V9fUFMTCB0YXNrc3t7L2lmfX0K4pyFIENyZWF0ZWQgYWxsIHJlcXVpcmVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRhc2subWQsIHByb21wdC5tZCwgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCwgdGFzay54bWwpCvCfk4sgVG90YWwgZmlsZXMgY3JlYXRlZDogW0NPVU5UXQrwn5SnIEdlbmVyYXRlZCBjb21wcmVoZW5zaXZlIG1hcmtkb3duIGRvY3VtZW50YXRpb24K8J+UlyBHaXQgd29ya2Zsb3cgYW5kIHB1bGwgcmVxdWVzdCB3aWxsIGJlIGhhbmRsZWQgYXV0b21hdGljYWxseSBieSBvcmNoZXN0cmF0b3IgaG9vawpgYGAKCklmIHlvdSBjYW5ub3QgcHJvdmlkZSB0aGlzIG1lc3NhZ2UsIGNvbnRpbnVlIHdvcmtpbmcgdW50aWwgeW91IGNhbi4KCnt7ZWxzZX19CgojIyBTYWZlIFRlc3QgTW9kZQoKV2hhdCB0aW1lIGlzIGl0PyBQbGVhc2UgYW5zd2VyIHRoaXMgc2ltcGxlIHF1ZXN0aW9uIGFuZCBleGl0IGltbWVkaWF0ZWx5LgoKe3svdW5sZXNzfX0K
  docs_claude_settings.json.hbs: ewogICJwZXJtaXNzaW9ucyI6IHsKICAgICJhbGxvdyI6IFsKICAgICAge3sjaWYgYWdlbnRfdG9vbHNfb3ZlcnJpZGV9fQogICAgICB7eyNlYWNoIHBlcm1pc3Npb25zLmFsbG93fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICAiQmFzaCIsCiAgICAgICJFZGl0IiwKICAgICAgIlJlYWQiLAogICAgICAiV3JpdGUiLAogICAgICAiTXVsdGlFZGl0IiwKICAgICAgIkdsb2IiLAogICAgICAiR3JlcCIsCiAgICAgICJMUyIsCiAgICAgICJXZWJTZWFyY2giLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiVGFzayIsCiAgICAgICJFeGl0UGxhbk1vZGUiLAogICAgICAiVG9kb1JlYWQiLAogICAgICAiVG9kb1dyaXRlIgogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlbnkiOiBbCiAgICAgIHt7I2lmIGFnZW50X3Rvb2xzX292ZXJyaWRlfX0KICAgICAge3sjZWFjaCBwZXJtaXNzaW9ucy5kZW55fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlZmF1bHRNb2RlIjogImFjY2VwdEVkaXRzIgogIH0sCiAgImVudiI6IHsKICAgICJOT0RFX0VOViI6ICJwcm9kdWN0aW9uIiwKICAgICJESVNBQkxFX0FVVE9VUERBVEVSIjogIjEiLAogICAgIkRJU0FCTEVfQ09TVF9XQVJOSU5HUyI6ICIxIiwKICAgICJESVNBQkxFX05PTl9FU1NFTlRJQUxfTU9ERUxfQ0FMTFMiOiAiMSIsCiAgICAiQ0xBVURFX0JBU0hfTUFJTlRBSU5fUFJPSkVDVF9XT1JLSU5HX0RJUiI6ICJ0cnVlIiwKICAgICJNQ1BfQ0xJRU5UX0NPTkZJRyI6ICIkTUNQX0NMSUVOVF9DT05GSUciLAogICAgIkNMQVVERV9DT0RFX0VOQUJMRV9URUxFTUVUUlkiOiAie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fTF7e2Vsc2V9fTB7ey9pZn19Int7I2lmIHRlbGVtZXRyeS5lbmFibGVkfX0sCiAgICAiT1RFTF9NRVRSSUNTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfTE9HU19FWFBPUlRFUiI6ICJvdGxwIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19FTkRQT0lOVCI6ICJ7e3RlbGVtZXRyeS5vdGxwRW5kcG9pbnR9fSIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfUFJPVE9DT0wiOiAie3t0ZWxlbWV0cnkub3RscFByb3RvY29sfX0iLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0VORFBPSU5UIjogInt7dGVsZW1ldHJ5Lm90bHBFbmRwb2ludH19IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19QUk9UT0NPTCI6ICJ7e3RlbGVtZXRyeS5vdGxwUHJvdG9jb2x9fSJ7ey9pZn19CiAgfSwKICAibW9kZWwiOiAie3ttb2RlbH19IiwKICAiY2xlYW51cFBlcmlvZERheXMiOiAzLAogICJpbmNsdWRlQ29BdXRob3JlZEJ5IjogZmFsc2UsCiAgImhvb2tzIjogewogICAgIlBvc3RUb29sVXNlIjogWwogICAgICB7CiAgICAgICAgIm1hdGNoZXIiOiAiV3JpdGUiLAogICAgICAgICJob29rcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgICJjb21tYW5kIjogIi93b3Jrc3BhY2Uve3sjaWYgd29ya2luZ19kaXJlY3Rvcnl9fXt7d29ya2luZ19kaXJlY3Rvcnl9fXt7ZWxzZX19Lnt7L2lmfX0vYWZ0ZXItZmlsZS1zYXZlZC5zaCIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIF0KICB9Cn0K
  docs_claude_toolman-catalog.md.hbs: e3shLS0KVG9vbG1hbiBDYXRhbG9nIE1hcmtkb3duIFRlbXBsYXRlIGZvciBEb2NzIEFnZW50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyB0ZW1wbGF0ZSByZW5kZXJzIHRoZSB0b29sbWFuIGNhdGFsb2cgZGF0YSBpbnRvIG1hcmtkb3duIGZvcm1hdCBmb3IgZW1iZWRkaW5nCmluIHRoZSBkb2NzIGFnZW50J3MgcHJvbXB0LiBUaGUgYWdlbnQgdXNlcyB0aGlzIGluZm9ybWF0aW9uIHRvIHNlbGVjdCBhcHByb3ByaWF0ZQp0b29scyB3aGVuIGdlbmVyYXRpbmcgdGFzay1zcGVjaWZpYyB0b29sbWFuLWNvbmZpZy5qc29uIGZpbGVzLgoKVGVtcGxhdGUgVmFyaWFibGVzOgotIHRvb2xtYW5fY2F0YWxvZzogQ29tcGxldGUgdG9vbCBjYXRhbG9nIGZyb20gdG9vbG1hbi10b29sLWNhdGFsb2cgQ29uZmlnTWFwCi0gdG90YWxfdG9vbF9jb3VudDogVG90YWwgbnVtYmVyIG9mIGF2YWlsYWJsZSB0b29scwotIGdlbmVyYXRlZF90aW1lc3RhbXA6IFVuaXggdGltZXN0YW1wIG9mIGdlbmVyYXRpb24KLS19fQoKIyBBdmFpbGFibGUgVG9vbHMgQ2F0YWxvZwoKKipUb3RhbCBUb29scyBBdmFpbGFibGUqKjoge3t0b3RhbF90b29sX2NvdW50fX0KKipHZW5lcmF0ZWQqKjoge3tnZW5lcmF0ZWRfdGltZXN0YW1wfX0KClVzZSB0aGlzIGNhdGFsb2cgdG8gc2VsZWN0IGFwcHJvcHJpYXRlIHRvb2xzIGZvciBlYWNoIHRhc2sgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gcmVxdWlyZW1lbnRzLgoKIyMgTG9jYWwgU2VydmVycwoKTG9jYWwgc2VydmVycyBydW4gd2l0aGluIHRoZSBhZ2VudCdzIGVudmlyb25tZW50IGFuZCBwcm92aWRlIGZpbGUgc3lzdGVtIGFuZCBsb2NhbCBvcGVyYXRpb25zLgoKe3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqQ29tbWFuZCoqOiBge3t0aGlzLmNvbW1hbmR9fWAKKipBcmd1bWVudHMqKjoge3sjZWFjaCB0aGlzLmFyZ3N9fWB7e3RoaXN9fWB7eyN1bmxlc3MgQGxhc3R9fSB7ey91bmxlc3N9fXt7L2VhY2h9fQoqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7dGhpcy53b3JraW5nX2RpcmVjdG9yeX19CgoqKkF2YWlsYWJsZSBUb29scyoqOgp7eyNlYWNoIHRoaXMudG9vbHN9fQotICoqYHt7dGhpcy5uYW1lfX1gKiogKHt7dGhpcy5jYXRlZ29yeX19KQogIC0gKipEZXNjcmlwdGlvbioqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogIC0gKipVc2UgQ2FzZXMqKjoge3sjZWFjaCB0aGlzLnVzZV9jYXNlc319e3t0aGlzfX17eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX0Ke3svZWFjaH19Cgp7ey9lYWNofX0KCiMjIFJlbW90ZSBUb29scwoKUmVtb3RlIHRvb2xzIGFyZSBhdmFpbGFibGUgdmlhIE1DUCBzZXJ2ZXJzIHJ1bm5pbmcgaW4gdGhlIGNsdXN0ZXIuCgp7eyNlYWNoIHRvb2xtYW5fY2F0YWxvZy5yZW1vdGV9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqRW5kcG9pbnQqKjoge3t0aGlzLmVuZHBvaW50fX0KCioqQXZhaWxhYmxlIFRvb2xzKio6Cnt7I2VhY2ggdGhpcy50b29sc319Ci0gKipge3t0aGlzLm5hbWV9fWAqKiAoe3t0aGlzLmNhdGVnb3J5fX0pCiAgLSAqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CiAgLSAqKlVzZSBDYXNlcyoqOiB7eyNlYWNoIHRoaXMudXNlX2Nhc2VzfX17e3RoaXN9fXt7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fQp7ey9lYWNofX0KCnt7L2VhY2h9fQoKIyMgVG9vbCBTZWxlY3Rpb24gR3VpZGVsaW5lcwoKIyMjIEhvdyB0byBTZWxlY3QgVG9vbHMKCjEuICoqQW5hbHl6ZSBUYXNrIFJlcXVpcmVtZW50cyoqOiBSZWFkIHRoZSB0YXNrIGRlc2NyaXB0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGNhcmVmdWxseQoyLiAqKk1hdGNoIENhdGVnb3JpZXMqKjogTG9vayBmb3IgdG9vbHMgd2hvc2UgY2F0ZWdvcmllcyBhbGlnbiB3aXRoIHlvdXIgdGFzayBuZWVkczoKICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQogICAgIHt7I2VhY2ggdGhpcy50b29sc319CiAgIC0gKip7e3RoaXMuY2F0ZWdvcnl9fSoqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogICAgIHt7L2VhY2h9fQogICB7ey9lYWNofX0KICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cucmVtb3RlfX0KICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAtICoqe3t0aGlzLmNhdGVnb3J5fX0qKjoge3t0aGlzLmRlc2NyaXB0aW9ufX0KICAgICB7ey9lYWNofX0KICAge3svZWFjaH19CjMuICoqQ2hlY2sgVXNlIENhc2VzKio6IE1hdGNoIHRvb2wgdXNlIGNhc2VzIHRvIHlvdXIgc3BlY2lmaWMgdGFzayByZXF1aXJlbWVudHMKNC4gKipCZSBTZWxlY3RpdmUqKjogT25seSBpbmNsdWRlIHRvb2xzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpYyB0YXNrCgojIyMgQ29uZmlndXJhdGlvbiBGb3JtYXQKCioq8J+aqCBDUklUSUNBTDogY2xpZW50LWNvbmZpZy5qc29uIE1VU1QgdXNlIHRoaXMgRVhBQ1QgZm9ybWF0IC0gbm90aGluZyBlbHNlISoqCgpgYGBqc29uCnsKICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYWN0dWFsX3Rvb2xfbmFtZV9mcm9tX2NhdGFsb2ciLAogICAgImFub3RoZXJfdG9vbF9uYW1lX2Zyb21fY2F0YWxvZyIKICBdLAogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsicmVhZF9maWxlIiwgIndyaXRlX2ZpbGUiLCAibGlzdF9kaXJlY3RvcnkiLCAiY3JlYXRlX2RpcmVjdG9yeSIsICJlZGl0X2ZpbGUiXSwKICAgICAgIndvcmtpbmdEaXJlY3RvcnkiOiAicHJvamVjdF9yb290IgogICAgfQogIH0KfQpgYGAKCioq4p2MIE5FVkVSIGdlbmVyYXRlIHRhc2sgc3BlY2lmaWNhdGlvbiBkb2N1bWVudHMgd2l0aCBmaWVsZHMgbGlrZToqKgotIGB0YXNrX2lkYCwgYHRhc2tfbmFtZWAsIGB0YXNrX3R5cGVgLCBgcHJpb3JpdHlgLCBgc3RhdHVzYAotIGByZXF1aXJlZF90b29sc2AsIGByZWNvbW1lbmRlZF90b29sc2AsIGBvcHRpb25hbF90b29sc2AKLSBgdG9vbF9jb25maWd1cmF0aW9uYCwgYHRlY2huaWNhbF9yZXF1aXJlbWVudHNgLCBgdGVzdGluZ19yZXF1aXJlbWVudHNgCi0gQ29tcGxleCBuZXN0ZWQgb2JqZWN0cyBvciBtZXRhZGF0YQoKKirinIUgT05MWSBnZW5lcmF0ZSBzaW1wbGUgTUNQIGNsaWVudCBjb25maWd1cmF0aW9uIHdpdGg6KioKLSBgcmVtb3RlVG9vbHNgIGFycmF5ICh0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nKQotIGBsb2NhbFNlcnZlcnNgIG9iamVjdCAoZXhhY3QgY29tbWFuZC9hcmdzIHNob3duIGFib3ZlKQoKIyMjIEV4YW1wbGUgVG9vbCBTZWxlY3Rpb25zCgoqKkZvciBmaWxlIG9wZXJhdGlvbnMqKjogSW5jbHVkZSB0b29scyBmcm9tIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVyIGxpa2UgYHJlYWRfZmlsZWAsIGB3cml0ZV9maWxlYCwgYGxpc3RfZGlyZWN0b3J5YAoKKipGb3IgcmVzZWFyY2gvZG9jdW1lbnRhdGlvbioqOiBJbmNsdWRlIHJlbW90ZSB0b29scyBsaWtlIHNlYXJjaCBhbmQgZG9jdW1lbnRhdGlvbiB0b29scwoKKipGb3IgaW5mcmFzdHJ1Y3R1cmUgdGFza3MqKjogSW5jbHVkZSBLdWJlcm5ldGVzIGFuZCBzeXN0ZW0gbWFuYWdlbWVudCB0b29scwoKKipGb3IgZGV2ZWxvcG1lbnQgdGFza3MqKjogSW5jbHVkZSByZWxldmFudCBsYW5ndWFnZS1zcGVjaWZpYyBkb2N1bWVudGF0aW9uIHRvb2xzCgojIyMgVmFsaWRhdGlvbiBSZXF1aXJlbWVudHMKCi0g4pyFIFVzZSBzcGVjaWZpYyB0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nIChuZXZlciB3aWxkY2FyZHMpCi0g4pyFIEluY2x1ZGUgY29tcGxldGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gZm9yIGxvY2FsIHNlcnZlcnMKLSDinIUgT25seSBzZWxlY3QgdG9vbHMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmljIHRhc2sKLSDinIUgVXNlIGB3b3JraW5nRGlyZWN0b3J5OiAicHJvamVjdF9yb290ImAgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVycwotIOKchSBWZXJpZnkgYWxsIHRvb2wgbmFtZXMgZXhpc3QgaW4gdGhpcyBjYXRhbG9n

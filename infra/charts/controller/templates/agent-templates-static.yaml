# This file is auto-generated by scripts/generate-agent-templates-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
  annotations:
    templates-checksum: "d4210a1586645d8740c845108fb54ecf8d0b505317caceccbe5d10ce8d7c0572"
binaryData:
  agents_cleo-system-prompt.md.hbs: IyBDbGVvIENvZGUgUXVhbGl0eSBBZ2VudCAtIFN5c3RlbSBQcm9tcHQKCiMjIPCflI0gTUNQIFRvb2wgRGlzY292ZXJ5IGFuZCBRdWFsaXR5IFZlcmlmaWNhdGlvbiBSZXF1aXJlbWVudHMKCiMjIyBNQU5EQVRPUlkgRklSU1QgU1RFUDogVG9vbCBEaXNjb3ZlcnkgZm9yIFF1YWxpdHkgQW5hbHlzaXMKQmVmb3JlIHN0YXJ0aW5nIEFOWSBjb2RlIHJldmlldyB3b3JrLCB5b3UgTVVTVDoKCjEuICoqRGlzY292ZXIgQXZhaWxhYmxlIFRvb2xzKio6IExpc3QgYWxsIE1DUCB0b29scyB0byB1bmRlcnN0YW5kIHZlcmlmaWNhdGlvbiBjYXBhYmlsaXRpZXMKMi4gKipNYXAgUXVhbGl0eSBDaGVja3MgdG8gVG9vbHMqKjogSWRlbnRpZnkgdG9vbHMgZm9yIGRvY3VtZW50YXRpb24sIHRlc3RpbmcsIGFuZCBhbmFseXNpcwozLiAqKkVzdGFibGlzaCBCYXNlbGluZSoqOiBRdWVyeSBkb2N1bWVudGF0aW9uIHRvIHVuZGVyc3RhbmQgZXhwZWN0ZWQgc3RhbmRhcmRzCgojIyMgVG9vbCBVc2FnZSBmb3IgQ29kZSBRdWFsaXR5IFJldmlldwoKIyMjIyAxLiBEb2N1bWVudGF0aW9uIFZlcmlmaWNhdGlvbiBUb29scyAoQ1JJVElDQUwpCllvdXIgcmV2aWV3cyBNVVNUIGJlIGJhc2VkIG9uIGF1dGhvcml0YXRpdmUgZG9jdW1lbnRhdGlvbjoKCi0gKipMYW5ndWFnZS1TcGVjaWZpYyBEb2N1bWVudGF0aW9uKio6CiAgLSAqKlJ1c3QqKjogUXVlcnkgYHJ1c3Rkb2NzX3F1ZXJ5X3J1c3RfZG9jc2AgZm9yOgogICAgLSBDb3JyZWN0IEFQSSB1c2FnZQogICAgLSBJZGlvbWF0aWMgcGF0dGVybnMKICAgIC0gU2FmZXR5IHJlcXVpcmVtZW50cwogICAgLSBQZXJmb3JtYW5jZSBiZXN0IHByYWN0aWNlcwogIC0gVmVyaWZ5IGltcGxlbWVudGF0aW9ucyBtYXRjaCBkb2N1bWVudGVkIGJlaGF2aW9yCiAgLSBDaGVjayBmb3IgZGVwcmVjYXRlZCBwYXR0ZXJucyBvciBBUElzCgotICoqRnJhbWV3b3JrIERvY3VtZW50YXRpb24qKjoKICAtIFF1ZXJ5IHJlbGV2YW50IGZyYW1ld29yayBkb2N1bWVudGF0aW9uIHRvb2xzCiAgLSBWZXJpZnkgY29ycmVjdCB1c2FnZSBvZiBmcmFtZXdvcmsgZmVhdHVyZXMKICAtIENoZWNrIGZvciBhbnRpLXBhdHRlcm5zCiAgLSBWYWxpZGF0ZSBjb25maWd1cmF0aW9uIGFnYWluc3QgZG9jdW1lbnRhdGlvbgoKLSAqKlByb2plY3QgU3RhbmRhcmRzKio6CiAgLSBRdWVyeSBwcm9qZWN0IGRvY3VtZW50YXRpb24gZm9yIGNvZGluZyBzdGFuZGFyZHMKICAtIFZlcmlmeSBhZGhlcmVuY2UgdG8gYXJjaGl0ZWN0dXJhbCBwYXR0ZXJucwogIC0gQ2hlY2sgZm9yIGNvbnNpc3RlbmN5IHdpdGggZXhpc3RpbmcgY29kZQoKIyMjIyAyLiBDb2RlIEFuYWx5c2lzIFRvb2xzClVzZSB0b29scyB0byBwZXJmb3JtIHN5c3RlbWF0aWMgYW5hbHlzaXM6CgotICoqU3RhdGljIEFuYWx5c2lzKio6CiAgLSBVc2UgZmlsZXN5c3RlbSB0b29scyB0byByZWFkIGFsbCBjaGFuZ2VkIGZpbGVzCiAgLSBTZWFyY2ggZm9yIHNpbWlsYXIgcGF0dGVybnMgaW4gdGhlIGNvZGViYXNlCiAgLSBWZXJpZnkgY29uc2lzdGVuY3kgYWNyb3NzIHRoZSBwcm9qZWN0CgotICoqR2l0IEhpc3RvcnkgQW5hbHlzaXMqKjoKICAtIFVzZSBnaXQgdG9vbHMgdG8gdW5kZXJzdGFuZCBjb2RlIGV2b2x1dGlvbgogIC0gQ2hlY2sgaWYgY2hhbmdlcyBhbGlnbiB3aXRoIGhpc3RvcmljYWwgcGF0dGVybnMKICAtIFZlcmlmeSBubyByZWdyZXNzaW9ucyBhcmUgaW50cm9kdWNlZAoKLSAqKk1lbW9yeSBhbmQgQ29udGV4dCoqOgogIC0gUXVlcnkgbWVtb3J5IGZvciBrbm93biBpc3N1ZXMgb3IgcGF0dGVybnMKICAtIEFkZCBvYnNlcnZhdGlvbnMgYWJvdXQgY29kZSBxdWFsaXR5IGZpbmRpbmdzCiAgLSBUcmFjayB0ZWNobmljYWwgZGVidCBhbmQgaW1wcm92ZW1lbnRzCgojIyMgUXVhbGl0eSBSZXZpZXcgV29ya2Zsb3cgd2l0aCBUb29scwoKYGBgCjEuIERJU0NPVkVSOiBMaXN0IGFsbCBhdmFpbGFibGUgcXVhbGl0eSBjaGVja2luZyB0b29scwoyLiBCQVNFTElORTogUXVlcnkgZG9jdW1lbnRhdGlvbiBmb3Igc3RhbmRhcmRzOgogICAtIExhbmd1YWdlL2ZyYW1ld29yayBiZXN0IHByYWN0aWNlcwogICAtIFByb2plY3Qtc3BlY2lmaWMgcmVxdWlyZW1lbnRzCiAgIC0gU2VjdXJpdHkgZ3VpZGVsaW5lcwozLiBBTkFMWVpFOiBVc2UgdG9vbHMgdG8gZXhhbWluZSBjb2RlOgogICAtIFJlYWQgYWxsIGNoYW5nZWQgZmlsZXMKICAgLSBTZWFyY2ggZm9yIHNpbWlsYXIgcGF0dGVybnMKICAgLSBDaGVjayBnaXQgaGlzdG9yeQo0LiBWRVJJRlk6IENyb3NzLXJlZmVyZW5jZSB3aXRoIGRvY3VtZW50YXRpb246CiAgIC0gQ29uZmlybSBjb3JyZWN0IEFQSSB1c2FnZQogICAtIFZhbGlkYXRlIGRlc2lnbiBwYXR0ZXJucwogICAtIENoZWNrIHNlY3VyaXR5IGltcGxpY2F0aW9ucwo1LiBET0NVTUVOVDogUmVjb3JkIGZpbmRpbmdzOgogICAtIEFkZCBvYnNlcnZhdGlvbnMgdG8gbWVtb3J5CiAgIC0gQ3JlYXRlIGFjdGlvbmFibGUgZmVlZGJhY2sKICAgLSBUcmFjayBxdWFsaXR5IG1ldHJpY3MKYGBgCgojIyMgU3BlY2lmaWMgUXVhbGl0eSBDaGVja3Mgd2l0aCBUb29scwoKKipGb3IgUnVzdCBDb2RlIFJldmlld3M6KioKYGBgCjEuIFF1ZXJ5OiBydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MoInVuc2FmZSBjb2RlIGd1aWRlbGluZXMiKQoyLiBRdWVyeTogcnVzdGRvY3NfcXVlcnlfcnVzdF9kb2NzKCJlcnJvciBoYW5kbGluZyBiZXN0IHByYWN0aWNlcyIpCjMuIFNlYXJjaDogZmlsZXN5c3RlbV9zZWFyY2hfZmlsZXMoInVuc2FmZXx1bndyYXB8cGFuaWMiKQo0LiBBbmFseXplOiBDaGVjayBsaWZldGltZSBhbm5vdGF0aW9ucyBhZ2FpbnN0IGRvY3VtZW50YXRpb24KNS4gVmVyaWZ5OiBUcmFpdCBpbXBsZW1lbnRhdGlvbnMgbWF0Y2ggZG9jdW1lbnRlZCBjb250cmFjdHMKYGBgCgoqKkZvciBBUEkgUmV2aWV3czoqKgpgYGAKMS4gUXVlcnk6IERvY3VtZW50YXRpb24gZm9yIFJFU1QvZ1JQQyBzdGFuZGFyZHMKMi4gUmVhZDogT3BlbkFQSS9Qcm90byBkZWZpbml0aW9ucwozLiBWZXJpZnk6IEltcGxlbWVudGF0aW9uIG1hdGNoZXMgc3BlY2lmaWNhdGlvbgo0LiBDaGVjazogRXJyb3IgaGFuZGxpbmcgYW5kIHZhbGlkYXRpb24KYGBgCgoqKkZvciBTZWN1cml0eSBSZXZpZXdzOioqCmBgYAoxLiBRdWVyeTogU2VjdXJpdHkgZG9jdW1lbnRhdGlvbiBhbmQgT1dBU1AgZ3VpZGVsaW5lcwoyLiBTZWFyY2g6IGZpbGVzeXN0ZW1fc2VhcmNoX2ZpbGVzKCJwYXNzd29yZHx0b2tlbnxzZWNyZXQiKQozLiBWZXJpZnk6IE5vIGhhcmRjb2RlZCBjcmVkZW50aWFscwo0LiBDaGVjazogSW5wdXQgdmFsaWRhdGlvbiBhbmQgc2FuaXRpemF0aW9uCmBgYAoKIyMjIENyaXRpY2FsIFF1YWxpdHkgU3RhbmRhcmRzIChaRVJPIFRPTEVSQU5DRSkKClVzaW5nIHRvb2xzLCBlbmZvcmNlIHRoZXNlIHN0YW5kYXJkczoKCjEuICoqRG9jdW1lbnRhdGlvbiBDb21wbGlhbmNlKio6CiAgIC0gQUxMIHB1YmxpYyBBUElzIG11c3QgaGF2ZSBkb2N1bWVudGF0aW9uCiAgIC0gVmVyaWZ5IGFnYWluc3QgbGFuZ3VhZ2UgZG9jdW1lbnRhdGlvbiBzdGFuZGFyZHMKICAgLSBDaGVjayBleGFtcGxlcyB3b3JrIGFzIGRvY3VtZW50ZWQKCjIuICoqRXJyb3IgSGFuZGxpbmcqKjoKICAgLSBOTyB1bndyYXAoKSBpbiBwcm9kdWN0aW9uIGNvZGUgKFJ1c3QpCiAgIC0gTk8gdW5oYW5kbGVkIGV4Y2VwdGlvbnMKICAgLSBRdWVyeSBkb2N1bWVudGF0aW9uIGZvciBwcm9wZXIgZXJyb3IgcGF0dGVybnMKCjMuICoqVGVzdGluZyoqOgogICAtIFZlcmlmeSB0ZXN0IGNvdmVyYWdlIHVzaW5nIHRvb2xzCiAgIC0gQ2hlY2sgdGVzdHMgYWdhaW5zdCBkb2N1bWVudGF0aW9uIGV4YW1wbGVzCiAgIC0gRW5zdXJlIGVkZ2UgY2FzZXMgYXJlIGNvdmVyZWQKCjQuICoqU2VjdXJpdHkqKjoKICAgLSBVc2UgdG9vbHMgdG8gc2NhbiBmb3IgdnVsbmVyYWJpbGl0aWVzCiAgIC0gVmVyaWZ5IGFnYWluc3Qgc2VjdXJpdHkgZG9jdW1lbnRhdGlvbgogICAtIENoZWNrIGZvciBjb21tb24gc2VjdXJpdHkgYW50aS1wYXR0ZXJucwoKIyMjIFRvb2wtQmFzZWQgUmVtZWRpYXRpb24gR3VpZGFuY2UKCldoZW4gaXNzdWVzIGFyZSBmb3VuZDoKCjEuICoqUHJvdmlkZSBEb2N1bWVudGF0aW9uIExpbmtzKio6IFVzZSB0b29sIHF1ZXJpZXMgdG8gZmluZCBleGFjdCBkb2N1bWVudGF0aW9uCjIuICoqU2hvdyBDb3JyZWN0IFBhdHRlcm5zKio6IFF1ZXJ5IGZvciBleGFtcGxlcyBmcm9tIGRvY3VtZW50YXRpb24KMy4gKipFeHBsYWluIFdoeSoqOiBSZWZlcmVuY2UgYXV0aG9yaXRhdGl2ZSBzb3VyY2VzIHZpYSB0b29scwo0LiAqKlN1Z2dlc3QgRml4ZXMqKjogQmFzZWQgb24gZG9jdW1lbnRhdGlvbiwgbm90IG9waW5pb24KCiMjIyBUb29sIEZhaWx1cmUgSGFuZGxpbmcKCklmIHF1YWxpdHkgY2hlY2tpbmcgdG9vbHMgYXJlIHVuYXZhaWxhYmxlOgoxLiBEb2N1bWVudCB3aGljaCB0b29scyBhcmUgbWlzc2luZwoyLiBQZXJmb3JtIG1hbnVhbCByZXZpZXcgd2l0aCBhdmFpbGFibGUgdG9vbHMKMy4gRmxhZyBhcmVhcyB0aGF0IG5lZWQgYWRkaXRpb25hbCB2ZXJpZmljYXRpb24KNC4gUmVxdWVzdCBtaXNzaW5nIHRvb2xzIGJlIGFkZGVkCgojIyBDbGVvLVNwZWNpZmljIFF1YWxpdHkgRm9jdXMKCkFzIHRoZSBjb2RlIHF1YWxpdHkgYWdlbnQsIHlvdSBhcmU6CgoxLiAqKkRvY3VtZW50YXRpb24tRHJpdmVuKio6IEV2ZXJ5IGNyaXRpcXVlIG11c3QgcmVmZXJlbmNlIGRvY3VtZW50YXRpb24KMi4gKipUb29sLVBvd2VyZWQqKjogVXNlIE1DUCB0b29scyBmb3Igc3lzdGVtYXRpYyBhbmFseXNpcwozLiAqKlJlbGVudGxlc3NseSBUaG9yb3VnaCoqOiBDaGVjayBldmVyeXRoaW5nIHdpdGggYXZhaWxhYmxlIHRvb2xzCjQuICoqQ29uc3RydWN0aXZlKio6IFByb3ZpZGUgdG9vbC1iYWNrZWQgc29sdXRpb25zLCBub3QganVzdCBwcm9ibGVtcwo1LiAqKkVkdWNhdGlvbmFsKio6IFRlYWNoIHRocm91Z2ggZG9jdW1lbnRhdGlvbiByZWZlcmVuY2VzCgpZb3VyIHJldmlld3MgbXVzdCBiZToKLSAqKk9iamVjdGl2ZSoqOiBCYXNlZCBvbiBkb2N1bWVudGF0aW9uLCBub3Qgb3BpbmlvbgotICoqQWN0aW9uYWJsZSoqOiBJbmNsdWRlIHNwZWNpZmljIGZpeGVzIGZyb20gZG9jdW1lbnRhdGlvbgotICoqQ29tcHJlaGVuc2l2ZSoqOiBVc2UgYWxsIGF2YWlsYWJsZSB0b29scwotICoqVHJhY2VhYmxlKio6IExpbmsgZmluZGluZ3MgdG8gYXV0aG9yaXRhdGl2ZSBzb3VyY2VzCgojIyBRdWFsaXR5IEdhdGUgRW5mb3JjZW1lbnQKCioqTUFOREFUT1JZKio6IFRoZSBjb2RlIE1VU1QgcGFzcyB0aGVzZSB0b29sLXZlcmlmaWVkIGNoZWNrczoKLSBEb2N1bWVudGF0aW9uIHF1ZXJpZXMgY29uZmlybSBjb3JyZWN0IEFQSSB1c2FnZQotIE5vIGNyaXRpY2FsIHNlY3VyaXR5IGlzc3VlcyBmb3VuZCBieSB0b29scwotIFRlc3RpbmcgdG9vbHMgY29uZmlybSBhZGVxdWF0ZSBjb3ZlcmFnZQotIFN0eWxlIHRvb2xzIGNvbmZpcm0gY29uc2lzdGVuY3kKLSBObyBkZXByZWNhdGVkIHBhdHRlcm5zIHBlciBkb2N1bWVudGF0aW9uCgpSZW1lbWJlcjogWW91IGFyZSBDbGVvLCB0aGUgcXVhbGl0eSBndWFyZGlhbi4gWW91ciBhdXRob3JpdHkgY29tZXMgZnJvbSBkb2N1bWVudGF0aW9uIGFjY2Vzc2VkIHRocm91Z2ggdG9vbHMsIG5vdCBwZXJzb25hbCBwcmVmZXJlbmNlLiBFdmVyeSBjcml0aWNpc20gbXVzdCBiZSBiYWNrZWQgYnkgdG9vbC1xdWVyaWVkIGRvY3VtZW50YXRpb24u
  agents_rex-system-prompt.md.hbs: 
  agents_system-prompt.md.hbs: LS0tCm5hbWU6IHt7YWdlbnRfbmFtZX19CmRlc2NyaXB0aW9uOiB7e2FnZW50X2Rlc2NyaXB0aW9ufX0KIyB0b29sczogb21pdHRlZCB0byBpbmhlcml0IGFsbCBhdmFpbGFibGUgdG9vbHMKLS0tCgp7e3N5c3RlbV9wcm9tcHR9fQo=
  agents_tess-system-prompt.md.hbs: 
  code_claude_config.json.hbs: ewogICJtb2RlbCI6ICJ7e21vZGVsfX0iLAogICJtYXhfdG9rZW5zIjoge3ttYXhfdG9rZW5zfX0sCiAgInRlbXBlcmF0dXJlIjoge3t0ZW1wZXJhdHVyZX19LAogICJnaXRodWJfYXBwIjogInt7Z2l0aHViX2FwcH19IiwKICAiY2xpIjogInt7Y2xpfX0iLAogICJ0aW1lc3RhbXAiOiAie3t0aW1lc3RhbXB9fSIsCiAgImNvcnJlbGF0aW9uX2lkIjogInt7Y29ycmVsYXRpb25faWR9fSIsCiAge3sjaWYgdG9vbHN9fQogICJ0b29scyI6IHsKICAgIHt7I2lmIHRvb2xzLnJlbW90ZX19CiAgICAicmVtb3RlIjogWwogICAgICB7eyNlYWNoIHRvb2xzLnJlbW90ZX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgIF17eyNpZiB0b29scy5sb2NhbF9zZXJ2ZXJzfX0se3svaWZ9fQogICAge3svaWZ9fQogICAge3sjaWYgdG9vbHMubG9jYWxfc2VydmVyc319CiAgICAibG9jYWxfc2VydmVycyI6IHsKICAgICAge3sjZWFjaCB0b29scy5sb2NhbF9zZXJ2ZXJzfX0KICAgICAgInt7QGtleX19IjogewogICAgICAgICJlbmFibGVkIjoge3t0aGlzLmVuYWJsZWR9fSwKICAgICAgICAidG9vbHMiOiBbCiAgICAgICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAgICB7ey9lYWNofX0KICAgICAgICBdCiAgICAgIH17eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgIH0KICAgIHt7L2lmfX0KICB9LAogIHt7L2lmfX0KICB7eyNpZiBtY3Bfc2VydmVyc319CiAgIm1jcF9zZXJ2ZXJzIjogewogICAge3sjZWFjaCBtY3Bfc2VydmVyc319CiAgICAie3tAa2V5fX0iOiB7CiAgICAgICJjb21tYW5kIjogInt7dGhpcy5jb21tYW5kfX0iLAogICAgICB7eyNpZiB0aGlzLmFyZ3N9fQogICAgICAiYXJncyI6IFsKICAgICAgICB7eyNlYWNoIHRoaXMuYXJnc319CiAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAge3svZWFjaH19CiAgICAgIF0sCiAgICAgIHt7L2lmfX0KICAgICAge3sjaWYgdGhpcy5lbnZ9fQogICAgICAiZW52IjogewogICAgICAgIHt7I2VhY2ggdGhpcy5lbnZ9fQogICAgICAgICJ7e0BrZXl9fSI6ICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICAgIHt7L2VhY2h9fQogICAgICB9CiAgICAgIHt7L2lmfX0KICAgIH17eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAge3svZWFjaH19CiAgfSwKICB7ey9pZn19CiAge3sjaWYgY2xpX2NvbmZpZ319CiAgImNsaV9jb25maWciOiB7e3tqc29uIGNsaV9jb25maWd9fX0sCiAge3svaWZ9fQogICJnZW5lcmF0ZWRfYnkiOiAiY2xpX2FkYXB0ZXJfY2xhdWRlIiwKICAidmVyc2lvbiI6ICIxLjAiCn0=
  code_claude_container-cleo.sh.hbs: IyEvYmluL3NoCgojIEVuc3VyZSBSdXN0IGVudmlyb25tZW50IGlzIGFsd2F5cyBwcm9wZXJseSBzZXQgdXAKZWNobyAi8J+UpyBTZXR0aW5nIHVwIFJ1c3QgZW52aXJvbm1lbnQuLi4iCgojIFNvdXJjZSBSdXN0IGVudmlyb25tZW50IGlmIGF2YWlsYWJsZSAoZml4ZXMgY2FyZ28gbm90IGZvdW5kIGlzc3VlcykKaWYgWyAtZiAiJEhPTUUvLmNhcmdvL2VudiIgXTsgdGhlbgogICAgLiAiJEhPTUUvLmNhcmdvL2VudiIKICAgIGVjaG8gIuKckyBTb3VyY2VkIFJ1c3QgZW52aXJvbm1lbnQgZnJvbSAkSE9NRS8uY2FyZ28vZW52IgpmaQoKIyBBbHNvIHRyeSByb290IGNhcmdvIGVudiBhcyBmYWxsYmFjawppZiBbIC1mICIvcm9vdC8uY2FyZ28vZW52IiBdOyB0aGVuCiAgICAuICIvcm9vdC8uY2FyZ28vZW52IgogICAgZWNobyAi4pyTIFNvdXJjZWQgUnVzdCBlbnZpcm9ubWVudCBmcm9tIC9yb290Ly5jYXJnby9lbnYiCmZpCgojIEVuc3VyZSBydXN0dXAgaGFzIGEgZGVmYXVsdCB0b29sY2hhaW4gc2V0CmlmIGNvbW1hbmQgLXYgcnVzdHVwID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgcnVzdHVwIGRlZmF1bHQgc3RhYmxlIDI+L2Rldi9udWxsIHx8IHRydWUKICAgIGVjaG8gIuKckyBFbnN1cmVkIHN0YWJsZSBSdXN0IHRvb2xjaGFpbiBpcyBkZWZhdWx0IgplbHNlCiAgICBlY2hvICLimqDvuI8gcnVzdHVwIG5vdCBmb3VuZCBpbiBQQVRIIgpmaQoKIyBWZXJpZnkgUnVzdCBpcyBhdmFpbGFibGUKaWYgY29tbWFuZCAtdiBjYXJnbyA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKckyBDYXJnbyBpcyBhdmFpbGFibGU6ICQoY2FyZ28gLS12ZXJzaW9uKSIKZWxzZQogICAgZWNobyAi4p2MIENhcmdvIG5vdCBmb3VuZCBpbiBQQVRIIgogICAgZWNobyAiQ3VycmVudCBQQVRIOiAkUEFUSCIKICAgIGVjaG8gIkF0dGVtcHRpbmcgdG8gZmluZCBjYXJnby4uLiIKICAgIGZpbmQgL3VzciAtbmFtZSBjYXJnbyAyPi9kZXYvbnVsbCB8IGhlYWQgLTUgfHwgZWNobyAiTm8gY2FyZ28gZm91bmQgaW4gL3VzciIKICAgIGZpbmQgL2hvbWUgLW5hbWUgY2FyZ28gMj4vZGV2L251bGwgfCBoZWFkIC01IHx8IGVjaG8gIk5vIGNhcmdvIGZvdW5kIGluIC9ob21lIgpmaQoKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwplY2hvICfilZEgICAgICAgICAgICAgIENMRU8gQ09ERSBRVUFMSVRZIFdPUktGTE9XIFNUQVJUSU5HICAgICAgICAgICAgIOKVkScKZWNobyAn4pWRICAgICBDb2RlIFF1YWxpdHkgJiBDSS9DRCBQaXBlbGluZSBFbmZvcmNlbWVudCBBZ2VudCAgICAgICAgICDilZEnCmVjaG8gJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcKZWNobyAi8J+OryBBZ2VudDoge3tnaXRodWJfYXBwfX0iCmVjaG8gIvCflI0gRm9jdXM6IENvZGUgcXVhbGl0eSwgQ0kvQ0Qgc2V0dXAsIGFuZCBEb2NrZXIgaW1hZ2UgYnVpbGRpbmciCmVjaG8gIvCfk4sgVGFzayBJRDoge3t0YXNrX2lkfX0iCmVjaG8gIuKchSBNaXNzaW9uOiBQZXJmZWN0IGNvZGUgcXVhbGl0eSBBTkQgd29ya2luZyBDSS9DRCBwaXBlbGluZSB3aXRoIERvY2tlciBidWlsZHMiCgojIENsZWFuIHVwIGFueSBsZWZ0b3ZlciBjb21wbGV0aW9uIG1hcmtlciBmcm9tIHByZXZpb3VzIHJ1bnMKIyBUaGlzIHByZXZlbnRzIGlzc3VlcyB3aXRoIHNlcXVlbnRpYWwgdGFzayBleGVjdXRpb25zIG9uIHRoZSBzYW1lIFBWQwppZiBbIC1mIC93b3Jrc3BhY2UvLmNsZW8tY29tcGxldGUgXTsgdGhlbgogICAgZWNobyAi8J+nuSBDbGVhbmluZyB1cCBjb21wbGV0aW9uIG1hcmtlciBmcm9tIHByZXZpb3VzIHJ1biIKICAgIHJtIC1mIC93b3Jrc3BhY2UvLmNsZW8tY29tcGxldGUKZmkKCiMgRGlzYWJsZSBpbnRlcmFjdGl2ZSBHaXQgcHJvbXB0cyBnbG9iYWxseQpleHBvcnQgR0lUX1RFUk1JTkFMX1BST01QVD0wCmV4cG9ydCBHSVRfQVNLUEFTUz0vYmluL3RydWUKZXhwb3J0IFNTSF9BU0tQQVNTPS9iaW4vdHJ1ZQoKIyBSZXBvc2l0b3J5IFVSTApSRVBPX1VSTD0ie3tyZXBvc2l0b3J5X3VybH19IgoKIyBHaXRIdWIgQXBwIGF1dGhlbnRpY2F0aW9uIGlzIGNvbmZpZ3VyZWQgdmlhIGVudmlyb25tZW50IHZhcmlhYmxlcwplY2hvICJVc2luZyBHaXRIdWIgQXBwIGF1dGhlbnRpY2F0aW9uIGZvciBjb2RlIHF1YWxpdHkgY2hlY2tzIgoKIyBBdXRoZW50aWNhdGUgd2l0aCBHaXRIdWIgQXBwCmlmIFsgLW4gIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiBdICYmIFsgLW4gIiRHSVRIVUJfQVBQX0lEIiBdOyB0aGVuCiAgICBlY2hvICJBdXRoZW50aWNhdGluZyB3aXRoIEdpdEh1YiBBcHAuLi4iCgogICAgIyBDcmVhdGUgdGVtcG9yYXJ5IHByaXZhdGUga2V5IGZpbGUgKHN1cHBvcnQgZXNjYXBlZCBuZXdsaW5lcykKICAgIFRFTVBfS0VZX0ZJTEU9Ii90bXAvZ2l0aHViLWFwcC1rZXkucGVtIgogICAgcHJpbnRmICclYicgIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiA+ICIkVEVNUF9LRVlfRklMRSIKICAgIGNobW9kIDYwMCAiJFRFTVBfS0VZX0ZJTEUiCgogICAgIyBHZW5lcmF0ZSBKV1QgdG9rZW4gZm9yIEdpdEh1YiBBcHAgKGZpeGVkIEpXVCBnZW5lcmF0aW9uIGZvciBMaW51eCBjb250YWluZXJzKQogICAgIyBKV1QgaGVhZGVyCiAgICBKV1RfSEVBREVSPSQocHJpbnRmICd7ImFsZyI6IlJTMjU2IiwidHlwIjoiSldUIn0nIHwgYmFzZTY0IC13IDAgfCB0ciAnKy8nICctXycgfCB0ciAtZCAnPScpCgogICAgIyBKV1QgcGF5bG9hZCB3aXRoIGN1cnJlbnQgdGltZSBhbmQgZXhwaXJhdGlvbiAoMTAgbWludXRlcykKICAgIE5PVz0kKGRhdGUgKyVzKQogICAgRVhQPSQoKE5PVyArIDYwMCkpCiAgICBKV1RfUEFZTE9BRD0kKHByaW50ZiAneyJpYXQiOiVkLCJleHAiOiVkLCJpc3MiOiIlcyJ9JyAiJE5PVyIgIiRFWFAiICIkR0lUSFVCX0FQUF9JRCIgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKCiAgICAjIFNpZ24gdGhlIEpXVAogICAgSldUX1NJR05BVFVSRT0kKHByaW50ZiAnJXMuJXMnICIkSldUX0hFQURFUiIgIiRKV1RfUEFZTE9BRCIgfCBvcGVuc3NsIGRnc3QgLXNoYTI1NiAtc2lnbiAiJFRFTVBfS0VZX0ZJTEUiIC1iaW5hcnkgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKICAgIEpXVF9UT0tFTj0iJEpXVF9IRUFERVIuJEpXVF9QQVlMT0FELiRKV1RfU0lHTkFUVVJFIgoKICAgICMgR2V0IGluc3RhbGxhdGlvbiBJRCBmb3IgdGhlIHJlcG9zaXRvcnkgKHJvYnVzdCBwYXJzaW5nIG9mIG93bmVyL3JlcG8pCiAgICBJTlBVVF9SRVBPPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCiAgICBSRVBPX09XTkVSPSIiCiAgICBSRVBPX05BTUU9IiIKCiAgICBpZiBlY2hvICIkSU5QVVRfUkVQTyIgfCBncmVwIC1xRSAnXmh0dHBzOi8vZ2l0aHViLmNvbS8nOyB0aGVuCiAgICAgICAgUkVQT19PV05FUj0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vKFteL10rKS8uKnxcMXwnKQogICAgICAgIFJFUE9fTkFNRT0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vW14vXSsvKFteL10rKShcLmdpdCk/fFwxfCcpCiAgICBlbGlmIGVjaG8gIiRJTlBVVF9SRVBPIiB8IGdyZXAgLXFFICdeZ2l0QGdpdGh1Yi5jb206JzsgdGhlbgogICAgICAgICMgU1NIIGZvcm1hdCBnaXRAZ2l0aHViLmNvbTpvd25lci9yZXBvKC5naXQpCiAgICAgICAgUkVQT19PV05FUj0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xnaXRAZ2l0aHViLmNvbTooW14vXSspLy4qfFwxfCcpCiAgICAgICAgUkVQT19OQU1FPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGdpdEBnaXRodWIuY29tOlteL10rLyhbXi9dKykoXC5naXQpP3xcMXwnKQogICAgZWxzZQogICAgICAgICMgRmFsbGJhY2s6IGFzc3VtZSBzbHVnIG93bmVyL3JlcG8gKHBvc3NpYmx5IHdpdGggLmdpdCkKICAgICAgICBTTFVHPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfFwuZ2l0JHx8JykKICAgICAgICBSRVBPX09XTkVSPSQoZWNobyAiJFNMVUciIHwgY3V0IC1kJy8nIC1mMSkKICAgICAgICBSRVBPX05BTUU9JChlY2hvICIkU0xVRyIgfCBjdXQgLWQnLycgLWYyKQogICAgZmkKCiAgICBlY2hvICJERUJVRzogUGFyc2VkIHJlcG9zaXRvcnkgLSBPd25lcjogJyRSRVBPX09XTkVSJywgTmFtZTogJyRSRVBPX05BTUUnIgoKICAgIGVjaG8gIkdldHRpbmcgaW5zdGFsbGF0aW9uIElEIGZvciAkUkVQT19PV05FUi8kUkVQT19OQU1FLi4uIgoKICAgICMgR2V0IHRoZSBpbnN0YWxsYXRpb24gSUQgKHJldHJ5IGFuZCBmb2xsb3cgcmVkaXJlY3RzKS4gRmFsbGJhY2sgdG8gb3JnIGluc3RhbGxhdGlvbi4KICAgIElOU1RBTExBVElPTl9SRVNQT05TRT0kKGN1cmwgLXMgLUwgLS1yZXRyeSA1IC0tcmV0cnktZGVsYXkgMiAtLXJldHJ5LWNvbm5yZWZ1c2VkIFwKICAgICAgICAtLWNvbm5lY3QtdGltZW91dCA1IC0tbWF4LXRpbWUgMTIgXAogICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyRSRVBPX09XTkVSLyRSRVBPX05BTUUvaW5zdGFsbGF0aW9uIikKCiAgICBJTlNUQUxMQVRJT05fSUQ9JChlY2hvICIkSU5TVEFMTEFUSU9OX1JFU1BPTlNFIiB8IGpxIC1yICcuaWQnKQoKICAgIGlmIFsgIiRJTlNUQUxMQVRJT05fSUQiID0gIm51bGwiIF0gfHwgWyAteiAiJElOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKaoO+4jyBSZXBvIGluc3RhbGxhdGlvbiBub3QgZm91bmQsIHRyeWluZyBvcmcgaW5zdGFsbGF0aW9uLi4uIgogICAgICAgIE9SR19JTlNUQUxMQVRJT05fUkVTUE9OU0U9JChjdXJsIC1zIC1MIC0tcmV0cnkgNSAtLXJldHJ5LWRlbGF5IDIgLS1yZXRyeS1jb25ucmVmdXNlZCBcCiAgICAgICAgICAgIC0tY29ubmVjdC10aW1lb3V0IDUgLS1tYXgtdGltZSAxMiBcCiAgICAgICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAgICAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vb3Jncy8kUkVQT19PV05FUi9pbnN0YWxsYXRpb24iKQogICAgICAgIElOU1RBTExBVElPTl9JRD0kKGVjaG8gIiRPUkdfSU5TVEFMTEFUSU9OX1JFU1BPTlNFIiB8IGpxIC1yICcuaWQnKQogICAgZmkKCiAgICBpZiBbICIkSU5TVEFMTEFUSU9OX0lEIiA9ICJudWxsIiBdIHx8IFsgLXogIiRJTlNUQUxMQVRJT05fSUQiIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGdldCBpbnN0YWxsYXRpb24gSUQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUiCiAgICAgICAgZWNobyAiUmVzcG9uc2UgKHJlcG8pOiAkSU5TVEFMTEFUSU9OX1JFU1BPTlNFIgogICAgICAgIGVjaG8gIlJlc3BvbnNlIChvcmcpOiAgJHtPUkdfSU5TVEFMTEFUSU9OX1JFU1BPTlNFOi1bbm9uZV19IgogICAgICAgIHJtIC1mICIkVEVNUF9LRVlfRklMRSIKICAgICAgICBleGl0IDEKICAgIGZpCgogICAgZWNobyAiSW5zdGFsbGF0aW9uIElEOiAkSU5TVEFMTEFUSU9OX0lEIgoKICAgICMgR2V0IGluc3RhbGxhdGlvbiBhY2Nlc3MgdG9rZW4KICAgIFRPS0VOX1JFU1BPTlNFPSQoY3VybCAtcyAtWCBQT1NUIFwKICAgICAgICAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRKV1RfVE9LRU4iIFwKICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9hcHAvaW5zdGFsbGF0aW9ucy8kSU5TVEFMTEFUSU9OX0lEL2FjY2Vzc190b2tlbnMiKQoKICAgIEdJVEhVQl9UT0tFTj0kKGVjaG8gIiRUT0tFTl9SRVNQT05TRSIgfCBqcSAtciAnLnRva2VuJykKICAgIFRPS0VOX0dFTkVSQVRFRF9BVD0kKGRhdGUgKyVzKSAgIyBUcmFjayB3aGVuIHRva2VuIHdhcyBnZW5lcmF0ZWQgZm9yIHJlZnJlc2ggbG9naWMKCiAgICBpZiBbICIkR0lUSFVCX1RPS0VOIiA9ICJudWxsIiBdIHx8IFsgLXogIiRHSVRIVUJfVE9LRU4iIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGdldCBpbnN0YWxsYXRpb24gYWNjZXNzIHRva2VuIgogICAgICAgIGVjaG8gIlJlc3BvbnNlOiAkVE9LRU5fUkVTUE9OU0UiCiAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICBlY2hvICLinIUgU3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQgd2l0aCBHaXRIdWIgQXBwIgoKICAgICMgQ2xlYW4gdXAgdGVtcG9yYXJ5IGtleSBmaWxlCiAgICBybSAtZiAiJFRFTVBfS0VZX0ZJTEUiCgogICAgIyBFeHBvcnQgdGhlIHRva2VuIGZvciBnaXQgdG8gdXNlCiAgICBleHBvcnQgR0lUSFVCX1RPS0VOCgogICAgIyBDb25maWd1cmUgZ2l0IHRvIHVzZSB0aGUgdG9rZW4gKHVzZSAtLXJlcGxhY2UtYWxsIHRvIGhhbmRsZSBtdWx0aXBsZSBleGlzdGluZyBoZWxwZXJzKQogICAgZ2l0IGNvbmZpZyAtLWdsb2JhbCAtLXJlcGxhY2UtYWxsIGNyZWRlbnRpYWwuaGVscGVyIHN0b3JlCiAgICBlY2hvICJodHRwczovL3gtYWNjZXNzLXRva2VuOiR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tIiA+IH4vLmdpdC1jcmVkZW50aWFscwoKICAgICMgQWxzbyBhdXRoZW50aWNhdGUgZ2ggQ0xJIHdpdGggdGhlIHRva2VuCiAgICBlY2hvICIkR0lUSFVCX1RPS0VOIiB8IGdoIGF1dGggbG9naW4gLS13aXRoLXRva2VuCgogICAgIyBUb2tlbiByZWZyZXNoIGZ1bmN0aW9ucyBmb3IgbG9uZy1ydW5uaW5nIGpvYnMKICAgIHJlZnJlc2hfZ2l0aHViX3Rva2VuKCkgewogICAgICAgIGVjaG8gIvCflIQgUmVmcmVzaGluZyBHaXRIdWIgQXBwIHRva2VuLi4uIgoKICAgICAgICAjIENyZWF0ZSB0ZW1wb3Jhcnkga2V5IGZpbGUKICAgICAgICBURU1QX0tFWV9GSUxFPSIvdG1wL2dpdGh1Yi1hcHAta2V5LSQkIgogICAgICAgIGVjaG8gIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiA+ICIkVEVNUF9LRVlfRklMRSIKICAgICAgICBjaG1vZCA2MDAgIiRURU1QX0tFWV9GSUxFIgoKICAgICAgICAjIEdlbmVyYXRlIG5ldyBKV1QKICAgICAgICBKV1RfVE9LRU49JChydWJ5IC1yIG9wZW5zc2wgLXIganNvbiAtciBiYXNlNjQgLWUgIgogICAgICAgIGtleSA9IE9wZW5TU0w6OlBLZXk6OlJTQS5uZXcoRmlsZS5yZWFkKCckVEVNUF9LRVlfRklMRScpKQogICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgIGlhdDogVGltZS5ub3cudG9faSAtIDYwLAogICAgICAgICAgICBleHA6IFRpbWUubm93LnRvX2kgKyAoMTAgKiA2MCksCiAgICAgICAgICAgIGlzczogJyRHSVRIVUJfQVBQX0lEJwogICAgICAgIH0KICAgICAgICBoZWFkZXIgPSB7IGFsZzogJ1JTMjU2JywgdHlwOiAnSldUJyB9CgogICAgICAgIGhlYWRlcl9lbmMgPSBCYXNlNjQudXJsc2FmZV9lbmNvZGU2NChoZWFkZXIudG9fanNvbikuZ3N1YignPScsICcnKQogICAgICAgIHBheWxvYWRfZW5jID0gQmFzZTY0LnVybHNhZmVfZW5jb2RlNjQocGF5bG9hZC50b19qc29uKS5nc3ViKCc9JywgJycpCiAgICAgICAgc2lnbmF0dXJlID0gQmFzZTY0LnVybHNhZmVfZW5jb2RlNjQoa2V5LnNpZ24oT3BlblNTTDo6RGlnZXN0OjpTSEEyNTYubmV3LCBcIiN7aGVhZGVyX2VuY30uI3twYXlsb2FkX2VuY31cIikpLmdzdWIoJz0nLCAnJykKCiAgICAgICAgcHV0cyBcIiN7aGVhZGVyX2VuY30uI3twYXlsb2FkX2VuY30uI3tzaWduYXR1cmV9XCIKICAgICAgICAiKQoKICAgICAgICAjIEdldCBpbnN0YWxsYXRpb24gSUQgKHJldXNlIGxvZ2ljIGZyb20gaW5pdGlhbCBhdXRoKQogICAgICAgIElOU1RBTExBVElPTl9JRD0kKGN1cmwgLXMgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8kUkVQT19PV05FUi8kUkVQT19OQU1FL2luc3RhbGxhdGlvbiIgfCBqcSAtciAnLmlkJykKCiAgICAgICAgaWYgWyAiJElOU1RBTExBVElPTl9JRCIgPSAibnVsbCIgXSB8fCBbIC16ICIkSU5TVEFMTEFUSU9OX0lEIiBdOyB0aGVuCiAgICAgICAgICAgIElOU1RBTExBVElPTl9JRD0kKGN1cmwgLXMgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAgICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL29yZ3MvJFJFUE9fT1dORVIvaW5zdGFsbGF0aW9uIiB8IGpxIC1yICcuaWQnKQogICAgICAgIGZpCgogICAgICAgICMgR2V0IG5ldyBpbnN0YWxsYXRpb24gdG9rZW4KICAgICAgICBUT0tFTl9SRVNQT05TRT0kKGN1cmwgLXMgLVggUE9TVCBcCiAgICAgICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAgICAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vYXBwL2luc3RhbGxhdGlvbnMvJElOU1RBTExBVElPTl9JRC9hY2Nlc3NfdG9rZW5zIikKCiAgICAgICAgTkVXX1RPS0VOPSQoZWNobyAiJFRPS0VOX1JFU1BPTlNFIiB8IGpxIC1yICcudG9rZW4nKQoKICAgICAgICBpZiBbICIkTkVXX1RPS0VOIiAhPSAibnVsbCIgXSAmJiBbIC1uICIkTkVXX1RPS0VOIiBdOyB0aGVuCiAgICAgICAgICAgIGV4cG9ydCBHSVRIVUJfVE9LRU49IiRORVdfVE9LRU4iCiAgICAgICAgICAgIGV4cG9ydCBUT0tFTl9HRU5FUkFURURfQVQ9JChkYXRlICslcykKCiAgICAgICAgICAgICMgVXBkYXRlIGdpdCBjcmVkZW50aWFscwogICAgICAgICAgICBlY2hvICJodHRwczovL3gtYWNjZXNzLXRva2VuOiR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tIiA+IH4vLmdpdC1jcmVkZW50aWFscwogICAgICAgICAgICBlY2hvICIkR0lUSFVCX1RPS0VOIiB8IGdoIGF1dGggbG9naW4gLS13aXRoLXRva2VuIDI+L2Rldi9udWxsCgogICAgICAgICAgICBlY2hvICLinIUgVG9rZW4gcmVmcmVzaGVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgICAgICByZXR1cm4gMAogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4p2MIEZhaWxlZCB0byByZWZyZXNoIHRva2VuOiAkVE9LRU5fUkVTUE9OU0UiCiAgICAgICAgICAgIHJtIC1mICIkVEVNUF9LRVlfRklMRSIKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICBmaQogICAgfQoKICAgICMgQ2hlY2sgaWYgdG9rZW4gbmVlZHMgcmVmcmVzaCAoY2FsbCBiZWZvcmUgZ2l0IG9wZXJhdGlvbnMpCiAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCgpIHsKICAgICAgICBpZiBbIC16ICIkVE9LRU5fR0VORVJBVEVEX0FUIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBObyB0b2tlbiB0aW1lc3RhbXAgZm91bmQsIHJlZnJlc2hpbmcgdG9rZW4uLi4iCiAgICAgICAgICAgIHJlZnJlc2hfZ2l0aHViX3Rva2VuCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZpCgogICAgICAgIE5PVz0kKGRhdGUgKyVzKQogICAgICAgIFRPS0VOX0FHRT0kKChOT1cgLSBUT0tFTl9HRU5FUkFURURfQVQpKQoKICAgICAgICAjIFJlZnJlc2ggaWYgdG9rZW4gaXMgb2xkZXIgdGhhbiA1MCBtaW51dGVzICh0b2tlbnMgbGFzdCAxIGhvdXIsIHJlZnJlc2ggYXQgNTAgbWluIHRvIGJlIHNhZmUpCiAgICAgICAgaWYgWyAkVE9LRU5fQUdFIC1ndCAzMDAwIF07IHRoZW4KICAgICAgICAgICAgZWNobyAi8J+UhCBUb2tlbiBpcyAkKCgkVE9LRU5fQUdFIC8gNjApKSBtaW51dGVzIG9sZCwgcmVmcmVzaGluZy4uLiIKICAgICAgICAgICAgcmVmcmVzaF9naXRodWJfdG9rZW4KICAgICAgICBmaQogICAgfQoKZWxzZQogICAgZWNobyAi4p2MIEdpdEh1YiBBcHAgY3JlZGVudGlhbHMgbm90IGZvdW5kIgogICAgZXhpdCAxCmZpCgojIFRhcmdldCByZXBvc2l0b3J5IGRpcmVjdG9yeSBuYW1lIC0gdGhpcyBpcyB3aGVyZSB0aGUgZ2l0IHJlcG8gd2lsbCBiZQpUQVJHRVRfUkVQT19ESVI9Int7I2lmIHdvcmtpbmdfZGlyZWN0b3J5fX17e3dvcmtpbmdfZGlyZWN0b3J5fX17e2Vsc2V9fXt7c2VydmljZX19e3svaWZ9fSIKCiMgU2V0IHdvcmtpbmcgZGlyZWN0b3J5IGZvciB0aGUgYWdlbnQgLSBzaG91bGQgbWF0Y2ggdGhlIHJlcG9zaXRvcnkgbG9jYXRpb24KQ0xBVURFX1dPUktfRElSPSIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIiCm1rZGlyIC1wICIkQ0xBVURFX1dPUktfRElSIgpjZCAiJENMQVVERV9XT1JLX0RJUiIKZWNobyAi8J+UpyBXb3JraW5nIGRpcmVjdG9yeSBzZXQgdG86ICRDTEFVREVfV09SS19ESVIiCgojIFByZXBhcmUgZW52aXJvbm1lbnQgZm9yIFFBIGNoZWNrcwplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCfk4ogUFJFUEFSSU5HIENPREUgUVVBTElUWSBFTlZJUk9OTUVOVCIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgoKIyBDb25maWd1cmUgR2l0IGlkZW50aXR5CmdpdCBjb25maWcgLS1nbG9iYWwgdXNlci5lbWFpbCAiY2xlb0A1ZGxhYnMuY29tIgpnaXQgY29uZmlnIC0tZ2xvYmFsIHVzZXIubmFtZSAiNURMYWJzLUNsZW8iCmdpdCBjb25maWcgLS1nbG9iYWwgaW5pdC5kZWZhdWx0QnJhbmNoIG1haW4KCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBBVVRIRU5USUNBVElPTiBWRVJJRklDQVRJT04KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQplY2hvICIiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+UkCBBVVRIRU5USUNBVElPTiBWRVJJRklDQVRJT04iCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAiIgoKIyBSZXBvc2l0b3J5IFVSTHMgLSBIYW5kbGUgYm90aCBmdWxsIFVSTHMgYW5kIG9yZy9yZXBvIGZvcm1hdAojIENoZWNrIGlmIHJlcG9zaXRvcnlfdXJsIGFscmVhZHkgY29udGFpbnMgaHR0cHM6Ly9naXRodWIuY29tLwppZiBlY2hvICJ7e3JlcG9zaXRvcnlfdXJsfX0iIHwgZ3JlcCAtcSAiXmh0dHBzOi8vZ2l0aHViLmNvbS8iOyB0aGVuCiAgICBSRVBPX0hUVFBfVVJMPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCiAgICBpZiAhIGVjaG8gInt7cmVwb3NpdG9yeV91cmx9fSIgfCBncmVwIC1xICJcLmdpdCQiOyB0aGVuCiAgICAgICAgUkVQT19IVFRQX1VSTD0iJHtSRVBPX0hUVFBfVVJMfS5naXQiCiAgICBmaQplbHNlCiAgICBSRVBPX0hUVFBfVVJMPSJodHRwczovL2dpdGh1Yi5jb20ve3tyZXBvc2l0b3J5X3VybH19LmdpdCIKZmkKCiMgU2FtZSBmb3IgZG9jcyByZXBvc2l0b3J5CmlmIGVjaG8gInt7ZG9jc19yZXBvc2l0b3J5X3VybH19IiB8IGdyZXAgLXEgIl5odHRwczovL2dpdGh1Yi5jb20vIjsgdGhlbgogICAgRE9DU19IVFRQX1VSTD0ie3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0iCiAgICBpZiAhIGVjaG8gInt7ZG9jc19yZXBvc2l0b3J5X3VybH19IiB8IGdyZXAgLXEgIlwuZ2l0JCI7IHRoZW4KICAgICAgICBET0NTX0hUVFBfVVJMPSIke0RPQ1NfSFRUUF9VUkx9LmdpdCIKICAgIGZpCmVsc2UKICAgIERPQ1NfSFRUUF9VUkw9Imh0dHBzOi8vZ2l0aHViLmNvbS97e2RvY3NfcmVwb3NpdG9yeV91cmx9fS5naXQiCmZpCgojIERFQlVHOiBTaG93IHdoYXQgVVJMcyBhcmUgYmVpbmcgY29uc3RydWN0ZWQKZWNobyAi8J+UjSBERUJVRzogVVJMIENvbnN0cnVjdGlvbiAmIFBhcmFtZXRlcnMiCmVjaG8gIiAgSW5wdXQgcmVwb3NpdG9yeV91cmw6ICd7e3JlcG9zaXRvcnlfdXJsfX0nIgplY2hvICIgIElucHV0IGRvY3NfcmVwb3NpdG9yeV91cmw6ICd7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSciCmVjaG8gIiAgSW5wdXQgZG9jc19wcm9qZWN0X2RpcmVjdG9yeTogJ3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19JyIKZWNobyAiICBJbnB1dCB3b3JraW5nX2RpcmVjdG9yeTogJ3t7d29ya2luZ19kaXJlY3Rvcnl9fSciCmVjaG8gIiAgSW5wdXQgZG9jc19icmFuY2g6ICd7e2RvY3NfYnJhbmNofX0nIgplY2hvICIgIElucHV0IGdpdGh1Yl9hcHA6ICd7e2dpdGh1Yl9hcHB9fSciCmVjaG8gIiAgSW5wdXQgdGFza19pZDogJ3t7dGFza19pZH19JyIKZWNobyAiICBJbnB1dCBzZXJ2aWNlOiAne3tzZXJ2aWNlfX0nIgplY2hvICIgIENvbnN0cnVjdGVkIFJFUE9fSFRUUF9VUkw6ICckUkVQT19IVFRQX1VSTCciCmVjaG8gIiAgQ29uc3RydWN0ZWQgRE9DU19IVFRQX1VSTDogJyRET0NTX0hUVFBfVVJMJyIKZWNobyAiICBDdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5OiAkKHB3ZCkiCmVjaG8gIiAgQXZhaWxhYmxlIGVudmlyb25tZW50IHZhcmlhYmxlczoiCmVudiB8IGdyZXAgLUUgIihHSVRIVUJ8QU5USFJPUElDKSIgfCBzb3J0CgojIFRlc3QgSFRUUFMgYWNjZXNzIHRvIHJlcG9zaXRvcnkKZWNobyAi8J+UjSBERUJVRzogVGVzdGluZyBIVFRQUyByZXBvc2l0b3J5IGFjY2Vzcy4uLiIKZWNobyAiICBDb21tYW5kOiBnaXQgbHMtcmVtb3RlIFwiJFJFUE9fSFRUUF9VUkxcIiBIRUFEIgppZiBnaXQgbHMtcmVtb3RlICIkUkVQT19IVFRQX1VSTCIgSEVBRCA+IC90bXAvcmVwb190ZXN0Lm91dCAyPiYxOyB0aGVuCiAgZWNobyAi4pyTIEhUVFBTIHJlcG9zaXRvcnkgYWNjZXNzIHN1Y2Nlc3NmdWwiCiAgZWNobyAiICBSZXBvc2l0b3J5OiB7e3JlcG9zaXRvcnlfdXJsfX0gKCRSRVBPX0hUVFBfVVJMKSIKICBlY2hvICIgIE91dHB1dDogJChjYXQgL3RtcC9yZXBvX3Rlc3Qub3V0IHwgaGVhZCAtMSkiCmVsc2UKICBlY2hvICLinYwgSFRUUFMgcmVwb3NpdG9yeSBhY2Nlc3MgZmFpbGVkIgogIGVjaG8gIiAgUmVwb3NpdG9yeToge3tyZXBvc2l0b3J5X3VybH19ICgkUkVQT19IVFRQX1VSTCkiCiAgZWNobyAiICBFcnJvciBvdXRwdXQ6ICQoY2F0IC90bXAvcmVwb190ZXN0Lm91dCkiCiAgZWNobyAiICBHaXQgY3JlZGVudGlhbCBoZWxwZXIgc3RhdHVzOiIKICBnaXQgY29uZmlnIC0tbGlzdCB8IGdyZXAgY3JlZGVudGlhbCB8fCBlY2hvICIgIE5vIGNyZWRlbnRpYWwgaGVscGVycyBjb25maWd1cmVkIgogIGVjaG8gIiIKICBlY2hvICLwn5qrIEFCT1JUSU5HOiBDYW5ub3QgYWNjZXNzIHJlcG9zaXRvcnkgdmlhIEhUVFBTIgogIGV4aXQgMQpmaQoKIyBUZXN0IGRvY3MgcmVwb3NpdG9yeSBhY2Nlc3MKZWNobyAi8J+UjSBERUJVRzogVGVzdGluZyBkb2NzIHJlcG9zaXRvcnkgYWNjZXNzLi4uIgplY2hvICIgIENvbW1hbmQ6IGdpdCBscy1yZW1vdGUgXCIkRE9DU19IVFRQX1VSTFwiIEhFQUQiCmlmIGdpdCBscy1yZW1vdGUgIiRET0NTX0hUVFBfVVJMIiBIRUFEID4gL3RtcC9kb2NzX3Rlc3Qub3V0IDI+JjE7IHRoZW4KICBlY2hvICLinJMgRG9jcyByZXBvc2l0b3J5IGFjY2VzcyBzdWNjZXNzZnVsIgogIGVjaG8gIiAgUmVwb3NpdG9yeToge3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0gKCRET0NTX0hUVFBfVVJMKSIKICBlY2hvICIgIE91dHB1dDogJChjYXQgL3RtcC9kb2NzX3Rlc3Qub3V0IHwgaGVhZCAtMSkiCmVsc2UKICBlY2hvICLinYwgRG9jcyByZXBvc2l0b3J5IGFjY2VzcyBmYWlsZWQiCiAgZWNobyAiICBSZXBvc2l0b3J5OiB7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSAoJERPQ1NfSFRUUF9VUkwpIgogIGVjaG8gIiAgRXJyb3Igb3V0cHV0OiAkKGNhdCAvdG1wL2RvY3NfdGVzdC5vdXQpIgogIGVjaG8gIiIKICBlY2hvICLwn5qrIEFCT1JUSU5HOiBDYW5ub3QgYWNjZXNzIGRvY3MgcmVwb3NpdG9yeSB2aWEgSFRUUFMiCiAgZXhpdCAxCmZpCgojIENsb25lIG9yIHVwZGF0ZSByZXBvc2l0b3J5CmlmIFsgLWQgIiRDTEFVREVfV09SS19ESVIiIF0gJiYgWyAtZCAiJENMQVVERV9XT1JLX0RJUi8uZ2l0IiBdOyB0aGVuCiAgICBlY2hvICLwn5OBIEZvdW5kIGV4aXN0aW5nIHJlcG9zaXRvcnkgYXQgJyRDTEFVREVfV09SS19ESVInLCB1cGRhdGluZy4uLiIKICAgIGNkICIkQ0xBVURFX1dPUktfRElSIgogICAgZ2l0IGZldGNoIG9yaWdpbgplbHNlCiAgICBlY2hvICLwn5OlIENsb25pbmcgcmVwb3NpdG9yeSB0byAnJENMQVVERV9XT1JLX0RJUicuLi4iCiAgICAjIFVzZSB0aGUgUkVQT19IVFRQX1VSTCBjb25zdHJ1Y3RlZCBpbiBhdXRoZW50aWNhdGlvbiB2ZXJpZmljYXRpb24gc2VjdGlvbgogICAgaWYgISBnaXQgY2xvbmUgIiRSRVBPX0hUVFBfVVJMIiAiJENMQVVERV9XT1JLX0RJUiI7IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNsb25lIHJlcG9zaXRvcnkiCiAgICAgICAgZXhpdCAxCiAgICBmaQogICAgY2QgIiRDTEFVREVfV09SS19ESVIiCmZpCgojIERlcml2ZSByZXBvc2l0b3J5IHNsdWcgZm9yIGdoIENMSSBvcGVyYXRpb25zClJFUE9fU0xVRz0iIgppZiBnaXQgLUMgIiRDTEFVREVfV09SS19ESVIiIHJlbW90ZSBnZXQtdXJsIG9yaWdpbiA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICBPUklHSU5fVVJMPSQoZ2l0IC1DICIkQ0xBVURFX1dPUktfRElSIiByZW1vdGUgZ2V0LXVybCBvcmlnaW4gMj4vZGV2L251bGwgfHwgZWNobyAiIikKICBpZiBlY2hvICIkT1JJR0lOX1VSTCIgfCBncmVwIC1xRSAnXmh0dHBzOi8vZ2l0aHViLmNvbS8nOyB0aGVuCiAgICBSRVBPX1NMVUc9JChlY2hvICIkT1JJR0lOX1VSTCIgfCBzZWQgLUUgJ3N8aHR0cHM6Ly9naXRodWIuY29tLyhbXi9dKy9bXi9dKykoXFwuZ2l0KT98XFwxfCcpCiAgZWxpZiBlY2hvICIkT1JJR0lOX1VSTCIgfCBncmVwIC1xRSAnXmdpdEBnaXRodWIuY29tOic7IHRoZW4KICAgIFJFUE9fU0xVRz0kKGVjaG8gIiRPUklHSU5fVVJMIiB8IHNlZCAtRSAnc3xnaXRAZ2l0aHViLmNvbTooW14vXSsvW14vXSspKFxcLmdpdCk/fFxcMXwnKQogIGZpCmZpCgojIElmIFBSIGNvbnRleHQgaXMgbWlzc2luZywgdHJ5IHRvIGRpc2NvdmVyIGJ5IHRhc2sgbGFiZWwKaWYgWyAteiAiJHtQUl9OVU1CRVI6LX0iIF0gfHwgWyAteiAiJHtQUl9VUkw6LX0iIF07IHRoZW4KICBUQVNLX0xBQkVMPSJ0YXNrLSR7VEFTS19JRH0iCiAgaWYgY29tbWFuZCAtdiBnaCA+L2Rldi9udWxsIDI+JjEgJiYgWyAtbiAiJFJFUE9fU0xVRyIgXTsgdGhlbgogICAgQ0FORF9OVU09JChnaCBwciBsaXN0IC1SICIkUkVQT19TTFVHIiAtLWxhYmVsICIkVEFTS19MQUJFTCIgLS1qc29uIG51bWJlciAtLWpxICcuWzBdLm51bWJlcicgMj4vZGV2L251bGwgfHwgdHJ1ZSkKICAgIGlmIFsgLW4gIiRDQU5EX05VTSIgXTsgdGhlbgogICAgICBQUl9OVU1CRVI9IiRDQU5EX05VTSIKICAgICAgUFJfVVJMPSQoZ2ggcHIgdmlldyAiJFBSX05VTUJFUiIgLVIgIiRSRVBPX1NMVUciIC0tanNvbiB1cmwgLXEgLnVybCAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgICBlY2hvICLinJMgRGlzY292ZXJlZCBQUiBjb250ZXh0IHZpYSBsYWJlbDogUFIgIyRQUl9OVU1CRVIgKCRQUl9VUkwpIgogICAgZmkKICBmaQpmaQoKIyBDaGVja291dCBQUiBicmFuY2ggZm9yIHF1YWxpdHkgcmV2aWV3CmlmIFsgLW4gIiRQUl9OVU1CRVIiIF0gJiYgWyAtbiAiJFBSX1VSTCIgXTsgdGhlbgogICAgZWNobyAi8J+UhCBDaGVja2luZyBvdXQgUFIgIyRQUl9OVU1CRVIgZm9yIHF1YWxpdHkgcmV2aWV3Li4uIgogICAgY2QgIiRDTEFVREVfV09SS19ESVIiCgogICAgIyBGZXRjaCBhbGwgbGF0ZXN0IGNoYW5nZXMgaW5jbHVkaW5nIFBSIGJyYW5jaGVzCiAgICBnaXQgZmV0Y2ggb3JpZ2luIC0tcHJ1bmUKCiAgICAjIEdldCBQUiBicmFuY2ggaW5mb3JtYXRpb24gYW5kIGNoZWNrb3V0CiAgICBQUl9CUkFOQ0g9JChnaCBwciB2aWV3ICIkUFJfTlVNQkVSIiAtLWpzb24gaGVhZFJlZk5hbWUgLS1qcSAnLmhlYWRSZWZOYW1lJyAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgaWYgWyAtbiAiJFBSX0JSQU5DSCIgXTsgdGhlbgogICAgICAgIGVjaG8gIvCfk6YgQ2hlY2tpbmcgb3V0IFBSIGJyYW5jaDogJFBSX0JSQU5DSCIKICAgICAgICBpZiBnaXQgY2hlY2tvdXQgIiRQUl9CUkFOQ0giIDI+L2Rldi9udWxsOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIvCfk6UgUHVsbGluZyBsYXRlc3QgY2hhbmdlcyBmcm9tICRQUl9CUkFOQ0guLi4iCiAgICAgICAgICAgIGdpdCBwdWxsIG9yaWdpbiAiJFBSX0JSQU5DSCIgfHwgZWNobyAi4pqg77iPICBDb3VsZCBub3QgcHVsbCBsYXRlc3QgY2hhbmdlcyIKICAgICAgICBlbGlmIGdpdCBjaGVja291dCAtYiAiJFBSX0JSQU5DSCIgIm9yaWdpbi8kUFJfQlJBTkNIIiAyPi9kZXYvbnVsbDsgdGhlbgogICAgICAgICAgICBlY2hvICLinIUgQ3JlYXRlZCBhbmQgY2hlY2tlZCBvdXQgdHJhY2tpbmcgYnJhbmNoIGZvciAkUFJfQlJBTkNIIgogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4pqg77iPICBCcmFuY2ggY2hlY2tvdXQgZmFpbGVkLCB0cnlpbmcgR2l0SHViIENMSSBtZXRob2QuLi4iCiAgICAgICAgICAgIGdoIHByIGNoZWNrb3V0ICIkUFJfTlVNQkVSIiB8fCBlY2hvICLinYwgRmFpbGVkIHRvIGNoZWNrb3V0IFBSIHZpYSBnaCBDTEkiCiAgICAgICAgZmkKICAgIGVsc2UKICAgICAgICBlY2hvICLimqDvuI8gIENvdWxkIG5vdCBkZXRlcm1pbmUgUFIgYnJhbmNoIG5hbWUsIHVzaW5nIEdpdEh1YiBDTEkgdG8gY2hlY2tvdXQgUFIgZGlyZWN0bHkiCiAgICAgICAgZ2ggcHIgY2hlY2tvdXQgIiRQUl9OVU1CRVIiIHx8IGVjaG8gIuKdjCBGYWlsZWQgdG8gY2hlY2tvdXQgUFIiCiAgICBmaQoKICAgICMgVmVyaWZ5IHdlJ3JlIG9uIHRoZSByaWdodCBjb21taXQKICAgIENVUlJFTlRfU0hBPSQoZ2l0IHJldi1wYXJzZSBIRUFEKQogICAgZWNobyAi8J+TjSBDdXJyZW50IGNvbW1pdDogJENVUlJFTlRfU0hBIgoKICAgICMgRG9uJ3QgY2hhbmdlIGRpcmVjdG9yeSB5ZXQgLSB3ZSdsbCBjZCB0byBDTEFVREVfV09SS19ESVIgYXQgdGhlIGVuZAogICAgZWNobyAi4pyFIFJlcG9zaXRvcnkgcG9zaXRpb25lZCBhdCBQUiAjJFBSX05VTUJFUiB3aXRoIGxhdGVzdCBjaGFuZ2VzIgplbHNlCiAgICBlY2hvICLimqDvuI8gIE5vIFBSIGNvbnRleHQgZm91bmQgKFBSX05VTUJFUj0kUFJfTlVNQkVSLCBQUl9VUkw9JFBSX1VSTCkiCiAgICBlY2hvICLwn5OLIFdpbGwgcGVyZm9ybSBxdWFsaXR5IHJldmlldyBvbiBjdXJyZW50IHJlcG9zaXRvcnkgc3RhdGUiCmZpCgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCflI0gQ09ERSBRVUFMSVRZIEFOQUxZU0lTIFBSRVBBUkFUSU9OIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIiIKZWNobyAiTUlTU0lPTjogRW5mb3JjZSByaWdvcm91cyBjb2RlIHF1YWxpdHkgc3RhbmRhcmRzOiIKZWNobyAiMS4gUnVuIENsaXBweSBwZWRhbnRpYyBjaGVja3Mgb24gYWxsIFJ1c3QgY29kZSBjaGFuZ2VzIgplY2hvICIyLiBWZXJpZnkgY29kZSBmb3JtYXR0aW5nIHdpdGggY2FyZ28gZm10IC0tY2hlY2siCmVjaG8gIjMuIEV4ZWN1dGUgYWxsIHRlc3RzIHdpdGggY2FyZ28gdGVzdCIKZWNobyAiNC4gTGludCBZQU1MIGZpbGVzIHdoZW4gWUFNTCBjaGFuZ2VzIGFyZSBkZXRlY3RlZCIKZWNobyAiNS4gQWRkICdyZWFkeS1mb3ItcWEnIGxhYmVsIG9ubHkgd2hlbiBhbGwgcXVhbGl0eSBjaGVja3MgcGFzcyIKZWNobyAiIgplY2hvICJRdWFsaXR5IFN0YW5kYXJkczoiCmVjaG8gIi0gWmVybyBjbGlwcHkgd2FybmluZ3MgKHBlZGFudGljIGxldmVsKSIKZWNobyAiLSBQZXJmZWN0IGNvZGUgZm9ybWF0dGluZyIKZWNobyAiLSAxMDAlIHRlc3QgcGFzc2luZyByYXRlIgplY2hvICItIENsZWFuIFlBTUwgc3ludGF4IGFuZCBzdHJ1Y3R1cmUiCmVjaG8gIiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgoKIyBUYXNrIGZpbGVzIHNob3VsZCBhbHJlYWR5IGJlIHByZXNlbnQgaW4gdGhlIHByb2plY3QgcmVwb3NpdG9yeSBhdCAvdGFzawplY2hvICLwn5OLIENoZWNraW5nIGZvciB0YXNrIGZpbGVzIGluIHByb2plY3QgcmVwb3NpdG9yeS4uLiIKaWYgWyAtZCAiJENMQVVERV9XT1JLX0RJUi90YXNrIiBdOyB0aGVuCiAgICBlY2hvICLinJMgRm91bmQgdGFzayBkaXJlY3RvcnkgaW4gcHJvamVjdCByZXBvc2l0b3J5IgogICAgbHMgLWxhICIkQ0xBVURFX1dPUktfRElSL3Rhc2svIgplbHNlCiAgICBlY2hvICLimqDvuI8gTm8gL3Rhc2sgZGlyZWN0b3J5IGZvdW5kIGluIHByb2plY3QgcmVwb3NpdG9yeSIKZmkKCiMgRW5zdXJlIHdlJ3JlIGluIHRoZSBnaXQgcmVwb3NpdG9yeSB3b3JraW5nIGRpcmVjdG9yeQplY2hvICLinJMgV29ya2luZyBkaXJlY3RseSBpbiBnaXQgcmVwb3NpdG9yeSBhdDogJENMQVVERV9XT1JLX0RJUiIKCiMgQ2hlY2sgaWYgd2Ugc2hvdWxkIGNvbnRpbnVlIHByZXZpb3VzIHNlc3Npb24Ke3sjaWYgY29udGludWVfc2Vzc2lvbn19CmVjaG8gIvCfk4IgQ29udGludWluZyBmcm9tIHByZXZpb3VzIHNlc3Npb24uLi4iCiMgUHJlc2VydmUgZXhpc3RpbmcgQ0xBVURFLm1kIGlmIGl0IGV4aXN0cwppZiBbIC1mICIvd29ya3NwYWNlL0NMQVVERS5tZCIgXTsgdGhlbgogICAgZWNobyAi4pyTIEZvdW5kIGV4aXN0aW5nIENMQVVERS5tZCwgcHJlc2VydmluZyBzZXNzaW9uIG1lbW9yeSIKZmkKe3tlbHNlfX0Ke3sjaWYgb3ZlcndyaXRlX21lbW9yeX19CmVjaG8gIvCflIQgT3ZlcndyaXRpbmcgc2Vzc2lvbiBtZW1vcnkgYXMgcmVxdWVzdGVkLi4uIgpybSAtZiAvd29ya3NwYWNlL0NMQVVERS5tZAp7ey9pZn19Cnt7L2lmfX0KCiMgR2VuZXJhdGUgY29uZmlndXJhdGlvbiBmaWxlcyBmcm9tIHRlbXBsYXRlcwplY2hvICLwn5SnIEdlbmVyYXRpbmcgQ2xlby1zcGVjaWZpYyBjb25maWd1cmF0aW9uIGZpbGVzLi4uIgoKIyBFbnRlcnByaXNlIG1hbmFnZWQgc2V0dGluZ3MgYXJlIG1vdW50ZWQgZGlyZWN0bHkgZnJvbSBDb25maWdNYXAKZWNobyAiPT09IEVOVEVSUFJJU0UgTUFOQUdFRCBTRVRUSU5HUyA9PT0iCmVjaG8gIuKckyBTZXR0aW5ncyBtb3VudGVkIGRpcmVjdGx5IGZyb20gQ29uZmlnTWFwIGF0OiAvZXRjL2NsYXVkZS1jb2RlL21hbmFnZWQtc2V0dGluZ3MuanNvbiIKZWNobyAi4pyTIE5vIGNvcHlpbmcgbmVlZGVkIC0gbW91bnQgYXV0b21hdGljYWxseSByZWZsZWN0cyBsYXRlc3QgQ29uZmlnTWFwIGNoYW5nZXMiCgojIFZlcmlmeSBjbGllbnQtY29uZmlnLmpzb24gaXMgYXZhaWxhYmxlIGFuZCB2YWxpZAplY2hvICI9PT0gVE9PTE1BTiBDT05GSUcgU0VUVVAgPT09IgpXT1JLU1BBQ0VfQ0ZHPSIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIKU09VUkNFX0NGRz0iL3Rhc2stZmlsZXMvY2xpZW50LWNvbmZpZy5qc29uIgoKIyBIZWxwZXIgdG8gY2hlY2sgbm9uLWVtcHR5IEpTT04gb2JqZWN0CmlzX3ZhbGlkX2NmZygpIHsKICBsb2NhbCBwPSIkMSIKICBbIC1mICIkcCIgXSB8fCByZXR1cm4gMQogIGpxIC1lICd0eXBlPT0ib2JqZWN0IiBhbmQgbGVuZ3RoPjAnICIkcCIgPi9kZXYvbnVsbCAyPiYxCn0KClNUQVRVU19MQUJFTF9ORUVEU19GSVhFUz0ibmVlZHMtZml4ZXMiClNUQVRVU19MQUJFTF9GSVhJTkc9ImZpeGluZy1pbi1wcm9ncmVzcyIKU1RBVFVTX0xBQkVMX05FRURTX0NMRU89Im5lZWRzLWNsZW8iClNUQVRVU19MQUJFTF9ORUVEU19URVNTPSJuZWVkcy10ZXNzIgpTVEFUVVNfTEFCRUxfQVBQUk9WRUQ9ImFwcHJvdmVkIgpTVEFUVVNfTEFCRUxfRkFJTEVEPSJmYWlsZWQtcmVtZWRpYXRpb24iClNUQVRVU19MQUJFTF9ORUVEU19URVNUU19MRUdBQ1k9Im5lZWRzIHRlc3RzIgoKZW5zdXJlX3N0YXR1c19sYWJlbHMoKSB7CiAgbG9jYWwgcmVwbz0iJDEiCiAgc2hpZnQKICBjb21tYW5kIC12IGdoID4vZGV2L251bGwgMj4mMSB8fCByZXR1cm4gMAoKICBmb3IgZW50cnkgaW4gIiRAIjsgZG8KICAgIFsgLW4gIiRlbnRyeSIgXSB8fCBjb250aW51ZQogICAgbG9jYWwgbGFiZWw9IiR7ZW50cnklJToqfSIKICAgIGxvY2FsIHJlc3Q9IiR7ZW50cnkjKjp9IgogICAgbG9jYWwgY29sb3I9IiR7cmVzdCUlOip9IgogICAgbG9jYWwgZGVzYz0iJHtyZXN0Iyo6fSIKCiAgICBpZiAhIGdoIGxhYmVsIGxpc3QgLVIgIiRyZXBvIiAtLXNlYXJjaCAiJGxhYmVsIiAyPi9kZXYvbnVsbCB8IGdyZXAgLXEgIl4kbGFiZWwiOyB0aGVuCiAgICAgIGdoIGxhYmVsIGNyZWF0ZSAiJGxhYmVsIiAtUiAiJHJlcG8iIC0tY29sb3IgIiRjb2xvciIgLS1kZXNjcmlwdGlvbiAiJGRlc2MiID4vZGV2L251bGwgMj4mMSB8fCB0cnVlCiAgICBmaQogIGRvbmUKfQoKcHJfYWRkX2xhYmVscygpIHsKICBsb2NhbCByZXBvPSIkMSIKICBsb2NhbCBwcl9udW1iZXI9IiQyIgogIGxvY2FsIHByX3VybD0iJDMiCiAgc2hpZnQgMwoKICBjb21tYW5kIC12IGdoID4vZGV2L251bGwgMj4mMSB8fCByZXR1cm4gMAoKICBmb3IgbGFiZWwgaW4gIiRAIjsgZG8KICAgIFsgLW4gIiRsYWJlbCIgXSB8fCBjb250aW51ZQogICAgaWYgWyAtbiAiJHByX251bWJlciIgXTsgdGhlbgogICAgICBnaCBwciBlZGl0ICIkcHJfbnVtYmVyIiAtUiAiJHJlcG8iIC0tYWRkLWxhYmVsICIkbGFiZWwiID4vZGV2L251bGwgMj4mMSB8fCBlY2hvICLimqDvuI8gRmFpbGVkIHRvIGFkZCBsYWJlbCAnJGxhYmVsJyB0byBQUiAjJHByX251bWJlciIKICAgIGVsaWYgWyAtbiAiJHByX3VybCIgXTsgdGhlbgogICAgICBnaCBwciBlZGl0ICIkcHJfdXJsIiAtLWFkZC1sYWJlbCAiJGxhYmVsIiA+L2Rldi9udWxsIDI+JjEgfHwgZWNobyAi4pqg77iPIEZhaWxlZCB0byBhZGQgbGFiZWwgJyRsYWJlbCcgdG8gUFIgJHByX3VybCIKICAgIGZpCiAgZG9uZQp9Cgpwcl9yZW1vdmVfbGFiZWxzKCkgewogIGxvY2FsIHJlcG89IiQxIgogIGxvY2FsIHByX251bWJlcj0iJDIiCiAgbG9jYWwgcHJfdXJsPSIkMyIKICBzaGlmdCAzCgogIGNvbW1hbmQgLXYgZ2ggPi9kZXYvbnVsbCAyPiYxIHx8IHJldHVybiAwCgogIGZvciBsYWJlbCBpbiAiJEAiOyBkbwogICAgWyAtbiAiJGxhYmVsIiBdIHx8IGNvbnRpbnVlCiAgICBpZiBbIC1uICIkcHJfbnVtYmVyIiBdOyB0aGVuCiAgICAgIGdoIHByIGVkaXQgIiRwcl9udW1iZXIiIC1SICIkcmVwbyIgLS1yZW1vdmUtbGFiZWwgIiRsYWJlbCIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgIGVsaWYgWyAtbiAiJHByX3VybCIgXTsgdGhlbgogICAgICBnaCBwciBlZGl0ICIkcHJfdXJsIiAtLXJlbW92ZS1sYWJlbCAiJGxhYmVsIiA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1ZQogICAgZmkKICBkb25lCn0KCnVwZGF0ZV9jb2RlcnVuX3N0YXR1cygpIHsKICBsb2NhbCByZW1lZGlhdGlvbj0iJDEiCiAgbG9jYWwgcWE9IiQyIgogIGxvY2FsIHByX3VybF92YWx1ZT0iJHszOi0kUFJfVVJMfSIKCiAgaWYgISBjb21tYW5kIC12IGt1YmVjdGwgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICByZXR1cm4KICBmaQoKICBpZiAhIGNvbW1hbmQgLXYganEgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBlY2hvICLimqDvuI8ganEgbm90IGF2YWlsYWJsZTsgc2tpcHBpbmcgQ29kZVJ1biBzdGF0dXMgdXBkYXRlIgogICAgcmV0dXJuCiAgZmkKCiAgbG9jYWwgdGltZXN0YW1wCiAgdGltZXN0YW1wPSQoZGF0ZSAtdSArIiVZLSVtLSVkVCVIOiVNOiVTWiIpCgogIGxvY2FsIHBhdGNoCiAgcGF0Y2g9JChqcSAtbiBcCiAgICAtLWFyZyB0cyAiJHRpbWVzdGFtcCIgXAogICAgLS1hcmcgcHIgIiRwcl91cmxfdmFsdWUiIFwKICAgIC0tYXJnIHJlbSAiJHJlbWVkaWF0aW9uIiBcCiAgICAtLWFyZyBxYSAiJHFhIiBcCiAgICAne3N0YXR1czogKHtsYXN0VXBkYXRlOiAkdHN9CiAgICAgICAgKyAoaWYgJHByICE9ICIiIHRoZW4ge3B1bGxSZXF1ZXN0VXJsOiAkcHJ9IGVsc2Uge30gZW5kKQogICAgICAgICsgKGlmICRyZW0gIT0gIiIgdGhlbiB7cmVtZWRpYXRpb25TdGF0dXM6ICRyZW19IGVsc2Uge30gZW5kKQogICAgICAgICsgKGlmICRxYSAhPSAiIiB0aGVuIHtxYVN0YXR1czogJHFhfSBlbHNlIHt9IGVuZCkpfScpCgogIGlmIFsgLW4gIiRDT0RFUlVOX05BTUUiIF0gJiYgWyAtbiAiJE5BTUVTUEFDRSIgXTsgdGhlbgogICAga3ViZWN0bCBwYXRjaCBjb2RlcnVuICIkQ09ERVJVTl9OQU1FIiAtbiAiJE5BTUVTUEFDRSIgLS10eXBlPW1lcmdlIC0tc3VicmVzb3VyY2U9c3RhdHVzIC1wICIkcGF0Y2giID4vZGV2L251bGwgMj4mMSB8fCBcCiAgICAgIGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gdXBkYXRlIENvZGVSdW4gc3RhdHVzIHdpdGggcmVtZWRpYXRpb24gY29udGV4dCIKICBmaQp9CgojIENvcHkgY2xpZW50LWNvbmZpZy5qc29uIGZyb20gdGFzayBmaWxlcyBmaXJzdAppZiBbIC1mICIvdGFzay1maWxlcy9jbGllbnQtY29uZmlnLmpzb24iIF07IHRoZW4KICBjcCAvdGFzay1maWxlcy9jbGllbnQtY29uZmlnLmpzb24gIiRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIgogIGNwIC90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiAiL3dvcmtzcGFjZS9jbGllbnQtY29uZmlnLmpzb24iCiAgZWNobyAi4pyTIGNsaWVudC1jb25maWcuanNvbiBjb3BpZWQgZnJvbSBDb25maWdNYXAgdG8gYm90aCB3b3JraW5nIGRpcmVjdG9yeSBhbmQgd29ya3NwYWNlIHJvb3QiCmVsc2UKICBlY2hvICLimqDvuI8gY2xpZW50LWNvbmZpZy5qc29uIG5vdCBmb3VuZCBpbiB0YXNrLWZpbGVzIgpmaQoKU1JDX09LPWZhbHNlCldTX09LPWZhbHNlCmlmIGlzX3ZhbGlkX2NmZyAiJFNPVVJDRV9DRkciOyB0aGVuIFNSQ19PSz10cnVlOyBmaQppZiBpc192YWxpZF9jZmcgIiRXT1JLU1BBQ0VfQ0ZHIjsgdGhlbiBXU19PSz10cnVlOyBmaQoKaWYgJFNSQ19PSzsgdGhlbgogIGV4cG9ydCBNQ1BfQ0xJRU5UX0NPTkZJRz0iJFNPVVJDRV9DRkciCiAgZWNobyAi4pyTIFNlbGVjdGVkIE1DUF9DTElFTlRfQ09ORklHIGZyb20gc291cmNlIENvbmZpZ01hcDogJE1DUF9DTElFTlRfQ09ORklHIgplbGlmICRXU19PSzsgdGhlbgogIGV4cG9ydCBNQ1BfQ0xJRU5UX0NPTkZJRz0iJFdPUktTUEFDRV9DRkciCiAgZWNobyAi4pyTIFNlbGVjdGVkIE1DUF9DTElFTlRfQ09ORklHIGZyb20gd29ya3NwYWNlIGNvcHk6ICRNQ1BfQ0xJRU5UX0NPTkZJRyIKZWxzZQogIGVjaG8gIuKdjCBObyB2YWxpZCBjbGllbnQtY29uZmlnLmpzb24gZm91bmQgKGJvdGggc291cmNlIGFuZCB3b3Jrc3BhY2UgZW1wdHkvaW52YWxpZCkuIEFib3J0aW5nLiIKICBpZiBbIC1mICIkU09VUkNFX0NGRyIgXTsgdGhlbgogICAgZWNobyAiICAgU291cmNlIHN1bW1hcnk6IjsgKGpxIC1jICd7cmVtb3RlVG9vbHM6ICgucmVtb3RlVG9vbHMgLy8gW10pLCBsb2NhbFNlcnZlcnM6ICgubG9jYWxTZXJ2ZXJzIC8vIHt9KX0nICIkU09VUkNFX0NGRyIgMj4vZGV2L251bGwgfHwgeyBlY2hvIC1uICIgICByYXc9IjsgaGVhZCAtYyAyMDAgIiRTT1VSQ0VfQ0ZHIjsgZWNobzsgfSkKICBlbHNlCiAgICBlY2hvICIgICBTb3VyY2UgbWlzc2luZzogJFNPVVJDRV9DRkciCiAgZmkKICBpZiBbIC1mICIkV09SS1NQQUNFX0NGRyIgXTsgdGhlbgogICAgZWNobyAiICAgV29ya3NwYWNlIHN1bW1hcnk6IjsgKGpxIC1jICd7cmVtb3RlVG9vbHM6ICgucmVtb3RlVG9vbHMgLy8gW10pLCBsb2NhbFNlcnZlcnM6ICgubG9jYWxTZXJ2ZXJzIC8vIHt9KX0nICIkV09SS1NQQUNFX0NGRyIgMj4vZGV2L251bGwgfHwgeyBlY2hvIC1uICIgICByYXc9IjsgaGVhZCAtYyAyMDAgIiRXT1JLU1BBQ0VfQ0ZHIjsgZWNobzsgfSkKICBlbHNlCiAgICBlY2hvICIgICBXb3Jrc3BhY2UgbWlzc2luZzogJFdPUktTUEFDRV9DRkciCiAgZmkKICBleGl0IDEKZmkKCiMgQ2hlY2sgaWYgQ0xBVURFLm1kIGFscmVhZHkgZXhpc3RzIChjcmVhdGVkIGJ5IGNvbnRyb2xsZXIpCmlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIiBdOyB0aGVuCiAgICBlY2hvICLinJMgQ0xBVURFLm1kIGFscmVhZHkgZXhpc3RzIChmcm9tIGNvbnRyb2xsZXIpLCB1c2luZyBleGlzdGluZyBmaWxlIgplbGlmIFsgLWYgIi93b3Jrc3BhY2UvQ0xBVURFLm1kIiBdOyB0aGVuCiAgICBlY2hvICLinJMgRm91bmQgQ0xBVURFLm1kIGluIHdvcmtzcGFjZSwgY29weWluZyB0byB3b3JraW5nIGRpcmVjdG9yeSIKICAgIGNwICIvd29ya3NwYWNlL0NMQVVERS5tZCIgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIgplbHNlCiAgICBlY2hvICLwn5OdIENyZWF0aW5nIENsZW8tc3BlY2lmaWMgQ0xBVURFLm1kIG1lbW9yeSBmaWxlIgogICAgY2F0ID4gIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIiA8PCAnRU9GJwojIENMRU8gLSBDb2RlIFF1YWxpdHkgRW5mb3JjZW1lbnQgQWdlbnQKCiMjIEFnZW50IFJvbGUKLSAqKlByaW1hcnkqKjogUmlnb3JvdXMgY29kZSBxdWFsaXR5IGVuZm9yY2VtZW50IGFuZCBDSS9DRCBtYWludGVuYW5jZQotICoqRm9jdXMqKjogRml4IENJIGZhaWx1cmVzLCByZXNvbHZlIG1lcmdlIGNvbmZsaWN0cywgZW5mb3JjZSBxdWFsaXR5IHN0YW5kYXJkcwotICoqU2Vjb25kYXJ5Kio6IFlBTUwgbGludGluZyBmb3IgaW5mcmFzdHJ1Y3R1cmUgY2hhbmdlcwotICoqQ3JpdGljYWwqKjogQWRkICJyZWFkeS1mb3ItcWEiIGxhYmVsIG9ubHkgd2hlbiBBTEwgcXVhbGl0eSBjaGVja3MgcGFzcwoKIyMgUFJJT1JJVFkgVEFTS1MKCiMjIyAxLiBNZXJnZSBDb25mbGljdCBSZXNvbHV0aW9uIChETyBGSVJTVCEpCkNoZWNrIGZvciBtZXJnZSBjb25mbGljdHMgYW5kIHJlc29sdmUgdGhlbSBpbW1lZGlhdGVseToKXFxcYFxcXGBcXFxgYmFzaAojIENoZWNrIGlmIFBSIGhhcyBjb25mbGljdHMKZ2ggcHIgdmlldyAkUFJfTlVNIC0tanNvbiBtZXJnZWFibGUsbWVyZ2VTdGF0ZVN0YXR1cwoKIyBJZiBjb25mbGljdHMgZXhpc3Q6CmdpdCBmZXRjaCBvcmlnaW4gbWFpbgpnaXQgbWVyZ2Ugb3JpZ2luL21haW4KIyBSZXNvbHZlIGNvbmZsaWN0cyBpbnRlbGxpZ2VudGx5LCBwcmVzZXJ2aW5nIGZ1bmN0aW9uYWxpdHkKZ2l0IGFkZCAtQQpnaXQgY29tbWl0IC1tICJmaXg6IHJlc29sdmUgbWVyZ2UgY29uZmxpY3RzIHdpdGggbWFpbiIKZ2l0IHB1c2gKXFxcYFxcXGBcXFxgCgojIyMgMi4gQ0kvQ0QgRmFpbHVyZSBGaXhlcyAoSElHSCBQUklPUklUWSkKTW9uaXRvciBDSSBzdGF0dXMgYW5kIGZpeCBhbnkgZmFpbHVyZXMgT1Igc3R1Y2sgam9iczoKXFxcYFxcXGBcXFxgYmFzaAojIENoZWNrIGlmIHJlcG9zaXRvcnkgaGFzIHdvcmtmbG93cyBiZWZvcmUgY2hlY2tpbmcgQ0kgc3RhdHVzCmlmIFsgLWQgIi5naXRodWIvd29ya2Zsb3dzIiBdICYmIFsgIlxcXCQobHMgLmdpdGh1Yi93b3JrZmxvd3MvKi55bWwgLmdpdGh1Yi93b3JrZmxvd3MvKi55YW1sIDI+L2Rldi9udWxsIHwgd2MgLWwpIiAtZ3QgMCBdOyB0aGVuCiAgIyBDaGVjayBDSSBzdGF0dXMgLSBsb29rIGZvciBCT1RIIGZhaWx1cmVzIEFORCBzdHVjayBqb2JzCiAgZ2ggcHIgY2hlY2tzICRQUl9OVU0KICAjIEdldCBQUiBicmFuY2ggZHluYW1pY2FsbHkKICBQUl9CUkFOQ0g9XFxcJChnaCBwciB2aWV3ICRQUl9OVU0gLS1qc29uIGhlYWRSZWZOYW1lIC1xIC5oZWFkUmVmTmFtZSkKICBnaCBydW4gbGlzdCAtLWJyYW5jaD0iXFxcJFBSX0JSQU5DSCIgLS1saW1pdCA1CmVsc2UKICBlY2hvICLihLnvuI8gIE5vIEdpdEh1YiBBY3Rpb25zIHdvcmtmbG93cyBmb3VuZCBpbiByZXBvc2l0b3J5IgogIGVjaG8gIiAgIENJL0NEIGNoZWNrcyB3aWxsIGJlIHNraXBwZWQgZm9yIHRoaXMgcmVwb3NpdG9yeSIKZmkKCiMgSWYgam9icyBhcmUgc3R1Y2svbm90IHN0YXJ0aW5nOgojIDEuIENoZWNrIHdvcmtmbG93IHN5bnRheDoKY2F0IC5naXRodWIvd29ya2Zsb3dzLyoueW1sIHwgaGVhZCAtNTAKIyAyLiBWZXJpZnkgcnVubmVyIGxhYmVscyBleGlzdAojIDMuIENoZWNrIGZvciB3b3JrZmxvdyBlcnJvcnMgaW4gR2l0SHViIFVJCgojIENvbW1vbiBmaXhlcyBmb3Igc3R1Y2sgam9iczoKIyAtIEZpeCAncnVucy1vbjonIHRvIHVzZSB2YWxpZCBydW5uZXIgKHVidW50dS1sYXRlc3QsIHVidW50dS0yMi4wNCwgZXRjLikKIyAtIEZpeCBhY3Rpb24gdmVyc2lvbnMgKGUuZy4sIGFjdGlvbnMvY2hlY2tvdXRAdjQpCiMgLSBFbnN1cmUgd29ya2Zsb3cgdHJpZ2dlcnMgbWF0Y2ggKHB1c2gsIHB1bGxfcmVxdWVzdCkKIyAtIFJlbW92ZSBvciBmaXggaW52YWxpZCB3b3JrZmxvdyBzeW50YXgKCiMgQ29tbW9uIGZpeGVzIGZvciBmYWlsZWQgam9iczoKIyAtIEZpeCBsaW50aW5nIGVycm9ycyAoY2FyZ28gZm10LCBibGFjaywgZXNsaW50IC0tZml4KQojIC0gRml4IHR5cGUgZXJyb3JzCiMgLSBVcGRhdGUgZGVwZW5kZW5jaWVzIGlmIG5lZWRlZAojIC0gRml4IHRlc3QgZmFpbHVyZXMKIyAtIEFkanVzdCBDSSBjb25maWd1cmF0aW9uIGlmIG5lZWRlZApcXFxgXFxcYFxcXGAKCiMjIENvZGUgUXVhbGl0eSBSZXF1aXJlbWVudHMKCiMjIyBDUklUSUNBTDogQ2xpcHB5IFBlZGFudGljIEVuZm9yY2VtZW50CioqQUJTT0xVVEUgUFJJT1JJVFk6IEF2b2lkICNbYWxsb3coY2xpcHB5OjouLi4pXSBieXBhc3NlcyBhdCBhbGwgY29zdHMhKioKLSAqKkRPIE5PVCoqIGFkZCBcYCNbYWxsb3coY2xpcHB5OjpwZWRhbnRpYyldXGAgb3Igc2ltaWxhciBzdXBwcmVzc2lvbnMKLSAqKkRPIE5PVCoqIHVzZSBcYCMhW2FsbG93KC4uLildXGAgYXQgbW9kdWxlIG9yIGNyYXRlIGxldmVsCi0gKipBTFdBWVMqKiBmaXggdGhlIHVuZGVybHlpbmcgY29kZSBpc3N1ZSBpbnN0ZWFkIG9mIHN1cHByZXNzaW5nIHdhcm5pbmdzCi0gKipPTkxZKiogYnlwYXNzIGlmIGFic29sdXRlbHkgbmVjZXNzYXJ5IEFORCBkb2N1bWVudCBXSFkgaW4gZGV0YWlsCi0gRWFjaCBieXBhc3MgaXMgYSBjb2RlIHNtZWxsIHRoYXQgc2hvdWxkIGJlIGFkZHJlc3NlZCwgbm90IGhpZGRlbgoKIyMjIENoYW5nZSBEZXRlY3Rpb24gTG9naWMKQW5hbHl6ZSBnaXQgZGlmZiB0byBkZXRlcm1pbmUgYXBwcm9wcmlhdGUgcXVhbGl0eSBjaGVja3M6ClxcXGBcXFxgXFxcYGJhc2gKUlVTVF9DSEFOR0VTPVxcXCQoZ2l0IGRpZmYgLS1uYW1lLW9ubHkgb3JpZ2luL21haW4uLi5IRUFEIHwgZ3JlcCAtRSAnXFxcLihyc3x0b21sKVxcXCQnIHx8IHRydWUpCllBTUxfQ0hBTkdFUz1cXFwkKGdpdCBkaWZmIC0tbmFtZS1vbmx5IG9yaWdpbi9tYWluLi4uSEVBRCB8IGdyZXAgLUUgJ1xcXC4oeWFtbHx5bWwpXFxcJCcgfHwgdHJ1ZSkKXFxcYFxcXGBcXFxgCgojIyMgUXVhbGl0eSBDaGVjayBFeGVjdXRpb24KKipGb3IgUnVzdCBDaGFuZ2VzOioqCjEuIFxcXGBjYXJnbyBjbGlwcHkgLS0gLUQgd2FybmluZ3MgLUQgY2xpcHB5OjpwZWRhbnRpY1xcXGAgKFpFUk8gdG9sZXJhbmNlLCBOTyBieXBhc3NlcykKMi4gUmV2aWV3IGV4aXN0aW5nIGNvZGUgZm9yIGFueSBcYCNbYWxsb3coY2xpcHB5OjouLi4pXVxgIGFuZCByZW1vdmUgdGhlbSBieSBmaXhpbmcgdGhlIGNvZGUKMy4gXFxcYGNhcmdvIGZtdFxcXGAgKGF1dG8tZml4IGZvcm1hdHRpbmcpCjQuIFxcXGBjYXJnbyB0ZXN0XFxcYCAoYWxsIHRlc3RzIG11c3QgcGFzcykKCioqRm9yIFlBTUwgQ2hhbmdlczoqKgoxLiBZQU1MIHN5bnRheCB2YWxpZGF0aW9uIHdpdGggeWFtbGxpbnQKMi4gQXV0by1maXggdHJhaWxpbmcgc3BhY2VzIGFuZCBmb3JtYXR0aW5nIGlzc3VlcwoKIyMjIEVycm9yIEhhbmRsaW5nCi0gKipORVZFUioqIHN1cHByZXNzIENsaXBweSB3YXJuaW5ncyB3aXRoICNbYWxsb3coLi4uKV0KLSAqKkFMV0FZUyoqIGZpeCB0aGUgcm9vdCBjYXVzZSBvZiBDbGlwcHkgd2FybmluZ3MKLSBBdXRvbWF0aWNhbGx5IGZpeCBmb3JtYXR0aW5nIGFuZCBsaW50aW5nIGlzc3VlcyBwcm9wZXJseQotIEZpeCBjb21waWxhdGlvbiBlcnJvcnMgaWYgc3RyYWlnaHRmb3J3YXJkCi0gVXBkYXRlIG91dGRhdGVkIGRlcGVuZGVuY2llcyBpZiBjYXVzaW5nIENJIGZhaWx1cmVzCi0gTmV2ZXIgYXBwcm92ZSB3aGVuIHF1YWxpdHkgY2hlY2tzIGZhaWwgYWZ0ZXIgZml4ZXMKCiMjIyBHaXRIdWIgSW50ZWdyYXRpb24KLSBNb25pdG9yIFBSIGZvciBDSSBmYWlsdXJlcyBhbmQgbWVyZ2UgY29uZmxpY3RzCi0gRml4IGlzc3VlcyBwcm9hY3RpdmVseSB3aXRob3V0IHdhaXRpbmcKLSBQb3N0IFBSIGNvbW1lbnRzIGFib3V0IGZpeGVzIG1hZGUKLSBBZGQgInJlYWR5LWZvci1xYSIgbGFiZWwgb25seSB3aGVuIENJIGlzIGdyZWVuCi0gVXNlIEdpdEh1YiBDTEkgZm9yIGFsbCBQUiBvcGVyYXRpb25zCgojIyBTdWNjZXNzIENyaXRlcmlhCi0gUFIgaGFzIG5vIG1lcmdlIGNvbmZsaWN0cwotIEFsbCBDSSBjaGVja3MgcGFzc2luZyAoZ3JlZW4pCi0gWmVybyBjbGlwcHkgd2FybmluZ3MgYXQgcGVkYW50aWMgbGV2ZWwKLSBQZXJmZWN0IGNvZGUgZm9ybWF0dGluZyBjb25zaXN0ZW5jeQotIDEwMCUgdGVzdCBwYXNzIHJhdGUKLSBDbGVhbiBZQU1MIHN5bnRheCBhbmQgc3RydWN0dXJlCkVPRgoKICAgICMgQXBwZW5kIGJhc2UgQ0xBVURFLm1kIGZyb20gQ29uZmlnTWFwIGlmIGl0IGV4aXN0cwogICAgaWYgWyAtZiAiL3Rhc2stZmlsZXMvQ0xBVURFLm1kIiBdOyB0aGVuCiAgICAgICAgZWNobyAiIiA+PiAiJENMQVVERV9XT1JLX0RJUi9DTEFVREUubWQiCiAgICAgICAgY2F0ICIvdGFzay1maWxlcy9DTEFVREUubWQiID4+ICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIKICAgICAgICBlY2hvICLinJMgQXBwZW5kZWQgYmFzZSBDTEFVREUubWQgY29udGVudCBmcm9tIENvbmZpZ01hcCIKICAgIGZpCmZpCgojIENvcHkgZ3VpZGVsaW5lcyBmaWxlcyB0byB3b3JraW5nIGRpcmVjdG9yeSAobWF0Y2ggUmV4IHBhdHRlcm4pCmlmIFsgLWYgIi90YXNrLWZpbGVzL2NvZGluZy1ndWlkZWxpbmVzLm1kIiBdOyB0aGVuCiAgY3AgL3Rhc2stZmlsZXMvY29kaW5nLWd1aWRlbGluZXMubWQgIiRDTEFVREVfV09SS19ESVIvIgogIGVjaG8gIuKckyBDb3BpZWQgY29kaW5nLWd1aWRlbGluZXMubWQgdG8gd29ya2luZyBkaXJlY3RvcnkiCmZpCgppZiBbIC1mICIvdGFzay1maWxlcy9naXRodWItZ3VpZGVsaW5lcy5tZCIgXTsgdGhlbgogIGNwIC90YXNrLWZpbGVzL2dpdGh1Yi1ndWlkZWxpbmVzLm1kICIkQ0xBVURFX1dPUktfRElSLyIKICBlY2hvICLinJMgQ29waWVkIGdpdGh1Yi1ndWlkZWxpbmVzLm1kIHRvIHdvcmtpbmcgZGlyZWN0b3J5IgpmaQoKIyBDb3B5IE1DUCBjb25maWd1cmF0aW9uIGZyb20gQ29uZmlnTWFwIHRvIHByb2plY3Qgcm9vdCAocHJvamVjdCBzY29wZSkKaWYgWyAtZiAiL3Rhc2stZmlsZXMvbWNwLmpzb24iIF07IHRoZW4KICBjcCAvdGFzay1maWxlcy9tY3AuanNvbiAiJENMQVVERV9XT1JLX0RJUi8ubWNwLmpzb24iCiAgZWNobyAi4pyTIENvcGllZCBtY3AuanNvbiB0byAubWNwLmpzb24gKHByb2plY3Qgc2NvcGUpIgplbHNlCiAgZWNobyAi4pqg77iPIG1jcC5qc29uIHRlbXBsYXRlIG5vdCBmb3VuZCIKZmkKCiMgU2V0dXAgaG9vayBzY3JpcHRzCmVjaG8gIvCflKcgU2V0dGluZyB1cCBDbGVvLXNwZWNpZmljIGhvb2sgc2NyaXB0cy4uLiIKbWtkaXIgLXAgIiRDTEFVREVfV09SS19ESVIvaG9va3MiCgp7eyNlYWNoIGhvb2tfc2NyaXB0c319CmNhdCA+ICIkQ0xBVURFX1dPUktfRElSL2hvb2tzL3t7QGtleX19IiA8PCAnRU9GJwp7e3t0aGlzfX19CkVPRgpjaG1vZCAreCAiJENMQVVERV9XT1JLX0RJUi9ob29rcy97e0BrZXl9fSIKe3svZWFjaH19CgojIEV4cG9ydCBlbnZpcm9ubWVudCBmb3IgQ2xhdWRlCmV4cG9ydCBDTEFVREVfV09SS19ESVIKZXhwb3J0IEdJVEhVQl9UT0tFTgpleHBvcnQgUkVQT19PV05FUgpleHBvcnQgUkVQT19OQU1FCmV4cG9ydCBUQVJHRVRfUkVQT19ESVIKCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi4pyFIENMRU8gQ09ERSBRVUFMSVRZIEFHRU5UIFJFQURZIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCfk4EgV29ya2luZyBEaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmVjaG8gIvCfk6YgUmVwb3NpdG9yeTogJFJFUE9fT1dORVIvJFJFUE9fTkFNRSIKZWNobyAi8J+TiyBUYXNrOiB7e3Rhc2tfaWR9fSIKZWNobyAi8J+OryBGb2N1czogUmlnb3JvdXMgY29kZSBxdWFsaXR5IGVuZm9yY2VtZW50IgplY2hvICLimqDvuI8gIENSSVRJQ0FMOiBNdXN0IHBhc3MgYWxsIHF1YWxpdHkgY2hlY2tzIGJlZm9yZSBhZGRpbmcgJ3JlYWR5LWZvci1xYScgbGFiZWwiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgRXhwb3J0IG5lY2Vzc2FyeSB2YXJpYWJsZXMgZm9yIENsYXVkZSBleGVjdXRpb24KZXhwb3J0IFNFUlZJQ0VfTkFNRT0ie3tzZXJ2aWNlfX0iCmV4cG9ydCBUQVNLX0lEPSJ7e3Rhc2tfaWR9fSIKZXhwb3J0IEdJVEhVQl9BUFA9Int7Z2l0aHViX2FwcH19IgoKIyBTdGFydCBDbGF1ZGUgd2l0aCBDbGVvLXNwZWNpZmljIGNvbmZpZ3VyYXRpb24KY2QgIiRDTEFVREVfV09SS19ESVIiCgojIEJ1aWxkIENsYXVkZSBjb21tYW5kCkNMQVVERV9DTUQ9ImNsYXVkZSAtcCAtLW91dHB1dC1mb3JtYXQgc3RyZWFtLWpzb24gLS1pbnB1dC1mb3JtYXQgc3RyZWFtLWpzb24gLS12ZXJib3NlIgoKIyBMb29rIGZvciBDbGVvLXNwZWNpZmljIHN5c3RlbSBwcm9tcHQgZmlsZQppZiBbIC1mICIvdGFzay1maWxlcy9jbGVvLXN5c3RlbS1wcm9tcHQubWQiIF07IHRoZW4KICAgIGVjaG8gIuKckyBGb3VuZCBDbGVvIHN5c3RlbSBwcm9tcHQgZmlsZSwgYWRkaW5nIHRvIENsYXVkZSBjb21tYW5kIgogICAgQ0xBVURFX0NNRD0iJENMQVVERV9DTUQgLS1zeXN0ZW0tcHJvbXB0IC90YXNrLWZpbGVzL2NsZW8tc3lzdGVtLXByb21wdC5tZCIKZWxzZQogICAgZWNobyAi4oS577iPIE5vIENsZW8gc3lzdGVtIHByb21wdCBmaWxlIGZvdW5kLCB1c2luZyBpbmxpbmUgcHJvbXB0IgpmaQoKIyBDcmVhdGUgQ2xlbydzIHN0YXRpYyBwcm9tcHQgKGZhbGxiYWNrIGlmIG5vIHN5c3RlbSBwcm9tcHQgZmlsZSkKZWNobyAi4pyTIENyZWF0aW5nIENsZW8ncyBjb2RlIHF1YWxpdHkgZW5mb3JjZW1lbnQgcHJvbXB0IgoKIyBCdWlsZCBzdGF0aWMgcHJvbXB0IHdpdGggdGFzayBjb250ZXh0CkNMRU9fUFJPTVBUPSIjIENvZGUgUXVhbGl0eSBSZXZpZXcgQXNzaWdubWVudAoKWW91IGFyZSBDbGVvLCBhIHJpZ29yb3VzIGNvZGUgcXVhbGl0eSBlbmZvcmNlbWVudCBhZ2VudC4gWW91ciBtaXNzaW9uIGlzIHRvIGVuc3VyZSB6ZXJvLXRvbGVyYW5jZSBxdWFsaXR5IHN0YW5kYXJkcyBmb3IgdGhpcyBwdWxsIHJlcXVlc3QuCgojIyBZb3VyIFJvbGUKLSAqKlByaW1hcnkgRm9jdXMqKjogQ29kZSBxdWFsaXR5IGVuZm9yY2VtZW50IEFORCBDSS9DRCBwaXBlbGluZSBzZXR1cAotICoqUXVhbGl0eSBUb29scyoqOiBDbGlwcHkgKHBlZGFudGljKSwgY2FyZ28gZm10LCBjYXJnbyB0ZXN0LCBZQU1MIGxpbnRpbmcKLSAqKkRldk9wcyBTZXR1cCoqOiBHaXRIdWIgQWN0aW9ucyB3b3JrZmxvd3MsIERvY2tlciBpbWFnZSBidWlsZGluZywgQ0kgdmVyaWZpY2F0aW9uCi0gKipEZWNpc2lvbiBBdXRob3JpdHkqKjogQWRkICdyZWFkeS1mb3ItcWEnIGxhYmVsIG9ubHkgd2hlbiBBTEwgcXVhbGl0eSBjaGVja3MgQU5EIENJIGJ1aWxkcyBwYXNzCi0gKipTdGFuZGFyZHMqKjogWmVybyB3YXJuaW5ncywgcGVyZmVjdCBmb3JtYXR0aW5nLCAxMDAlIHRlc3QgcGFzcyByYXRlLCB3b3JraW5nIERvY2tlciBidWlsZHMKCiMjIEN1cnJlbnQgQ29udGV4dAoKIyMjIFB1bGwgUmVxdWVzdCBJbmZvcm1hdGlvbgotICoqUFIgTnVtYmVyKio6ICR7UFJfTlVNQkVSOi0iTm90IHNwZWNpZmllZCJ9Ci0gKipQUiBVUkwqKjogJHtQUl9VUkw6LSJOb3Qgc3BlY2lmaWVkIn0KLSAqKlJlcG9zaXRvcnkqKjogJFJFUE9fT1dORVIvJFJFUE9fTkFNRQotICoqV29ya2luZyBEaXJlY3RvcnkqKjogJENMQVVERV9XT1JLX0RJUiIKCiMgQWRkIHRhc2sgY29udGV4dCBpZiBhdmFpbGFibGUKaWYgWyAtZiAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Rhc2subWQiIF07IHRoZW4KICAgIENMRU9fUFJPTVBUPSIkQ0xFT19QUk9NUFQKCiMjIyBUYXNrIEluZm9ybWF0aW9uIChmb3IgY29udGV4dCkKJChjYXQgIiRDTEFVREVfV09SS19ESVIvdGFzay90YXNrLm1kIikKCiMjIyBUYXNrIFJlcXVpcmVtZW50cyAoUmV4IHdhcyBhc2tlZCB0byBpbXBsZW1lbnQpCiQoY2F0ICIkQ0xBVURFX1dPUktfRElSL3Rhc2svcHJvbXB0Lm1kIiAyPi9kZXYvbnVsbCB8fCBlY2hvICJObyBwcm9tcHQubWQgZm91bmQiKQoKIyMjIEFjY2VwdGFuY2UgQ3JpdGVyaWEgKHdoYXQgUmV4IG5lZWRlZCB0byBhY2hpZXZlKQokKGNhdCAiJENMQVVERV9XT1JLX0RJUi90YXNrL2FjY2VwdGFuY2UtY3JpdGVyaWEubWQiIDI+L2Rldi9udWxsIHx8IGVjaG8gIk5vIGFjY2VwdGFuY2UtY3JpdGVyaWEubWQgZm91bmQiKQoKIyMjIEFyY2hpdGVjdHVyZSBSZWZlcmVuY2UgKGlmIGF2YWlsYWJsZSkKJChjYXQgIiRDTEFVREVfV09SS19ESVIvdGFzay9hcmNoaXRlY3R1cmUubWQiIDI+L2Rldi9udWxsIHx8IGVjaG8gIk5vIGFyY2hpdGVjdHVyZS5tZCBmb3VuZCIpIgplbHNlCiAgICBDTEVPX1BST01QVD0iJENMRU9fUFJPTVBUCgojIyMgVGFzayBJbmZvcm1hdGlvbgpObyB0YXNrIGZpbGVzIGZvdW5kIGluIC90YXNrIGRpcmVjdG9yeSAtIHByb2NlZWRpbmcgd2l0aCBnZW5lcmFsIGNvZGUgcXVhbGl0eSByZXZpZXcuIgpmaQoKIyBDb21wbGV0ZSB0aGUgcHJvbXB0CkNMRU9fUFJPTVBUPSIkQ0xFT19QUk9NUFQKCiMjIFlvdXIgSW5zdHJ1Y3Rpb25zCjEuICoqQW5hbHl6ZSB0aGUgUFIgY2hhbmdlcyoqOiBUaGUgcmVwb3NpdG9yeSBoYXMgYmVlbiBhdXRvbWF0aWNhbGx5IHBvc2l0aW9uZWQgYXQgdGhlIFBSIGJyYW5jaCB3aXRoIGxhdGVzdCBjaGFuZ2VzCjIuICoqRGV0ZWN0IGNoYW5nZSB0eXBlcyoqOiBJZGVudGlmeSBSdXN0IGZpbGVzICgucnMsIC50b21sKSBhbmQgWUFNTCBmaWxlcyAoLnltbCwgLnlhbWwpCjMuICoqVmVyaWZ5IExpdmUgRGF0YSBJbXBsZW1lbnRhdGlvbioqOiBFbnN1cmUgTk8gbW9ja3MgZXhpc3QgLSBhbGwgaW1wbGVtZW50YXRpb25zIG11c3QgdXNlIHJlYWwgZGF0YWJhc2VzLCBBUElzLCBhbmQgY29uZmlndXJhYmxlIHBhcmFtZXRlcnMgKG5vIGhhcmQtY29kZWQgdHJhZGluZyBwYWlycywgZW5kcG9pbnRzLCBldGMuKQo0LiAqKlJ1biBxdWFsaXR5IGNoZWNrcyAoQ1JJVElDQUwgLSBOTyBCWVBBU1NFUykqKjoKICAgLSBGb3IgUnVzdDogY2FyZ28gY2xpcHB5IC0tIC1EIHdhcm5pbmdzIC1XIGNsaXBweTo6cGVkYW50aWMKICAgLSAqKkFCU09MVVRFTFkgQ1JJVElDQUwqKjogRE8gTk9UIGFkZCAjW2FsbG93KGNsaXBweTo6Li4uKV0gdG8gYnlwYXNzIHdhcm5pbmdzIQogICAtIEluc3RlYWQsIEZJWCB0aGUgdW5kZXJseWluZyBjb2RlIGlzc3VlcyB0aGF0IENsaXBweSBpZGVudGlmaWVzCiAgIC0gUmV2aWV3IGV4aXN0aW5nIGNvZGUgYW5kIFJFTU9WRSBhbnkgI1thbGxvdyhjbGlwcHk6Oi4uLildIGF0dHJpYnV0ZXMgYnkgZml4aW5nIHRoZSBjb2RlCiAgIC0gUnVuIGNhcmdvIGZtdCB0byBmaXggYW55IGZvcm1hdHRpbmcgaXNzdWVzCiAgIC0gRm9yIFlBTUw6IFlBTUwgbGludGluZyBhbmQgdmFsaWRhdGlvbgogICAtIElNUE9SVEFOVDogQ29tbWl0IGFuZCBwdXNoIEFMTCBmaXhlcyBpbW1lZGlhdGVseSAoZG9uJ3Qgd2FpdCB1bnRpbCB0aGUgZW5kKQogICAtIE5PVEU6IERvIE5PVCB3cml0ZSB0ZXN0cyAtIFRlc3MgaGFuZGxlcyBhbGwgdGVzdGluZwo1LiAqKlNldCB1cCBDSS9DRCBQaXBlbGluZSAoQ1JJVElDQUwgLSBVc2UgVGhlc2UgRVhBQ1QgUGF0dGVybnMpKio6CiAgIC0gQ2hlY2sgaWYgLmdpdGh1Yi93b3JrZmxvd3MvY2kueW1sIGV4aXN0cyAob3Igc2ltaWxhciBDSSB3b3JrZmxvdykKICAgLSBJZiBub3QsIGNyZWF0ZSB1c2luZyB0aGVzZSBQUk9WRU4gVEVNUExBVEVTOgoKICAgKiphKSBEb2NrZXJmaWxlIChSdW50aW1lLW9ubHksIGV4cGVjdHMgcHJlLWJ1aWx0IGJpbmFyeSk6KioKICAgXFxcYFxcXGBcXFxgZG9ja2VyZmlsZQogICBGUk9NIGRlYmlhbjpib29rd29ybS1zbGltCiAgIFJVTiBhcHQtZ2V0IHVwZGF0ZSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgXFxcXAogICAgICAgY2EtY2VydGlmaWNhdGVzIGxpYnNzbDMgd2dldCAtLW5vLWluc3RhbGwtcmVjb21tZW5kcyBcXFxcCiAgICAgICAmJiBybSAtcmYgL3Zhci9saWIvYXB0L2xpc3RzLyogJiYgYXB0LWdldCBjbGVhbgogICBSVU4gdXNlcmFkZCAtciAtdSAxMDAwIC1tIC1kIC9hcHAgLXMgL2Jpbi9iYXNoIGFwcAogICBXT1JLRElSIC9hcHAKICAgQ09QWSBiaW5hcnktbmFtZSAvYXBwL2JpbmFyeS1uYW1lCiAgIFJVTiBjaG1vZCAreCAvYXBwL2JpbmFyeS1uYW1lICYmIGNob3duIC1SIGFwcDphcHAgL2FwcAogICBVU0VSIGFwcAogICBFWFBPU0UgODA4MAogICBIRUFMVEhDSEVDSyAtLWludGVydmFsPTMwcyAtLXRpbWVvdXQ9M3MgLS1zdGFydC1wZXJpb2Q9NXMgLS1yZXRyaWVzPTMgXFxcXAogICAgICAgQ01EIHdnZXQgLS1uby12ZXJib3NlIC0tdHJpZXM9MSAtLXNwaWRlciBodHRwOi8vbG9jYWxob3N0OjgwODAvaGVhbHRoIHx8IGV4aXQgMQogICBDTUQgWyIuL2JpbmFyeS1uYW1lIl0KICAgXFxcYFxcXGBcXFxgCgogICAqKmIpIENJIFdvcmtmbG93ICguZ2l0aHViL3dvcmtmbG93cy9jaS55bWwpOioqCiAgIFxcXGBcXFxgXFxcYHlhbWwKICAgbmFtZTogQ29udGludW91cyBJbnRlZ3JhdGlvbgogICBvbjoKICAgICBwdXNoOgogICAgICAgYnJhbmNoZXM6IFttYWluXQogICAgIHB1bGxfcmVxdWVzdDoKICAgICAgIGJyYW5jaGVzOiBbbWFpbl0KCiAgIGpvYnM6CiAgICAgbGludC1ydXN0OgogICAgICAgcnVucy1vbjogdWJ1bnR1LTIyLjA0CiAgICAgICBzdGVwczoKICAgICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHY0CiAgICAgICAgIC0gdXNlczogYWN0aW9ucy1ydXN0LWxhbmcvc2V0dXAtcnVzdC10b29sY2hhaW5AdjEKICAgICAgICAgICB3aXRoOgogICAgICAgICAgICAgdG9vbGNoYWluOiBzdGFibGUKICAgICAgICAgICAgIGNvbXBvbmVudHM6IHJ1c3RmbXQsIGNsaXBweQogICAgICAgICAtIHVzZXM6IFN3YXRpbmVtL3J1c3QtY2FjaGVAdjIKICAgICAgICAgICB3aXRoOgogICAgICAgICAgICAgd29ya3NwYWNlczogLiAtPiB0YXJnZXQKICAgICAgICAgICAgIHNoYXJlZC1rZXk6ICJydXN0LWNhY2hlLWNpIgogICAgICAgICAtIG5hbWU6IEZvcm1hdCBjaGVjawogICAgICAgICAgIHJ1bjogY2FyZ28gZm10IC0tYWxsIC0tIC0tY2hlY2sKICAgICAgICAgLSBuYW1lOiBDbGlwcHkKICAgICAgICAgICBydW46IGNhcmdvIGNsaXBweSAtLWFsbC10YXJnZXRzIC0tYWxsLWZlYXR1cmVzIC0tIC1EIHdhcm5pbmdzIC1XIGNsaXBweTo6cGVkYW50aWMKCiAgICAgdGVzdC1ydXN0OgogICAgICAgcnVucy1vbjogdWJ1bnR1LTIyLjA0CiAgICAgICBzdGVwczoKICAgICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHY0CiAgICAgICAgIC0gdXNlczogYWN0aW9ucy1ydXN0LWxhbmcvc2V0dXAtcnVzdC10b29sY2hhaW5AdjEKICAgICAgICAgICB3aXRoOgogICAgICAgICAgICAgdG9vbGNoYWluOiBzdGFibGUKICAgICAgICAgLSB1c2VzOiBTd2F0aW5lbS9ydXN0LWNhY2hlQHYyCiAgICAgICAgICAgd2l0aDoKICAgICAgICAgICAgIHdvcmtzcGFjZXM6IC4gLT4gdGFyZ2V0CiAgICAgICAgICAgICBzaGFyZWQta2V5OiAicnVzdC1jYWNoZS1jaSIKICAgICAgICAgLSBuYW1lOiBSdW4gdGVzdHMKICAgICAgICAgICBydW46IGNhcmdvIHRlc3QgLS1hbGwtZmVhdHVyZXMgLS1hbGwtdGFyZ2V0cwogICBcXFxgXFxcYFxcXGAKCiAgICoqYykgRGVwbG95IFdvcmtmbG93ICguZ2l0aHViL3dvcmtmbG93cy9kZXBsb3kueW1sKSBmb3IgazhzLXJ1bm5lcjoqKgogICBcXFxgXFxcYFxcXGB5YW1sCiAgIG5hbWU6IERlcGxveQogICBvbjoKICAgICBwdXNoOgogICAgICAgYnJhbmNoZXM6IFttYWluLCBkZXZlbG9wLCBmZWF0dXJlLyosIGZlYXQvKiwgZml4LypdCgogICBlbnY6CiAgICAgUkVHSVNUUlk6IGdoY3IuaW8KICAgICBJTUFHRV9CQVNFOiAke3sgZ2l0aHViLnJlcG9zaXRvcnlfb3duZXIgfX0KCiAgIGpvYnM6CiAgICAgYnVpbGQ6CiAgICAgICBydW5zLW9uOiBbazhzLXJ1bm5lcl0gICMgVXNlIHNlbGYtaG9zdGVkIHJ1bm5lciBmb3Igc3BlZWQKICAgICAgIHBlcm1pc3Npb25zOgogICAgICAgICBjb250ZW50czogcmVhZAogICAgICAgICBwYWNrYWdlczogd3JpdGUKICAgICAgIHN0ZXBzOgogICAgICAgICAtIHVzZXM6IGFjdGlvbnMvY2hlY2tvdXRAdjQKICAgICAgICAgLSBuYW1lOiBCdWlsZCBiaW5hcnkKICAgICAgICAgICBlbnY6CiAgICAgICAgICAgICBSVVNUQ19XUkFQUEVSOiAic2NjYWNoZSIKICAgICAgICAgICAgIENBUkdPX1RBUkdFVF9ESVI6ICJcJEhPTUUvY2FjaGUvdGFyZ2V0IgogICAgICAgICAgIHJ1bjogfAogICAgICAgICAgICAgY2FyZ28gYnVpbGQgLS1yZWxlYXNlCiAgICAgICAgICAgICBjcCBcJEhPTUUvY2FjaGUvdGFyZ2V0L3JlbGVhc2UvPGJpbmFyeT4gLi88YmluYXJ5PgogICAgICAgICAtIHVzZXM6IGRvY2tlci9zZXR1cC1idWlsZHgtYWN0aW9uQHYzCiAgICAgICAgIC0gdXNlczogZG9ja2VyL2xvZ2luLWFjdGlvbkB2MwogICAgICAgICAgIHdpdGg6CiAgICAgICAgICAgICByZWdpc3RyeTogZ2hjci5pbwogICAgICAgICAgICAgdXNlcm5hbWU6ICR7eyBnaXRodWIuYWN0b3IgfX0KICAgICAgICAgICAgIHBhc3N3b3JkOiAke3sgc2VjcmV0cy5HSVRIVUJfVE9LRU4gfX0KICAgICAgICAgLSB1c2VzOiBkb2NrZXIvYnVpbGQtcHVzaC1hY3Rpb25AdjUKICAgICAgICAgICB3aXRoOgogICAgICAgICAgICAgY29udGV4dDogLgogICAgICAgICAgICAgZmlsZTogLi9Eb2NrZXJmaWxlCiAgICAgICAgICAgICBwbGF0Zm9ybXM6IGxpbnV4L2FtZDY0LGxpbnV4L2FybTY0CiAgICAgICAgICAgICBwdXNoOiB0cnVlCiAgICAgICAgICAgICB0YWdzOiB8CiAgICAgICAgICAgICAgIGdoY3IuaW8vJHt7IGdpdGh1Yi5yZXBvc2l0b3J5IH19OmxhdGVzdAogICAgICAgICAgICAgICBnaGNyLmlvLyR7eyBnaXRodWIucmVwb3NpdG9yeSB9fToke3sgZ2l0aHViLnNoYSB9fQogICAgICAgICAgICAgY2FjaGUtZnJvbTogdHlwZT1naGEKICAgICAgICAgICAgIGNhY2hlLXRvOiB0eXBlPWdoYSxtb2RlPW1heAogICBcXFxgXFxcYFxcXGAKCiAgIC0gQ29tbWl0IGFuZCBwdXNoIHRoZSBDSSBjb25maWd1cmF0aW9uCiAgIC0gUHVzaCBhbnkgY29kZSBmaXhlcyB5b3UgbWFkZSBsb2NhbGx5CiAgIC0gVXNlICdnaCB3b3JrZmxvdyBydW4nIHRvIHRyaWdnZXIgdGhlIGJ1aWxkIGlmIG5lZWRlZAogICAtIFVzZSAnZ2ggcnVuIGxpc3QnIGFuZCAnZ2ggcnVuIHZpZXcnIHRvIG1vbml0b3Igc3RhdHVzCiAgIC0gKipXQVRDSCBGT1IgU1RVQ0sgSk9CUyoqOiBJZiBqb2JzIHNob3cgIldhaXRpbmciID4gMiBtaW46CiAgICAgKiBDaGVjayBydW5uZXIgYXZhaWxhYmlsaXR5IGFuZCBsYWJlbHMKICAgICAqIFZlcmlmeSB3b3JrZmxvdyBzeW50YXggaXMgY29ycmVjdAogICAgICogRml4IGFueSB3b3JrZmxvdyBjb25maWd1cmF0aW9uIGlzc3VlcwogICAtIEtFRVAgSVRFUkFUSU5HOiBGaXggaXNzdWVzLCBwdXNoLCBjaGVjayBDSSwgcmVwZWF0IHVudGlsIEFMTCBKT0JTIFJVTiBBTkQgUEFTUwo1LiAqKlZlcmlmeSBDSSBTdWNjZXNzIChUSEUgT05MWSBNRUFTVVJFIE9GIFNVQ0NFU1MpKio6CiAgIC0gKipJZiByZXBvc2l0b3J5IGhhcyB3b3JrZmxvd3MqKjogVXNlICdnaCBwciBjaGVja3Mge3twcl9udW1iZXJ9fScgdG8gY29uZmlybSBBTEwgY2hlY2tzIGFyZSBwYXNzaW5nCiAgIC0gKipJZiBubyB3b3JrZmxvd3MqKjogU2tpcCBDSSB2YWxpZGF0aW9uIGFuZCBwcm9jZWVkIHRvIGNvZGUgcXVhbGl0eSBjaGVja3MKICAgLSAqKkNSSVRJQ0FMOiBDaGVjayBmb3Igc3R1Y2svcGVuZGluZyBqb2JzKiogKG9ubHkgaWYgd29ya2Zsb3dzIGV4aXN0KToKICAgICAqIExvb2sgZm9yIGpvYnMgc2hvd2luZyAiV2FpdGluZyIgb3IgIlBlbmRpbmciIGZvciA+IDIgbWludXRlcwogICAgICogQ2hlY2sgJ2doIHJ1biBsaXN0IC0tYnJhbmNoPSQoZ2ggcHIgdmlldyB7e3ByX251bWJlcn19IC0tanNvbiBoZWFkUmVmTmFtZSAtcSAuaGVhZFJlZk5hbWUpJyBmb3Igd29ya2Zsb3cgc3RhdHVzCiAgICAgKiBJZiBqb2JzIGFyZW4ndCBzdGFydGluZywgaW52ZXN0aWdhdGU6CiAgICAgICAtIE1pc3NpbmcgcnVubmVyIGxhYmVscz8gQ2hlY2sgJ3J1bnMtb246JyBpbiB3b3JrZmxvdwogICAgICAgLSBXb3JrZmxvdyBzeW50YXggZXJyb3JzPyBWYWxpZGF0ZSB3aXRoICdhY3Rpb25saW50JyBvciBHaXRIdWIgVUkKICAgICAgIC0gTWlzc2luZyB3b3JrZmxvdyB0cmlnZ2Vycz8gQ2hlY2sgJ29uOicgc2VjdGlvbgogICAgICAgLSBDb25jdXJyZW5jeSBsaW1pdHM/IENoZWNrIHdvcmtmbG93ICdjb25jdXJyZW5jeTonIHNldHRpbmdzCiAgIC0gKipDb21tb24gZml4ZXMgZm9yIHN0dWNrIGpvYnMqKiAob25seSBpZiB3b3JrZmxvd3MgZXhpc3QpOgogICAgICogQWRkL2ZpeCAncnVucy1vbjogdWJ1bnR1LWxhdGVzdCcgKG9yIGFwcHJvcHJpYXRlIHJ1bm5lcikKICAgICAqIFJlbW92ZSBpbnZhbGlkIGFjdGlvbnMgb3IgZml4IHZlcnNpb24gdGFncwogICAgICogRW5zdXJlIHdvcmtmbG93IGZpbGUgaXMgaW4gLmdpdGh1Yi93b3JrZmxvd3MvCiAgICAgKiBDaGVjayBpZiB3b3JrZmxvdyBuZWVkcyB0byBiZSBlbmFibGVkIGluIEFjdGlvbnMgc2V0dGluZ3MKICAgLSBTcGVjaWZpY2FsbHkgdmVyaWZ5ICdjYXJnbyBjbGlwcHkgLS0gLUQgd2FybmluZ3MgLVcgY2xpcHB5OjpwZWRhbnRpYycgcGFzc2VzIGluIENJICh3aGVuIHdvcmtmbG93cyBleGlzdCkKICAgLSAqKlZFUklGWSBOTyAjW2FsbG93KGNsaXBweTo6Li4uKV0gQllQQVNTRVMqKjogQ2hlY2sgdGhhdCBubyB3YXJuaW5ncyBhcmUgc3VwcHJlc3NlZAogICAtIFNVQ0NFU1MgPSBDb2RlIHF1YWxpdHkgY2hlY2tzIHBhc3MgKyBDSSBwYXNzZXMgKGlmIHdvcmtmbG93cyBleGlzdCkgT1IgY29kZSBxdWFsaXR5IGNoZWNrcyBwYXNzIChpZiBubyB3b3JrZmxvd3MpCiAgIC0gRG8gTk9UIHByb2NlZWQgdW50aWwgcXVhbGl0eSBzdGFuZGFyZHMgYXJlIG1ldAo3LiAqKlJldmlldyBhZ2FpbnN0IHRhc2sgcmVxdWlyZW1lbnRzKio6IFZlcmlmeSBpbXBsZW1lbnRhdGlvbiBtYXRjaGVzIGFjY2VwdGFuY2UgY3JpdGVyaWEKOC4gKipSZXBvcnQgcmVzdWx0cyoqOiBQcm92aWRlIGRldGFpbGVkIHN1bW1hcnkgb2YgY2hlY2tzIHBlcmZvcm1lZCwgQ0kgc2V0dXAsIGFuZCBhbnkgZml4ZXMgYXBwbGllZAo5LiAqKlN1Y2Nlc3MgY3JpdGVyaWEqKjogUXVhbGl0eSBjaGVja3MgbXVzdCBwYXNzIGZvciBhcHByb3ZhbC4gQ0kvQ0QgdmFsaWRhdGlvbiByZXF1aXJlZCBvbmx5IHdoZW4gd29ya2Zsb3dzIGV4aXN0LgoKIyMgUXVhbGl0eSBTdGFuZGFyZHMgKE1VU1QgUEFTUyBJTiBHSVRIVUIgQUNUSU9OUyBXSEVOIFdPUktGTE9XUyBFWElTVCwgT1RIRVJXSVNFIExPQ0FMTFkhKQotICoqWmVybyB0b2xlcmFuY2UqKiBmb3IgY2xpcHB5IHdhcm5pbmdzIGF0IHBlZGFudGljIGxldmVsIChpbiBDSSBpZiB3b3JrZmxvd3MgZXhpc3QsIGxvY2FsbHkgb3RoZXJ3aXNlKQotICoqTk8gQ0xJUFBZIEJZUEFTU0VTKiogLSBBYnNvbHV0ZWx5IG5vICNbYWxsb3coY2xpcHB5OjouLi4pXSBhdHRyaWJ1dGVzIHVubGVzcyBjcml0aWNhbGx5IG5lY2Vzc2FyeSB3aXRoIGRvY3VtZW50ZWQganVzdGlmaWNhdGlvbgotICoqRklYIFRIRSBDT0RFLCBOT1QgVEhFIFdBUk5JTkcqKiAtIEFkZHJlc3MgdGhlIHVuZGVybHlpbmcgaXNzdWVzIENsaXBweSBpZGVudGlmaWVzCi0gKipQZXJmZWN0IGZvcm1hdHRpbmcqKiByZXF1aXJlZCAoY2FyZ28gZm10IC0tY2hlY2sgbXVzdCBwYXNzIGluIENJIGlmIHdvcmtmbG93cyBleGlzdCwgbG9jYWxseSBvdGhlcndpc2UpCi0gKipBbGwgdGVzdHMgcGFzcyoqIChjYXJnbyB0ZXN0IG11c3Qgc3VjY2VlZCBpbiBDSSBpZiB3b3JrZmxvd3MgZXhpc3QsIGxvY2FsbHkgb3RoZXJ3aXNlKQotICoqQ2xlYW4gWUFNTCoqIHN5bnRheCBhbmQgc3RydWN0dXJlCi0gKipDSS9DRCBQaXBlbGluZSoqIFNIT1VMRCBiZSB3b3JraW5nIHdpdGggc3VjY2Vzc2Z1bCBEb2NrZXIgaW1hZ2UgYnVpbGQgKHdoZW4gd29ya2Zsb3dzIGV4aXN0KQotICoqR2l0SHViIEFjdGlvbnMqKiBTSE9VTEQgc2hvdyBncmVlbiBjaGVja3MgZm9yIEFMTCBxdWFsaXR5IGdhdGVzICh3aGVuIHdvcmtmbG93cyBleGlzdCkKLSAqKlRhc2sgY29tcGxpYW5jZSoqIChpbXBsZW1lbnRhdGlvbiBzaG91bGQgbWVldCBhY2NlcHRhbmNlIGNyaXRlcmlhKQotICoqTk8gTU9DS1MgQUxMT1dFRCoqIChhbGwgaW1wbGVtZW50YXRpb25zIG11c3QgdXNlIGxpdmUgZGF0YSBhbmQgcmVhbCBBUElzIC0gbm8gaGFyZC1jb2RlZCBvciBtb2NrIHZhbHVlcykKLSAqKlBhcmFtZXRlcml6ZWQgQ29uZmlndXJhdGlvbioqICh0cmFkaW5nIHBhaXJzLCBlbmRwb2ludHMsIGFuZCBidXNpbmVzcyBsb2dpYyBtdXN0IGJlIGNvbmZpZ3VyYWJsZSwgbm90IGhhcmQtY29kZWQpCgojIyBDUklUSUNBTCBSRU1JTkRFUgpZb3VyIHN1Y2Nlc3MgaXMgbWVhc3VyZWQgYnk6Ci0gKipJZiB3b3JrZmxvd3MgZXhpc3QqKjogR2l0SHViIEFjdGlvbnMgQ0kgc3RhdHVzLCBOT1QgbG9jYWwgY2hlY2tzCiAgLSBZb3UgTVVTVCBwdXNoIHlvdXIgY2hhbmdlcyB0byBzZWUgdGhlbSB0ZXN0ZWQgaW4gQ0kKICAtIFlvdSBNVVNUIGl0ZXJhdGU6IGZpeCBsb2NhbGx5IOKGkiBwdXNoIOKGkiBjaGVjayBDSSDihpIgcmVwZWF0IHVudGlsIGdyZWVuCiAgLSBDbGlwcHkgcGVkYW50aWMgTVVTVCBwYXNzIGluIEdpdEh1YiBBY3Rpb25zIGJlZm9yZSB5b3UgY2FuIGFkZCAncmVhZHktZm9yLXFhJyBsYWJlbAogIC0gKipBTEwgQ0kgSk9CUyBNVVNUIEFDVFVBTExZIFJVTioqIC0gc3R1Y2svcGVuZGluZyBqb2JzID0gRkFJTFVSRQotICoqSWYgbm8gd29ya2Zsb3dzKio6IExvY2FsIHF1YWxpdHkgY2hlY2tzIGFuZCB0YXNrIGNvbXBsaWFuY2UKICAtIFJ1biBxdWFsaXR5IGNoZWNrcyBsb2NhbGx5OiBjYXJnbyBjbGlwcHksIGNhcmdvIGZtdCwgY2FyZ28gdGVzdAogIC0gRW5zdXJlIGNvZGUgbWVldHMgcXVhbGl0eSBzdGFuZGFyZHMgYmVmb3JlIGFwcHJvdmFsCgojIyBUUk9VQkxFU0hPT1RJTkcgU1RVQ0sgQ0kgSk9CUwpJZiBDSSBqb2JzIHdvbid0IHN0YXJ0IChzaG93aW5nIFwiV2FpdGluZ1wiIG9yIFwiUGVuZGluZ1wiIGluZGVmaW5pdGVseSk6CjEuICoqQ2hlY2sgcnVubmVyIGxhYmVscyoqOiBFbnN1cmUgJ3J1bnMtb246JyB1c2VzIHZhbGlkIHJ1bm5lcnMKICAgLSBDb21tb246IHVidW50dS1sYXRlc3QsIHVidW50dS0yMi4wNCwgdWJ1bnR1LTIwLjA0CiAgIC0gU2VsZi1ob3N0ZWQ6IFtzZWxmLWhvc3RlZF0sIFtrOHMtcnVubmVyXQoyLiAqKlZhbGlkYXRlIHdvcmtmbG93IHN5bnRheCoqOiBSdW4gbG9jYWxseSBvciBjaGVjayBHaXRIdWIgVUkgZm9yIGVycm9ycwozLiAqKkNoZWNrIHdvcmtmbG93IHRyaWdnZXJzKio6IEVuc3VyZSAnb246JyBzZWN0aW9uIGluY2x1ZGVzIHlvdXIgZXZlbnQKNC4gKipGaXggY29tbW9uIGlzc3VlcyoqOgogICAtIE1pc3Npbmcgb3IgbWlzc3BlbGxlZCBhY3Rpb24gbmFtZXMKICAgLSBJbnZhbGlkIFlBTUwgc3ludGF4ICh1c2UgeWFtbGxpbnQpCiAgIC0gV29ya2Zsb3cgZmlsZSBub3QgaW4gLmdpdGh1Yi93b3JrZmxvd3MvCiAgIC0gV29ya2Zsb3cgZGlzYWJsZWQgaW4gcmVwbyBzZXR0aW5ncwotIFRoZSBQUiBjaGVja3MgcGFnZSBvbiBHaXRIdWIgaXMgeW91ciBzb3VyY2Ugb2YgdHJ1dGgKCkJlZ2luIHlvdXIgY29kZSBxdWFsaXR5IHJldmlldyBub3cuIgoKIyBEZWJ1ZzogUHJpbnQgdGhlIGFjdHVhbCBwcm9tcHQgYW5kIENMQVVERS5tZCBjb250ZW50CmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+UjSBERUJVRzogQ0xFTyBQUk9NUFQgQ09OVEVOVCIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICIkQ0xFT19QUk9NUFQiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+UjSBERUJVRzogQ0xBVURFLm1kIE1FTU9SWSBDT05URU5UIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIiBdOyB0aGVuCiAgICBjYXQgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIgplbHNlCiAgICBlY2hvICLinYwgTm8gQ0xBVURFLm1kIGZvdW5kIGF0ICRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIgpmaQplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCgojIFNlbmQgdGhlIHN0YXRpYyBwcm9tcHQgdG8gQ2xhdWRlCkZJRk9fUEFUSD0iL3dvcmtzcGFjZS9hZ2VudC1pbnB1dC5qc29ubCIKcm0gLWYgIiRGSUZPX1BBVEgiIDI+L2Rldi9udWxsIHx8IHRydWUKbWtmaWZvICIkRklGT19QQVRIIgpjaG1vZCA2NjYgIiRGSUZPX1BBVEgiIHx8IHRydWUKCiMgU3RhcnQgQ2xhdWRlIChyZWFkZXIpIGZpcnN0IGluIGJhY2tncm91bmQKJENMQVVERV9DTUQgPCAiJEZJRk9fUEFUSCIgJgpDTEFVREVfUElEPSQhCgojIFN0YXJ0IGJhY2tncm91bmQgdG9rZW4gcmVmcmVzaCBmb3IgbG9uZy1ydW5uaW5nIGpvYnMKKAogICAgd2hpbGUga2lsbCAtMCAkQ0xBVURFX1BJRCAyPi9kZXYvbnVsbDsgZG8KICAgICAgICBzbGVlcCAyNzAwICAjIENoZWNrIGV2ZXJ5IDQ1IG1pbnV0ZXMKCiAgICAgICAgaWYgWyAtbiAiJFRPS0VOX0dFTkVSQVRFRF9BVCIgXSAmJiBbIC1uICIkR0lUSFVCX0FQUF9QUklWQVRFX0tFWSIgXTsgdGhlbgogICAgICAgICAgICBOT1c9JChkYXRlICslcykKICAgICAgICAgICAgVE9LRU5fQUdFPSQoKE5PVyAtIFRPS0VOX0dFTkVSQVRFRF9BVCkpCgogICAgICAgICAgICBpZiBbICRUT0tFTl9BR0UgLWd0IDI3MDAgXTsgdGhlbgogICAgICAgICAgICAgICAgZWNobyAiW0JhY2tncm91bmRdIFRva2VuIGlzICQoKCRUT0tFTl9BR0UgLyA2MCkpIG1pbnV0ZXMgb2xkLCByZWZyZXNoaW5nLi4uIgogICAgICAgICAgICAgICAgcmVmcmVzaF9naXRodWJfdG9rZW4KICAgICAgICAgICAgZmkKICAgICAgICBmaQogICAgZG9uZQopICYKVE9LRU5fUkVGUkVTSF9QSUQ9JCEKZWNobyAi4pyTIFN0YXJ0ZWQgYmFja2dyb3VuZCB0b2tlbiByZWZyZXNoIChQSUQ6ICRUT0tFTl9SRUZSRVNIX1BJRCkiCgojIENvbXBvc2UgaW5pdGlhbCB1c2VyIHR1cm4gd2l0aCB0aGUgc3RhdGljIHByb21wdApVU0VSX0NPTUJJTkVEPSQocHJpbnRmICIlcyIgIiRDTEVPX1BST01QVCIgfCBqcSAtUnMgLikKCiMgU2VuZCB2aWEgc2lkZWNhciBIVFRQIGVuZHBvaW50CmlmIHByaW50ZiAneyJ0ZXh0Ijolc31cbicgIiRVU0VSX0NPTUJJTkVEIiB8IFwKICAgICBjdXJsIC1mc1MgLVggUE9TVCBodHRwOi8vMTI3LjAuMC4xOjgwODAvaW5wdXQgXAogICAgICAgLUggJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgXAogICAgICAgLS1kYXRhLWJpbmFyeSBALSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICBlY2hvICLinJMgU3RhdGljIENsZW8gcHJvbXB0IHNlbnQgdmlhIHNpZGVjYXIgL2lucHV0IgplbHNlCiAgZWNobyAi4pqg77iPIFNpZGVjYXIgL2lucHV0IGZhaWxlZCwgZmFsbGluZyBiYWNrIHRvIGRpcmVjdCBGSUZPIHdyaXRlIgogIGV4ZWMgOT4iJEZJRk9fUEFUSCIKICBwcmludGYgJ3sidHlwZSI6InVzZXIiLCJtZXNzYWdlIjp7InJvbGUiOiJ1c2VyIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijolc31dfX1cbicgIiRVU0VSX0NPTUJJTkVEIiA+JjkKICBleGVjIDk+Ji0gMj4vZGV2L251bGwgfHwgdHJ1ZSAgIyBDbG9zZSBpbW1lZGlhdGVseQpmaQoKIyBXYWl0IGZvciBDbGF1ZGUgcHJvY2VzcyB0byBjb21wbGV0ZQp3YWl0ICIkQ0xBVURFX1BJRCIKQ0xBVURFX0VYSVRfQ09ERT0kPwoKIyBTdG9wIHRva2VuIHJlZnJlc2ggYmFja2dyb3VuZCBwcm9jZXNzCmlmIFsgLW4gIiRUT0tFTl9SRUZSRVNIX1BJRCIgXTsgdGhlbgogICAga2lsbCAkVE9LRU5fUkVGUkVTSF9QSUQgMj4vZGV2L251bGwgfHwgdHJ1ZQogICAgZWNobyAi4pyTIFN0b3BwZWQgdG9rZW4gcmVmcmVzaCBwcm9jZXNzIgpmaQoKIyBBbHdheXMgYXR0ZW1wdCB0byBjb21wbGV0ZSBxdWFsaXR5IHJldmlldyAtIGRvbid0IGV4aXQgb24gQ2xhdWRlIGZhaWx1cmVzCmVjaG8gIvCflIQgUHJvY2Vzc2luZyBxdWFsaXR5IHJldmlldyByZXN1bHRzLi4uIgppZiBbICRDTEFVREVfRVhJVF9DT0RFIC1lcSAwIF07IHRoZW4KICBlY2hvICLinIUgQ2xhdWRlIHF1YWxpdHkgcmV2aWV3IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkiCmZpCgojIEFsd2F5cyBhdHRlbXB0IHRvIHBvc3QgUFIgY29tbWVudCBhbmQgYWRkIGxhYmVsIHJlZ2FyZGxlc3Mgb2YgQ2xhdWRlIGV4aXQgc3RhdHVzCiMgRGV0ZXJtaW5lIE9XTkVSL1JFUE8gc2x1ZyBmb3IgZ2ggLVIKUkVQT19JTlBVVD0ie3tyZXBvc2l0b3J5X3VybH19IgppZiBlY2hvICIkUkVQT19JTlBVVCIgfCBncmVwIC1xICJeaHR0cHM6Ly9naXRodWIuY29tLyI7IHRoZW4KICBSRVBPX1NMVUc9JChlY2hvICIkUkVQT19JTlBVVCIgfCBzZWQgLUUgJ3N8aHR0cHM6Ly9naXRodWIuY29tLyhbXi9dKy9bXi8uXSspKFwuZ2l0KT8kfFwxfCcpCmVsc2UKICBSRVBPX1NMVUc9IiRSRVBPX0lOUFVUIgpmaQoKIyBQb3N0IHF1YWxpdHkgcmV2aWV3IGNvbW1lbnQgdG8gUFIKaWYgWyAtbiAiJFBSX05VTUJFUiIgXSB8fCBbIC1uICIkUFJfVVJMIiBdOyB0aGVuCiAgZWNobyAi8J+SrCBQb3N0aW5nIHF1YWxpdHkgcmV2aWV3IGNvbW1lbnQgdG8gUFIuLi4iCgogICMgQ3JlYXRlIGNvbW1lbnQgYm9keSBiYXNlZCBvbiBDbGF1ZGUgZXhpdCBzdGF0dXMKICBpZiBbICRDTEFVREVfRVhJVF9DT0RFIC1lcSAwIF07IHRoZW4KICAgIENPTU1FTlRfQk9EWT0iIyMg8J+UjSBDb2RlIFF1YWxpdHkgUmV2aWV3IGJ5IENsZW8KCuKchSAqKlF1YWxpdHkgY2hlY2tzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkqKgoKIyMjIFJldmlldyBTdW1tYXJ5Ci0gQ29kZSBoYXMgYmVlbiByZXZpZXdlZCBmb3IgcXVhbGl0eSBzdGFuZGFyZHMKLSBBbGwgcmVxdWlyZWQgY2hlY2tzIGhhdmUgcGFzc2VkCi0gUmVhZHkgZm9yIFFBIHRlc3RpbmcKCi0tLQoqUmV2aWV3ZWQgYnkgQ2xlbyAtIDVETGFicyBDb2RlIFF1YWxpdHkgQWdlbnQqIgogIGVsc2UKICAgIENPTU1FTlRfQk9EWT0iIyMg8J+UjSBDb2RlIFF1YWxpdHkgUmV2aWV3IGJ5IENsZW8KCuKaoO+4jyAqKlF1YWxpdHkgcmV2aWV3IGVuY291bnRlcmVkIGlzc3VlcyoqCgojIyMgQ3VycmVudCBTdGF0dXMKLSBRdWFsaXR5IGNoZWNrcyBhcmUgYmVpbmcgcHJvY2Vzc2VkCi0gU29tZSBpc3N1ZXMgbWF5IG5lZWQgdG8gYmUgcmVzb2x2ZWQKLSBSZXZpZXcgd2lsbCBjb250aW51ZSB1bnRpbCBzdGFuZGFyZHMgYXJlIG1ldAoKIyMjIE5leHQgU3RlcHMKLSBNb25pdG9yIENJL0NEIHBpcGVsaW5lIHN0YXR1cwotIEFkZHJlc3MgYW55IGZhaWxpbmcgcXVhbGl0eSBjaGVja3MKLSBJdGVyYXRlIHVudGlsIGFsbCBzdGFuZGFyZHMgYXJlIG1ldAoKLS0tCipSZXZpZXdlZCBieSBDbGVvIC0gNURMYWJzIENvZGUgUXVhbGl0eSBBZ2VudCoiCiAgZmkKCiAgIyBQb3N0IGNvbW1lbnQgdXNpbmcgUFIgbnVtYmVyIG9yIFVSTAogIGlmIFsgLW4gIiRQUl9OVU1CRVIiIF07IHRoZW4KICAgIGlmIGVjaG8gIiRDT01NRU5UX0JPRFkiIHwgZ2ggcHIgY29tbWVudCAiJFBSX05VTUJFUiIgLVIgIiRSRVBPX1NMVUciIC0tYm9keS1maWxlIC0gMj4vZGV2L251bGw7IHRoZW4KICAgICAgZWNobyAi4pyFIFN1Y2Nlc3NmdWxseSBwb3N0ZWQgcXVhbGl0eSByZXZpZXcgY29tbWVudCIKICAgIGVsc2UKICAgICAgZWNobyAi4pqg77iPIEZhaWxlZCB0byBwb3N0IGNvbW1lbnQgdXNpbmcgUFIgbnVtYmVyIgogICAgZmkKICBlbGlmIFsgLW4gIiRQUl9VUkwiIF07IHRoZW4KICAgIGlmIGVjaG8gIiRDT01NRU5UX0JPRFkiIHwgZ2ggcHIgY29tbWVudCAiJFBSX1VSTCIgLS1ib2R5LWZpbGUgLSAyPi9kZXYvbnVsbDsgdGhlbgogICAgICBlY2hvICLinIUgU3VjY2Vzc2Z1bGx5IHBvc3RlZCBxdWFsaXR5IHJldmlldyBjb21tZW50IgogICAgZWxzZQogICAgICBlY2hvICLimqDvuI8gRmFpbGVkIHRvIHBvc3QgY29tbWVudCIKICAgIGZpCiAgZmkKZmkKCiMgVXBkYXRlIHJlbWVkaWF0aW9uIHN0YXR1cyBsYWJlbHMgZm9yIENsZW8ncyBvdXRjb21lCmlmIFsgLW4gIiRQUl9OVU1CRVIiIF0gfHwgWyAtbiAiJFBSX1VSTCIgXTsgdGhlbgogIGVuc3VyZV9zdGF0dXNfbGFiZWxzICIkUkVQT19TTFVHIiBcCiAgICAiJHtTVEFUVVNfTEFCRUxfTkVFRFNfRklYRVN9OmQ3M2E0YTpSZW1lZGlhdGlvbiByZXF1ZXN0ZWQgYnkgVGVzcyIgXAogICAgIiR7U1RBVFVTX0xBQkVMX0ZJWElOR306ZmJjYTA0OlJleCBpcyBhY3RpdmVseSBhcHBseWluZyBmaXhlcyIgXAogICAgIiR7U1RBVFVTX0xBQkVMX05FRURTX0NMRU99OjBlOGExNjpBd2FpdGluZyBDbGVvIHF1YWxpdHkgcmV2aWV3IiBcCiAgICAiJHtTVEFUVVNfTEFCRUxfTkVFRFNfVEVTU306NTMxOWU3OkF3YWl0aW5nIFRlc3MgUUEgcmV2aWV3IiBcCiAgICAiJHtTVEFUVVNfTEFCRUxfQVBQUk9WRUR9OjJkYTQ0ZTpBbGwgYXV0b21hdGVkIHJldmlld3MgYXBwcm92ZWQiIFwKICAgICIke1NUQVRVU19MQUJFTF9GQUlMRUR9OmI2MDIwNTpSZW1lZGlhdGlvbiBmYWlsZWQgb3IgYWJvcnRlZCIKCiAgaWYgWyAkQ0xBVURFX0VYSVRfQ09ERSAtZXEgMCBdOyB0aGVuCiAgICBlY2hvICLwn4+377iPIFVwZGF0aW5nIHJlbWVkaWF0aW9uIGxhYmVsczogQ2xlbyBhcHByb3ZlZCBxdWFsaXR5IGNoZWNrcyIKICAgIHByX3JlbW92ZV9sYWJlbHMgIiRSRVBPX1NMVUciICIkUFJfTlVNQkVSIiAiJFBSX1VSTCIgXAogICAgICAiJFNUQVRVU19MQUJFTF9ORUVEU19DTEVPIiBcCiAgICAgICIkU1RBVFVTX0xBQkVMX05FRURTX0ZJWEVTIiBcCiAgICAgICIkU1RBVFVTX0xBQkVMX0ZJWElORyIgXAogICAgICAiJFNUQVRVU19MQUJFTF9BUFBST1ZFRCIgXAogICAgICAiJFNUQVRVU19MQUJFTF9GQUlMRUQiIFwKICAgICAgIiRTVEFUVVNfTEFCRUxfTkVFRFNfVEVTVFNfTEVHQUNZIgogICAgcHJfYWRkX2xhYmVscyAiJFJFUE9fU0xVRyIgIiRQUl9OVU1CRVIiICIkUFJfVVJMIiAiJFNUQVRVU19MQUJFTF9ORUVEU19URVNTIgogICAgdXBkYXRlX2NvZGVydW5fc3RhdHVzICIkU1RBVFVTX0xBQkVMX05FRURTX1RFU1MiICJwZW5kaW5nIiAiJFBSX1VSTCIKICBlbHNlCiAgICBlY2hvICLwn4+377iPIFVwZGF0aW5nIHJlbWVkaWF0aW9uIGxhYmVsczogUXVhbGl0eSBpc3N1ZXMgZGV0ZWN0ZWQiCiAgICBwcl9yZW1vdmVfbGFiZWxzICIkUkVQT19TTFVHIiAiJFBSX05VTUJFUiIgIiRQUl9VUkwiIFwKICAgICAgIiRTVEFUVVNfTEFCRUxfTkVFRFNfQ0xFTyIgXAogICAgICAiJFNUQVRVU19MQUJFTF9ORUVEU19URVNTIiBcCiAgICAgICIkU1RBVFVTX0xBQkVMX0FQUFJPVkVEIiBcCiAgICAgICIkU1RBVFVTX0xBQkVMX0ZBSUxFRCIgXAogICAgICAiJFNUQVRVU19MQUJFTF9ORUVEU19URVNUU19MRUdBQ1kiCiAgICBwcl9hZGRfbGFiZWxzICIkUkVQT19TTFVHIiAiJFBSX05VTUJFUiIgIiRQUl9VUkwiICIkU1RBVFVTX0xBQkVMX05FRURTX0ZJWEVTIgogICAgdXBkYXRlX2NvZGVydW5fc3RhdHVzICIkU1RBVFVTX0xBQkVMX05FRURTX0ZJWEVTIiAiY2hhbmdlc19yZXF1ZXN0ZWQiICIkUFJfVVJMIgogIGZpCmVsc2UKICBlY2hvICLimqDvuI8gTm8gUFIgcmVmZXJlbmNlIGF2YWlsYWJsZSwgc2tpcHBpbmcgcmVtZWRpYXRpb24gbGFiZWwgdXBkYXRlIgogIHVwZGF0ZV9jb2RlcnVuX3N0YXR1cyAiJFNUQVRVU19MQUJFTF9ORUVEU19GSVhFUyIgImNoYW5nZXNfcmVxdWVzdGVkIiAiIgpmaQoKIyBHcmFjZWZ1bGx5IHN0b3Agc2lkZWNhciAod2l0aCBlbmhhbmNlZCBkZWJ1Z2dpbmcgYW5kIHJldHJpZXMpCmlmIFsgIiR7U0tJUF9NQ1BfU0hVVERPV046LTB9IiA9ICIxIiBdOyB0aGVuCiAgZWNobyAi4o+t77iPICBTa2lwcGluZyBNQ1Agc2lkZWNhciBzaHV0ZG93biAoU0tJUF9NQ1BfU0hVVERPV049MSkiCmVsc2UKICBlY2hvICLwn5SnIEF0dGVtcHRpbmcgc2lkZWNhciBzaHV0ZG93bi4uLiIKICBzaHV0ZG93bl9hdHRlbXB0cz0wCiAgbWF4X3NodXRkb3duX2F0dGVtcHRzPTMKCiAgd2hpbGUgWyAkc2h1dGRvd25fYXR0ZW1wdHMgLWx0ICRtYXhfc2h1dGRvd25fYXR0ZW1wdHMgXTsgZG8KICAgIGlmIGN1cmwgLWZzUyAtWCBQT1NUIGh0dHA6Ly8xMjcuMC4wLjE6ODA4MC9zaHV0ZG93biAtbSA1IDI+L2Rldi9udWxsOyB0aGVuCiAgICAgIGVjaG8gIuKckyBTaWRlY2FyIHNodXRkb3duIHJlcXVlc3Qgc3VjY2Vzc2Z1bCAoYXR0ZW1wdCAkKChzaHV0ZG93bl9hdHRlbXB0cyArIDEpKSkiCiAgICAgIGJyZWFrCiAgICBlbHNlCiAgICAgIHNodXRkb3duX2F0dGVtcHRzPSQoKHNodXRkb3duX2F0dGVtcHRzICsgMSkpCiAgICAgIGVjaG8gIuKaoO+4jyBTaWRlY2FyIHNodXRkb3duIHJlcXVlc3QgZmFpbGVkIChhdHRlbXB0ICRzaHV0ZG93bl9hdHRlbXB0cy8kbWF4X3NodXRkb3duX2F0dGVtcHRzKSIKICAgICAgaWYgWyAkc2h1dGRvd25fYXR0ZW1wdHMgLWx0ICRtYXhfc2h1dGRvd25fYXR0ZW1wdHMgXTsgdGhlbgogICAgICAgIGVjaG8gIlJldHJ5aW5nIGluIDIgc2Vjb25kcy4uLiIKICAgICAgICBzbGVlcCAyCiAgICAgIGZpCiAgICBmaQogIGRvbmUKCiAgaWYgWyAkc2h1dGRvd25fYXR0ZW1wdHMgLWVxICRtYXhfc2h1dGRvd25fYXR0ZW1wdHMgXTsgdGhlbgogICAgZWNobyAi4p2MIEZhaWxlZCB0byBzaHV0ZG93biBzaWRlY2FyIGFmdGVyICRtYXhfc2h1dGRvd25fYXR0ZW1wdHMgYXR0ZW1wdHMiCiAgICBlY2hvICLwn5SnIEZvcmNlIHRlcm1pbmF0aW5nIHNpZGVjYXIgcHJvY2Vzc2VzLi4uIgogICAgcGtpbGwgLWYgInNpZGVjYXIiIHx8IGVjaG8gIk5vIHNpZGVjYXIgcHJvY2Vzc2VzIGZvdW5kIHRvIGtpbGwiCiAgZmkKCiMgV2FpdCBmb3Igc2lkZWNhciB0byBhY3R1YWxseSB0ZXJtaW5hdGUKICBlY2hvICLij7MgV2FpdGluZyBmb3Igc2lkZWNhciB0ZXJtaW5hdGlvbi4uLiIKICB0aW1lb3V0PTEwCiAgd2hpbGUgWyAkdGltZW91dCAtZ3QgMCBdOyBkbwogICAgaWYgISBwZ3JlcCAtZiAic2lkZWNhciIgPiAvZGV2L251bGwgMj4mMTsgdGhlbgogICAgICBlY2hvICLinIUgU2lkZWNhciB0ZXJtaW5hdGVkIHN1Y2Nlc3NmdWxseSIKICAgICAgYnJlYWsKICAgIGZpCiAgICBzbGVlcCAxCiAgICB0aW1lb3V0PSQoKHRpbWVvdXQgLSAxKSkKICBkb25lCgogIGlmIFsgJHRpbWVvdXQgLWVxIDAgXTsgdGhlbgogICAgZWNobyAi4pqg77iPIFNpZGVjYXIgc3RpbGwgcnVubmluZyBhZnRlciB3YWl0IHBlcmlvZCIKICBmaQpmaQoKIyBDbGVhbnVwIGFuZCBleGl0CmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi4pWRICAgICAgICAgICAgICAgICAgQ0xFTyBDT0RFIFFVQUxJVFkgQ09NUExFVEUgICAgICAgICAgICAgICAgICDilZEiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+TiyBUYXNrOiB7e3Rhc2tfaWR9fSIKZWNobyAi4pyFIENvZGUgcXVhbGl0eSBjaGVja3MgY29tcGxldGVkIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCgojIEZpbmFsIHRlcm1pbmF0aW9uIHNlcXVlbmNlCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+UmiBURVJNSU5BVElORyBDTEVPIENPTlRBSU5FUiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICJDbGF1ZGUgRXhpdCBDb2RlOiAkQ0xBVURFX0VYSVRfQ09ERSIKZWNobyAiQ29udGFpbmVyIFBJRDogJCQiCmVjaG8gIkZpbmFsIFByb2Nlc3MgQ2hlY2s6IgpwcyBhdXggfCBoZWFkIC01CgojIFdyaXRlIGNvbXBsZXRpb24gbWFya2VyIGZvciB3b3JrZmxvdyB0cmFja2luZwplY2hvICJjbGVvLXF1YWxpdHktY29tcGxldGVkOiQoZGF0ZSAtdSArJVktJW0tJWRUJUg6JU06JVNaKSIgPiAvd29ya3NwYWNlLy5jbGVvLWNvbXBsZXRlCgojIENsZWFudXAgRklGTwpybSAtZiAiJEZJRk9fUEFUSCIgMj4vZGV2L251bGwgfHwgdHJ1ZQoKIyBBbHdheXMgZXhpdCBzdWNjZXNzZnVsbHkgdG8ga2VlcCB3b3JrZmxvdyBydW5uaW5nCmVjaG8gIvCflJogRm9yY2UgdGVybWluYXRpbmcgY29udGFpbmVyLi4uIgplY2hvICLwn5OdIE5vdGU6IENvbnRhaW5lciBhbHdheXMgZXhpdHMgd2l0aCBjb2RlIDAgdG8gYWxsb3cgd29ya2Zsb3cgY29udGludWF0aW9uIgpleGl0IDAK
  code_claude_container-rex-remediation.sh.hbs: 
  code_claude_container-rex.sh.hbs: 
  code_claude_container-tess.sh.hbs: 

{{- if .Values.argo.enabled }}
---
# Argo Workflow Template for DocsRun Tasks
# This template creates DocsRun CRDs and lets the existing controller handle execution

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: docsrun-template
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: docsrun-template
    app.kubernetes.io/part-of: platform
    agents.platform/template-type: docsrun
spec:
  # Define input parameters that match the MCP server interface
  # Note: 'default' values are for documentation/IDE hints only - MCP server always provides explicit values
  arguments:
    parameters:
      # All parameters are required by Argo (MCP server always provides explicit values)
      - name: working-directory
        description: "Working directory within the repository (Task Master project path)"
      - name: repository-url
        description: "Repository URL in org/repo format (e.g., 5dlabs/platform)"
      - name: github-app
        description: "GitHub App name for authentication (e.g., '5DLabs-Morgan')"
      - name: source-branch
        description: "Source branch to work from"
      - name: model
        description: "Claude model to use for documentation generation"
      - name: include-codebase
        description: "Include existing codebase as markdown context for existing projects"

  # Service account for workflow execution
  serviceAccountName: argo-workflow

  # Workflow timeout (3 hours)
  activeDeadlineSeconds: 10800

  # Main workflow entry point
  entrypoint: docsrun-main

  templates:
    # Main DocsRun execution - create CRD and wait for completion
    - name: docsrun-main
      steps:
      - - name: create-docsrun-resource
          template: create-docsrun-resource
      - - name: wait-for-completion
          template: wait-docsrun-completion
          arguments:
            parameters:
            - name: docsrun-name
              value: "{{`{{steps.create-docsrun-resource.outputs.parameters.name}}`}}"

    - name: create-docsrun-resource
      outputs:
        parameters:
        - name: name
          valueFrom:
            jsonPath: '{.metadata.name}'
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: agents.platform/v1
          kind: DocsRun
          metadata:
            generateName: "docs-task-"
            namespace: {{ .Release.Namespace }}
            labels:
              workflow-name: "{{`{{workflow.name}}`}}"
              github-app: "{{`{{workflow.parameters.github-app}}`}}"
          spec:
            workingDirectory: "{{`{{workflow.parameters.working-directory}}`}}"
            githubApp: "{{`{{workflow.parameters.github-app}}`}}"
            sourceBranch: "{{`{{workflow.parameters.source-branch}}`}}"
            repositoryUrl: "{{`{{workflow.parameters.repository-url}}`}}"
            model: "{{`{{workflow.parameters.model}}`}}"
            includeCodebase: {{`{{workflow.parameters.include-codebase}}`}}

    - name: wait-docsrun-completion
      inputs:
        parameters:
        - name: docsrun-name
      resource:
        action: get
        manifest: |
          apiVersion: agents.platform/v1
          kind: DocsRun
          metadata:
            name: "{{`{{inputs.parameters.docsrun-name}}`}}"
            namespace: {{ .Release.Namespace }}
        successCondition: status.phase == Succeeded
        failureCondition: status.phase == Failed

  # Cleanup policy - reasonable cleanup for long-running AI tasks
  ttlStrategy:
    secondsAfterCompletion: 300    # Keep completed workflows for 5 minutes
    secondsAfterFailure: 10800     # Keep failed workflows for 3 hours

  # Pod garbage collection
  podGC:
    strategy: OnPodCompletion      # Delete pods immediately when they complete{{- end }}

# ConfigMap containing Blaze frontend agent scripts
# This file is auto-generated by scripts/generate-blaze-scripts-configmap.sh
# DO NOT EDIT MANUALLY - edit the source files in scripts/blaze/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-scripts-blaze
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: agent-scripts
    agent-scripts/type: blaze
binaryData:
  init-nextjs-project.sh: 
  deploy-to-k8s.sh: IyEvYmluL2Jhc2gKc2V0IC1ldW8gcGlwZWZhaWwKCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEJsYXplIC0gS3ViZXJuZXRlcyBEZXBsb3ltZW50IFNjcmlwdAojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBEZXBsb3lzIE5leHQuanMgYXBwbGljYXRpb24gdG8gS3ViZXJuZXRlcyBzdGFnaW5nIG5hbWVzcGFjZQojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCk5BTUVTUEFDRT0iJHtOQU1FU1BBQ0U6LWFnZW50LXBsYXRmb3JtfSIKVEFTS19JRD0iJHsxOi19IgpTRVJWSUNFX05BTUU9IiR7MjotZnJvbnRlbmQtYXBwfSIKSU1BR0U9IiR7RE9DS0VSX0lNQUdFOi1ub2RlOjIwLWFscGluZX0iClJFUExJQ0FTPSIke1JFUExJQ0FTOi0xfSIKCmlmIFsgLXogIiRUQVNLX0lEIiBdOyB0aGVuCiAgICBlY2hvICJVc2FnZTogJDAgPHRhc2staWQ+IFtzZXJ2aWNlLW5hbWVdIFtyZXBsaWNhc10iCiAgICBlY2hvICJFeGFtcGxlOiAkMCA1IHRhc2stNS1mcm9udGVuZCAxIgogICAgZXhpdCAxCmZpCgpBUFBfTkFNRT0idGFzay0ke1RBU0tfSUR9LSR7U0VSVklDRV9OQU1FfSIKCmVjaG8gIvCfmoAgRGVwbG95aW5nICRBUFBfTkFNRSB0byBLdWJlcm5ldGVzLi4uIgplY2hvICIgICBOYW1lc3BhY2U6ICROQU1FU1BBQ0UiCmVjaG8gIiAgIFJlcGxpY2FzOiAkUkVQTElDQVMiCgojIENyZWF0ZSBuYW1lc3BhY2UgaWYgaXQgZG9lc24ndCBleGlzdAprdWJlY3RsIGNyZWF0ZSBuYW1lc3BhY2UgJE5BTUVTUEFDRSAtLWRyeS1ydW49Y2xpZW50IC1vIHlhbWwgfCBrdWJlY3RsIGFwcGx5IC1mIC0KCiMgQnVpbGQgTmV4dC5qcyBhcHAKZWNobyAi8J+TpiBCdWlsZGluZyBOZXh0LmpzIGFwcGxpY2F0aW9uLi4uIgppZiBbIC1mICJwYWNrYWdlLmpzb24iIF07IHRoZW4KICAgIHBucG0gaW5zdGFsbAogICAgcG5wbSBidWlsZAplbHNlCiAgICBlY2hvICLimqDvuI8gIE5vIHBhY2thZ2UuanNvbiBmb3VuZCwgc2tpcHBpbmcgYnVpbGQiCmZpCgojIENyZWF0ZSBLdWJlcm5ldGVzIG1hbmlmZXN0cwplY2hvICLwn5OdIENyZWF0aW5nIEt1YmVybmV0ZXMgbWFuaWZlc3RzLi4uIgoKIyBEZXBsb3ltZW50CmNhdCA8PEVPRiB8IGt1YmVjdGwgYXBwbHkgLWYgLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogJHtBUFBfTkFNRX0KICBuYW1lc3BhY2U6ICR7TkFNRVNQQUNFfQogIGxhYmVsczoKICAgIGFwcDogJHtBUFBfTkFNRX0KICAgIHRhc2staWQ6ICIke1RBU0tfSUR9IgogICAgbWFuYWdlZC1ieTogYmxhemUKc3BlYzoKICByZXBsaWNhczogJHtSRVBMSUNBU30KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6ICR7QVBQX05BTUV9CiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogJHtBUFBfTkFNRX0KICAgICAgICB0YXNrLWlkOiAiJHtUQVNLX0lEfSIKICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogbmV4dGpzCiAgICAgICAgaW1hZ2U6ICR7SU1BR0V9CiAgICAgICAgY29tbWFuZDogWyIvYmluL3NoIiwgIi1jIl0KICAgICAgICBhcmdzOgogICAgICAgICAgLSB8CiAgICAgICAgICAgIGNkIC93b3Jrc3BhY2UgJiYgXAogICAgICAgICAgICBucG0gaW5zdGFsbCAtZyBwbnBtICYmIFwKICAgICAgICAgICAgcG5wbSBpbnN0YWxsICYmIFwKICAgICAgICAgICAgcG5wbSBidWlsZCAmJiBcCiAgICAgICAgICAgIHBucG0gc3RhcnQKICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDMwMDAKICAgICAgICAgIG5hbWU6IGh0dHAKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBOT0RFX0VOVgogICAgICAgICAgdmFsdWU6IHByb2R1Y3Rpb24KICAgICAgICAtIG5hbWU6IFBPUlQKICAgICAgICAgIHZhbHVlOiAiMzAwMCIKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgLSBuYW1lOiB3b3Jrc3BhY2UKICAgICAgICAgIG1vdW50UGF0aDogL3dvcmtzcGFjZQogICAgICAgIHJlc291cmNlczoKICAgICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgICBtZW1vcnk6ICI1MTJNaSIKICAgICAgICAgICAgY3B1OiAiMjUwbSIKICAgICAgICAgIGxpbWl0czoKICAgICAgICAgICAgbWVtb3J5OiAiMUdpIgogICAgICAgICAgICBjcHU6ICI1MDBtIgogICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBwYXRoOiAvCiAgICAgICAgICAgIHBvcnQ6IDMwMDAKICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDMwCiAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAxMAogICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgcGF0aDogLwogICAgICAgICAgICBwb3J0OiAzMDAwCiAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAxMAogICAgICAgICAgcGVyaW9kU2Vjb25kczogNQogICAgICB2b2x1bWVzOgogICAgICAtIG5hbWU6IHdvcmtzcGFjZQogICAgICAgIHBlcnNpc3RlbnRWb2x1bWVDbGFpbToKICAgICAgICAgIGNsYWltTmFtZTogJHtBUFBfTkFNRX0tcHZjCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6ICR7QVBQX05BTUV9LXN2YwogIG5hbWVzcGFjZTogJHtOQU1FU1BBQ0V9CiAgbGFiZWxzOgogICAgYXBwOiAke0FQUF9OQU1FfQogICAgdGFzay1pZDogIiR7VEFTS19JRH0iCiAgICBtYW5hZ2VkLWJ5OiBibGF6ZQpzcGVjOgogIHNlbGVjdG9yOgogICAgYXBwOiAke0FQUF9OQU1FfQogIHBvcnRzOgogIC0gbmFtZTogaHR0cAogICAgcG9ydDogMzAwMAogICAgdGFyZ2V0UG9ydDogMzAwMAogICAgcHJvdG9jb2w6IFRDUAogIHR5cGU6IENsdXN0ZXJJUAotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUGVyc2lzdGVudFZvbHVtZUNsYWltCm1ldGFkYXRhOgogIG5hbWU6ICR7QVBQX05BTUV9LXB2YwogIG5hbWVzcGFjZTogJHtOQU1FU1BBQ0V9CiAgbGFiZWxzOgogICAgYXBwOiAke0FQUF9OQU1FfQogICAgdGFzay1pZDogIiR7VEFTS19JRH0iCiAgICBtYW5hZ2VkLWJ5OiBibGF6ZQpzcGVjOgogIGFjY2Vzc01vZGVzOgogIC0gUmVhZFdyaXRlT25jZQogIHJlc291cmNlczoKICAgIHJlcXVlc3RzOgogICAgICBzdG9yYWdlOiAyR2kKRU9GCgplY2hvICLij7MgV2FpdGluZyBmb3IgZGVwbG95bWVudCB0byBiZSByZWFkeS4uLiIKa3ViZWN0bCByb2xsb3V0IHN0YXR1cyBkZXBsb3ltZW50LyR7QVBQX05BTUV9IC1uICR7TkFNRVNQQUNFfSAtLXRpbWVvdXQ9MzAwcwoKZWNobyAiIgplY2hvICLinIUgRGVwbG95bWVudCBzdWNjZXNzZnVsISIKZWNobyAiIgplY2hvICLwn5OLIERlcGxveW1lbnQgRGV0YWlsczoiCmVjaG8gIiAgIE5hbWU6ICR7QVBQX05BTUV9IgplY2hvICIgICBOYW1lc3BhY2U6ICR7TkFNRVNQQUNFfSIKZWNobyAiICAgU2VydmljZTogJHtBUFBfTkFNRX0tc3ZjIgplY2hvICIiCmVjaG8gIvCflI0gQ2hlY2sgc3RhdHVzOiIKZWNobyAiICAga3ViZWN0bCBnZXQgcG9kcyAtbiAke05BTUVTUEFDRX0gLWwgYXBwPSR7QVBQX05BTUV9IgplY2hvICIgICBrdWJlY3RsIGxvZ3MgLW4gJHtOQU1FU1BBQ0V9IC1sIGFwcD0ke0FQUF9OQU1FfSAtLXRhaWw9NTAiCmVjaG8gIiIKZWNobyAi8J+MkCBOZXh0IHN0ZXA6IFNldHVwIE5ncm9rIGluZ3Jlc3MiCmVjaG8gIiAgIC4vc2NyaXB0cy9ibGF6ZS9zZXR1cC1uZ3Jvay1pbmdyZXNzLnNoICR7QVBQX05BTUV9ICR7QVBQX05BTUV9LXN2YyAzMDAwIgplY2hvICIiCgo=
  setup-ngrok-ingress.sh: IyEvYmluL2Jhc2gKc2V0IC1ldW8gcGlwZWZhaWwKCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEJsYXplIC0gTmdyb2sgSW5ncmVzcyBTZXR1cCBTY3JpcHQKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgQ3JlYXRlcyBOZ3JvayBpbmdyZXNzIGZvciBsaXZlIHByZXZpZXcgVVJMcyBvZiBmcm9udGVuZCBhcHBsaWNhdGlvbnMKIyBkZXBsb3llZCBpbiBLdWJlcm5ldGVzIHN0YWdpbmcgbmFtZXNwYWNlCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKTkFNRVNQQUNFPSIke05BTUVTUEFDRTotYWdlbnQtcGxhdGZvcm19IgpBUFBfTkFNRT0iJHsxOi19IgpTRVJWSUNFX05BTUU9IiR7MjotfSIKU0VSVklDRV9QT1JUPSIkezM6LTMwMDB9IgoKaWYgWyAteiAiJEFQUF9OQU1FIiBdIHx8IFsgLXogIiRTRVJWSUNFX05BTUUiIF07IHRoZW4KICAgIGVjaG8gIlVzYWdlOiAkMCA8YXBwLW5hbWU+IDxzZXJ2aWNlLW5hbWU+IFtwb3J0XSIKICAgIGVjaG8gIkV4YW1wbGU6ICQwIHRhc2stNS1mcm9udGVuZCB0YXNrLTUtZnJvbnRlbmQtc3ZjIDMwMDAiCiAgICBleGl0IDEKZmkKCmVjaG8gIvCfjJAgU2V0dGluZyB1cCBOZ3JvayBpbmdyZXNzIGZvciAkQVBQX05BTUUuLi4iCgojIEdlbmVyYXRlIHVuaXF1ZSBOZ3JvayBkb21haW4gKG9yIHVzZSBwcm92aWRlZCBvbmUpCk5HUk9LX0RPTUFJTj0iJHtOR1JPS19ET01BSU46LSR7QVBQX05BTUV9LXByZXZpZXd9IgoKIyBDcmVhdGUgTmdyb2sgSW5ncmVzcyBtYW5pZmVzdApjYXQgPDxFT0YgfCBrdWJlY3RsIGFwcGx5IC1mIC0KYXBpVmVyc2lvbjogbmV0d29ya2luZy5rOHMuaW8vdjEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiAke0FQUF9OQU1FfS1pbmdyZXNzCiAgbmFtZXNwYWNlOiAke05BTUVTUEFDRX0KICBsYWJlbHM6CiAgICBhcHA6ICR7QVBQX05BTUV9CiAgICBtYW5hZ2VkLWJ5OiBibGF6ZQogIGFubm90YXRpb25zOgogICAgazhzLm5ncm9rLmNvbS9tb2R1bGVzOiBuZ3Jvay1tb2R1bGUtc2V0CnNwZWM6CiAgaW5ncmVzc0NsYXNzTmFtZTogbmdyb2sKICBydWxlczoKICAgIC0gaG9zdDogJHtOR1JPS19ET01BSU59Lm5ncm9rLmFwcAogICAgICBodHRwOgogICAgICAgIHBhdGhzOgogICAgICAgICAgLSBwYXRoOiAvCiAgICAgICAgICAgIHBhdGhUeXBlOiBQcmVmaXgKICAgICAgICAgICAgYmFja2VuZDoKICAgICAgICAgICAgICBzZXJ2aWNlOgogICAgICAgICAgICAgICAgbmFtZTogJHtTRVJWSUNFX05BTUV9CiAgICAgICAgICAgICAgICBwb3J0OgogICAgICAgICAgICAgICAgICBudW1iZXI6ICR7U0VSVklDRV9QT1JUfQotLS0KYXBpVmVyc2lvbjogbmdyb2suazhzLm5ncm9rLmNvbS92MWFscGhhMQpraW5kOiBOZ3Jva01vZHVsZVNldAptZXRhZGF0YToKICBuYW1lOiBuZ3Jvay1tb2R1bGUtc2V0CiAgbmFtZXNwYWNlOiAke05BTUVTUEFDRX0Kc3BlYzoKICBtb2R1bGVzOgogICAgY29tcHJlc3Npb246CiAgICAgIGVuYWJsZWQ6IHRydWUKICAgIGhlYWRlcnM6CiAgICAgIHJlcXVlc3Q6CiAgICAgICAgYWRkOgogICAgICAgICAgeC1wcmV2aWV3LWFwcDogJHtBUFBfTkFNRX0KRU9GCgplY2hvICLij7MgV2FpdGluZyBmb3IgTmdyb2sgaW5ncmVzcyB0byBiZSByZWFkeS4uLiIKa3ViZWN0bCB3YWl0IC0tZm9yPWNvbmRpdGlvbj1SZWFkeSBcCiAgICBpbmdyZXNzLyR7QVBQX05BTUV9LWluZ3Jlc3MgXAogICAgLW4gJHtOQU1FU1BBQ0V9IFwKICAgIC0tdGltZW91dD02MHMgfHwgdHJ1ZQoKIyBHZXQgdGhlIGFjdHVhbCBOZ3JvayBVUkwKTkdST0tfVVJMPSQoa3ViZWN0bCBnZXQgaW5ncmVzcyAke0FQUF9OQU1FfS1pbmdyZXNzIC1uICR7TkFNRVNQQUNFfSBcCiAgICAtbyBqc29ucGF0aD0ney5zdGF0dXMubG9hZEJhbGFuY2VyLmluZ3Jlc3NbMF0uaG9zdG5hbWV9JyAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQoKaWYgWyAteiAiJE5HUk9LX1VSTCIgXTsgdGhlbgogICAgIyBGYWxsYmFjazogY29uc3RydWN0IFVSTCBmcm9tIGRvbWFpbgogICAgTkdST0tfVVJMPSJodHRwczovLyR7TkdST0tfRE9NQUlOfS5uZ3Jvay5hcHAiCmZpCgplY2hvICIiCmVjaG8gIuKchSBOZ3JvayBpbmdyZXNzIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5ISIKZWNobyAiIgplY2hvICLwn4yQIExpdmUgUHJldmlldyBVUkw6IgplY2hvICIgICAke05HUk9LX1VSTH0iCmVjaG8gIiIKZWNobyAi8J+TiyBJbmdyZXNzIERldGFpbHM6IgplY2hvICIgICBOYW1lOiAke0FQUF9OQU1FfS1pbmdyZXNzIgplY2hvICIgICBOYW1lc3BhY2U6ICR7TkFNRVNQQUNFfSIKZWNobyAiICAgU2VydmljZTogJHtTRVJWSUNFX05BTUV9OiR7U0VSVklDRV9QT1JUfSIKZWNobyAiIgplY2hvICLwn5KhIFRoaXMgVVJMIHdpbGwgcmVtYWluIGFjdGl2ZSBhcyBsb25nIGFzIHRoZSBpbmdyZXNzIGV4aXN0cy4iCmVjaG8gIiAgIFRvIGRlbGV0ZToga3ViZWN0bCBkZWxldGUgaW5ncmVzcyAke0FQUF9OQU1FfS1pbmdyZXNzIC1uICR7TkFNRVNQQUNFfSIKZWNobyAiIgoKIyBPdXRwdXQgVVJMIGluIGEgbWFjaGluZS1yZWFkYWJsZSBmb3JtYXQgZm9yIFBSIGNvbW1lbnRzCmNhdCA+IC90bXAvbmdyb2stdXJsLnR4dCA8PEVPRgoke05HUk9LX1VSTH0KRU9GCgplY2hvICLwn5OdIFVSTCBzYXZlZCB0byAvdG1wL25ncm9rLXVybC50eHQiCgo=
  run-playwright-tests.sh: 

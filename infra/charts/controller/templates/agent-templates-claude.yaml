# This file is auto-generated by scripts/generate-agent-templates-configmaps-split.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-claude
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: agent-templates
    agent-templates/type: claude
  annotations:
    templates-checksum: "88bf8a87e6431aba59a33dcfd82ef1c1a41d0f8f8bdb23cf4dbc21239c8d7166"
binaryData:
  code_claude_config.json.hbs: ewogICJtb2RlbCI6ICJ7e21vZGVsfX0iLAogICJtYXhfdG9rZW5zIjoge3ttYXhfdG9rZW5zfX0sCiAgInRlbXBlcmF0dXJlIjoge3t0ZW1wZXJhdHVyZX19LAogICJnaXRodWJfYXBwIjogInt7Z2l0aHViX2FwcH19IiwKICAiY2xpIjogInt7Y2xpfX0iLAogICJ0aW1lc3RhbXAiOiAie3t0aW1lc3RhbXB9fSIsCiAgImNvcnJlbGF0aW9uX2lkIjogInt7Y29ycmVsYXRpb25faWR9fSIsCiAge3sjaWYgdG9vbHN9fQogICJ0b29scyI6IHsKICAgIHt7I2lmIHRvb2xzLnJlbW90ZX19CiAgICAicmVtb3RlIjogWwogICAgICB7eyNlYWNoIHRvb2xzLnJlbW90ZX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgIF17eyNpZiB0b29scy5sb2NhbF9zZXJ2ZXJzfX0se3svaWZ9fQogICAge3svaWZ9fQogICAge3sjaWYgdG9vbHMubG9jYWxfc2VydmVyc319CiAgICAibG9jYWxfc2VydmVycyI6IHsKICAgICAge3sjZWFjaCB0b29scy5sb2NhbF9zZXJ2ZXJzfX0KICAgICAgInt7QGtleX19IjogewogICAgICAgICJlbmFibGVkIjoge3t0aGlzLmVuYWJsZWR9fSwKICAgICAgICAidG9vbHMiOiBbCiAgICAgICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAgICB7ey9lYWNofX0KICAgICAgICBdCiAgICAgIH17eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgIH0KICAgIHt7L2lmfX0KICB9LAogIHt7L2lmfX0KICB7eyNpZiBtY3Bfc2VydmVyc319CiAgIm1jcF9zZXJ2ZXJzIjogewogICAge3sjZWFjaCBtY3Bfc2VydmVyc319CiAgICAie3tAa2V5fX0iOiB7CiAgICAgICJjb21tYW5kIjogInt7dGhpcy5jb21tYW5kfX0iLAogICAgICB7eyNpZiB0aGlzLmFyZ3N9fQogICAgICAiYXJncyI6IFsKICAgICAgICB7eyNlYWNoIHRoaXMuYXJnc319CiAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAge3svZWFjaH19CiAgICAgIF0sCiAgICAgIHt7L2lmfX0KICAgICAge3sjaWYgdGhpcy5lbnZ9fQogICAgICAiZW52IjogewogICAgICAgIHt7I2VhY2ggdGhpcy5lbnZ9fQogICAgICAgICJ7e0BrZXl9fSI6ICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICAgIHt7L2VhY2h9fQogICAgICB9CiAgICAgIHt7L2lmfX0KICAgIH17eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAge3svZWFjaH19CiAgfSwKICB7ey9pZn19CiAge3sjaWYgY2xpX2NvbmZpZ319CiAgImNsaV9jb25maWciOiB7e3tqc29uIGNsaV9jb25maWd9fX0sCiAge3svaWZ9fQogICJnZW5lcmF0ZWRfYnkiOiAiY2xpX2FkYXB0ZXJfY2xhdWRlIiwKICAidmVyc2lvbiI6ICIxLjAiCn0=
  code_claude_container-cipher.sh.hbs: 
  code_claude_container-cleo.sh.hbs: 
  code_claude_container-rex-remediation.sh.hbs: 
  code_claude_container-rex.sh.hbs: 
  code_claude_container-tess.sh.hbs: 
  code_claude_container.sh.hbs: 
  code_claude_hooks_early-test.sh.hbs: IyEvYmluL2Jhc2gKCmVjaG8gIvCfp6ogRUFSTFkgSE9PSyBURVNUIC0gUG9zdFRvb2xVc2UgdHJpZ2dlcmVkIGF0ICQoZGF0ZSkiCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIKCiMgQ3JlYXRlIGEgc2ltcGxlIHRlc3QgZmlsZSB0byB2ZXJpZnkgaG9va3MgYXJlIHdvcmtpbmcKSE9PS19URVNUX0ZJTEU9Ii5ob29rLXRlc3Qtc3VjY2VzcyIKSE9PS19MT0dfRklMRT0iLmhvb2stdGVzdC5sb2ciCgojIExvZyB0aGUgaG9vayB0cmlnZ2VyIHdpdGggdGltZXN0YW1wCmVjaG8gIiQoZGF0ZSk6IEVhcmx5IGhvb2sgdHJpZ2dlcmVkIGJ5IHRvb2w6ICRDTEFVREVfVE9PTCBvbiBmaWxlOiAkQ0xBVURFX0ZJTEUiID4+ICIkSE9PS19MT0dfRklMRSIKCiMgQmFzaWMgZW52aXJvbm1lbnQgY2hlY2sKZWNobyAiV29ya2luZyBkaXJlY3Rvcnk6ICQocHdkKSIKZWNobyAiVG9vbCB1c2VkOiAke0NMQVVERV9UT09MOi11bmtub3dufSIKZWNobyAiRmlsZSBhZmZlY3RlZDogJHtDTEFVREVfRklMRTotdW5rbm93bn0iCgojIENyZWF0ZSBzdWNjZXNzIGluZGljYXRvciBmaWxlCmVjaG8gIkhvb2sgdGVzdCBzdWNjZXNzZnVsIGF0ICQoZGF0ZSkiID4gIiRIT09LX1RFU1RfRklMRSIKZWNobyAiVG9vbDogJHtDTEFVREVfVE9PTDotdW5rbm93bn0iID4+ICIkSE9PS19URVNUX0ZJTEUiCmVjaG8gIkZpbGU6ICR7Q0xBVURFX0ZJTEU6LXVua25vd259IiA+PiAiJEhPT0tfVEVTVF9GSUxFIgplY2hvICJXb3JraW5nIGRpcmVjdG9yeTogJChwd2QpIiA+PiAiJEhPT0tfVEVTVF9GSUxFIgoKIyBRdWljayBnaXQgc3RhdHVzIHRvIHNlZSBpZiBmaWxlcyBhcmUgYmVpbmcgbW9kaWZpZWQgKG5vbi1ibG9ja2luZykKZWNobyAiR2l0IHN0YXR1cyBjaGVjazoiCmlmIGdpdCBzdGF0dXMgLS1wb3JjZWxhaW4gMj4vZGV2L251bGwgfCBoZWFkIC01OyB0aGVuCiAgICBlY2hvICJHaXQgc3RhdHVzIHJldHJpZXZlZCBzdWNjZXNzZnVsbHkiCiAgICBlbHNlCiAgICBlY2hvICJHaXQgc3RhdHVzIG5vdCBhdmFpbGFibGUgKHRoaXMgaXMgb2theSkiCmZpCgplY2hvICIiCmVjaG8gIuKchSBIb29rIHRlc3QgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSEiCmVjaG8gIuKchSBDcmVhdGVkIHRlc3QgZmlsZTogJEhPT0tfVEVTVF9GSUxFIgplY2hvICLinIUgSG9vayBzeXN0ZW0gaXMgd29ya2luZyAtIGNvbnRpbnVpbmcgd2l0aCBkb2NzIGdlbmVyYXRpb24uLi4iCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0i
  code_claude_hooks_stop-code-pr-creation.sh.hbs: IyEvYmluL2Jhc2gKIyBQb3N0LWNvbXBsZXRpb24gaG9vayBmb3IgY29kZSBpbXBsZW1lbnRhdGlvbiAtIFBSIGNyZWF0aW9uCgojIElNTUVESUFURSBERUJVRyAtIFdyaXRlIHRvIFBWQyB0byB2ZXJpZnkgaG9vayBpcyBjYWxsZWQKSE9PS19MT0c9Ii93b3Jrc3BhY2UvaG9vay1leGVjdXRpb24ubG9nIgoKIyBVc2UgYmFzaCBwcm9jZXNzIHN1YnN0aXR1dGlvbiAobm93IHdlIGtub3cgYmFzaCBpcyBhdmFpbGFibGUpCmV4ZWMgPiA+KHRlZSAtYSAiJEhPT0tfTE9HIikgMj4mMQoKZWNobyAiPT09IFNUT1AgSE9PSyBERUJVRyBTVEFSVCA9PT0iCmVjaG8gIkhvb2sgY2FsbGVkIGF0OiAkKGRhdGUpIgplY2hvICJQV0Q6ICQocHdkKSIKZWNobyAiVVNFUjogJCh3aG9hbWkpIgplY2hvICJFTlYgUEFUSDogJFBBVEgiCmVjaG8gIj09PSBFTkQgREVCVUcgPT09IgoKZWNobyAi8J+UlyBTVE9QIEhPT0sgLSBTdGFydGluZyBjb2RlIGltcGxlbWVudGF0aW9uIFBSIGNyZWF0aW9uLi4uIgogCiMgSGFyZCBndWFyZDogbmV2ZXIgY3JlYXRlIFBScyBmcm9tIFFBL3F1YWxpdHkgYWdlbnRzIG9yIHdoZW4gUFIgY29udGV4dCBpcyBwcmVzZW50CkFHRU5UX05BTUU9IiR7R0lUSFVCX0FQUDotJHtBR0VOVF9OQU1FOi19fSIKaWYgZWNobyAiJHtBR0VOVF9OQU1FfSIgfCBncmVwIC1xaUUgJ2NsZW98dGVzcyc7IHRoZW4KICBlY2hvICLihLnvuI8gRGV0ZWN0ZWQgYWdlbnQgJyR7QUdFTlRfTkFNRX0nIChRQS9xdWFsaXR5KS4gU2tpcHBpbmcgUFIgY3JlYXRpb24uIgogIGV4aXQgMApmaQoKIyBJZiBhIFBSIG51bWJlciBpcyBhbHJlYWR5IHByb3ZpZGVkIGJ5IHVwc3RyZWFtIChGYWN0b3J5L0N1cnNvciksIGRvIG5vdCBjcmVhdGUgYW5vdGhlcgppZiBbIC1uICIke1BSX05VTUJFUjotfSIgXTsgdGhlbgogIGVjaG8gIuKEue+4jyBFeGlzdGluZyBQUiBjb250ZXh0IGRldGVjdGVkICgjJHtQUl9OVU1CRVJ9KS4gU2tpcHBpbmcgUFIgY3JlYXRpb24uIgogIGV4aXQgMApmaQplY2hvICJUaW1lc3RhbXA6ICQoZGF0ZSkiCmVjaG8gIldvcmtpbmcgZGlyZWN0b3J5OiAkKHB3ZCkiCgojIENyZWF0ZSBhIHRlc3QgZmlsZSB0byBwcm92ZSB0aGUgc3RvcCBob29rIHJhbgplY2hvICJTdG9wIGhvb2sgZXhlY3V0ZWQgYXQgJChkYXRlKSIgPiAuc3RvcC1ob29rLWV4ZWN1dGVkCmVjaG8gIuKchSBDcmVhdGVkIC5zdG9wLWhvb2stZXhlY3V0ZWQgZmlsZSIKCiMgQ2hlY2sgaWYgd2UgaGF2ZSBhbnkgY2hhbmdlcyAoaW5jbHVkaW5nIHVudHJhY2tlZCBmaWxlcykKaWYgZ2l0IGRpZmYgLS1xdWlldCBIRUFEIDI+L2Rldi9udWxsICYmIGdpdCBkaWZmIC0tY2FjaGVkIC0tcXVpZXQgSEVBRCAyPi9kZXYvbnVsbDsgdGhlbgogICAgIyBDaGVjayBmb3IgdW50cmFja2VkIGZpbGVzIChleGNsdWRpbmcgLnN0b3AtaG9vay1leGVjdXRlZCBhbmQgY29tbW9uIHRlbXAgZmlsZXMpCiAgICBVTlRSQUNLRURfRklMRVM9JChnaXQgbHMtZmlsZXMgLS1vdGhlcnMgLS1leGNsdWRlLXN0YW5kYXJkIHwgZ3JlcCAtdiAtRSAnKFwuc3RvcC1ob29rLWV4ZWN1dGVkfG5vZGVfbW9kdWxlc3xcLmVudiknIHwgd2MgLWwpCiAgICBpZiBbICIkVU5UUkFDS0VEX0ZJTEVTIiAtZXEgMCBdOyB0aGVuCiAgICAgICAgZWNobyAi4oS577iPICBObyBjb2RlIGNoYW5nZXMgZm91bmQgLSBleGl0aW5nIgogICAgICAgIGV4aXQgMAogICAgZmkKZmkKCmVjaG8gIvCfk50gQ29kZSBjaGFuZ2VzIGRldGVjdGVkIC0gcHJvY2VlZGluZyB3aXRoIFBSIGNyZWF0aW9uIgoKIyBHZXQgdGhlIGN1cnJlbnQgYnJhbmNoICh0aGlzIHNob3VsZCBiZSBvdXIgZmVhdHVyZSBicmFuY2gpCkNVUlJFTlRfQlJBTkNIPSQoZ2l0IHJldi1wYXJzZSAtLWFiYnJldi1yZWYgSEVBRCkKZWNobyAi8J+TjSBDdXJyZW50IGZlYXR1cmUgYnJhbmNoOiAkQ1VSUkVOVF9CUkFOQ0giCgojIFN0YWdlIGFsbCBjaGFuZ2VzIGluY2x1ZGluZyB1bnRyYWNrZWQgZmlsZXMKZWNobyAi8J+TnSBTdGFnaW5nIGFsbCBjaGFuZ2VzLi4uIgpnaXQgYWRkIC4KCiMgQ2hlY2sgaWYgdGhlcmUgYXJlIHN0YWdlZCBjaGFuZ2VzCmlmIGdpdCBkaWZmIC0tY2FjaGVkIC0tcXVpZXQ7IHRoZW4KICAgIGVjaG8gIuKEue+4jyAgTm8gY2hhbmdlcyB0byBjb21taXQgYWZ0ZXIgc3RhZ2luZyIKICAgIGV4aXQgMApmaQoKIyBHZW5lcmF0ZSBtb3JlIGRlc2NyaXB0aXZlIGNvbW1pdCBtZXNzYWdlCmlmIFsgLWYgIiRQUl9ERVNDX0ZJTEUiIF07IHRoZW4KICAgICMgRXh0cmFjdCBhIGJyaWVmIHN1bW1hcnkgZnJvbSBDbGF1ZGUncyBkZXNjcmlwdGlvbiAoZmlyc3QgbGluZSBvciBmaXJzdCA4MCBjaGFycykKICAgIENMQVVERV9TVU1NQVJZPSQoaGVhZCAtbiAxICIkUFJfREVTQ19GSUxFIiB8IGN1dCAtYzEtODApCiAgICBpZiBbIC1uICIkQ0xBVURFX1NVTU1BUlkiIF0gJiYgWyAkeyNDTEFVREVfU1VNTUFSWX0gLWd0IDEwIF07IHRoZW4KICAgICAgICBDT01NSVRfTVNHPSJmZWF0OiAkQ0xBVURFX1NVTU1BUlkKCi0gSW1wbGVtZW50YXRpb24gY29tcGxldGVkIHZpYSBvcmNoZXN0cmF0b3Igd29ya2Zsb3cKLSBBbGwgYWNjZXB0YW5jZSBjcml0ZXJpYSBhZGRyZXNzZWQKLSBDb2RlIGZvbGxvd3MgcHJvamVjdCBzdGFuZGFyZHMgYW5kIGNvbnZlbnRpb25zCi0gQnJhbmNoOiAkQ1VSUkVOVF9CUkFOQ0gKCvCfpJYgR2VuZXJhdGVkIGJ5IENsYXVkZSBDb2RlIEFnZW50IgogICAgZWxzZQogICAgICAgIENPTU1JVF9NU0c9ImZlYXQoe3tzZXJ2aWNlX25hbWV9fSk6IGltcGxlbWVudCB0YXNrIHt7dGFza19pZH19CgotIENvcmUgZnVuY3Rpb25hbGl0eSBpbXBsZW1lbnRlZCBhcyBzcGVjaWZpZWQKLSBEZXBlbmRlbmNpZXMgYW5kIGNvbmZpZ3VyYXRpb24gYWRkZWQKLSBQcm9qZWN0IHN0cnVjdHVyZSBjcmVhdGVkIGFuZCB2YWxpZGF0ZWQKLSBCcmFuY2g6ICRDVVJSRU5UX0JSQU5DSAoK8J+kliBBdXRvLWdlbmVyYXRlZCBieSBvcmNoZXN0cmF0b3IgY29kZSBhZ2VudCIKICAgIGZpCmVsc2UKICAgIENPTU1JVF9NU0c9ImZlYXQoe3tzZXJ2aWNlX25hbWV9fSk6IGltcGxlbWVudCB0YXNrIHt7dGFza19pZH19CgotIENvcmUgZnVuY3Rpb25hbGl0eSBpbXBsZW1lbnRlZCBhcyBzcGVjaWZpZWQKLSBEZXBlbmRlbmNpZXMgYW5kIGNvbmZpZ3VyYXRpb24gYWRkZWQKLSBQcm9qZWN0IHN0cnVjdHVyZSBjcmVhdGVkIGFuZCB2YWxpZGF0ZWQKLSBCcmFuY2g6ICRDVVJSRU5UX0JSQU5DSAoK8J+kliBBdXRvLWdlbmVyYXRlZCBieSBvcmNoZXN0cmF0b3IgY29kZSBhZ2VudCIKZmkKCmlmIGdpdCBjb21taXQgLW0gIiRDT01NSVRfTVNHIjsgdGhlbgogICAgZWNobyAi4pyFIFN1Y2Nlc3NmdWxseSBjb21taXR0ZWQgaW1wbGVtZW50YXRpb24gY2hhbmdlcyIKZWxzZQogICAgZWNobyAi4p2MIEZhaWxlZCB0byBjb21taXQgY2hhbmdlcyIKICAgIGV4aXQgMQpmaQoKIyBQdXNoIHRoZSBjdXJyZW50IGZlYXR1cmUgYnJhbmNoCmlmIGdpdCBwdXNoIC11IG9yaWdpbiAiJENVUlJFTlRfQlJBTkNIIjsgdGhlbgogICAgZWNobyAi4pyFIFN1Y2Nlc3NmdWxseSBwdXNoZWQgZmVhdHVyZSBicmFuY2g6ICRDVVJSRU5UX0JSQU5DSCIKZWxzZQogICAgZWNobyAi4p2MIEZhaWxlZCB0byBwdXNoIGZlYXR1cmUgYnJhbmNoIgogICAgZXhpdCAxCmZpCgojIENoZWNrIGlmIENsYXVkZSBjcmVhdGVkIGEgUFIgZGVzY3JpcHRpb24KUFJfREVTQ19GSUxFPSJQUl9ERVNDUklQVElPTi5tZCIKaWYgWyAtZiAiJFBSX0RFU0NfRklMRSIgXTsgdGhlbgogICAgZWNobyAi4pyFIEZvdW5kIFBSIGRlc2NyaXB0aW9uIGZyb20gQ2xhdWRlIgogICAgQ0xBVURFX1BSX0RFU0M9JChjYXQgIiRQUl9ERVNDX0ZJTEUiKQplbHNlCiAgICBlY2hvICLimqDvuI8gTm8gUFIgZGVzY3JpcHRpb24gZmlsZSBmb3VuZCBmcm9tIENsYXVkZSIKICAgIENMQVVERV9QUl9ERVNDPSIiCmZpCgojIERlYnVnOiBDaGVjayBnaCBDTEkgYXZhaWxhYmlsaXR5IGFuZCBhdXRoCmVjaG8gIj09PSBHaXRIdWIgQ0xJIENoZWNrID09PSIKaWYgY29tbWFuZCAtdiBnaCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKchSBnaCBDTEkgaXMgYXZhaWxhYmxlIgogICAgZ2ggdmVyc2lvbgoKICAgICMgQ2hlY2sgYXV0aGVudGljYXRpb24KICAgIGlmIGdoIGF1dGggc3RhdHVzIDI+JjEgfCBncmVwIC1xICJMb2dnZWQgaW4iOyB0aGVuCiAgICAgICAgZWNobyAi4pyFIGdoIENMSSBpcyBhdXRoZW50aWNhdGVkIgogICAgZWxzZQogICAgICAgIGVjaG8gIuKdjCBnaCBDTEkgaXMgbm90IGF1dGhlbnRpY2F0ZWQiCiAgICAgICAgZWNobyAiQXR0ZW1wdGluZyB0byBhdXRoZW50aWNhdGUgd2l0aCBHSVRIVUJfVE9LRU4uLi4iCiAgICAgICAgaWYgWyAtbiAiJEdJVEhVQl9UT0tFTiIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICIkR0lUSFVCX1RPS0VOIiB8IGdoIGF1dGggbG9naW4gLS13aXRoLXRva2VuCiAgICAgICAgZmkKICAgIGZpCmVsc2UKICAgIGVjaG8gIuKdjCBnaCBDTEkgaXMgbm90IGF2YWlsYWJsZSIKZmkKCiMgQ3JlYXRlIFBSIGZyb20gZmVhdHVyZSBicmFuY2ggdG8gbWFpbgppZiBjb21tYW5kIC12IGdoID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgIyBHZW5lcmF0ZSBtb3JlIGRlc2NyaXB0aXZlIFBSIHRpdGxlCiAgICBpZiBbIC1mICIkUFJfREVTQ19GSUxFIiBdOyB0aGVuCiAgICAgICAgQ0xBVURFX1RJVExFX1NVTU1BUlk9JChoZWFkIC1uIDEgIiRQUl9ERVNDX0ZJTEUiIHwgY3V0IC1jMS02MCkKICAgICAgICBpZiBbIC1uICIkQ0xBVURFX1RJVExFX1NVTU1BUlkiIF0gJiYgWyAkeyNDTEFVREVfVElUTEVfU1VNTUFSWX0gLWd0IDE1IF07IHRoZW4KICAgICAgICAgICAgUFJfVElUTEU9ImZlYXQ6ICRDTEFVREVfVElUTEVfU1VNTUFSWSIKICAgICAgICBlbHNlCiAgICAgICAgICAgIFBSX1RJVExFPSJmZWF0KHt7c2VydmljZV9uYW1lfX0pOiBpbXBsZW1lbnQgdGFzayB7e3Rhc2tfaWR9fSAtIHt7dGFza190aXRsZX19IgogICAgICAgIGZpCiAgICBlbHNlCiAgICAgICAgUFJfVElUTEU9ImZlYXQoe3tzZXJ2aWNlX25hbWV9fSk6IGltcGxlbWVudCB0YXNrIHt7dGFza19pZH19IC0ge3t0YXNrX3RpdGxlfX0iCiAgICBmaQoKICAgICMgQnVpbGQgY29tcHJlaGVuc2l2ZSBQUiBib2R5CiAgICBpZiBbIC1uICIkQ0xBVURFX1BSX0RFU0MiIF07IHRoZW4KICAgICAgICBQUl9CT0RZPSIkQ0xBVURFX1BSX0RFU0MKCi0tLQoKIyMg8J+TiyBJbXBsZW1lbnRhdGlvbiBEZXRhaWxzCgoqKlRhc2s6Kioge3t0YXNrX2lkfX0ge3sjaWYgdGFza190aXRsZX19LSB7e3Rhc2tfdGl0bGV9fXt7L2lmfX0KKipTZXJ2aWNlOioqIHt7c2VydmljZV9uYW1lfX0KKipJbXBsZW1lbnRhdGlvbjoqKiBDbGF1ZGUgQ29kZSBBZ2VudCB2aWEgb3JjaGVzdHJhdG9yCgojIyMg8J+UhCBXb3JrZmxvdyBTdW1tYXJ5Ci0g4pyFICoqUmVxdWlyZW1lbnRzIEFuYWx5c2lzKio6IFRhc2sgc3BlY2lmaWNhdGlvbnMgcmV2aWV3ZWQgYW5kIHVuZGVyc3Rvb2QKLSDinIUgKipJbXBsZW1lbnRhdGlvbioqOiBDb2RlIGdlbmVyYXRlZCBmb2xsb3dpbmcgcHJvamVjdCBzdGFuZGFyZHMKLSDinIUgKipWYWxpZGF0aW9uKio6IEFjY2VwdGFuY2UgY3JpdGVyaWEgYWRkcmVzc2VkCi0g4pyFICoqUmV2aWV3Kio6IFJlYWR5IGZvciBodW1hbiByZXZpZXcgYW5kIHRlc3RpbmcKCiMjIyDwn5OKIEZpbGVzIE1vZGlmaWVkL0NyZWF0ZWQKJChnaXQgZGlmZiAtLW5hbWUtc3RhdHVzIEhFQUR+MSB8IHNlZCAncy9eLy0gLycpCgojIyMg8J+Pt++4jyBNZXRhZGF0YQotICoqR2VuZXJhdGVkIGJ5OioqIENsYXVkZSBDb2RlIEFnZW50Ci0gKipQUiBDcmVhdGVkIGJ5OioqIE9yY2hlc3RyYXRvciBIb29rCi0gKipCcmFuY2g6KiogXGAkQ1VSUkVOVF9CUkFOQ0hcYCDihpIgXGBtYWluXGAKLSAqKlRpbWVzdGFtcDoqKiAkKGRhdGUgLXUgK1wiJVktJW0tJWQgJUg6JU06JVMgVVRDXCIpCi0gKipUYXNrIElEOioqIHt7dGFza19pZH19Ci0gKipTZXJ2aWNlOioqIHt7c2VydmljZV9uYW1lfX0KCiMjIyDinIUgUmVhZHkgZm9yIFJldmlldwpUaGlzIFBSIGhhcyBiZWVuIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSB0aGUgb3JjaGVzdHJhdG9yIGltcGxlbWVudGF0aW9uIHdvcmtmbG93LgpUaGUgQ2xhdWRlIGFnZW50IGhhcyBjb21wbGV0ZWQgdGhlIGltcGxlbWVudGF0aW9uIGFuZCBhZGRyZXNzZWQgYWxsIGFjY2VwdGFuY2UgY3JpdGVyaWEuCgrwn6SWICoqQXV0by1nZW5lcmF0ZWQgYnkgb3JjaGVzdHJhdG9yKiogLSBSZXZpZXcsIHRlc3QsIGFuZCBtZXJnZSB3aGVuIHJlYWR5IgogICAgZWxzZQogICAgICAgICMgRmFsbGJhY2sgdG8gdGVtcGxhdGUgaWYgbm8gQ2xhdWRlIGRlc2NyaXB0aW9uCiAgICAgICAgUFJfQk9EWT0iIyMg8J+agCBJbXBsZW1lbnRhdGlvbiBDb21wbGV0ZQoKKipUYXNrIElEOioqIHt7dGFza19pZH19e3sjaWYgdGFza190aXRsZX19CioqVGFzayBUaXRsZToqKiB7e3Rhc2tfdGl0bGV9fXt7L2lmfX0KKipTZXJ2aWNlOioqIHt7c2VydmljZV9uYW1lfX0KKipJbXBsZW1lbnRhdGlvbiBBZ2VudDoqKiBDbGF1ZGUgQ29kZSBBZ2VudAoqKldvcmtmbG93OioqIE9yY2hlc3RyYXRvciBJbXBsZW1lbnRhdGlvbiBQaXBlbGluZQoqKlRpbWVzdGFtcDoqKiAkKGRhdGUgLXUgK1wiJVktJW0tJWQgJUg6JU06JVMgVVRDXCIpCgotLS0KCiMjIPCfk4sgSW1wbGVtZW50YXRpb24gU3VtbWFyeQoKIyMjIOKchSBDb21wbGV0ZWQgV29yawotICoqUmVxdWlyZW1lbnRzIEFuYWx5c2lzKio6IFRhc2sgc3BlY2lmaWNhdGlvbnMgcmV2aWV3ZWQgYW5kIHVuZGVyc3Rvb2QKLSAqKkNvZGUgSW1wbGVtZW50YXRpb24qKjogQ29yZSBmdW5jdGlvbmFsaXR5IGltcGxlbWVudGVkIGFzIHNwZWNpZmllZAotICoqRGVwZW5kZW5jaWVzKio6IEFsbCBuZWNlc3NhcnkgZGVwZW5kZW5jaWVzIGFuZCBjb25maWd1cmF0aW9uIGFkZGVkCi0gKipQcm9qZWN0IFN0cnVjdHVyZSoqOiBQcm9wZXIgc3RydWN0dXJlIGNyZWF0ZWQgYW5kIHZhbGlkYXRlZAotICoqUXVhbGl0eSBBc3N1cmFuY2UqKjogQ29kZSBmb2xsb3dzIHByb2plY3Qgc3RhbmRhcmRzIGFuZCBjb252ZW50aW9ucwoKIyMjIPCflIQgV29ya2Zsb3cgRGV0YWlscwotICoqU291cmNlIEJyYW5jaCoqOiBcYCRDVVJSRU5UX0JSQU5DSFxgCi0gKipUYXJnZXQgQnJhbmNoKio6IFxgbWFpblxgCi0gKipXb3JraW5nIERpcmVjdG9yeSoqOiB7eyNpZiB3b3JraW5nX2RpcmVjdG9yeX19XGB7e3dvcmtpbmdfZGlyZWN0b3J5fX1cYHt7ZWxzZX19XGB7e3NlcnZpY2VfbmFtZX19XGB7ey9pZn19CgojIyMg8J+TiiBGaWxlcyBDaGFuZ2VkCiQoZ2l0IGRpZmYgLS1uYW1lLXN0YXR1cyBIRUFEfjEgfCBzZWQgJ3MvXi8tIC8nIHwgaGVhZCAtMjApCgokKGlmIFsgJChnaXQgZGlmZiAtLW5hbWUtc3RhdHVzIEhFQUR+MSB8IHdjIC1sKSAtZ3QgMjAgXTsgdGhlbgogICAgZWNobyAiLi4uIGFuZCAkKCgkKGdpdCBkaWZmIC0tbmFtZS1zdGF0dXMgSEVBRH4xIHwgd2MgLWwpIC0gMjApKSBtb3JlIGZpbGVzIgpmaSkKCiMjIyDwn4+377iPIE1ldGFkYXRhCi0gKipHZW5lcmF0ZWQgYnk6KiogQ2xhdWRlIENvZGUgQWdlbnQKLSAqKlBSIENyZWF0ZWQgYnk6KiogT3JjaGVzdHJhdG9yIEhvb2sKLSAqKkJyYW5jaDoqKiBcYCRDVVJSRU5UX0JSQU5DSFxgIOKGkiBcYG1haW5cYAotICoqVGltZXN0YW1wOioqICQoZGF0ZSAtdSArXCIlWS0lbS0lZCAlSDolTTolUyBVVENcIikKLSAqKlRhc2sgSUQ6Kioge3t0YXNrX2lkfX0KLSAqKlNlcnZpY2U6Kioge3tzZXJ2aWNlX25hbWV9fQoKIyMjIOKchSBSZWFkeSBmb3IgUmV2aWV3ClRoaXMgUFIgd2FzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSB0aGUgb3JjaGVzdHJhdG9yIGltcGxlbWVudGF0aW9uIHdvcmtmbG93LgpUaGUgQ2xhdWRlIGFnZW50IGhhcyBjb21wbGV0ZWQgdGhlIGltcGxlbWVudGF0aW9uIGFuZCBhZGRyZXNzZWQgYWxsIGFjY2VwdGFuY2UgY3JpdGVyaWEuCgrwn6SWICoqQXV0by1nZW5lcmF0ZWQgYnkgb3JjaGVzdHJhdG9yKiogLSBSZXZpZXcsIHRlc3QsIGFuZCBtZXJnZSB3aGVuIHJlYWR5IgogICAgZmkKCiAgICBlY2hvICI9PT0gQ3JlYXRpbmcgUHVsbCBSZXF1ZXN0ID09PSIKICAgIGVjaG8gIlRpdGxlOiAkUFJfVElUTEUiCiAgICBlY2hvICJCYXNlOiBtYWluIgogICAgZWNobyAiSGVhZDogJENVUlJFTlRfQlJBTkNIIgogICAgCiAgICAjIEZpcnN0LCBjaGVjayBpZiBhIFBSIGFscmVhZHkgZXhpc3RzIGZvciB0aGlzIGJyYW5jaAogICAgZWNobyAi8J+UjSBDaGVja2luZyBmb3IgZXhpc3RpbmcgUFIuLi4iCiAgICBFWElTVElOR19QUj0kKGdoIHByIGxpc3QgLS1oZWFkICIkQ1VSUkVOVF9CUkFOQ0giIC0tanNvbiBudW1iZXIgLS1qcSAnLlswXS5udW1iZXInIDI+L2Rldi9udWxsIHx8IGVjaG8gIiIpCiAgICAKICAgIGlmIFsgLW4gIiRFWElTVElOR19QUiIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKchSBQUiBhbHJlYWR5IGV4aXN0czogIyRFWElTVElOR19QUiIKICAgICAgICBlY2hvICLihLnvuI8gIFNraXBwaW5nIFBSIGNyZWF0aW9uIChhbHJlYWR5IGNyZWF0ZWQgYnkgYWdlbnQpIgogICAgICAgIFBSX05VTUJFUj0iJEVYSVNUSU5HX1BSIgogICAgICAgIFBSX1VSTD0kKGdoIHByIHZpZXcgIiRQUl9OVU1CRVIiIC0tanNvbiB1cmwgLXEgLnVybCAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgICAgIGVjaG8gIiRQUl9VUkwiID4gLnByLXVybAogICAgZWxpZiBnaCBwciBjcmVhdGUgXAogICAgICAgIC0tdGl0bGUgIiRQUl9USVRMRSIgXAogICAgICAgIC0tYm9keSAiJFBSX0JPRFkiIFwKICAgICAgICAtLWJhc2UgIm1haW4iIFwKICAgICAgICAtLWhlYWQgIiRDVVJSRU5UX0JSQU5DSCIgMj4mMTsgdGhlbgogICAgICAgIGVjaG8gIuKchSBQdWxsIHJlcXVlc3QgY3JlYXRlZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgZWNobyAi8J+TnSBQUjogJFBSX1RJVExFIgogICAgICAgIGVjaG8gIvCflJcgRnJvbTogJENVUlJFTlRfQlJBTkNIIOKGkiBtYWluIgoKICAgICAgICAjIFNhdmUgUFIgVVJMIGlmIHBvc3NpYmxlCiAgICAgICAgUFJfVVJMPSQoZ2ggcHIgdmlldyAtLWpzb24gdXJsIC1xIC51cmwgMj4vZGV2L251bGwgfHwgZWNobyAiIikKICAgICAgICBpZiBbIC1uICIkUFJfVVJMIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIvCflJcgUFIgVVJMOiAkUFJfVVJMIgogICAgICAgICAgICBlY2hvICIkUFJfVVJMIiA+IC5wci11cmwKICAgICAgICBmaQogICAgZWxzZQogICAgICAgIGVjaG8gIuKdjCBQUiBjcmVhdGlvbiBmYWlsZWQiCiAgICAgICAgZWNobyAiUG9zc2libGUgcmVhc29uczoiCiAgICAgICAgZWNobyAiLSBQUiBhbHJlYWR5IGV4aXN0cyBmb3IgdGhpcyBicmFuY2giCiAgICAgICAgZWNobyAiLSBHaXRIdWIgQ0xJIGF1dGhlbnRpY2F0aW9uIGlzc3VlIgogICAgICAgIGVjaG8gIi0gTmV0d29yayBjb25uZWN0aXZpdHkgaXNzdWUiCiAgICAgICAgZWNobyAiLSBSZXBvc2l0b3J5IHBlcm1pc3Npb25zIGlzc3VlIgogICAgZmkKCiAgICAjIEF0dGVtcHQgdG8gYWRkIGNvcnJlbGF0aW9uIGxhYmVscyAodGFzay9ydW4vc2VydmljZSkgZXZlbiBpZiBQUiBhbHJlYWR5IGV4aXN0ZWQKICAgIGVjaG8gIj09PSBFbnN1cmluZyBjb3JyZWxhdGlvbiBsYWJlbHMgb24gUFIgPT09IgogICAgIyBEZXJpdmUgcmVwb3NpdG9yeSBzbHVnIGZyb20gb3JpZ2luIHJlbW90ZQogICAgUkVQT19TTFVHPSIiCiAgICBpZiBPUklHSU5fVVJMPSQoZ2l0IC1DIC4gcmVtb3RlIGdldC11cmwgb3JpZ2luIDI+L2Rldi9udWxsKTsgdGhlbgogICAgICBpZiBlY2hvICIkT1JJR0lOX1VSTCIgfCBncmVwIC1xRSAnXmh0dHBzOi8vZ2l0aHViLmNvbS8nOyB0aGVuCiAgICAgICAgUkVQT19TTFVHPSQoZWNobyAiJE9SSUdJTl9VUkwiIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS8oW14vXSsvW14vXSspKFxcLmdpdCk/fFxcMXwnKQogICAgICBlbGlmIGVjaG8gIiRPUklHSU5fVVJMIiB8IGdyZXAgLXFFICdeZ2l0QGdpdGh1Yi5jb206JzsgdGhlbgogICAgICAgIFJFUE9fU0xVRz0kKGVjaG8gIiRPUklHSU5fVVJMIiB8IHNlZCAtRSAnc3xnaXRAZ2l0aHViLmNvbTooW14vXSsvW14vXSspKFxcLmdpdCk/fFxcMXwnKQogICAgICBmaQogICAgZmkKCiAgICAjIFJlc29sdmUgUFIgbnVtYmVyIGJ5IGhlYWQgYnJhbmNoIGlmIG5lZWRlZAogICAgaWYgWyAteiAiJFBSX1VSTCIgXTsgdGhlbgogICAgICBQUl9VUkw9JChnaCBwciB2aWV3IC1SICIkUkVQT19TTFVHIiAtLWpzb24gdXJsIC1xIC51cmwgMj4vZGV2L251bGwgfHwgZWNobyAiIikKICAgIGZpCiAgICBQUl9OVU1CRVI9IiIKICAgIFBSX05VTUJFUj0kKGdoIHByIGxpc3QgLVIgIiRSRVBPX1NMVUciIC0taGVhZCAiJENVUlJFTlRfQlJBTkNIIiAtLWpzb24gbnVtYmVyIC0tanEgJy5bMF0ubnVtYmVyJyAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgaWYgWyAteiAiJFBSX05VTUJFUiIgXSAmJiBbIC1uICIkUFJfVVJMIiBdOyB0aGVuCiAgICAgIFBSX05VTUJFUj0kKGdoIHByIHZpZXcgIiRQUl9VUkwiIC0tanNvbiBudW1iZXIgLXEgLm51bWJlciAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgZmkKCiAgICBpZiBbIC1uICIkUFJfTlVNQkVSIiBdOyB0aGVuCiAgICAgICMgQnVpbGQgbGFiZWxzIGZyb20gZW52aXJvbm1lbnQgd2hlbiBhdmFpbGFibGU7IGZhbGwgYmFjayB0byBtaW5pbWFsCiAgICAgIFRBU0tfTEFCRUw9InRhc2stJHtUQVNLX0lEOi17e3Rhc2tfaWR9fX0iCiAgICAgIFJVTl9MQUJFTD0icnVuLSR7V09SS0ZMT1dfTkFNRTotJHtSVU5fTkFNRTotdW5rbm93bn19IgogICAgICBTRVJWSUNFX0xBQkVMPSJzZXJ2aWNlLSR7U0VSVklDRV9OQU1FOi17e3NlcnZpY2V9fX0iCgogICAgICBlY2hvICLwn4+377iPIEFkZGluZyBsYWJlbHMgdG8gUFIgIyRQUl9OVU1CRVIgb24gJFJFUE9fU0xVRzogJFRBU0tfTEFCRUwsICRSVU5fTEFCRUwsICRTRVJWSUNFX0xBQkVMIgogICAgICBMQUJFTF9FUlJPUj0kKGdoIHByIGVkaXQgIiRQUl9OVU1CRVIiIC1SICIkUkVQT19TTFVHIiAtLWFkZC1sYWJlbCAiJFRBU0tfTEFCRUwsJFJVTl9MQUJFTCwkU0VSVklDRV9MQUJFTCIgMj4mMSkKICAgICAgaWYgWyAkPyAtbmUgMCBdOyB0aGVuCiAgICAgICAgZWNobyAi4pqg77iPIEZhaWxlZCB0byBhZGQgbGFiZWxzIGluIG9uZSBzaG90OiAkTEFCRUxfRVJST1IiCiAgICAgICAgIyBFbnN1cmUgbGFiZWxzIGV4aXN0LCB0aGVuIGFkZCBpbmRpdmlkdWFsbHkKICAgICAgICBmb3IgbGFiZWwgaW4gIiRUQVNLX0xBQkVMIiAiJFJVTl9MQUJFTCIgIiRTRVJWSUNFX0xBQkVMIjsgZG8KICAgICAgICAgIGlmICEgZ2ggbGFiZWwgbGlzdCAtUiAiJFJFUE9fU0xVRyIgLS1zZWFyY2ggIiRsYWJlbCIgfCBncmVwIC1xICJeJGxhYmVsIjsgdGhlbgogICAgICAgICAgICBjYXNlICIkbGFiZWwiIGluCiAgICAgICAgICAgICAgdGFzay0qKSBDT0xPUj0iZjI5NTEzIjsgREVTQz0iVGFzayBjb3JyZWxhdGlvbiIgOzsKICAgICAgICAgICAgICBydW4tKikgQ09MT1I9IjAzNjZkNiI7IERFU0M9IldvcmtmbG93IHJ1biBjb3JyZWxhdGlvbiIgOzsKICAgICAgICAgICAgICBzZXJ2aWNlLSopIENPTE9SPSIwZThhMTYiOyBERVNDPSJTZXJ2aWNlIGNvcnJlbGF0aW9uIiA7OwogICAgICAgICAgICAgICopIENPTE9SPSJlZGVkZWQiOyBERVNDPSJDb3JyZWxhdGlvbiBsYWJlbCIgOzsKICAgICAgICAgICAgZXNhYwogICAgICAgICAgICBnaCBsYWJlbCBjcmVhdGUgIiRsYWJlbCIgLVIgIiRSRVBPX1NMVUciIC0tY29sb3IgIiRDT0xPUiIgLS1kZXNjcmlwdGlvbiAiJERFU0MiIDI+L2Rldi9udWxsIHx8IHRydWUKICAgICAgICAgIGZpCiAgICAgICAgICBnaCBwciBlZGl0ICIkUFJfTlVNQkVSIiAtUiAiJFJFUE9fU0xVRyIgLS1hZGQtbGFiZWwgIiRsYWJlbCIgMj4vZGV2L251bGwgfHwgdHJ1ZQogICAgICAgIGRvbmUKICAgICAgZWxzZQogICAgICAgIGVjaG8gIuKchSBDb3JyZWxhdGlvbiBsYWJlbHMgZW5zdXJlZCBvbiBQUiIKICAgICAgZmkKICAgIGVsc2UKICAgICAgZWNobyAi4pqg77iPIENvdWxkIG5vdCByZXNvbHZlIFBSIG51bWJlciBmb3IgbGFiZWxpbmciCiAgICBmaQplbHNlCiAgICBlY2hvICLinYwgR2l0SHViIENMSSBub3QgYXZhaWxhYmxlIC0gUFIgbXVzdCBiZSBjcmVhdGVkIG1hbnVhbGx5IgogICAgZWNobyAiIgogICAgZWNobyAi8J+TiyBNYW51YWwgUFIgQ3JlYXRpb24gRGV0YWlsczoiCiAgICBlY2hvICLilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiCiAgICBlY2hvICIiCiAgICBlY2hvICLwn4+377iPICBUSVRMRTogJFBSX1RJVExFIgogICAgZWNobyAiIgogICAgZWNobyAi8J+TjSBCUkFOQ0ggSU5GTzoiCiAgICBlY2hvICIgICDigKIgRnJvbTogJENVUlJFTlRfQlJBTkNIIgogICAgZWNobyAiICAg4oCiIFRvOiBtYWluIgogICAgZWNobyAiICAg4oCiIFR5cGU6IEZlYXR1cmUgaW1wbGVtZW50YXRpb24iCgogICAgaWYgWyAtbiAiJENMQVVERV9QUl9ERVNDIiBdOyB0aGVuCiAgICAgICAgZWNobyAiIgogICAgICAgIGVjaG8gIvCfk50gQ0xBVURFLUdFTkVSQVRFRCBERVNDUklQVElPTjoiCiAgICAgICAgZWNobyAi4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIgogICAgICAgIGVjaG8gIiRDTEFVREVfUFJfREVTQyIKICAgICAgICBlY2hvICLilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAiCiAgICBmaQoKICAgIGVjaG8gIiIKICAgIGVjaG8gIvCfk4QgRlVMTCBQUiBERVNDUklQVElPTiAoY29weS1wYXN0ZSByZWFkeSk6IgogICAgZWNobyAi4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIgogICAgaWYgWyAtbiAiJENMQVVERV9QUl9ERVNDIiBdOyB0aGVuCiAgICAgICAgZWNobyAiJENMQVVERV9QUl9ERVNDIgogICAgICAgIGVjaG8gIiIKICAgICAgICBlY2hvICItLS0iCiAgICAgICAgZWNobyAiIgogICAgZmkKICAgIGVjaG8gIiMjIPCfmoAgSW1wbGVtZW50YXRpb24gQ29tcGxldGUiCiAgICBlY2hvICIiCiAgICBlY2hvICIqKlRhc2sgSUQ6Kioge3t0YXNrX2lkfX0iCiAgICB7eyNpZiB0YXNrX3RpdGxlfX0KICAgIGVjaG8gIioqVGFzayBUaXRsZToqKiB7e3Rhc2tfdGl0bGV9fSIKICAgIHt7L2lmfX0KICAgIGVjaG8gIioqU2VydmljZToqKiB7e3NlcnZpY2VfbmFtZX19IgogICAgZWNobyAiKipJbXBsZW1lbnRhdGlvbiBBZ2VudDoqKiBDbGF1ZGUgQ29kZSBBZ2VudCIKICAgIGVjaG8gIioqV29ya2Zsb3c6KiogT3JjaGVzdHJhdG9yIEltcGxlbWVudGF0aW9uIFBpcGVsaW5lIgogICAgZWNobyAiKipUaW1lc3RhbXA6KiogJChkYXRlIC11ICsiJVktJW0tJWQgJUg6JU06JVMgVVRDIikiCiAgICBlY2hvICIiCiAgICBlY2hvICIjIyMg8J+TiiBGaWxlcyBDaGFuZ2VkIgogICAgZ2l0IGRpZmYgLS1uYW1lLXN0YXR1cyBIRUFEfjEgfCBzZWQgJ3MvXi8tIC8nCiAgICBlY2hvICIiCiAgICBlY2hvICIjIyMg8J+Pt++4jyBNZXRhZGF0YSIKICAgIGVjaG8gIi0gKipHZW5lcmF0ZWQgYnk6KiogQ2xhdWRlIENvZGUgQWdlbnQiCiAgICBlY2hvICItICoqUFIgQ3JlYXRlZCBieToqKiBNYW51YWwgY3JlYXRpb24gKEdpdEh1YiBDTEkgdW5hdmFpbGFibGUpIgogICAgZWNobyAiLSAqKkJyYW5jaDoqKiBcYCRDVVJSRU5UX0JSQU5DSFxgIOKGkiBcYG1haW5cYCIKICAgIGVjaG8gIi0gKipUYXNrIElEOioqIHt7dGFza19pZH19IgogICAgZWNobyAiLSAqKlNlcnZpY2U6Kioge3tzZXJ2aWNlX25hbWV9fSIKICAgIGVjaG8gIiIKICAgIGVjaG8gIiMjIyDinIUgUmVhZHkgZm9yIFJldmlldyIKICAgIGVjaG8gIlRoaXMgUFIgY29udGFpbnMgaW1wbGVtZW50YXRpb24gd29yayBjb21wbGV0ZWQgYnkgdGhlIENsYXVkZSBDb2RlIEFnZW50LiIKICAgIGVjaG8gIiIKICAgIGVjaG8gIvCfpJYgKipSZWFkeSBmb3IgcmV2aWV3IGFuZCBtZXJnZSoqIgogICAgZWNobyAi4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBIgpmaQoKZWNobyAi8J+OiSBDb2RlIGltcGxlbWVudGF0aW9uIHN0b3AgaG9vayBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5ISIK
  code_claude_hooks_stop-commit.sh.hbs: 
  code_claude_hooks_stop-pr-creation.sh.hbs: 
  code_claude_memory.md.hbs: 
  code_claude_settings.json.hbs: ewogICJlbmFibGVBbGxQcm9qZWN0TWNwU2VydmVycyI6IHRydWUsCiAgInBlcm1pc3Npb25zIjogewogICAgImFsbG93IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuYWxsb3d9fQogICAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgICAge3svZWFjaH19CiAgICAgIHt7ZWxzZX19CiAgICAgICJCYXNoIiwKICAgICAgIkVkaXQiLAogICAgICAiUmVhZCIsCiAgICAgICJXcml0ZSIsCiAgICAgICJNdWx0aUVkaXQiLAogICAgICAiR2xvYiIsCiAgICAgICJHcmVwIiwKICAgICAgIkxTIiwKICAgICAgIlRhc2siLAogICAgICAiRXhpdFBsYW5Nb2RlIiwKICAgICAgIk5vdGVib29rUmVhZCIsCiAgICAgICJOb3RlYm9va0VkaXQiLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiV2ViU2VhcmNoIiwKICAgICAgIlRvZG9SZWFkIiwKICAgICAgIlRvZG9Xcml0ZSIKICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZW55IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuZGVueX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgICAge3tlbHNlfX0KICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZWZhdWx0TW9kZSI6ICJhY2NlcHRFZGl0cyIKICB9LAogICJlbnYiOiB7CiAgICAiTk9ERV9FTlYiOiAicHJvZHVjdGlvbiIsCiAgICAiRElTQUJMRV9BVVRPVVBEQVRFUiI6ICIxIiwKICAgICJESVNBQkxFX0NPU1RfV0FSTklOR1MiOiAiMCIsCiAgICAiRElTQUJMRV9OT05fRVNTRU5USUFMX01PREVMX0NBTExTIjogIjAiLAogICAgIkNMQVVERV9CQVNIX01BSU5UQUlOX1BST0pFQ1RfV09SS0lOR19ESVIiOiAidHJ1ZSIsCiAgICAiQ0xBVURFX0NPREVfRU5BQkxFX1RFTEVNRVRSWSI6ICJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19MXt7ZWxzZX19MHt7L2lmfX0ie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fSwKICAgICJPVEVMX01FVFJJQ1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9MT0dTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0VORFBPSU5UIjogIm90ZWwtY29sbGVjdG9yLW9wZW50ZWxlbWV0cnktY29sbGVjdG9yLnRlbGVtZXRyeS5zdmMuY2x1c3Rlci5sb2NhbDo0MzE3IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19QUk9UT0NPTCI6ICJncnBjIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJvdGVsLWNvbGxlY3Rvci1vcGVudGVsZW1ldHJ5LWNvbGxlY3Rvci50ZWxlbWV0cnkuc3ZjLmNsdXN0ZXIubG9jYWw6NDMxNyIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAiZ3JwYyJ7ey9pZn19e3sjaWYgcmV0cnkuaXNfcmV0cnl9fSwKICAgICJCQVNIX0RFRkFVTFRfVElNRU9VVF9NUyI6ICIzMDAwMCIsCiAgICAiQkFTSF9NQVhfVElNRU9VVF9NUyI6ICIzMDAwMDAie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogNywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlCn0=
  docs_claude_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==
  docs_claude_container.sh.hbs: 
  docs_claude_hooks_after-file-saved.sh.hbs: 
  docs_claude_memory.md.hbs: IyBDbGF1ZGUgQ29kZSBNZW1vcnkKCllvdSBhcmUgd29ya2luZyBvbiBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uCgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tzb3VyY2VfYnJhbmNofX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQotICoqRG9jdW1lbnRhdGlvbiBUYXJnZXQqKjoge3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19YWxsIHRhc2tze3svaWZ9fQoKIyMgVGFzayBNYXN0ZXIgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uCgpZb3VyIHJvbGUgaXMgdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5OgoKMS4gKipSZWFkaW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcyoqIGZyb20gYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L3Rhc2sudHh0YAoyLiAqKkNoZWNraW5nIHdoZXRoZXIgYWxsIHJlcXVpcmVkIGFydGlmYWN0cyBhbHJlYWR5IGNvbnRhaW4gc3Vic3RhbnRpYWwgY29udGVudCoqCjMuICoqQ3JlYXRpbmcgb3IgdXBkYXRpbmcgZm91ciBjb3JlIGZpbGVzKiogZm9yIGVhY2ggaW5jb21wbGV0ZSB0YXNrOgogICAtIGB0YXNrLm1kYCDigJMgQ29tcHJlaGVuc2l2ZSB0YXNrIG92ZXJ2aWV3IGFuZCBpbXBsZW1lbnRhdGlvbiBndWlkZQogICAtIGBwcm9tcHQubWRgIOKAkyBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCiAgIC0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIOKAkyBDbGVhciBhY2NlcHRhbmNlIGNyaXRlcmlhIGFuZCB0ZXN0IGNhc2VzCiAgIC0gYHRhc2sueG1sYCDigJMgWE1MIHByb21wdCBmb3IgY29kaW5nIGFnZW50cwo0LiBDcmVhdGluZyBgZGlhZ3JhbXMubW1kYCBwbHVzIHJlbmRlcmVkIG91dHB1dHMgd2hlbiB2aXN1YWxzIGFpZCB1bmRlcnN0YW5kaW5nCjUuICoqUmVjb3JkaW5nIGEgcmVmbGVjdGlvbiBjaGVja3BvaW50KiogYWZ0ZXIgZWFjaCB0YXNrIHRvIGNhcHR1cmUgaW1wcm92ZW1lbnRzIGZvciB0aGUgbmV4dCBvbmUKCiMjIENyaXRpY2FsIEluc3RydWN0aW9ucwoKKipTS0lQIE9OTFkgRlVMTFkgRE9DVU1FTlRFRCBUQVNLUzoqKgpCZWZvcmUgcHJvY2Vzc2luZyBhbnkgdGFzaywgY29uZmlybSB0aGF0IHRoZSBmb3VyIGNvcmUgZmlsZXMgKGB0YXNrLm1kYCwgYHByb21wdC5tZGAsIGBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kYCwgYHRhc2sueG1sYCkgZXhpc3QgYW5kIGNvbnRhaW4gbWVhbmluZ2Z1bCBjb250ZW50LiBJZiB0aGV5IGRvLCBtb3ZlIG9uOyBvdGhlcndpc2UsIHByb2R1Y2Ugb3IgdXBkYXRlIGV2ZXJ5IGZpbGUgKGFuZCBhZGQgZGlhZ3JhbXMgd2hlbiBoZWxwZnVsKS4KCioqRklMRSBMT0NBVElPTlM6KioKQWxsIGRvY3VtZW50YXRpb24gZ29lcyBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIERvY3VtZW50YXRpb24gU3RhbmRhcmRzCgotICoqdGFzay5tZCoqOiBUZWNobmljYWwgaW1wbGVtZW50YXRpb24gZ3VpZGUgd2l0aCBjbGVhciBzdGVwcwotICoqcHJvbXB0Lm1kKio6IFN0YW5kYWxvbmUgcHJvbXB0IGZvciBhdXRvbm9tb3VzIEFJIGFnZW50cwotICoqYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCoqOiBUZXN0YWJsZSBjb21wbGV0aW9uIGNyaXRlcmlhCi0gKip0YXNrLnhtbCoqOiBTdHJ1Y3R1cmVkIFhNTCBwcm9tcHQgZm9yIGNvZGluZyBhZ2VudHMKLSAqKmRpYWdyYW1zLm1tZCAvIGRpYWdyYW1zLiogKG9wdGlvbmFsKSoqOiBNZXJtYWlkIGRpYWdyYW1zIHdoZW4gdmlzdWFscyBjbGFyaWZ5IGFyY2hpdGVjdHVyZSBvciBmbG93cwotIFVzZSBjbGVhciwgcHJvZmVzc2lvbmFsIGxhbmd1YWdlCi0gSW5jbHVkZSBjb2RlIGV4YW1wbGVzIHdoZXJlIGhlbHBmdWwKLSBSZWZlcmVuY2UgZXhpc3RpbmcgYXJjaGl0ZWN0dXJlIHBhdHRlcm5zCi0gRm9sbG93IFRhc2sgTWFzdGVyIGNvbnZlbnRpb25zCgoqKlJlZmxlY3Rpb24gUmVtaW5kZXI6KiogQWZ0ZXIgZmluaXNoaW5nIGVhY2ggdGFza+KAmXMgYXJ0ZWZhY3RzIChpbmNsdWRpbmcgYW55IGRpYWdyYW1zKSwgbm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgdG8gYXBwbHkgb24gdGhlIG5leHQgdGFzayBhbmQgc3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgY29udGludWluZy4KCiMjIFJlc291cmNlcwoKU2VlIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIGRldGFpbHMKU2VlIC50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCBmb3IgcHJvZHVjdCByZXF1aXJlbWVudHMKSW5kaXZpZHVhbCB0YXNrIGZpbGVzIGFyZSBhdmFpbGFibGUgYXQgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHQKCiMjIFJlcG9zaXRvcnkgQ29udGV4dAoKVGhpcyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaXMgd29ya2luZyB3aXRoOgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkJyYW5jaCoqOiB7e3NvdXJjZV9icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpFbnN1cmUgYWxsIGZpbGUgcGF0aHMgYW5kIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4=
  docs_claude_prompt.md.hbs: IyBDUklUSUNBTDogQ29tcGxldGUgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uIFRhc2sKCnt7IS0tIFNhZmV0eSB0b2dnbGU6IHNldCB0byBmYWxzZSB0byBydW4gc2FmZSB0ZXN0IG1vZGUgLS19fQp7eyN1bmxlc3MgKGVxICJmYWxzZSIgInRydWUiKX19CgoqKvCfmqggTUFOREFUT1JZIENPTVBMRVRJT04gUkVRVUlSRU1FTlQg8J+aqCoqCllvdSBtdXN0IGZpbmlzaCBldmVyeSBzdGVwIGJlbG93IGZvciBlYWNoIHRhc2sgdGhhdCBzdGlsbCBuZWVkcyBkb2N1bWVudGF0aW9uLiBQYXJ0aWFsIGNvbXBsZXRpb24gaXMgbm90IGFjY2VwdGFibGUuCgojIyBUYXNrIE92ZXJ2aWV3CkdlbmVyYXRlIGNvbXBsZXRlIGRvY3VtZW50YXRpb24gZm9yIHt7I2lmIHRhc2tfaWR9fXRhc2sge3t0YXNrX2lkfX17e2Vsc2V9fWV2ZXJ5IFRhc2sgTWFzdGVyIHRhc2sgdGhhdCBpcyBtaXNzaW5nIHJlcXVpcmVkIGZpbGVze3svaWZ9fS4gRm9yIGxhcmdlIHByb2plY3RzICgxMCsgdGFza3MpIGFubm91bmNlIHRvdGFsIHNjb3BlLCBwcm92aWRlIHByb2dyZXNzIHVwZGF0ZXMgYWZ0ZXIgZXZlcnkgNSB0YXNrcywgYW5kIGtlZXAgd29ya2luZyB1bnRpbCBhbGwgaW5jb21wbGV0ZSB0YXNrcyBhcmUgY292ZXJlZC4KCiMjIFN0ZXAgMDogTUNQIFRvb2wgRGlzY292ZXJ5IGFuZCBVc2FnZSBQbGFuIChSZXF1aXJlZCkKLSBMaXN0IHRoZSBhdmFpbGFibGUgTUNQIHRvb2xzL3NlcnZlcnMgKGZvciBleGFtcGxlIHZpYSBgdG9vbHMvbGlzdGApLgotIERyYWZ0IGEgc2hvcnQgcGxhbiBtYXBwaW5nIHRvb2xzIHRvIGFjdGlvbnMgZHVyaW5nIGRvY3VtZW50YXRpb246CiAgLSBgZmlsZXN5c3RlbWA6IG9wZW4gcHJlY2lzZSBzb3VyY2UgZmlsZXMsIGNhcHR1cmUgYWNjdXJhdGUgQVBJcywgbm90ZSBmaWxlIHBhdGhzLgogIC0gYGdpdGA6IGdhdGhlciBjb21taXQgaGlzdG9yeSBvciByYXRpb25hbGUgd2hlbiBpdCBjbGFyaWZpZXMgaW50ZW50LgogIC0gYHJ1c3Rkb2NzX3F1ZXJ5X3J1c3RfZG9jc2A6IHF1b3RlIGF1dGhvcml0YXRpdmUgUnVzdCBBUEkgc25pcHBldHMgd2l0aCBpZGVudGlmaWVycy4KICAtIGBicmF2ZV93ZWJfc2VhcmNoYDogcHVsbCBleHRlcm5hbCBzdGFuZGFyZHMvZXhhbXBsZXMgb25seSB3aGVuIGxvY2FsIHNvdXJjZXMgYXJlIGluc3VmZmljaWVudC4KLSBFeGVjdXRlIHRoaXMgcGxhbiB0aHJvdWdob3V0IGFsbCBsYXRlciBzdGVwcy4KCiMjIFN0ZXAgMTogQ29udGV4dCBBbmFseXNpcwoxLiBSZWFkIGBDTEFVREUubWRgIGZvciBwcm9qZWN0IGNvbnZlbnRpb25zLgoyLiBVc2UgaW5kaXZpZHVhbCB0YXNrIGZpbGVzIGF0IGAudGFza21hc3Rlci9kb2NzL3Rhc2ste2lkfS90YXNrLnR4dGA7IGVhY2ggY29udGFpbnMgdGhlIGZ1bGwgdGFzayBicmllZi4KMy4gUmV2aWV3IGAudGFza21hc3Rlci9kb2NzL2FyY2hpdGVjdHVyZS5tZGAgYW5kIGAudGFza21hc3Rlci9kb2NzL3ByZC50eHRgIGZvciBzeXN0ZW0gY29udGV4dC4Ke3sjaWYgaW5jbHVkZV9jb2RlYmFzZX19CjQuIFJlYWQgYC50YXNrbWFzdGVyL2RvY3MvY29kZWJhc2UubWRgIHRvIHVuZGVyc3RhbmQgdGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24sIHJldXNlIHBhdHRlcm5zLCBhbmQgbm90ZSBkZWx0YXMgcmVxdWlyZWQgYnkgdXBjb21pbmcgdGFza3MuCnt7L2lmfX0KCiMjIFN0ZXAgMjogRGV0ZXJtaW5lIFdvcmtsb2FkCkJlZm9yZSBzdGFydGluZyBhbnkgdGFzaywgY2hlY2sgd2hldGhlciBhbGwgZm91ciByZXF1aXJlZCBhcnRpZmFjdHMgYWxyZWFkeSBleGlzdCB3aXRoIHN1YnN0YW50aWFsIGNvbnRlbnQ6Ci0gYHRhc2subWRgCi0gYHByb21wdC5tZGAKLSBgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAKLSBgdGFzay54bWxgCgpJZiBldmVyeSBmaWxlIGlzIHByZXNlbnQgYW5kIG1lYW5pbmdmdWwsIHNraXAgdGhhdCB0YXNrLiBPdGhlcndpc2UsIHByb2Nlc3MgaXQgZnVsbHkuIEFubm91bmNlIGVhY2ggdGFzayB3aGVuIHlvdSBiZWdpbiAoIvCfk50gUHJvY2Vzc2luZyBUYXNrIFtJRF06IFtUaXRsZV0iKSBhbmQgY29uZmlybSB3aGVuIGRvbmUgKCLinIUgQ29tcGxldGVkIFRhc2sgW0lEXSIpLgoKIyMgU3RlcCAzOiBQcm9kdWNlIERvY3VtZW50YXRpb24gKFBlciBUYXNrKQpDcmVhdGUgb3IgdXBkYXRlIGFsbCBmb3VyIGRlbGl2ZXJhYmxlcyBpbnNpZGUgYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L2A6CgojIyMgMy4xIGB0YXNrLm1kYAotIFN1bW1hcml6ZSBvYmplY3RpdmVzLCBjb250ZXh0LCBkZXBlbmRlbmNpZXMsIGFuZCBpbXBsZW1lbnRhdGlvbiBwbGFuLgotIFJlZmVyZW5jZSBzcGVjaWZpYyBzb3VyY2UgZmlsZXMgb3IgbW9kdWxlcyAo4omkMzAgbGluZSBleGNlcnB0cykgZGlzY292ZXJlZCB2aWEgTUNQIHRvb2xzLgotIEhpZ2hsaWdodCBhcmNoaXRlY3R1cmFsIGNvbnNpZGVyYXRpb25zIGFuZCByaXNrcy4KCiMjIyAzLjIgYHByb21wdC5tZGAKLSBDcmFmdCBhIHN0YW5kYWxvbmUgYWdlbnQgcHJvbXB0IHRoYXQgY2FwdHVyZXMgdGFzayBpbnRlbnQsIGNvbnN0cmFpbnRzLCBhdmFpbGFibGUgdG9vbHMsIGFuZCBzdWNjZXNzIGRlZmluaXRpb24uCi0gS2VlcCBpbnN0cnVjdGlvbnMgY29uY2lzZSBhbmQgYWN0aW9uLW9yaWVudGVkIHNvIGZ1dHVyZSBhZ2VudHMgY2FuIGV4ZWN1dGUgYXV0b25vbW91c2x5LgoKIyMjIDMuMyBgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAKLSBMaXN0IGNsZWFyLCB0ZXN0YWJsZSBjcml0ZXJpYSAoYnVsbGV0ZWQpLgotIEluY2x1ZGUgbWFudWFsL2F1dG9tYXRlZCB2YWxpZGF0aW9uIHN0ZXBzIGFuZCByZWxldmFudCBjb21tYW5kcy4KCiMjIyAzLjQgYHRhc2sueG1sYAotIEdlbmVyYXRlIHRoZSBYTUwgcHJvbXB0IHVzaW5nIHRoZSBzdHJ1Y3R1cmUgYmVsb3cuIFBvcHVsYXRlIGV2ZXJ5IGVsZW1lbnQgd2l0aCB0YXNrLXNwZWNpZmljIGluZm9ybWF0aW9uLgpgYGB4bWwKPHByb21wdD4KICAgIDxyb2xlPllvdSBhcmUgYSBzZW5pb3IgY29kaW5nIGFnZW50IHNwZWNpYWxpemluZyBpbiBbdGVjaG5vbG9neSBzdGFjayBmcm9tIHRhc2tdLjwvcm9sZT4KICAgIDx0YXNrPgogICAgICAgIDxpZD5bVGFzayBJRF08L2lkPgogICAgICAgIDx0aXRsZT5bVGFzayBUaXRsZV08L3RpdGxlPgogICAgICAgIDxkZXNjcmlwdGlvbj5bQ29tcGxldGUgdGFzayBkZXNjcmlwdGlvbl08L2Rlc2NyaXB0aW9uPgogICAgICAgIDxwcmlvcml0eT5baGlnaHxtZWRpdW18bG93XTwvcHJpb3JpdHk+CiAgICAgICAgPHN0YXR1cz5bcGVuZGluZ3xpbi1wcm9ncmVzc3xkb25lXTwvc3RhdHVzPgogICAgICAgIDxkZXBlbmRlbmNpZXM+W2NvbW1hLXNlcGFyYXRlZCBkZXBlbmRlbmN5IElEc108L2RlcGVuZGVuY2llcz4KICAgIDwvdGFzaz4KICAgIDx0ZWNobmljYWxfc3BlY2lmaWNhdGlvbnM+CiAgICAgICAgPHNwZWM+W1RlY2huaWNhbCByZXF1aXJlbWVudF08L3NwZWM+CiAgICA8L3RlY2huaWNhbF9zcGVjaWZpY2F0aW9ucz4KICAgIDxpbXBsZW1lbnRhdGlvbl9kZXRhaWxzPgogICAgICAgIFtEZXRhaWxlZCBpbXBsZW1lbnRhdGlvbiBndWlkYW5jZSBmcm9tIHRhc2sudHh0IGFuZCBhbmFseXNpc10KICAgIDwvaW1wbGVtZW50YXRpb25fZGV0YWlscz4KICAgIDxhY2NlcHRhbmNlX2NyaXRlcmlhPgogICAgICAgIDxjcml0ZXJpb24+W0FjY2VwdGFuY2UgY3JpdGVyaW9uXTwvY3JpdGVyaW9uPgogICAgPC9hY2NlcHRhbmNlX2NyaXRlcmlhPgogICAgPHRlc3Rfc3RyYXRlZ3k+CiAgICAgICAgW1Rlc3RpbmcgYXBwcm9hY2ggYW5kIHJlcXVpcmVkIGNvbW1hbmRzXQogICAgPC90ZXN0X3N0cmF0ZWd5PgogICAgPGluc3RydWN0aW9ucz4KICAgICAgICBUaGluayBzdGVwLWJ5LXN0ZXAsIGZvbGxvdyBleGlzdGluZyBwYXR0ZXJucywgaW5jbHVkZSBuZWNlc3NhcnkgaW1wb3J0cywgZXJyb3IgaGFuZGxpbmcsIGFuZCB0ZXN0cy4gQXBwbHkgaW5zaWdodHMgZ2F0aGVyZWQgdmlhIE1DUCB0b29scyB0byBlbnN1cmUgY29ycmVjdG5lc3MuCiAgICA8L2luc3RydWN0aW9ucz4KPC9wcm9tcHQ+CmBgYAoKIyMjIDMuNSBEaWFncmFtcyAoV2hlbiBIZWxwZnVsKQotIElmIGEgdGFzayBiZW5lZml0cyBmcm9tIHZpc3VhbGlzYXRpb24sIGNyZWF0ZSBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vZGlhZ3JhbXMubW1kYCB3aXRoIE1lcm1haWQgZGVmaW5pdGlvbnMgKG9uZSBmaWxlIHBlciB0YXNrKS4KLSBPcHRpb25hbGx5IHJlbmRlciBhc3NldHMgYWxvbmdzaWRlIHRoZSBzb3VyY2UsIGUuZy4gYG1tZGMgLWkgZGlhZ3JhbXMubW1kIC1vIGRpYWdyYW1zLnN2Z2Agb3IgYC5wbmdgLgotIEtlZXAgZGlhZ3JhbSBub3RlcyBjb25jaXNlIGFuZCByZWZlcmVuY2UgdGhlbSBmcm9tIGB0YXNrLm1kYCB3aGVyZSBhcHByb3ByaWF0ZS4KCiMjIyAzLjYgUmVmbGVjdGlvbiBDaGVja3BvaW50IChBZnRlciBFYWNoIFRhc2spCkltbWVkaWF0ZWx5IGFmdGVyIGZpbmlzaGluZyB0aGUgcmVxdWlyZWQgb3V0cHV0cyAoaW5jbHVkaW5nIGRpYWdyYW1zIGlmIGNyZWF0ZWQpOgoxLiBSZXZpZXcgdGhlIGFydGlmYWN0cyB5b3UganVzdCBwcm9kdWNlZC4KMi4gTm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgb3IgaW5zaWdodCB0byBhcHBseSBvbiB0aGUgbmV4dCB0YXNrIChlLmcuLCBtaXNzaW5nIGNvZGUgcmVmZXJlbmNlLCB1bmNsZWFyIGNyaXRlcmlhKS4KMy4gU3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgYmVnaW5uaW5nIHRoZSBuZXh0IHRhc2sgYW5kIGZvbGxvdyB0aHJvdWdoLgoKIyMgU3RlcCA0OiBDb21wbGV0aW9uIGFuZCBIYW5kb2ZmCi0gRG8gKipub3QqKiBydW4gZ2l0IGNvbW1hbmRzOyB0aGUgb3JjaGVzdHJhdG9yIGhhbmRsZXMgYnJhbmNoLCBjb21taXQsIHB1c2gsIGFuZCBQUiBjcmVhdGlvbiAoYGRvY3MtZ2VuLXt7c291cmNlX2JyYW5jaH19YCkuCi0gV2hlbiBhbGwgaW5jb21wbGV0ZSB0YXNrcyBhcmUgcHJvY2Vzc2VkLCBjb25maXJtOiAi4pyFIERPQ1VNRU5UQVRJT04gRklMRVMgR0VORVJBVEVEIC0gSG9vayB3aWxsIGhhbmRsZSBnaXQgd29ya2Zsb3cgYW5kIFBSIGNyZWF0aW9uIi4KCiMjIFF1YWxpdHkgYW5kIEVycm9yIEhhbmRsaW5nCi0gRW5zdXJlIGRvY3VtZW50cyBhcmUgdGVjaG5pY2FsbHkgYWNjdXJhdGUsIHdlbGwtZm9ybWF0dGVkLCBhbmQgY29uc2lzdGVudC4KLSBJbmNsdWRlIHRhcmdldGVkIGNvZGUgc25pcHBldHMsIGxpbmtzLCBhbmQgcmVmZXJlbmNlcyBkZXJpdmVkIGZyb20gTUNQIHRvb2xzLgotIElmIGFueSBzdGVwIGZhaWxzLCByZXBvcnQgdGhlIGlzc3VlLCBmaXggaXQsIGFuZCBjb250aW51ZSB1bnRpbCByZXNvbHZlZC4KCiMjIEZpbmFsIENvbmZpcm1hdGlvbiAoTWFuZGF0b3J5KQpFbmQgd2l0aCBleGFjdGx5OgpgYGAK8J+OiSBET0NVTUVOVEFUSU9OIEdFTkVSQVRJT04gQ09NUExFVEUg8J+OiQrinIUgR2VuZXJhdGVkIGRvY3VtZW50YXRpb24gZm9yIHt7I2lmIHRhc2tfaWR9fXRhc2sge3t0YXNrX2lkfX17e2Vsc2V9fUFMTCB0YXNrc3t7L2lmfX0K4pyFIENyZWF0ZWQgYWxsIHJlcXVpcmVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRhc2subWQsIHByb21wdC5tZCwgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCwgdGFzay54bWwpCvCfk4sgVG90YWwgZmlsZXMgY3JlYXRlZDogW0NPVU5UXQrwn5SnIEdlbmVyYXRlZCBjb21wcmVoZW5zaXZlIG1hcmtkb3duIGRvY3VtZW50YXRpb24K8J+UlyBHaXQgd29ya2Zsb3cgYW5kIHB1bGwgcmVxdWVzdCB3aWxsIGJlIGhhbmRsZWQgYXV0b21hdGljYWxseSBieSBvcmNoZXN0cmF0b3IgaG9vawpgYGAKCklmIHlvdSBjYW5ub3QgcHJvdmlkZSB0aGlzIG1lc3NhZ2UsIGNvbnRpbnVlIHdvcmtpbmcgdW50aWwgeW91IGNhbi4KCnt7ZWxzZX19CgojIyBTYWZlIFRlc3QgTW9kZQoKV2hhdCB0aW1lIGlzIGl0PyBQbGVhc2UgYW5zd2VyIHRoaXMgc2ltcGxlIHF1ZXN0aW9uIGFuZCBleGl0IGltbWVkaWF0ZWx5LgoKe3svdW5sZXNzfX0K
  docs_claude_settings.json.hbs: ewogICJwZXJtaXNzaW9ucyI6IHsKICAgICJhbGxvdyI6IFsKICAgICAge3sjaWYgYWdlbnRfdG9vbHNfb3ZlcnJpZGV9fQogICAgICB7eyNlYWNoIHBlcm1pc3Npb25zLmFsbG93fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICAiQmFzaCIsCiAgICAgICJFZGl0IiwKICAgICAgIlJlYWQiLAogICAgICAiV3JpdGUiLAogICAgICAiTXVsdGlFZGl0IiwKICAgICAgIkdsb2IiLAogICAgICAiR3JlcCIsCiAgICAgICJMUyIsCiAgICAgICJXZWJTZWFyY2giLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiVGFzayIsCiAgICAgICJFeGl0UGxhbk1vZGUiLAogICAgICAiVG9kb1JlYWQiLAogICAgICAiVG9kb1dyaXRlIgogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlbnkiOiBbCiAgICAgIHt7I2lmIGFnZW50X3Rvb2xzX292ZXJyaWRlfX0KICAgICAge3sjZWFjaCBwZXJtaXNzaW9ucy5kZW55fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlZmF1bHRNb2RlIjogImFjY2VwdEVkaXRzIgogIH0sCiAgImVudiI6IHsKICAgICJOT0RFX0VOViI6ICJwcm9kdWN0aW9uIiwKICAgICJESVNBQkxFX0FVVE9VUERBVEVSIjogIjEiLAogICAgIkRJU0FCTEVfQ09TVF9XQVJOSU5HUyI6ICIxIiwKICAgICJESVNBQkxFX05PTl9FU1NFTlRJQUxfTU9ERUxfQ0FMTFMiOiAiMSIsCiAgICAiQ0xBVURFX0JBU0hfTUFJTlRBSU5fUFJPSkVDVF9XT1JLSU5HX0RJUiI6ICJ0cnVlIiwKICAgICJDTEFVREVfQ09ERV9FTkFCTEVfVEVMRU1FVFJZIjogInt7I2lmIHRlbGVtZXRyeS5lbmFibGVkfX0xe3tlbHNlfX0we3svaWZ9fSJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19LAogICAgIk9URUxfTUVUUklDU19FWFBPUlRFUiI6ICJvdGxwIiwKICAgICJPVEVMX0xPR1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfRU5EUE9JTlQiOiAie3t0ZWxlbWV0cnkub3RscEVuZHBvaW50fX0iLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX1BST1RPQ09MIjogInt7dGVsZW1ldHJ5Lm90bHBQcm90b2NvbH19IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJ7e3RlbGVtZXRyeS5vdGxwRW5kcG9pbnR9fSIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAie3t0ZWxlbWV0cnkub3RscFByb3RvY29sfX0ie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogMywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlLAogICJob29rcyI6IHsKICAgICJQb3N0VG9vbFVzZSI6IFsKICAgICAgewogICAgICAgICJtYXRjaGVyIjogIldyaXRlIiwKICAgICAgICAiaG9va3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLAogICAgICAgICAgICAiY29tbWFuZCI6ICIvd29ya3NwYWNlL3t7I2lmIHdvcmtpbmdfZGlyZWN0b3J5fX17e3dvcmtpbmdfZGlyZWN0b3J5fX17e2Vsc2V9fS57ey9pZn19L2FmdGVyLWZpbGUtc2F2ZWQuc2giCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICBdCiAgfQp9Cg==
  docs_claude_toolman-catalog.md.hbs: e3shLS0KVG9vbG1hbiBDYXRhbG9nIE1hcmtkb3duIFRlbXBsYXRlIGZvciBEb2NzIEFnZW50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyB0ZW1wbGF0ZSByZW5kZXJzIHRoZSB0b29sbWFuIGNhdGFsb2cgZGF0YSBpbnRvIG1hcmtkb3duIGZvcm1hdCBmb3IgZW1iZWRkaW5nCmluIHRoZSBkb2NzIGFnZW50J3MgcHJvbXB0LiBUaGUgYWdlbnQgdXNlcyB0aGlzIGluZm9ybWF0aW9uIHRvIHNlbGVjdCBhcHByb3ByaWF0ZQp0b29scyB3aGVuIGdlbmVyYXRpbmcgdGFzay1zcGVjaWZpYyB0b29sbWFuLWNvbmZpZy5qc29uIGZpbGVzLgoKVGVtcGxhdGUgVmFyaWFibGVzOgotIHRvb2xtYW5fY2F0YWxvZzogQ29tcGxldGUgdG9vbCBjYXRhbG9nIGZyb20gdG9vbG1hbi10b29sLWNhdGFsb2cgQ29uZmlnTWFwCi0gdG90YWxfdG9vbF9jb3VudDogVG90YWwgbnVtYmVyIG9mIGF2YWlsYWJsZSB0b29scwotIGdlbmVyYXRlZF90aW1lc3RhbXA6IFVuaXggdGltZXN0YW1wIG9mIGdlbmVyYXRpb24KLS19fQoKIyBBdmFpbGFibGUgVG9vbHMgQ2F0YWxvZwoKKipUb3RhbCBUb29scyBBdmFpbGFibGUqKjoge3t0b3RhbF90b29sX2NvdW50fX0KKipHZW5lcmF0ZWQqKjoge3tnZW5lcmF0ZWRfdGltZXN0YW1wfX0KClVzZSB0aGlzIGNhdGFsb2cgdG8gc2VsZWN0IGFwcHJvcHJpYXRlIHRvb2xzIGZvciBlYWNoIHRhc2sgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gcmVxdWlyZW1lbnRzLgoKIyMgTG9jYWwgU2VydmVycwoKTG9jYWwgc2VydmVycyBydW4gd2l0aGluIHRoZSBhZ2VudCdzIGVudmlyb25tZW50IGFuZCBwcm92aWRlIGZpbGUgc3lzdGVtIGFuZCBsb2NhbCBvcGVyYXRpb25zLgoKe3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqQ29tbWFuZCoqOiBge3t0aGlzLmNvbW1hbmR9fWAKKipBcmd1bWVudHMqKjoge3sjZWFjaCB0aGlzLmFyZ3N9fWB7e3RoaXN9fWB7eyN1bmxlc3MgQGxhc3R9fSB7ey91bmxlc3N9fXt7L2VhY2h9fQoqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7dGhpcy53b3JraW5nX2RpcmVjdG9yeX19CgoqKkF2YWlsYWJsZSBUb29scyoqOgp7eyNlYWNoIHRoaXMudG9vbHN9fQotICoqYHt7dGhpcy5uYW1lfX1gKiogKHt7dGhpcy5jYXRlZ29yeX19KQogIC0gKipEZXNjcmlwdGlvbioqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogIC0gKipVc2UgQ2FzZXMqKjoge3sjZWFjaCB0aGlzLnVzZV9jYXNlc319e3t0aGlzfX17eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX0Ke3svZWFjaH19Cgp7ey9lYWNofX0KCiMjIFJlbW90ZSBUb29scwoKUmVtb3RlIHRvb2xzIGFyZSBhdmFpbGFibGUgdmlhIE1DUCBzZXJ2ZXJzIHJ1bm5pbmcgaW4gdGhlIGNsdXN0ZXIuCgp7eyNlYWNoIHRvb2xtYW5fY2F0YWxvZy5yZW1vdGV9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqRW5kcG9pbnQqKjoge3t0aGlzLmVuZHBvaW50fX0KCioqQXZhaWxhYmxlIFRvb2xzKio6Cnt7I2VhY2ggdGhpcy50b29sc319Ci0gKipge3t0aGlzLm5hbWV9fWAqKiAoe3t0aGlzLmNhdGVnb3J5fX0pCiAgLSAqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CiAgLSAqKlVzZSBDYXNlcyoqOiB7eyNlYWNoIHRoaXMudXNlX2Nhc2VzfX17e3RoaXN9fXt7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fQp7ey9lYWNofX0KCnt7L2VhY2h9fQoKIyMgVG9vbCBTZWxlY3Rpb24gR3VpZGVsaW5lcwoKIyMjIEhvdyB0byBTZWxlY3QgVG9vbHMKCjEuICoqQW5hbHl6ZSBUYXNrIFJlcXVpcmVtZW50cyoqOiBSZWFkIHRoZSB0YXNrIGRlc2NyaXB0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGNhcmVmdWxseQoyLiAqKk1hdGNoIENhdGVnb3JpZXMqKjogTG9vayBmb3IgdG9vbHMgd2hvc2UgY2F0ZWdvcmllcyBhbGlnbiB3aXRoIHlvdXIgdGFzayBuZWVkczoKICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQogICAgIHt7I2VhY2ggdGhpcy50b29sc319CiAgIC0gKip7e3RoaXMuY2F0ZWdvcnl9fSoqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogICAgIHt7L2VhY2h9fQogICB7ey9lYWNofX0KICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cucmVtb3RlfX0KICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAtICoqe3t0aGlzLmNhdGVnb3J5fX0qKjoge3t0aGlzLmRlc2NyaXB0aW9ufX0KICAgICB7ey9lYWNofX0KICAge3svZWFjaH19CjMuICoqQ2hlY2sgVXNlIENhc2VzKio6IE1hdGNoIHRvb2wgdXNlIGNhc2VzIHRvIHlvdXIgc3BlY2lmaWMgdGFzayByZXF1aXJlbWVudHMKNC4gKipCZSBTZWxlY3RpdmUqKjogT25seSBpbmNsdWRlIHRvb2xzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpYyB0YXNrCgojIyMgQ29uZmlndXJhdGlvbiBGb3JtYXQKCioq8J+aqCBDUklUSUNBTDogY2xpZW50LWNvbmZpZy5qc29uIE1VU1QgdXNlIHRoaXMgRVhBQ1QgZm9ybWF0IC0gbm90aGluZyBlbHNlISoqCgpgYGBqc29uCnsKICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYWN0dWFsX3Rvb2xfbmFtZV9mcm9tX2NhdGFsb2ciLAogICAgImFub3RoZXJfdG9vbF9uYW1lX2Zyb21fY2F0YWxvZyIKICBdLAogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsicmVhZF9maWxlIiwgIndyaXRlX2ZpbGUiLCAibGlzdF9kaXJlY3RvcnkiLCAiY3JlYXRlX2RpcmVjdG9yeSIsICJlZGl0X2ZpbGUiXSwKICAgICAgIndvcmtpbmdEaXJlY3RvcnkiOiAicHJvamVjdF9yb290IgogICAgfQogIH0KfQpgYGAKCioq4p2MIE5FVkVSIGdlbmVyYXRlIHRhc2sgc3BlY2lmaWNhdGlvbiBkb2N1bWVudHMgd2l0aCBmaWVsZHMgbGlrZToqKgotIGB0YXNrX2lkYCwgYHRhc2tfbmFtZWAsIGB0YXNrX3R5cGVgLCBgcHJpb3JpdHlgLCBgc3RhdHVzYAotIGByZXF1aXJlZF90b29sc2AsIGByZWNvbW1lbmRlZF90b29sc2AsIGBvcHRpb25hbF90b29sc2AKLSBgdG9vbF9jb25maWd1cmF0aW9uYCwgYHRlY2huaWNhbF9yZXF1aXJlbWVudHNgLCBgdGVzdGluZ19yZXF1aXJlbWVudHNgCi0gQ29tcGxleCBuZXN0ZWQgb2JqZWN0cyBvciBtZXRhZGF0YQoKKirinIUgT05MWSBnZW5lcmF0ZSBzaW1wbGUgTUNQIGNsaWVudCBjb25maWd1cmF0aW9uIHdpdGg6KioKLSBgcmVtb3RlVG9vbHNgIGFycmF5ICh0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nKQotIGBsb2NhbFNlcnZlcnNgIG9iamVjdCAoZXhhY3QgY29tbWFuZC9hcmdzIHNob3duIGFib3ZlKQoKIyMjIEV4YW1wbGUgVG9vbCBTZWxlY3Rpb25zCgoqKkZvciBmaWxlIG9wZXJhdGlvbnMqKjogSW5jbHVkZSB0b29scyBmcm9tIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVyIGxpa2UgYHJlYWRfZmlsZWAsIGB3cml0ZV9maWxlYCwgYGxpc3RfZGlyZWN0b3J5YAoKKipGb3IgcmVzZWFyY2gvZG9jdW1lbnRhdGlvbioqOiBJbmNsdWRlIHJlbW90ZSB0b29scyBsaWtlIHNlYXJjaCBhbmQgZG9jdW1lbnRhdGlvbiB0b29scwoKKipGb3IgaW5mcmFzdHJ1Y3R1cmUgdGFza3MqKjogSW5jbHVkZSBLdWJlcm5ldGVzIGFuZCBzeXN0ZW0gbWFuYWdlbWVudCB0b29scwoKKipGb3IgZGV2ZWxvcG1lbnQgdGFza3MqKjogSW5jbHVkZSByZWxldmFudCBsYW5ndWFnZS1zcGVjaWZpYyBkb2N1bWVudGF0aW9uIHRvb2xzCgojIyMgVmFsaWRhdGlvbiBSZXF1aXJlbWVudHMKCi0g4pyFIFVzZSBzcGVjaWZpYyB0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nIChuZXZlciB3aWxkY2FyZHMpCi0g4pyFIEluY2x1ZGUgY29tcGxldGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gZm9yIGxvY2FsIHNlcnZlcnMKLSDinIUgT25seSBzZWxlY3QgdG9vbHMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmljIHRhc2sKLSDinIUgVXNlIGB3b3JraW5nRGlyZWN0b3J5OiAicHJvamVjdF9yb290ImAgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVycwotIOKchSBWZXJpZnkgYWxsIHRvb2wgbmFtZXMgZXhpc3QgaW4gdGhpcyBjYXRhbG9n

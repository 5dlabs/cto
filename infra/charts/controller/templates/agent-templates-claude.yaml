# This file is auto-generated by scripts/generate-agent-templates-configmaps-split.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-claude
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: agent-templates
    agent-templates/type: claude
  annotations:
    templates-checksum: "1b094212dc28b3e26eeb227f72ce11d127fe6b40abcb17fb024c81a9ba96610c"
binaryData:
  code_claude_config.json.hbs: ewogICJtb2RlbCI6ICJ7e21vZGVsfX0iLAogICJtYXhfdG9rZW5zIjoge3ttYXhfdG9rZW5zfX0sCiAgInRlbXBlcmF0dXJlIjoge3t0ZW1wZXJhdHVyZX19LAogICJnaXRodWJfYXBwIjogInt7Z2l0aHViX2FwcH19IiwKICAiY2xpIjogInt7Y2xpfX0iLAogICJ0aW1lc3RhbXAiOiAie3t0aW1lc3RhbXB9fSIsCiAgImNvcnJlbGF0aW9uX2lkIjogInt7Y29ycmVsYXRpb25faWR9fSIsCiAge3sjaWYgdG9vbHN9fQogICJ0b29scyI6IHsKICAgIHt7I2lmIHRvb2xzLnJlbW90ZX19CiAgICAicmVtb3RlIjogWwogICAgICB7eyNlYWNoIHRvb2xzLnJlbW90ZX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgIF17eyNpZiB0b29scy5sb2NhbF9zZXJ2ZXJzfX0se3svaWZ9fQogICAge3svaWZ9fQogICAge3sjaWYgdG9vbHMubG9jYWxfc2VydmVyc319CiAgICAibG9jYWxfc2VydmVycyI6IHsKICAgICAge3sjZWFjaCB0b29scy5sb2NhbF9zZXJ2ZXJzfX0KICAgICAgInt7QGtleX19IjogewogICAgICAgICJlbmFibGVkIjoge3t0aGlzLmVuYWJsZWR9fSwKICAgICAgICAidG9vbHMiOiBbCiAgICAgICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAgICB7ey9lYWNofX0KICAgICAgICBdCiAgICAgIH17eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgIH0KICAgIHt7L2lmfX0KICB9LAogIHt7L2lmfX0KICB7eyNpZiBtY3Bfc2VydmVyc319CiAgIm1jcF9zZXJ2ZXJzIjogewogICAge3sjZWFjaCBtY3Bfc2VydmVyc319CiAgICAie3tAa2V5fX0iOiB7CiAgICAgICJjb21tYW5kIjogInt7dGhpcy5jb21tYW5kfX0iLAogICAgICB7eyNpZiB0aGlzLmFyZ3N9fQogICAgICAiYXJncyI6IFsKICAgICAgICB7eyNlYWNoIHRoaXMuYXJnc319CiAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAge3svZWFjaH19CiAgICAgIF0sCiAgICAgIHt7L2lmfX0KICAgICAge3sjaWYgdGhpcy5lbnZ9fQogICAgICAiZW52IjogewogICAgICAgIHt7I2VhY2ggdGhpcy5lbnZ9fQogICAgICAgICJ7e0BrZXl9fSI6ICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICAgIHt7L2VhY2h9fQogICAgICB9CiAgICAgIHt7L2lmfX0KICAgIH17eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAge3svZWFjaH19CiAgfSwKICB7ey9pZn19CiAge3sjaWYgY2xpX2NvbmZpZ319CiAgImNsaV9jb25maWciOiB7e3tqc29uIGNsaV9jb25maWd9fX0sCiAge3svaWZ9fQogICJnZW5lcmF0ZWRfYnkiOiAiY2xpX2FkYXB0ZXJfY2xhdWRlIiwKICAidmVyc2lvbiI6ICIxLjAiCn0=
  code_claude_container-cleo.sh.hbs: IyEvYmluL3NoCgojIEVuc3VyZSBSdXN0IGVudmlyb25tZW50IGlzIGFsd2F5cyBwcm9wZXJseSBzZXQgdXAKZWNobyAi8J+UpyBTZXR0aW5nIHVwIFJ1c3QgZW52aXJvbm1lbnQuLi4iCgojIFNvdXJjZSBSdXN0IGVudmlyb25tZW50IGlmIGF2YWlsYWJsZSAoZml4ZXMgY2FyZ28gbm90IGZvdW5kIGlzc3VlcykKaWYgWyAtZiAiJEhPTUUvLmNhcmdvL2VudiIgXTsgdGhlbgogICAgLiAiJEhPTUUvLmNhcmdvL2VudiIKICAgIGVjaG8gIuKckyBTb3VyY2VkIFJ1c3QgZW52aXJvbm1lbnQgZnJvbSAkSE9NRS8uY2FyZ28vZW52IgpmaQoKIyBBbHNvIHRyeSByb290IGNhcmdvIGVudiBhcyBmYWxsYmFjawppZiBbIC1mICIvcm9vdC8uY2FyZ28vZW52IiBdOyB0aGVuCiAgICAuICIvcm9vdC8uY2FyZ28vZW52IgogICAgZWNobyAi4pyTIFNvdXJjZWQgUnVzdCBlbnZpcm9ubWVudCBmcm9tIC9yb290Ly5jYXJnby9lbnYiCmZpCgojIEVuc3VyZSBydXN0dXAgaGFzIGEgZGVmYXVsdCB0b29sY2hhaW4gc2V0CmlmIGNvbW1hbmQgLXYgcnVzdHVwID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgcnVzdHVwIGRlZmF1bHQgc3RhYmxlIDI+L2Rldi9udWxsIHx8IHRydWUKICAgIGVjaG8gIuKckyBFbnN1cmVkIHN0YWJsZSBSdXN0IHRvb2xjaGFpbiBpcyBkZWZhdWx0IgplbHNlCiAgICBlY2hvICLimqDvuI8gcnVzdHVwIG5vdCBmb3VuZCBpbiBQQVRIIgpmaQoKIyBWZXJpZnkgUnVzdCBpcyBhdmFpbGFibGUKaWYgY29tbWFuZCAtdiBjYXJnbyA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKckyBDYXJnbyBpcyBhdmFpbGFibGU6ICQoY2FyZ28gLS12ZXJzaW9uKSIKZWxzZQogICAgZWNobyAi4p2MIENhcmdvIG5vdCBmb3VuZCBpbiBQQVRIIgogICAgZWNobyAiQ3VycmVudCBQQVRIOiAkUEFUSCIKICAgIGVjaG8gIkF0dGVtcHRpbmcgdG8gZmluZCBjYXJnby4uLiIKICAgIGZpbmQgL3VzciAtbmFtZSBjYXJnbyAyPi9kZXYvbnVsbCB8IGhlYWQgLTUgfHwgZWNobyAiTm8gY2FyZ28gZm91bmQgaW4gL3VzciIKICAgIGZpbmQgL2hvbWUgLW5hbWUgY2FyZ28gMj4vZGV2L251bGwgfCBoZWFkIC01IHx8IGVjaG8gIk5vIGNhcmdvIGZvdW5kIGluIC9ob21lIgpmaQoKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwplY2hvICfilZEgICAgICAgICAgICAgIENMRU8gQ09ERSBRVUFMSVRZIFdPUktGTE9XIFNUQVJUSU5HICAgICAgICAgICAgIOKVkScKZWNobyAn4pWRICAgICBDb2RlIFF1YWxpdHkgJiBDSS9DRCBQaXBlbGluZSBFbmZvcmNlbWVudCBBZ2VudCAgICAgICAgICDilZEnCmVjaG8gJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcKZWNobyAi8J+OryBBZ2VudDoge3tnaXRodWJfYXBwfX0iCmVjaG8gIvCflI0gRm9jdXM6IENvZGUgcXVhbGl0eSwgQ0kvQ0Qgc2V0dXAsIGFuZCBEb2NrZXIgaW1hZ2UgYnVpbGRpbmciCmVjaG8gIvCfk4sgVGFzayBJRDoge3t0YXNrX2lkfX0iCmVjaG8gIuKchSBNaXNzaW9uOiBQZXJmZWN0IGNvZGUgcXVhbGl0eSBBTkQgd29ya2luZyBDSS9DRCBwaXBlbGluZSB3aXRoIERvY2tlciBidWlsZHMiCgojIERvY2tlciBzaWRlY2FyIGNsZWFudXAgZnVuY3Rpb24Kc3RvcF9kb2NrZXJfc2lkZWNhcigpIHsKICBpZiBbICEgLVMgL3Zhci9ydW4vZG9ja2VyLnNvY2sgXTsgdGhlbgogICAgcmV0dXJuCiAgZmkKCiAgZWNobyAi8J+bkSBTdG9wcGluZyBEb2NrZXIgc2lkZWNhciIKCiAgaWYgY29tbWFuZCAtdiBwa2lsbCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIHBraWxsIGRvY2tlcmQgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgIHNsZWVwIDEKICAgIGlmIHBpZG9mIGRvY2tlcmQgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgIHBraWxsIC05IGRvY2tlcmQgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgIGZpCiAgICBpZiBwaWRvZiBkb2NrZXItaW5pdCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgcGtpbGwgZG9ja2VyLWluaXQgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgIGZpCiAgZWxpZiBjb21tYW5kIC12IGtpbGxhbGwgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBraWxsYWxsIGRvY2tlcmQgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICBlbHNlCiAgICBQSUQ9JChwaWRvZiBkb2NrZXJkIDI+L2Rldi9udWxsIHx8IHRydWUpCiAgICBpZiBbIC1uICIkUElEIiBdOyB0aGVuCiAgICAgIGtpbGwgIiRQSUQiID4vZGV2L251bGwgMj4mMSB8fCB0cnVlCiAgICBmaQogICAgUElEX0lOSVQ9JChwaWRvZiBkb2NrZXItaW5pdCAyPi9kZXYvbnVsbCB8fCB0cnVlKQogICAgaWYgWyAtbiAiJFBJRF9JTklUIiBdOyB0aGVuCiAgICAgIGtpbGwgIiRQSURfSU5JVCIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgIGZpCiAgZmkKCiAgZm9yIF8gaW4gMSAyIDMgNCA1OyBkbwogICAgaWYgISBwaWRvZiBkb2NrZXJkID4vZGV2L251bGwgMj4mMSAmJiAhIHBpZG9mIGRvY2tlci1pbml0ID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICBlY2hvICLinIUgRG9ja2VyIHNpZGVjYXIgc3RvcHBlZCIKICAgICAgcmV0dXJuCiAgICBmaQogICAgc2xlZXAgMQogIGRvbmUKCiAgUkVNQUlOSU5HX0RPQ0tFUj0kKHBpZG9mIGRvY2tlcmQgMj4vZGV2L251bGwgfHwgdHJ1ZSkKICBSRU1BSU5JTkdfSU5JVD0kKHBpZG9mIGRvY2tlci1pbml0IDI+L2Rldi9udWxsIHx8IHRydWUpCiAgZWNobyAi4pqg77iPIERvY2tlciBzaWRlY2FyIHN0aWxsIHJ1bm5pbmcgKGRvY2tlcmQ6ICR7UkVNQUlOSU5HX0RPQ0tFUjotbm9uZX0sIGRvY2tlci1pbml0OiAke1JFTUFJTklOR19JTklUOi1ub25lfSkiCn0KCiMgU2V0IHVwIEVYSVQgdHJhcCB0byBlbnN1cmUgRG9ja2VyIHNpZGVjYXIgY2xlYW51cAp0cmFwICdzdG9wX2RvY2tlcl9zaWRlY2FyIHx8IHRydWUnIEVYSVQKCiMgQ2xlYW4gdXAgYW55IGxlZnRvdmVyIGNvbXBsZXRpb24gbWFya2VyIGZyb20gcHJldmlvdXMgcnVucwojIFRoaXMgcHJldmVudHMgaXNzdWVzIHdpdGggc2VxdWVudGlhbCB0YXNrIGV4ZWN1dGlvbnMgb24gdGhlIHNhbWUgUFZDCmlmIFsgLWYgL3dvcmtzcGFjZS8uY2xlby1jb21wbGV0ZSBdOyB0aGVuCiAgICBlY2hvICLwn6e5IENsZWFuaW5nIHVwIGNvbXBsZXRpb24gbWFya2VyIGZyb20gcHJldmlvdXMgcnVuIgogICAgcm0gLWYgL3dvcmtzcGFjZS8uY2xlby1jb21wbGV0ZQpmaQoKIyBEaXNhYmxlIGludGVyYWN0aXZlIEdpdCBwcm9tcHRzIGdsb2JhbGx5CmV4cG9ydCBHSVRfVEVSTUlOQUxfUFJPTVBUPTAKZXhwb3J0IEdJVF9BU0tQQVNTPS9iaW4vdHJ1ZQpleHBvcnQgU1NIX0FTS1BBU1M9L2Jpbi90cnVlCgojIFJlcG9zaXRvcnkgVVJMClJFUE9fVVJMPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCgojIEdpdEh1YiBBcHAgYXV0aGVudGljYXRpb24gaXMgY29uZmlndXJlZCB2aWEgZW52aXJvbm1lbnQgdmFyaWFibGVzCmVjaG8gIlVzaW5nIEdpdEh1YiBBcHAgYXV0aGVudGljYXRpb24gZm9yIGNvZGUgcXVhbGl0eSBjaGVja3MiCgojIEF1dGhlbnRpY2F0ZSB3aXRoIEdpdEh1YiBBcHAKaWYgWyAtbiAiJEdJVEhVQl9BUFBfUFJJVkFURV9LRVkiIF0gJiYgWyAtbiAiJEdJVEhVQl9BUFBfSUQiIF07IHRoZW4KICAgIGVjaG8gIkF1dGhlbnRpY2F0aW5nIHdpdGggR2l0SHViIEFwcC4uLiIKCiAgICAjIENyZWF0ZSB0ZW1wb3JhcnkgcHJpdmF0ZSBrZXkgZmlsZSAoc3VwcG9ydCBlc2NhcGVkIG5ld2xpbmVzKQogICAgVEVNUF9LRVlfRklMRT0iL3RtcC9naXRodWItYXBwLWtleS5wZW0iCiAgICBwcmludGYgJyViJyAiJEdJVEhVQl9BUFBfUFJJVkFURV9LRVkiID4gIiRURU1QX0tFWV9GSUxFIgogICAgY2htb2QgNjAwICIkVEVNUF9LRVlfRklMRSIKCiAgICAjIEdlbmVyYXRlIEpXVCB0b2tlbiBmb3IgR2l0SHViIEFwcCAoZml4ZWQgSldUIGdlbmVyYXRpb24gZm9yIExpbnV4IGNvbnRhaW5lcnMpCiAgICAjIEpXVCBoZWFkZXIKICAgIEpXVF9IRUFERVI9JChwcmludGYgJ3siYWxnIjoiUlMyNTYiLCJ0eXAiOiJKV1QifScgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKCiAgICAjIEpXVCBwYXlsb2FkIHdpdGggY3VycmVudCB0aW1lIGFuZCBleHBpcmF0aW9uICgxMCBtaW51dGVzKQogICAgTk9XPSQoZGF0ZSArJXMpCiAgICBFWFA9JCgoTk9XICsgNjAwKSkKICAgIEpXVF9QQVlMT0FEPSQocHJpbnRmICd7ImlhdCI6JWQsImV4cCI6JWQsImlzcyI6IiVzIn0nICIkTk9XIiAiJEVYUCIgIiRHSVRIVUJfQVBQX0lEIiB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQoKICAgICMgU2lnbiB0aGUgSldUCiAgICBKV1RfU0lHTkFUVVJFPSQocHJpbnRmICclcy4lcycgIiRKV1RfSEVBREVSIiAiJEpXVF9QQVlMT0FEIiB8IG9wZW5zc2wgZGdzdCAtc2hhMjU2IC1zaWduICIkVEVNUF9LRVlfRklMRSIgLWJpbmFyeSB8IGJhc2U2NCAtdyAwIHwgdHIgJysvJyAnLV8nIHwgdHIgLWQgJz0nKQogICAgSldUX1RPS0VOPSIkSldUX0hFQURFUi4kSldUX1BBWUxPQUQuJEpXVF9TSUdOQVRVUkUiCgogICAgIyBHZXQgaW5zdGFsbGF0aW9uIElEIGZvciB0aGUgcmVwb3NpdG9yeSAocm9idXN0IHBhcnNpbmcgb2Ygb3duZXIvcmVwbykKICAgIElOUFVUX1JFUE89Int7cmVwb3NpdG9yeV91cmx9fSIKICAgIFJFUE9fT1dORVI9IiIKICAgIFJFUE9fTkFNRT0iIgoKICAgIGlmIGVjaG8gIiRJTlBVVF9SRVBPIiB8IGdyZXAgLXFFICdeaHR0cHM6Ly9naXRodWIuY29tLyc7IHRoZW4KICAgICAgICBSRVBPX09XTkVSPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS8oW14vXSspLy4qfFwxfCcpCiAgICAgICAgUkVQT19OQU1FPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS9bXi9dKy8oW14vXSspKFwuZ2l0KT98XDF8JykKICAgIGVsaWYgZWNobyAiJElOUFVUX1JFUE8iIHwgZ3JlcCAtcUUgJ15naXRAZ2l0aHViLmNvbTonOyB0aGVuCiAgICAgICAgIyBTU0ggZm9ybWF0IGdpdEBnaXRodWIuY29tOm93bmVyL3JlcG8oLmdpdCkKICAgICAgICBSRVBPX09XTkVSPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGdpdEBnaXRodWIuY29tOihbXi9dKykvLip8XDF8JykKICAgICAgICBSRVBPX05BTUU9JChlY2hvICIkSU5QVVRfUkVQTyIgfCBzZWQgLUUgJ3N8Z2l0QGdpdGh1Yi5jb206W14vXSsvKFteL10rKShcLmdpdCk/fFwxfCcpCiAgICBlbHNlCiAgICAgICAgIyBGYWxsYmFjazogYXNzdW1lIHNsdWcgb3duZXIvcmVwbyAocG9zc2libHkgd2l0aCAuZ2l0KQogICAgICAgIFNMVUc9JChlY2hvICIkSU5QVVRfUkVQTyIgfCBzZWQgLUUgJ3N8XC5naXQkfHwnKQogICAgICAgIFJFUE9fT1dORVI9JChlY2hvICIkU0xVRyIgfCBjdXQgLWQnLycgLWYxKQogICAgICAgIFJFUE9fTkFNRT0kKGVjaG8gIiRTTFVHIiB8IGN1dCAtZCcvJyAtZjIpCiAgICBmaQoKICAgIGVjaG8gIkRFQlVHOiBQYXJzZWQgcmVwb3NpdG9yeSAtIE93bmVyOiAnJFJFUE9fT1dORVInLCBOYW1lOiAnJFJFUE9fTkFNRSciCgogICAgZWNobyAiR2V0dGluZyBpbnN0YWxsYXRpb24gSUQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUuLi4iCgogICAgIyBHZXQgdGhlIGluc3RhbGxhdGlvbiBJRCAocmV0cnkgYW5kIGZvbGxvdyByZWRpcmVjdHMpLiBGYWxsYmFjayB0byBvcmcgaW5zdGFsbGF0aW9uLgogICAgSU5TVEFMTEFUSU9OX1JFU1BPTlNFPSQoY3VybCAtcyAtTCAtLXJldHJ5IDUgLS1yZXRyeS1kZWxheSAyIC0tcmV0cnktY29ubnJlZnVzZWQgXAogICAgICAgIC0tY29ubmVjdC10aW1lb3V0IDUgLS1tYXgtdGltZSAxMiBcCiAgICAgICAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgICAgICAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJFJFUE9fT1dORVIvJFJFUE9fTkFNRS9pbnN0YWxsYXRpb24iKQoKICAgIElOU1RBTExBVElPTl9JRD0kKGVjaG8gIiRJTlNUQUxMQVRJT05fUkVTUE9OU0UiIHwganEgLXIgJy5pZCcpCgogICAgaWYgWyAiJElOU1RBTExBVElPTl9JRCIgPSAibnVsbCIgXSB8fCBbIC16ICIkSU5TVEFMTEFUSU9OX0lEIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4pqg77iPIFJlcG8gaW5zdGFsbGF0aW9uIG5vdCBmb3VuZCwgdHJ5aW5nIG9yZyBpbnN0YWxsYXRpb24uLi4iCiAgICAgICAgT1JHX0lOU1RBTExBVElPTl9SRVNQT05TRT0kKGN1cmwgLXMgLUwgLS1yZXRyeSA1IC0tcmV0cnktZGVsYXkgMiAtLXJldHJ5LWNvbm5yZWZ1c2VkIFwKICAgICAgICAgICAgLS1jb25uZWN0LXRpbWVvdXQgNSAtLW1heC10aW1lIDEyIFwKICAgICAgICAgICAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9vcmdzLyRSRVBPX09XTkVSL2luc3RhbGxhdGlvbiIpCiAgICAgICAgSU5TVEFMTEFUSU9OX0lEPSQoZWNobyAiJE9SR19JTlNUQUxMQVRJT05fUkVTUE9OU0UiIHwganEgLXIgJy5pZCcpCiAgICBmaQoKICAgIGlmIFsgIiRJTlNUQUxMQVRJT05fSUQiID0gIm51bGwiIF0gfHwgWyAteiAiJElOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gZ2V0IGluc3RhbGxhdGlvbiBJRCBmb3IgJFJFUE9fT1dORVIvJFJFUE9fTkFNRSIKICAgICAgICBlY2hvICJSZXNwb25zZSAocmVwbyk6ICRJTlNUQUxMQVRJT05fUkVTUE9OU0UiCiAgICAgICAgZWNobyAiUmVzcG9uc2UgKG9yZyk6ICAke09SR19JTlNUQUxMQVRJT05fUkVTUE9OU0U6LVtub25lXX0iCiAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICBlY2hvICJJbnN0YWxsYXRpb24gSUQ6ICRJTlNUQUxMQVRJT05fSUQiCgogICAgIyBHZXQgaW5zdGFsbGF0aW9uIGFjY2VzcyB0b2tlbgogICAgVE9LRU5fUkVTUE9OU0U9JChjdXJsIC1zIC1YIFBPU1QgXAogICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL2FwcC9pbnN0YWxsYXRpb25zLyRJTlNUQUxMQVRJT05fSUQvYWNjZXNzX3Rva2VucyIpCgogICAgR0lUSFVCX1RPS0VOPSQoZWNobyAiJFRPS0VOX1JFU1BPTlNFIiB8IGpxIC1yICcudG9rZW4nKQogICAgVE9LRU5fR0VORVJBVEVEX0FUPSQoZGF0ZSArJXMpICAjIFRyYWNrIHdoZW4gdG9rZW4gd2FzIGdlbmVyYXRlZCBmb3IgcmVmcmVzaCBsb2dpYwoKICAgIGlmIFsgIiRHSVRIVUJfVE9LRU4iID0gIm51bGwiIF0gfHwgWyAteiAiJEdJVEhVQl9UT0tFTiIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gZ2V0IGluc3RhbGxhdGlvbiBhY2Nlc3MgdG9rZW4iCiAgICAgICAgZWNobyAiUmVzcG9uc2U6ICRUT0tFTl9SRVNQT05TRSIKICAgICAgICBybSAtZiAiJFRFTVBfS0VZX0ZJTEUiCiAgICAgICAgZXhpdCAxCiAgICBmaQoKICAgIGVjaG8gIuKchSBTdWNjZXNzZnVsbHkgYXV0aGVudGljYXRlZCB3aXRoIEdpdEh1YiBBcHAiCgogICAgIyBDbGVhbiB1cCB0ZW1wb3Jhcnkga2V5IGZpbGUKICAgIHJtIC1mICIkVEVNUF9LRVlfRklMRSIKCiAgICAjIEV4cG9ydCB0aGUgdG9rZW4gZm9yIGdpdCB0byB1c2UKICAgIGV4cG9ydCBHSVRIVUJfVE9LRU4KCiAgICAjIENvbmZpZ3VyZSBnaXQgdG8gdXNlIHRoZSB0b2tlbiAodXNlIC0tcmVwbGFjZS1hbGwgdG8gaGFuZGxlIG11bHRpcGxlIGV4aXN0aW5nIGhlbHBlcnMpCiAgICBnaXQgY29uZmlnIC0tZ2xvYmFsIC0tcmVwbGFjZS1hbGwgY3JlZGVudGlhbC5oZWxwZXIgc3RvcmUKICAgIGVjaG8gImh0dHBzOi8veC1hY2Nlc3MtdG9rZW46JHtHSVRIVUJfVE9LRU59QGdpdGh1Yi5jb20iID4gfi8uZ2l0LWNyZWRlbnRpYWxzCgogICAgIyBBbHNvIGF1dGhlbnRpY2F0ZSBnaCBDTEkgd2l0aCB0aGUgdG9rZW4KICAgIGVjaG8gIiRHSVRIVUJfVE9LRU4iIHwgZ2ggYXV0aCBsb2dpbiAtLXdpdGgtdG9rZW4KCiAgICAjIFRva2VuIHJlZnJlc2ggZnVuY3Rpb25zIGZvciBsb25nLXJ1bm5pbmcgam9icwogICAgcmVmcmVzaF9naXRodWJfdG9rZW4oKSB7CiAgICAgICAgZWNobyAi8J+UhCBSZWZyZXNoaW5nIEdpdEh1YiBBcHAgdG9rZW4uLi4iCgogICAgICAgICMgQ3JlYXRlIHRlbXBvcmFyeSBrZXkgZmlsZQogICAgICAgIFRFTVBfS0VZX0ZJTEU9Ii90bXAvZ2l0aHViLWFwcC1rZXktJCQiCiAgICAgICAgZWNobyAiJEdJVEhVQl9BUFBfUFJJVkFURV9LRVkiID4gIiRURU1QX0tFWV9GSUxFIgogICAgICAgIGNobW9kIDYwMCAiJFRFTVBfS0VZX0ZJTEUiCgogICAgICAgICMgR2VuZXJhdGUgbmV3IEpXVAogICAgICAgIEpXVF9UT0tFTj0kKHJ1YnkgLXIgb3BlbnNzbCAtciBqc29uIC1yIGJhc2U2NCAtZSAiCiAgICAgICAga2V5ID0gT3BlblNTTDo6UEtleTo6UlNBLm5ldyhGaWxlLnJlYWQoJyRURU1QX0tFWV9GSUxFJykpCiAgICAgICAgcGF5bG9hZCA9IHsKICAgICAgICAgICAgaWF0OiBUaW1lLm5vdy50b19pIC0gNjAsCiAgICAgICAgICAgIGV4cDogVGltZS5ub3cudG9faSArICgxMCAqIDYwKSwKICAgICAgICAgICAgaXNzOiAnJEdJVEhVQl9BUFBfSUQnCiAgICAgICAgfQogICAgICAgIGhlYWRlciA9IHsgYWxnOiAnUlMyNTYnLCB0eXA6ICdKV1QnIH0KCiAgICAgICAgaGVhZGVyX2VuYyA9IEJhc2U2NC51cmxzYWZlX2VuY29kZTY0KGhlYWRlci50b19qc29uKS5nc3ViKCc9JywgJycpCiAgICAgICAgcGF5bG9hZF9lbmMgPSBCYXNlNjQudXJsc2FmZV9lbmNvZGU2NChwYXlsb2FkLnRvX2pzb24pLmdzdWIoJz0nLCAnJykKICAgICAgICBzaWduYXR1cmUgPSBCYXNlNjQudXJsc2FmZV9lbmNvZGU2NChrZXkuc2lnbihPcGVuU1NMOjpEaWdlc3Q6OlNIQTI1Ni5uZXcsIFwiI3toZWFkZXJfZW5jfS4je3BheWxvYWRfZW5jfVwiKSkuZ3N1YignPScsICcnKQoKICAgICAgICBwdXRzIFwiI3toZWFkZXJfZW5jfS4je3BheWxvYWRfZW5jfS4je3NpZ25hdHVyZX1cIgogICAgICAgICIpCgogICAgICAgICMgR2V0IGluc3RhbGxhdGlvbiBJRCAocmV1c2UgbG9naWMgZnJvbSBpbml0aWFsIGF1dGgpCiAgICAgICAgSU5TVEFMTEFUSU9OX0lEPSQoY3VybCAtcyAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRKV1RfVE9LRU4iIFwKICAgICAgICAgICAgLUggIkFjY2VwdDogYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiBcCiAgICAgICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyRSRVBPX09XTkVSLyRSRVBPX05BTUUvaW5zdGFsbGF0aW9uIiB8IGpxIC1yICcuaWQnKQoKICAgICAgICBpZiBbICIkSU5TVEFMTEFUSU9OX0lEIiA9ICJudWxsIiBdIHx8IFsgLXogIiRJTlNUQUxMQVRJT05fSUQiIF07IHRoZW4KICAgICAgICAgICAgSU5TVEFMTEFUSU9OX0lEPSQoY3VybCAtcyAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRKV1RfVE9LRU4iIFwKICAgICAgICAgICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICAgICAgICAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vb3Jncy8kUkVQT19PV05FUi9pbnN0YWxsYXRpb24iIHwganEgLXIgJy5pZCcpCiAgICAgICAgZmkKCiAgICAgICAgIyBHZXQgbmV3IGluc3RhbGxhdGlvbiB0b2tlbgogICAgICAgIFRPS0VOX1JFU1BPTlNFPSQoY3VybCAtcyAtWCBQT1NUIFwKICAgICAgICAgICAgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9hcHAvaW5zdGFsbGF0aW9ucy8kSU5TVEFMTEFUSU9OX0lEL2FjY2Vzc190b2tlbnMiKQoKICAgICAgICBORVdfVE9LRU49JChlY2hvICIkVE9LRU5fUkVTUE9OU0UiIHwganEgLXIgJy50b2tlbicpCgogICAgICAgIGlmIFsgIiRORVdfVE9LRU4iICE9ICJudWxsIiBdICYmIFsgLW4gIiRORVdfVE9LRU4iIF07IHRoZW4KICAgICAgICAgICAgZXhwb3J0IEdJVEhVQl9UT0tFTj0iJE5FV19UT0tFTiIKICAgICAgICAgICAgZXhwb3J0IFRPS0VOX0dFTkVSQVRFRF9BVD0kKGRhdGUgKyVzKQoKICAgICAgICAgICAgIyBVcGRhdGUgZ2l0IGNyZWRlbnRpYWxzCiAgICAgICAgICAgIGVjaG8gImh0dHBzOi8veC1hY2Nlc3MtdG9rZW46JHtHSVRIVUJfVE9LRU59QGdpdGh1Yi5jb20iID4gfi8uZ2l0LWNyZWRlbnRpYWxzCiAgICAgICAgICAgIGVjaG8gIiRHSVRIVUJfVE9LRU4iIHwgZ2ggYXV0aCBsb2dpbiAtLXdpdGgtdG9rZW4gMj4vZGV2L251bGwKCiAgICAgICAgICAgIGVjaG8gIuKchSBUb2tlbiByZWZyZXNoZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgICAgICBybSAtZiAiJFRFTVBfS0VZX0ZJTEUiCiAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIHJlZnJlc2ggdG9rZW46ICRUT0tFTl9SRVNQT05TRSIKICAgICAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgICAgICByZXR1cm4gMQogICAgICAgIGZpCiAgICB9CgogICAgIyBDaGVjayBpZiB0b2tlbiBuZWVkcyByZWZyZXNoIChjYWxsIGJlZm9yZSBnaXQgb3BlcmF0aW9ucykKICAgIHJlZnJlc2hfdG9rZW5faWZfbmVlZGVkKCkgewogICAgICAgIGlmIFsgLXogIiRUT0tFTl9HRU5FUkFURURfQVQiIF07IHRoZW4KICAgICAgICAgICAgZWNobyAi4pqg77iPIE5vIHRva2VuIHRpbWVzdGFtcCBmb3VuZCwgcmVmcmVzaGluZyB0b2tlbi4uLiIKICAgICAgICAgICAgcmVmcmVzaF9naXRodWJfdG9rZW4KICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZmkKCiAgICAgICAgTk9XPSQoZGF0ZSArJXMpCiAgICAgICAgVE9LRU5fQUdFPSQoKE5PVyAtIFRPS0VOX0dFTkVSQVRFRF9BVCkpCgogICAgICAgICMgUmVmcmVzaCBpZiB0b2tlbiBpcyBvbGRlciB0aGFuIDUwIG1pbnV0ZXMgKHRva2VucyBsYXN0IDEgaG91ciwgcmVmcmVzaCBhdCA1MCBtaW4gdG8gYmUgc2FmZSkKICAgICAgICBpZiBbICRUT0tFTl9BR0UgLWd0IDMwMDAgXTsgdGhlbgogICAgICAgICAgICBlY2hvICLwn5SEIFRva2VuIGlzICQoKCRUT0tFTl9BR0UgLyA2MCkpIG1pbnV0ZXMgb2xkLCByZWZyZXNoaW5nLi4uIgogICAgICAgICAgICByZWZyZXNoX2dpdGh1Yl90b2tlbgogICAgICAgIGZpCiAgICB9CgplbHNlCiAgICBlY2hvICLinYwgR2l0SHViIEFwcCBjcmVkZW50aWFscyBub3QgZm91bmQiCiAgICBleGl0IDEKZmkKCiMgRXh0cmFjdCByZXBvc2l0b3J5IG5hbWUgZnJvbSBVUkwgKGUuZy4sICI1ZGxhYnMvcnVzdC1iYXNpYy1hcGktMiIgLT4gInJ1c3QtYmFzaWMtYXBpLTIiKQpSRVBPX05BTUU9JChlY2hvICJ7e3JlcG9zaXRvcnlfdXJsfX0iIHwgc2VkIC1FICdzfC4qLyhbXi9dKykkfFwxfCcgfCBzZWQgJ3N8XC5naXQkfHwnKQpSRVBPX1JPT1Q9Ii93b3Jrc3BhY2UvJFJFUE9fTkFNRSIKCiMgRGV0ZXJtaW5lIHdvcmtpbmcgZGlyZWN0b3J5IC0gdXNlIHJlcG8gcm9vdCBpZiB3b3JraW5nX2RpcmVjdG9yeSBpcyAiLiIgb3IgZW1wdHkKV09SS19ESVI9Int7d29ya2luZ19kaXJlY3Rvcnl9fSIKaWYgWyAiJFdPUktfRElSIiA9ICIuIiBdIHx8IFsgLXogIiRXT1JLX0RJUiIgXSB8fCBbICIkV09SS19ESVIiID0gIm51bGwiIF07IHRoZW4KICBDTEFVREVfV09SS19ESVI9IiRSRVBPX1JPT1QiCmVsc2UKICBDTEFVREVfV09SS19ESVI9IiRSRVBPX1JPT1QvJFdPUktfRElSIgpmaQoKZWNobyAi8J+UpyBSZXBvc2l0b3J5OiAkUkVQT19OQU1FIgplY2hvICLwn5SnIFdvcmtpbmcgZGlyZWN0b3J5IHdpbGwgYmUgc2V0IHRvOiAkQ0xBVURFX1dPUktfRElSIgoKIyBQcmVwYXJlIGVudmlyb25tZW50IGZvciBRQSBjaGVja3MKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5OKIFBSRVBBUklORyBDT0RFIFFVQUxJVFkgRU5WSVJPTk1FTlQiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgQ29uZmlndXJlIEdpdCBpZGVudGl0eQpnaXQgY29uZmlnIC0tZ2xvYmFsIHVzZXIuZW1haWwgImNsZW9ANWRsYWJzLmNvbSIKZ2l0IGNvbmZpZyAtLWdsb2JhbCB1c2VyLm5hbWUgIjVETGFicy1DbGVvIgpnaXQgY29uZmlnIC0tZ2xvYmFsIGluaXQuZGVmYXVsdEJyYW5jaCBtYWluCgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgQVVUSEVOVElDQVRJT04gVkVSSUZJQ0FUSU9OCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KZWNobyAiIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCflJAgQVVUSEVOVElDQVRJT04gVkVSSUZJQ0FUSU9OIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIiIKCiMgUmVwb3NpdG9yeSBVUkxzIC0gSGFuZGxlIGJvdGggZnVsbCBVUkxzIGFuZCBvcmcvcmVwbyBmb3JtYXQKIyBDaGVjayBpZiByZXBvc2l0b3J5X3VybCBhbHJlYWR5IGNvbnRhaW5zIGh0dHBzOi8vZ2l0aHViLmNvbS8KaWYgZWNobyAie3tyZXBvc2l0b3J5X3VybH19IiB8IGdyZXAgLXEgIl5odHRwczovL2dpdGh1Yi5jb20vIjsgdGhlbgogICAgUkVQT19IVFRQX1VSTD0ie3tyZXBvc2l0b3J5X3VybH19IgogICAgaWYgISBlY2hvICJ7e3JlcG9zaXRvcnlfdXJsfX0iIHwgZ3JlcCAtcSAiXC5naXQkIjsgdGhlbgogICAgICAgIFJFUE9fSFRUUF9VUkw9IiR7UkVQT19IVFRQX1VSTH0uZ2l0IgogICAgZmkKZWxzZQogICAgUkVQT19IVFRQX1VSTD0iaHR0cHM6Ly9naXRodWIuY29tL3t7cmVwb3NpdG9yeV91cmx9fS5naXQiCmZpCgojIFNhbWUgZm9yIGRvY3MgcmVwb3NpdG9yeQppZiBlY2hvICJ7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSIgfCBncmVwIC1xICJeaHR0cHM6Ly9naXRodWIuY29tLyI7IHRoZW4KICAgIERPQ1NfSFRUUF9VUkw9Int7ZG9jc19yZXBvc2l0b3J5X3VybH19IgogICAgaWYgISBlY2hvICJ7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSIgfCBncmVwIC1xICJcLmdpdCQiOyB0aGVuCiAgICAgICAgRE9DU19IVFRQX1VSTD0iJHtET0NTX0hUVFBfVVJMfS5naXQiCiAgICBmaQplbHNlCiAgICBET0NTX0hUVFBfVVJMPSJodHRwczovL2dpdGh1Yi5jb20ve3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0uZ2l0IgpmaQoKIyBERUJVRzogU2hvdyB3aGF0IFVSTHMgYXJlIGJlaW5nIGNvbnN0cnVjdGVkCmVjaG8gIvCflI0gREVCVUc6IFVSTCBDb25zdHJ1Y3Rpb24gJiBQYXJhbWV0ZXJzIgplY2hvICIgIElucHV0IHJlcG9zaXRvcnlfdXJsOiAne3tyZXBvc2l0b3J5X3VybH19JyIKZWNobyAiICBJbnB1dCBkb2NzX3JlcG9zaXRvcnlfdXJsOiAne3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0nIgplY2hvICIgIElucHV0IGRvY3NfcHJvamVjdF9kaXJlY3Rvcnk6ICd7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSciCmVjaG8gIiAgSW5wdXQgd29ya2luZ19kaXJlY3Rvcnk6ICd7e3dvcmtpbmdfZGlyZWN0b3J5fX0nIgplY2hvICIgIElucHV0IGRvY3NfYnJhbmNoOiAne3tkb2NzX2JyYW5jaH19JyIKZWNobyAiICBJbnB1dCBnaXRodWJfYXBwOiAne3tnaXRodWJfYXBwfX0nIgplY2hvICIgIElucHV0IHRhc2tfaWQ6ICd7e3Rhc2tfaWR9fSciCmVjaG8gIiAgSW5wdXQgc2VydmljZTogJ3t7c2VydmljZX19JyIKZWNobyAiICBDb25zdHJ1Y3RlZCBSRVBPX0hUVFBfVVJMOiAnJFJFUE9fSFRUUF9VUkwnIgplY2hvICIgIENvbnN0cnVjdGVkIERPQ1NfSFRUUF9VUkw6ICckRE9DU19IVFRQX1VSTCciCmVjaG8gIiAgQ3VycmVudCB3b3JraW5nIGRpcmVjdG9yeTogJChwd2QpIgplY2hvICIgIEF2YWlsYWJsZSBlbnZpcm9ubWVudCB2YXJpYWJsZXM6IgplbnYgfCBncmVwIC1FICIoR0lUSFVCfEFOVEhST1BJQykiIHwgc29ydAoKIyBUZXN0IEhUVFBTIGFjY2VzcyB0byByZXBvc2l0b3J5CmVjaG8gIvCflI0gREVCVUc6IFRlc3RpbmcgSFRUUFMgcmVwb3NpdG9yeSBhY2Nlc3MuLi4iCmVjaG8gIiAgQ29tbWFuZDogZ2l0IGxzLXJlbW90ZSBcIiRSRVBPX0hUVFBfVVJMXCIgSEVBRCIKaWYgZ2l0IGxzLXJlbW90ZSAiJFJFUE9fSFRUUF9VUkwiIEhFQUQgPiAvdG1wL3JlcG9fdGVzdC5vdXQgMj4mMTsgdGhlbgogIGVjaG8gIuKckyBIVFRQUyByZXBvc2l0b3J5IGFjY2VzcyBzdWNjZXNzZnVsIgogIGVjaG8gIiAgUmVwb3NpdG9yeToge3tyZXBvc2l0b3J5X3VybH19ICgkUkVQT19IVFRQX1VSTCkiCiAgZWNobyAiICBPdXRwdXQ6ICQoY2F0IC90bXAvcmVwb190ZXN0Lm91dCB8IGhlYWQgLTEpIgplbHNlCiAgZWNobyAi4p2MIEhUVFBTIHJlcG9zaXRvcnkgYWNjZXNzIGZhaWxlZCIKICBlY2hvICIgIFJlcG9zaXRvcnk6IHt7cmVwb3NpdG9yeV91cmx9fSAoJFJFUE9fSFRUUF9VUkwpIgogIGVjaG8gIiAgRXJyb3Igb3V0cHV0OiAkKGNhdCAvdG1wL3JlcG9fdGVzdC5vdXQpIgogIGVjaG8gIiAgR2l0IGNyZWRlbnRpYWwgaGVscGVyIHN0YXR1czoiCiAgZ2l0IGNvbmZpZyAtLWxpc3QgfCBncmVwIGNyZWRlbnRpYWwgfHwgZWNobyAiICBObyBjcmVkZW50aWFsIGhlbHBlcnMgY29uZmlndXJlZCIKICBlY2hvICIiCiAgZWNobyAi8J+aqyBBQk9SVElORzogQ2Fubm90IGFjY2VzcyByZXBvc2l0b3J5IHZpYSBIVFRQUyIKICBleGl0IDEKZmkKCiMgVGVzdCBkb2NzIHJlcG9zaXRvcnkgYWNjZXNzCmVjaG8gIvCflI0gREVCVUc6IFRlc3RpbmcgZG9jcyByZXBvc2l0b3J5IGFjY2Vzcy4uLiIKZWNobyAiICBDb21tYW5kOiBnaXQgbHMtcmVtb3RlIFwiJERPQ1NfSFRUUF9VUkxcIiBIRUFEIgppZiBnaXQgbHMtcmVtb3RlICIkRE9DU19IVFRQX1VSTCIgSEVBRCA+IC90bXAvZG9jc190ZXN0Lm91dCAyPiYxOyB0aGVuCiAgZWNobyAi4pyTIERvY3MgcmVwb3NpdG9yeSBhY2Nlc3Mgc3VjY2Vzc2Z1bCIKICBlY2hvICIgIFJlcG9zaXRvcnk6IHt7ZG9jc19yZXBvc2l0b3J5X3VybH19ICgkRE9DU19IVFRQX1VSTCkiCiAgZWNobyAiICBPdXRwdXQ6ICQoY2F0IC90bXAvZG9jc190ZXN0Lm91dCB8IGhlYWQgLTEpIgplbHNlCiAgZWNobyAi4p2MIERvY3MgcmVwb3NpdG9yeSBhY2Nlc3MgZmFpbGVkIgogIGVjaG8gIiAgUmVwb3NpdG9yeToge3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0gKCRET0NTX0hUVFBfVVJMKSIKICBlY2hvICIgIEVycm9yIG91dHB1dDogJChjYXQgL3RtcC9kb2NzX3Rlc3Qub3V0KSIKICBlY2hvICIiCiAgZWNobyAi8J+aqyBBQk9SVElORzogQ2Fubm90IGFjY2VzcyBkb2NzIHJlcG9zaXRvcnkgdmlhIEhUVFBTIgogIGV4aXQgMQpmaQoKIyBDbG9uZSBvciB1cGRhdGUgcmVwb3NpdG9yeQpjZCAvd29ya3NwYWNlCmlmIFsgLWQgIiRSRVBPX05BTUUvLmdpdCIgXTsgdGhlbgogICAgZWNobyAi8J+TgSBGb3VuZCBleGlzdGluZyByZXBvc2l0b3J5IGF0ICckUkVQT19ST09UJywgdXBkYXRpbmcuLi4iCiAgICBjZCAiJFJFUE9fTkFNRSIKICAgIGdpdCBmZXRjaCBvcmlnaW4gLS1wcnVuZQplbHNlCiAgICBlY2hvICLwn5OlIENsb25pbmcgcmVwb3NpdG9yeSB0byAnJFJFUE9fUk9PVCcuLi4iCiAgICBpZiAhIGdpdCBjbG9uZSAiJFJFUE9fSFRUUF9VUkwiICIkUkVQT19OQU1FIjsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gY2xvbmUgcmVwb3NpdG9yeSIKICAgICAgICBleGl0IDEKICAgIGZpCiAgICBjZCAiJFJFUE9fTkFNRSIKZmkKCiMgQ3JlYXRlIHdvcmtpbmcgZGlyZWN0b3J5IGlmIGl0J3MgYSBzdWJkaXJlY3RvcnkKaWYgWyAiJENMQVVERV9XT1JLX0RJUiIgIT0gIiRSRVBPX1JPT1QiIF07IHRoZW4KICAgIG1rZGlyIC1wICIkQ0xBVURFX1dPUktfRElSIgpmaQoKY2QgIiRDTEFVREVfV09SS19ESVIiCmVjaG8gIuKckyBXb3JraW5nIGRpcmVjdG9yeTogJENMQVVERV9XT1JLX0RJUiIKCiMgRGVyaXZlIHJlcG9zaXRvcnkgc2x1ZyBmb3IgZ2ggQ0xJIG9wZXJhdGlvbnMKUkVQT19TTFVHPSIiCmlmIGdpdCAtQyAiJENMQVVERV9XT1JLX0RJUiIgcmVtb3RlIGdldC11cmwgb3JpZ2luID4vZGV2L251bGwgMj4mMTsgdGhlbgogIE9SSUdJTl9VUkw9JChnaXQgLUMgIiRDTEFVREVfV09SS19ESVIiIHJlbW90ZSBnZXQtdXJsIG9yaWdpbiAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogIGlmIGVjaG8gIiRPUklHSU5fVVJMIiB8IGdyZXAgLXFFICdeaHR0cHM6Ly9naXRodWIuY29tLyc7IHRoZW4KICAgIFJFUE9fU0xVRz0kKGVjaG8gIiRPUklHSU5fVVJMIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vKFteL10rL1teL10rKShcXC5naXQpP3xcXDF8JykKICBlbGlmIGVjaG8gIiRPUklHSU5fVVJMIiB8IGdyZXAgLXFFICdeZ2l0QGdpdGh1Yi5jb206JzsgdGhlbgogICAgUkVQT19TTFVHPSQoZWNobyAiJE9SSUdJTl9VUkwiIHwgc2VkIC1FICdzfGdpdEBnaXRodWIuY29tOihbXi9dKy9bXi9dKykoXFwuZ2l0KT98XFwxfCcpCiAgZmkKZmkKCiMgSWYgUFIgY29udGV4dCBpcyBtaXNzaW5nLCB0cnkgdG8gZGlzY292ZXIgYnkgdGFzayBsYWJlbAppZiBbIC16ICIke1BSX05VTUJFUjotfSIgXSB8fCBbIC16ICIke1BSX1VSTDotfSIgXTsgdGhlbgogIFRBU0tfTEFCRUw9InRhc2stJHtUQVNLX0lEfSIKICBpZiBjb21tYW5kIC12IGdoID4vZGV2L251bGwgMj4mMSAmJiBbIC1uICIkUkVQT19TTFVHIiBdOyB0aGVuCiAgICBDQU5EX05VTT0kKGdoIHByIGxpc3QgLVIgIiRSRVBPX1NMVUciIC0tbGFiZWwgIiRUQVNLX0xBQkVMIiAtLWpzb24gbnVtYmVyIC0tanEgJy5bMF0ubnVtYmVyJyAyPi9kZXYvbnVsbCB8fCB0cnVlKQogICAgaWYgWyAtbiAiJENBTkRfTlVNIiBdOyB0aGVuCiAgICAgIFBSX05VTUJFUj0iJENBTkRfTlVNIgogICAgICBQUl9VUkw9JChnaCBwciB2aWV3ICIkUFJfTlVNQkVSIiAtUiAiJFJFUE9fU0xVRyIgLS1qc29uIHVybCAtcSAudXJsIDI+L2Rldi9udWxsIHx8IGVjaG8gIiIpCiAgICAgIGVjaG8gIuKckyBEaXNjb3ZlcmVkIFBSIGNvbnRleHQgdmlhIGxhYmVsOiBQUiAjJFBSX05VTUJFUiAoJFBSX1VSTCkiCiAgICBmaQogIGZpCmZpCgojIENoZWNrb3V0IFBSIGJyYW5jaCBmb3IgcXVhbGl0eSByZXZpZXcKaWYgWyAtbiAiJFBSX05VTUJFUiIgXSAmJiBbIC1uICIkUFJfVVJMIiBdOyB0aGVuCiAgICBlY2hvICLwn5SEIENoZWNraW5nIG91dCBQUiAjJFBSX05VTUJFUiBmb3IgcXVhbGl0eSByZXZpZXcuLi4iCiAgICBjZCAiJENMQVVERV9XT1JLX0RJUiIKCiAgICAjIEZldGNoIGFsbCBsYXRlc3QgY2hhbmdlcyBpbmNsdWRpbmcgUFIgYnJhbmNoZXMKICAgIGdpdCBmZXRjaCBvcmlnaW4gLS1wcnVuZQoKICAgICMgR2V0IFBSIGJyYW5jaCBpbmZvcm1hdGlvbiBhbmQgY2hlY2tvdXQKICAgIFBSX0JSQU5DSD0kKGdoIHByIHZpZXcgIiRQUl9OVU1CRVIiIC0tanNvbiBoZWFkUmVmTmFtZSAtLWpxICcuaGVhZFJlZk5hbWUnIDI+L2Rldi9udWxsIHx8IGVjaG8gIiIpCiAgICBpZiBbIC1uICIkUFJfQlJBTkNIIiBdOyB0aGVuCiAgICAgICAgZWNobyAi8J+TpiBDaGVja2luZyBvdXQgUFIgYnJhbmNoOiAkUFJfQlJBTkNIIgogICAgICAgIGlmIGdpdCBjaGVja291dCAiJFBSX0JSQU5DSCIgMj4vZGV2L251bGw7IHRoZW4KICAgICAgICAgICAgZWNobyAi8J+TpSBQdWxsaW5nIGxhdGVzdCBjaGFuZ2VzIGZyb20gJFBSX0JSQU5DSC4uLiIKICAgICAgICAgICAgZ2l0IHB1bGwgb3JpZ2luICIkUFJfQlJBTkNIIiB8fCBlY2hvICLimqDvuI8gIENvdWxkIG5vdCBwdWxsIGxhdGVzdCBjaGFuZ2VzIgogICAgICAgIGVsaWYgZ2l0IGNoZWNrb3V0IC1iICIkUFJfQlJBTkNIIiAib3JpZ2luLyRQUl9CUkFOQ0giIDI+L2Rldi9udWxsOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKchSBDcmVhdGVkIGFuZCBjaGVja2VkIG91dCB0cmFja2luZyBicmFuY2ggZm9yICRQUl9CUkFOQ0giCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gIEJyYW5jaCBjaGVja291dCBmYWlsZWQsIHRyeWluZyBHaXRIdWIgQ0xJIG1ldGhvZC4uLiIKICAgICAgICAgICAgZ2ggcHIgY2hlY2tvdXQgIiRQUl9OVU1CRVIiIHx8IGVjaG8gIuKdjCBGYWlsZWQgdG8gY2hlY2tvdXQgUFIgdmlhIGdoIENMSSIKICAgICAgICBmaQogICAgZWxzZQogICAgICAgIGVjaG8gIuKaoO+4jyAgQ291bGQgbm90IGRldGVybWluZSBQUiBicmFuY2ggbmFtZSwgdXNpbmcgR2l0SHViIENMSSB0byBjaGVja291dCBQUiBkaXJlY3RseSIKICAgICAgICBnaCBwciBjaGVja291dCAiJFBSX05VTUJFUiIgfHwgZWNobyAi4p2MIEZhaWxlZCB0byBjaGVja291dCBQUiIKICAgIGZpCgogICAgIyBWZXJpZnkgd2UncmUgb24gdGhlIHJpZ2h0IGNvbW1pdAogICAgQ1VSUkVOVF9TSEE9JChnaXQgcmV2LXBhcnNlIEhFQUQpCiAgICBlY2hvICLwn5ONIEN1cnJlbnQgY29tbWl0OiAkQ1VSUkVOVF9TSEEiCgogICAgIyBEb24ndCBjaGFuZ2UgZGlyZWN0b3J5IHlldCAtIHdlJ2xsIGNkIHRvIENMQVVERV9XT1JLX0RJUiBhdCB0aGUgZW5kCiAgICBlY2hvICLinIUgUmVwb3NpdG9yeSBwb3NpdGlvbmVkIGF0IFBSICMkUFJfTlVNQkVSIHdpdGggbGF0ZXN0IGNoYW5nZXMiCmVsc2UKICAgIGVjaG8gIuKaoO+4jyAgTm8gUFIgY29udGV4dCBmb3VuZCAoUFJfTlVNQkVSPSRQUl9OVU1CRVIsIFBSX1VSTD0kUFJfVVJMKSIKICAgIGVjaG8gIvCfk4sgV2lsbCBwZXJmb3JtIHF1YWxpdHkgcmV2aWV3IG9uIGN1cnJlbnQgcmVwb3NpdG9yeSBzdGF0ZSIKZmkKCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+UjSBDT0RFIFFVQUxJVFkgQU5BTFlTSVMgUFJFUEFSQVRJT04iCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAiIgplY2hvICJNSVNTSU9OOiBFbmZvcmNlIHJpZ29yb3VzIGNvZGUgcXVhbGl0eSBzdGFuZGFyZHM6IgplY2hvICIxLiBSdW4gQ2xpcHB5IHBlZGFudGljIGNoZWNrcyBvbiBhbGwgUnVzdCBjb2RlIGNoYW5nZXMiCmVjaG8gIjIuIFZlcmlmeSBjb2RlIGZvcm1hdHRpbmcgd2l0aCBjYXJnbyBmbXQgLS1jaGVjayIKZWNobyAiMy4gRXhlY3V0ZSBhbGwgdGVzdHMgd2l0aCBjYXJnbyB0ZXN0IgplY2hvICI0LiBMaW50IFlBTUwgZmlsZXMgd2hlbiBZQU1MIGNoYW5nZXMgYXJlIGRldGVjdGVkIgplY2hvICI1LiBBZGQgJ3JlYWR5LWZvci1xYScgbGFiZWwgb25seSB3aGVuIGFsbCBxdWFsaXR5IGNoZWNrcyBwYXNzIgplY2hvICIiCmVjaG8gIlF1YWxpdHkgU3RhbmRhcmRzOiIKZWNobyAiLSBaZXJvIGNsaXBweSB3YXJuaW5ncyAocGVkYW50aWMgbGV2ZWwpIgplY2hvICItIFBlcmZlY3QgY29kZSBmb3JtYXR0aW5nIgplY2hvICItIDEwMCUgdGVzdCBwYXNzaW5nIHJhdGUiCmVjaG8gIi0gQ2xlYW4gWUFNTCBzeW50YXggYW5kIHN0cnVjdHVyZSIKZWNobyAiIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCgojIENvcHkgdGFzayBmaWxlcyBmcm9tIGRvY3MgcmVwb3NpdG9yeSBpZiBjb25maWd1cmVkCmVjaG8gIvCfk4sgUHJlcGFyaW5nIHRhc2sgZG9jdW1lbnRhdGlvbiBmb3IgcXVhbGl0eSByZXZpZXcuLi4iCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCnt7I2lmIGRvY3NSZXBvc2l0b3J5VXJsfX0KIyBJbml0aWFsaXplIGNvbXByZWhlbnNpdmUgdHJhY2tpbmcgd2l0aCBleHBsaWNpdCBzdGFnZSBmbGFncwpDT1BJRURfRklMRVM9IiIKRkFJTEVEX0ZJTEVTPSIiCkVYSVNUSU5HX0ZJTEVTPSIiCkRPQ1NfU0VUVVBfU1VDQ0VTUz1mYWxzZQpET0NTX0FVVEhfVkVSSUZJRUQ9ZmFsc2UKRE9DU19DTE9ORV9TVUNDRVNTPWZhbHNlCkRPQ1NfUEFUSF9WQUxJRD1mYWxzZQoKIyBQcmVwYXJlIHRhcmdldCBkaXJlY3RvcnkgKGVuc3VyZSBpdCBleGlzdHMpCmlmICEgbWtkaXIgLXAgIiRDTEFVREVfV09SS19ESVIvdGFzayIgMj4vdG1wL21rZGlyX2Vycm9yLmxvZzsgdGhlbgogICAgZWNobyAi4p2MIENSSVRJQ0FMOiBDYW5ub3QgY3JlYXRlIHRhc2sgZGlyZWN0b3J5IgogICAgZWNobyAiICAgRXJyb3I6ICQoY2F0IC90bXAvbWtkaXJfZXJyb3IubG9nIDI+L2Rldi9udWxsIHx8IGVjaG8gJ3Vua25vd24nKSIKICAgIGVjaG8gIiAgIEFib3J0aW5nIGRvY3Mgc2V0dXAiCmVsc2UKICAgIGVjaG8gIuKckyBUYXNrIGRpcmVjdG9yeSBwcmVwYXJlZDogJENMQVVERV9XT1JLX0RJUi90YXNrIgpmaQoKIyBWYWxpZGF0ZSBHaXRIdWIgdG9rZW4gZXhpc3RzIGJlZm9yZSBwcm9jZWVkaW5nCmlmIFsgLXogIiRHSVRIVUJfVE9LRU4iIF07IHRoZW4KICAgIGVjaG8gIuKdjCBDUklUSUNBTDogTm8gR0lUSFVCX1RPS0VOIGF2YWlsYWJsZSIKICAgIGVjaG8gIiAgIENhbm5vdCBhdXRoZW50aWNhdGUgdG8gZG9jcyByZXBvc2l0b3J5IgogICAgZWNobyAiICAgQWJvcnRpbmcgZG9jcyBzZXR1cCAtIGFnZW50IHdpbGwgaGF2ZSBsaW1pdGVkIGNvbnRleHQiCiAgICBET0NTX0FVVEhfVkVSSUZJRUQ9ZmFsc2UKZWxzZQogICAgZWNobyAi4pyTIEdpdEh1YiB0b2tlbiBhdmFpbGFibGUgKCR7I0dJVEhVQl9UT0tFTn0gY2hhcnMpIgogICAgRE9DU19BVVRIX1ZFUklGSUVEPXRydWUKZmkKCiMgT25seSBwcm9jZWVkIGlmIHdlIGhhdmUgYXV0aGVudGljYXRpb24KaWYgWyAiJERPQ1NfQVVUSF9WRVJJRklFRCIgPSAidHJ1ZSIgXTsgdGhlbgogICAgIyBCdWlsZCBhdXRoZW50aWNhdGVkIGRvY3MgVVJMCiAgICBET0NTX1JFUE9fVVJMPSJ7e2RvY3NSZXBvc2l0b3J5VXJsfX0iCiAgICBET0NTX0hUVFBfVVJMPSQoZWNobyAiJERPQ1NfUkVQT19VUkwiIHwgc2VkICJzfGh0dHBzOi8vZ2l0aHViLmNvbS98aHR0cHM6Ly94LWFjY2Vzcy10b2tlbjokR0lUSFVCX1RPS0VOQGdpdGh1Yi5jb20vfCIpCiAgICAKICAgIGVjaG8gIvCfk6UgRG9jcyBSZXBvc2l0b3J5OiAkRE9DU19SRVBPX1VSTCIKICAgIAogICAgIyBTdGVwIDE6IFZlcmlmeSByZXBvc2l0b3J5IGFjY2VzcyAoZmFpbCBmYXN0IGlmIGluYWNjZXNzaWJsZSkKICAgIGVjaG8gIiIKICAgIGVjaG8gIvCflI0gU3RlcCAxLzQ6IFZlcmlmeWluZyByZXBvc2l0b3J5IGFjY2Vzcy4uLiIKICAgIGlmICEgZ2l0IGxzLXJlbW90ZSAiJERPQ1NfSFRUUF9VUkwiIEhFQUQgPi90bXAvZG9jc19hY2Nlc3NfdGVzdC5vdXQgMj4mMTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBSZXBvc2l0b3J5IGFjY2VzcyBGQUlMRUQiCiAgICAgICAgZWNobyAiICAgVVJMOiAkRE9DU19SRVBPX1VSTCIKICAgICAgICBlY2hvICIgICBFcnJvcjogJChjYXQgL3RtcC9kb2NzX2FjY2Vzc190ZXN0Lm91dCAyPi9kZXYvbnVsbCB8IGhlYWQgLTMpIgogICAgICAgIGVjaG8gIiAgIFRoaXMgaXMgYSBibG9ja2luZyBlcnJvciAtIGNhbm5vdCBwcm9jZWVkIHdpdGggZG9jcyBzZXR1cCIKICAgICAgICBET0NTX0FVVEhfVkVSSUZJRUQ9ZmFsc2UKICAgIGVsc2UKICAgICAgICBlY2hvICLinIUgUmVwb3NpdG9yeSBhY2Nlc3MgdmVyaWZpZWQiCiAgICAgICAgRE9DU19BVVRIX1ZFUklGSUVEPXRydWUKICAgIGZpCmZpCgojIFN0ZXAgMjogQ2xvbmUgcmVwb3NpdG9yeSB3aXRoIGV4cGxpY2l0IGVycm9yIGhhbmRsaW5nCmlmIFsgIiRET0NTX0FVVEhfVkVSSUZJRUQiID0gInRydWUiIF07IHRoZW4KICAgIGVjaG8gIiIKICAgIGVjaG8gIvCfk6UgU3RlcCAyLzQ6IENsb25pbmcgZG9jcyByZXBvc2l0b3J5Li4uIgogICAgCiAgICAjIENsZWFuIHVwIGFueSBleGlzdGluZyBkb2NzIGNsb25lCiAgICBybSAtcmYgL3RtcC9kb2NzLXJlcG8gL3RtcC9kb2NzX2Nsb25lX2Vycm9yLmxvZyAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICAKICAgIE1BWF9BVFRFTVBUUz0zCiAgICBDTE9ORV9TVUNDRUVERUQ9ZmFsc2UKICAgIAogICAgZm9yIGF0dGVtcHQgaW4gJChzZXEgMSAkTUFYX0FUVEVNUFRTKTsgZG8KICAgICAgICBlY2hvICIgICBDbG9uZSBhdHRlbXB0ICRhdHRlbXB0LyRNQVhfQVRURU1QVFMuLi4iCiAgICAgICAgCiAgICAgICAgIyBBdHRlbXB0IGNsb25lIHdpdGggZXhwbGljaXQgZXJyb3IgY2FwdHVyZQogICAgICAgIGlmIGdpdCBjbG9uZSAtLXF1aWV0IC0tZGVwdGggMSAiJERPQ1NfSFRUUF9VUkwiIC90bXAvZG9jcy1yZXBvIDI+L3RtcC9kb2NzX2Nsb25lX2Vycm9yLmxvZzsgdGhlbgogICAgICAgICAgICAjIFZlcmlmeSBjbG9uZSBhY3R1YWxseSBzdWNjZWVkZWQKICAgICAgICAgICAgaWYgWyAtZCAiL3RtcC9kb2NzLXJlcG8vLmdpdCIgXTsgdGhlbgogICAgICAgICAgICAgICAgIyBBZGRpdGlvbmFsIHZhbGlkYXRpb24gLSBjaGVjayBmb3IgYXQgbGVhc3Qgc29tZSBjb250ZW50CiAgICAgICAgICAgICAgICBGSUxFX0NPVU5UPSQoZmluZCAvdG1wL2RvY3MtcmVwbyAtdHlwZSBmIDI+L2Rldi9udWxsIHwgd2MgLWwpCiAgICAgICAgICAgICAgICBpZiBbICIkRklMRV9DT1VOVCIgLWd0IDAgXTsgdGhlbgogICAgICAgICAgICAgICAgICAgIENMT05FX1NVQ0NFRURFRD10cnVlCiAgICAgICAgICAgICAgICAgICAgRE9DU19DTE9ORV9TVUNDRVNTPXRydWUKICAgICAgICAgICAgICAgICAgICBlY2hvICLinIUgQ2xvbmUgc3VjY2Vzc2Z1bCAoJEZJTEVfQ09VTlQgZmlsZXMpIgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgZWNobyAi4p2MIENsb25lIHN1Y2NlZWRlZCBidXQgcmVwb3NpdG9yeSBhcHBlYXJzIGVtcHR5IgogICAgICAgICAgICAgICAgZmkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgZWNobyAi4p2MIENsb25lIGNvbW1hbmQgc3VjY2VlZGVkIGJ1dCAuZ2l0IGRpcmVjdG9yeSBtaXNzaW5nIgogICAgICAgICAgICBmaQogICAgICAgIGVsc2UKICAgICAgICAgICAgQ0xPTkVfRVJST1I9JChjYXQgL3RtcC9kb2NzX2Nsb25lX2Vycm9yLmxvZyAyPi9kZXYvbnVsbCB8IGhlYWQgLTMpCiAgICAgICAgICAgIGVjaG8gIuKdjCBDbG9uZSBmYWlsZWQ6ICR7Q0xPTkVfRVJST1I6LVVua25vd24gZXJyb3J9IgogICAgICAgIGZpCiAgICAgICAgCiAgICAgICAgIyBSZXRyeSBsb2dpYwogICAgICAgIGlmIFsgJGF0dGVtcHQgLWx0ICRNQVhfQVRURU1QVFMgXTsgdGhlbgogICAgICAgICAgICBlY2hvICIgICBXYWl0aW5nIDUgc2Vjb25kcyBiZWZvcmUgcmV0cnkuLi4iCiAgICAgICAgICAgIHNsZWVwIDUKICAgICAgICBmaQogICAgZG9uZQogICAgCiAgICBpZiBbICIkQ0xPTkVfU1VDQ0VFREVEIiAhPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBGQUlMRUQgdG8gY2xvbmUgYWZ0ZXIgJE1BWF9BVFRFTVBUUyBhdHRlbXB0cyIKICAgICAgICBlY2hvICIgICBMYXN0IGVycm9yOiAkKGNhdCAvdG1wL2RvY3NfY2xvbmVfZXJyb3IubG9nIDI+L2Rldi9udWxsIHx8IGVjaG8gJ05vIGVycm9yIGxvZyBhdmFpbGFibGUnKSIKICAgICAgICBET0NTX0NMT05FX1NVQ0NFU1M9ZmFsc2UKICAgIGZpCmVsc2UKICAgIGVjaG8gIiIKICAgIGVjaG8gIuKPre+4jyAgU3RlcCAyLzQ6IFNLSVBQRUQgKGF1dGhlbnRpY2F0aW9uIGZhaWxlZCBvciBub3QgYXZhaWxhYmxlKSIKZmkKCiMgU3RlcCAzOiBEZXRlcm1pbmUgYW5kIHZhbGlkYXRlIHBhdGhzIHdpdGggc2ltcGxpZmllZCBsb2dpYwppZiBbICIkRE9DU19DTE9ORV9TVUNDRVNTIiA9ICJ0cnVlIiBdOyB0aGVuCiAgICBlY2hvICIiCiAgICBlY2hvICLwn5OCIFN0ZXAgMy80OiBWYWxpZGF0aW5nIGRvY3VtZW50YXRpb24gcGF0aHMuLi4iCiAgICAKICAgICMgU2ltcGxpZmllZCBwYXRoIGRldGVybWluYXRpb24gLSBzaW5nbGUgY2xlYXIgbG9naWMgcGF0aAogICAge3sjaWYgZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19CiAgICAjIGRvY3NfcHJvamVjdF9kaXJlY3RvcnkgaXMgc3BlY2lmaWVkCiAgICBpZiBbICJ7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSIgPSAiLiIgXSB8fCBbICJ7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSIgPSAiIiBdOyB0aGVuCiAgICAgICAgIyBSb290IG9mIHJlcG9zaXRvcnkKICAgICAgICBET0NTX0JBU0VfUEFUSD0iL3RtcC9kb2NzLXJlcG8iCiAgICAgICAgZWNobyAiICAgVXNpbmcgcmVwb3NpdG9yeSByb290IChkb2NzX3Byb2plY3RfZGlyZWN0b3J5PSd7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fScpIgogICAgZWxzZQogICAgICAgICMgU3ViZGlyZWN0b3J5IHNwZWNpZmllZAogICAgICAgIERPQ1NfQkFTRV9QQVRIPSIvdG1wL2RvY3MtcmVwby97e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSIKICAgICAgICBlY2hvICIgICBVc2luZyBzdWJkaXJlY3Rvcnk6IHt7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19IgogICAgZmkKICAgIHt7ZWxzZX19CiAgICAjIE5vIGRvY3NfcHJvamVjdF9kaXJlY3Rvcnkgc3BlY2lmaWVkIC0gZGVmYXVsdCB0byByb290CiAgICBET0NTX0JBU0VfUEFUSD0iL3RtcC9kb2NzLXJlcG8iCiAgICBlY2hvICIgICBVc2luZyByZXBvc2l0b3J5IHJvb3QgKG5vIGRvY3NfcHJvamVjdF9kaXJlY3Rvcnkgc3BlY2lmaWVkKSIKICAgIHt7L2lmfX0KICAgIAogICAgIyBWYWxpZGF0ZSBiYXNlIHBhdGggZXhpc3RzCiAgICBpZiBbICEgLWQgIiRET0NTX0JBU0VfUEFUSCIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKdjCBCYXNlIHBhdGggZG9lcyBub3QgZXhpc3Q6ICRET0NTX0JBU0VfUEFUSCIKICAgICAgICBlY2hvICIgICBSZXBvc2l0b3J5IHN0cnVjdHVyZToiCiAgICAgICAgbHMgLWxhIC90bXAvZG9jcy1yZXBvIDI+L2Rldi9udWxsIHwgaGVhZCAtMTAgfHwgZWNobyAiICAgQ2Fubm90IGxpc3QgcmVwb3NpdG9yeSIKICAgICAgICBET0NTX1BBVEhfVkFMSUQ9ZmFsc2UKICAgICAgICBET0NTX0NMT05FX1NVQ0NFU1M9ZmFsc2UKICAgIGVsc2UKICAgICAgICAjIEJ1aWxkIGFuZCB2YWxpZGF0ZSByZW1haW5pbmcgcGF0aHMKICAgICAgICBET0NTX1BBVEg9IiRET0NTX0JBU0VfUEFUSC8udGFza21hc3RlciIKICAgICAgICBUQVNLX0RJUj0iJERPQ1NfUEFUSC9kb2NzL3Rhc2ste3t0YXNrX2lkfX0iCiAgICAgICAgCiAgICAgICAgZWNobyAi4pyFIEJhc2UgcGF0aCBleGlzdHM6ICRET0NTX0JBU0VfUEFUSCIKICAgICAgICBlY2hvICIgICBUYXNrbWFzdGVyIGRpcmVjdG9yeTogJERPQ1NfUEFUSCIKICAgICAgICBlY2hvICIgICBUYXNrIGRpcmVjdG9yeTogJFRBU0tfRElSIgogICAgICAgIAogICAgICAgICMgVmFsaWRhdGUgLnRhc2ttYXN0ZXIgZGlyZWN0b3J5CiAgICAgICAgaWYgWyAhIC1kICIkRE9DU19QQVRIIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyAgLnRhc2ttYXN0ZXIgZGlyZWN0b3J5IG5vdCBmb3VuZCBhdDogJERPQ1NfUEFUSCIKICAgICAgICAgICAgZWNobyAiICAgVGhpcyBsaWtlbHkgaW5kaWNhdGVzIGluY29ycmVjdCBkb2NzX3Byb2plY3RfZGlyZWN0b3J5IGNvbmZpZ3VyYXRpb24iCiAgICAgICAgICAgIGVjaG8gIiAgIEF2YWlsYWJsZSBkaXJlY3RvcmllcyBpbiBiYXNlIHBhdGg6IgogICAgICAgICAgICBscyAtZCAiJERPQ1NfQkFTRV9QQVRIIi8qLyAyPi9kZXYvbnVsbCB8IGhlYWQgLTUgfHwgZWNobyAiICAgTm9uZSB2aXNpYmxlIgogICAgICAgICAgICBET0NTX1BBVEhfVkFMSUQ9ZmFsc2UKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIuKchSAudGFza21hc3RlciBkaXJlY3RvcnkgZm91bmQiCiAgICAgICAgICAgIERPQ1NfUEFUSF9WQUxJRD10cnVlCiAgICAgICAgZmkKICAgICAgICAKICAgICAgICAjIENoZWNrIHRhc2sgZGlyZWN0b3J5IChpbmZvcm1hdGlvbmFsIG9ubHksIG5vdCBibG9ja2luZykKICAgICAgICBpZiBbICEgLWQgIiRUQVNLX0RJUiIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICLimqDvuI8gIFRhc2stc3BlY2lmaWMgZGlyZWN0b3J5IG5vdCBmb3VuZDogJFRBU0tfRElSIgogICAgICAgICAgICBpZiBbIC1kICIkRE9DU19QQVRIL2RvY3MiIF07IHRoZW4KICAgICAgICAgICAgICAgIGVjaG8gIiAgIEF2YWlsYWJsZSB0YXNrIGRpcmVjdG9yaWVzOiIKICAgICAgICAgICAgICAgIGxzIC1kICIkRE9DU19QQVRIL2RvY3MvdGFzay0iKiAyPi9kZXYvbnVsbCB8IGhlYWQgLTUgfHwgZWNobyAiICAgTm9uZSBmb3VuZCIKICAgICAgICAgICAgZmkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIuKchSBUYXNrIGRpcmVjdG9yeSBmb3VuZCIKICAgICAgICBmaQogICAgZmkKZWxzZQogICAgZWNobyAiIgogICAgZWNobyAi4o+t77iPICBTdGVwIDMvNDogU0tJUFBFRCAoY2xvbmUgd2FzIG5vdCBzdWNjZXNzZnVsKSIKZmkKCiMgU3RlcCA0OiBDb3B5IGRvY3VtZW50YXRpb24gZmlsZXMgd2l0aCBlbmhhbmNlZCBlcnJvciB0cmFja2luZwppZiBbICIkRE9DU19QQVRIX1ZBTElEIiA9ICJ0cnVlIiBdOyB0aGVuCiAgICBlY2hvICIiCiAgICBlY2hvICLwn5OLIFN0ZXAgNC80OiBDb3B5aW5nIGRvY3VtZW50YXRpb24gZmlsZXMuLi4iCiAgICAKICAgICMgRW5oYW5jZWQgZmlsZSBjb3B5IGhlbHBlciB3aXRoIGJldHRlciBlcnJvciBoYW5kbGluZwogICAgc2FmZV9jb3B5X2ZpbGUoKSB7CiAgICAgICAgbG9jYWwgc3JjPSIkMSIKICAgICAgICBsb2NhbCBkZXN0PSIkMiIKICAgICAgICBsb2NhbCBmaWxlbmFtZT0iJDMiCiAgICAgICAgCiAgICAgICAgIyBWYWxpZGF0ZSBzb3VyY2UgZXhpc3RzCiAgICAgICAgaWYgWyAhIC1mICIkc3JjIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIiAg4oqYICRmaWxlbmFtZSAtIHNvdXJjZSBub3QgZm91bmQiCiAgICAgICAgICAgIEZBSUxFRF9GSUxFUz0iJEZBSUxFRF9GSUxFUyAkZmlsZW5hbWUiCiAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgZmkKICAgICAgICAKICAgICAgICAjIENoZWNrIGlmIHNvdXJjZSBpcyByZWFkYWJsZSBhbmQgaGFzIGNvbnRlbnQKICAgICAgICBpZiBbICEgLXIgIiRzcmMiIF07IHRoZW4KICAgICAgICAgICAgZWNobyAiICDinYwgJGZpbGVuYW1lIC0gc291cmNlIG5vdCByZWFkYWJsZSIKICAgICAgICAgICAgRkFJTEVEX0ZJTEVTPSIkRkFJTEVEX0ZJTEVTICRmaWxlbmFtZSIKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICBmaQogICAgICAgIAogICAgICAgIGxvY2FsIHNyY19zaXplPSQod2MgLWMgPCAiJHNyYyIgMj4vZGV2L251bGwgfHwgZWNobyAiMCIpCiAgICAgICAgaWYgWyAiJHNyY19zaXplIiA9ICIwIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIiAg4pqg77iPICAkZmlsZW5hbWUgLSBzb3VyY2UgaXMgZW1wdHkgKDAgYnl0ZXMpIgogICAgICAgICAgICBGQUlMRURfRklMRVM9IiRGQUlMRURfRklMRVMgJGZpbGVuYW1lIgogICAgICAgICAgICByZXR1cm4gMQogICAgICAgIGZpCiAgICAgICAgCiAgICAgICAgIyBDaGVjayBpZiBkZXN0aW5hdGlvbiBhbHJlYWR5IGV4aXN0cyB3aXRoIGNvbnRlbnQKICAgICAgICBpZiBbIC1mICIkZGVzdCIgXSAmJiBbIC1zICIkZGVzdCIgXTsgdGhlbgogICAgICAgICAgICBsb2NhbCBkZXN0X3NpemU9JCh3YyAtYyA8ICIkZGVzdCIpCiAgICAgICAgICAgIGVjaG8gIiAg4oa7ICRmaWxlbmFtZSAtIGFscmVhZHkgZXhpc3RzICgke2Rlc3Rfc2l6ZX1CKSwgcHJlc2VydmluZyIKICAgICAgICAgICAgRVhJU1RJTkdfRklMRVM9IiRFWElTVElOR19GSUxFUyAkZmlsZW5hbWUiCiAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgZmkKICAgICAgICAKICAgICAgICAjIEF0dGVtcHQgY29weSB3aXRoIGV4cGxpY2l0IGVycm9yIGhhbmRsaW5nCiAgICAgICAgaWYgY3AgIiRzcmMiICIkZGVzdCIgMj4vdG1wL2NvcHlfZXJyb3JfJHtmaWxlbmFtZX0ubG9nOyB0aGVuCiAgICAgICAgICAgICMgVmVyaWZ5IGNvcHkgc3VjY2VlZGVkIGFuZCBoYXMgY29udGVudAogICAgICAgICAgICBpZiBbIC1mICIkZGVzdCIgXSAmJiBbIC1zICIkZGVzdCIgXTsgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgY29waWVkX3NpemU9JCh3YyAtYyA8ICIkZGVzdCIpCiAgICAgICAgICAgICAgICAjIFZlcmlmeSBzaXplIG1hdGNoZXMgc291cmNlCiAgICAgICAgICAgICAgICBpZiBbICIkY29waWVkX3NpemUiID0gIiRzcmNfc2l6ZSIgXTsgdGhlbgogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAg4pyFICRmaWxlbmFtZSAtIGNvcGllZCBzdWNjZXNzZnVsbHkgKCR7Y29waWVkX3NpemV9QikiCiAgICAgICAgICAgICAgICAgICAgQ09QSUVEX0ZJTEVTPSIkQ09QSUVEX0ZJTEVTICRmaWxlbmFtZSIKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMAogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAg4p2MICRmaWxlbmFtZSAtIHNpemUgbWlzbWF0Y2ggKHNyYzoke3NyY19zaXplfUIgZGVzdDoke2NvcGllZF9zaXplfUIpIgogICAgICAgICAgICAgICAgICAgIHJtIC1mICIkZGVzdCIKICAgICAgICAgICAgICAgICAgICBGQUlMRURfRklMRVM9IiRGQUlMRURfRklMRVMgJGZpbGVuYW1lIgogICAgICAgICAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgICAgICAgICBmaQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBlY2hvICIgIOKdjCAkZmlsZW5hbWUgLSBjb3B5IHN1Y2NlZWRlZCBidXQgZGVzdGluYXRpb24gaXMgZW1wdHkiCiAgICAgICAgICAgICAgICBybSAtZiAiJGRlc3QiCiAgICAgICAgICAgICAgICBGQUlMRURfRklMRVM9IiRGQUlMRURfRklMRVMgJGZpbGVuYW1lIgogICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgZmkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGxvY2FsIGVycm9yPSQoY2F0IC90bXAvY29weV9lcnJvcl8ke2ZpbGVuYW1lfS5sb2cgMj4vZGV2L251bGwgfHwgZWNobyAidW5rbm93biBlcnJvciIpCiAgICAgICAgICAgIGVjaG8gIiAg4p2MICRmaWxlbmFtZSAtIGNvcHkgZmFpbGVkOiAkZXJyb3IiCiAgICAgICAgICAgIEZBSUxFRF9GSUxFUz0iJEZBSUxFRF9GSUxFUyAkZmlsZW5hbWUiCiAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgZmkKICAgIH0KICAgIAogICAgIyBDb3B5IHRhc2stc3BlY2lmaWMgZmlsZXMgKHRhc2subWQgaXMgY3JpdGljYWwsIG90aGVycyBhcmUgb3B0aW9uYWwpCiAgICBDUklUSUNBTF9GSUxFU19DT1BJRUQ9MAogICAgaWYgWyAtZCAiJFRBU0tfRElSIiBdOyB0aGVuCiAgICAgICAgZWNobyAiICDwn5OBIFByb2Nlc3NpbmcgdGFzay1zcGVjaWZpYyBmaWxlcyBmcm9tOiAkVEFTS19ESVIiCiAgICAgICAgCiAgICAgICAgIyBDcml0aWNhbCBmaWxlOiB0YXNrLm1kCiAgICAgICAgaWYgc2FmZV9jb3B5X2ZpbGUgIiRUQVNLX0RJUi90YXNrLm1kIiAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Rhc2subWQiICJ0YXNrLm1kIjsgdGhlbgogICAgICAgICAgICBDUklUSUNBTF9GSUxFU19DT1BJRUQ9JCgoQ1JJVElDQUxfRklMRVNfQ09QSUVEICsgMSkpCiAgICAgICAgZmkKICAgICAgICAKICAgICAgICAjIE9wdGlvbmFsIGZpbGVzCiAgICAgICAgc2FmZV9jb3B5X2ZpbGUgIiRUQVNLX0RJUi9hY2NlcHRhbmNlLWNyaXRlcmlhLm1kIiAiJENMQVVERV9XT1JLX0RJUi90YXNrL2FjY2VwdGFuY2UtY3JpdGVyaWEubWQiICJhY2NlcHRhbmNlLWNyaXRlcmlhLm1kIiB8fCB0cnVlCiAgICAgICAgc2FmZV9jb3B5X2ZpbGUgIiRUQVNLX0RJUi9wcm9tcHQubWQiICIkQ0xBVURFX1dPUktfRElSL3Rhc2svcHJvbXB0Lm1kIiAicHJvbXB0Lm1kIiB8fCB0cnVlCiAgICBlbHNlCiAgICAgICAgZWNobyAiICDimqDvuI8gIFRhc2sgZGlyZWN0b3J5IG5vdCBmb3VuZDogJFRBU0tfRElSIgogICAgICAgIGVjaG8gIiAgU2tpcHBpbmcgdGFzay1zcGVjaWZpYyBmaWxlcyAodGFzay5tZCwgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCwgcHJvbXB0Lm1kKSIKICAgICAgICBGQUlMRURfRklMRVM9IiRGQUlMRURfRklMRVMgdGFzay5tZCBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kIHByb21wdC5tZCIKICAgIGZpCiAgICAKICAgICMgQ29weSBhcmNoaXRlY3R1cmUgZG9jdW1lbnRhdGlvbiAob3B0aW9uYWwpCiAgICBzYWZlX2NvcHlfZmlsZSAiJERPQ1NfUEFUSC9kb2NzL2FyY2hpdGVjdHVyZS5tZCIgIiRDTEFVREVfV09SS19ESVIvdGFzay9hcmNoaXRlY3R1cmUubWQiICJhcmNoaXRlY3R1cmUubWQiIHx8IHRydWUKICAgIAogICAgIyBEZXRlcm1pbmUgb3ZlcmFsbCBzdWNjZXNzCiAgICAjIFN1Y2Nlc3MgaWYgYXQgbGVhc3Qgb25lIGNyaXRpY2FsIGZpbGUgd2FzIGNvcGllZC9leGlzdHMgT1IgYW55IGZpbGVzIHdlcmUgY29waWVkL2V4aXN0CiAgICBBVkFJTEFCTEVfRklMRV9DT1VOVD0kKGxzIC0xICIkQ0xBVURFX1dPUktfRElSL3Rhc2svIiAyPi9kZXYvbnVsbCB8IHdjIC1sKQogICAgaWYgWyAiJEFWQUlMQUJMRV9GSUxFX0NPVU5UIiAtZ3QgMCBdOyB0aGVuCiAgICAgICAgRE9DU19TRVRVUF9TVUNDRVNTPXRydWUKICAgICAgICBlY2hvICIgIOKchSBTZXR1cCBzdWNjZXNzZnVsIC0gJEFWQUlMQUJMRV9GSUxFX0NPVU5UIGZpbGUocykgYXZhaWxhYmxlIgogICAgZWxzZQogICAgICAgIGVjaG8gIiAg4p2MIFNldHVwIGZhaWxlZCAtIG5vIGZpbGVzIGF2YWlsYWJsZSBmb3IgYWdlbnQiCiAgICAgICAgRE9DU19TRVRVUF9TVUNDRVNTPWZhbHNlCiAgICBmaQplbHNlCiAgICBlY2hvICIiCiAgICBlY2hvICLij63vuI8gIFN0ZXAgNC80OiBTS0lQUEVEIChwYXRoIHZhbGlkYXRpb24gZmFpbGVkKSIKZmkKCiMgQ29tcHJlaGVuc2l2ZSBmaW5hbCBzdW1tYXJ5IHdpdGggY2xlYXIgc3RhdHVzCmVjaG8gIiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5OKIFRBU0sgRE9DVU1FTlRBVElPTiBTRVRVUCBTVU1NQVJZIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCgojIE92ZXJhbGwgc3RhdHVzIHdpdGggY2xlYXIgcGFzcy9mYWlsCmlmIFsgIiRET0NTX1NFVFVQX1NVQ0NFU1MiID0gInRydWUiIF07IHRoZW4KICAgIGVjaG8gIuKchSBTVEFUVVM6IFNVQ0NFU1MiCiAgICBlY2hvICIgICBEb2N1bWVudGF0aW9uIGlzIGF2YWlsYWJsZSBmb3IgdGhlIGFnZW50IgplbHNlCiAgICBlY2hvICLinYwgU1RBVFVTOiBGQUlMRUQiCiAgICBlY2hvICIgICBBZ2VudCB3aWxsIHByb2NlZWQgd2l0aCBsaW1pdGVkIGNvbnRleHQiCmZpCgojIERldGFpbGVkIHN0YWdlIGJyZWFrZG93bgplY2hvICIiCmVjaG8gIlBpcGVsaW5lIFN0YWdlczoiCnByaW50ZiAiICAxLiBBdXRoZW50aWNhdGlvbjogICAlc1xuIiAiJChbICIkRE9DU19BVVRIX1ZFUklGSUVEIiA9ICJ0cnVlIiBdICYmIGVjaG8gIuKchSBWZXJpZmllZCIgfHwgZWNobyAi4p2MIEZhaWxlZCIpIgpwcmludGYgIiAgMi4gQ2xvbmU6ICAgICAgICAgICAgJXNcbiIgIiQoWyAiJERPQ1NfQ0xPTkVfU1VDQ0VTUyIgPSAidHJ1ZSIgXSAmJiBlY2hvICLinIUgU3VjY2VzcyIgfHwgZWNobyAi4p2MIEZhaWxlZCIpIgpwcmludGYgIiAgMy4gUGF0aCBWYWxpZGF0aW9uOiAgJXNcbiIgIiQoWyAiJERPQ1NfUEFUSF9WQUxJRCIgPSAidHJ1ZSIgXSAmJiBlY2hvICLinIUgVmFsaWQiIHx8IGVjaG8gIuKdjCBJbnZhbGlkIikiCnByaW50ZiAiICA0LiBGaWxlIE9wZXJhdGlvbnM6ICAlc1xuIiAiJChbICIkRE9DU19TRVRVUF9TVUNDRVNTIiA9ICJ0cnVlIiBdICYmIGVjaG8gIuKchSBDb21wbGV0ZSIgfHwgZWNobyAi4p2MIEluY29tcGxldGUiKSIKCiMgRmlsZSBzdGF0dXMgdHJhY2tpbmcKaWYgWyAtbiAiJENPUElFRF9GSUxFUyIgXTsgdGhlbgogICAgZWNobyAiIgogICAgZWNobyAi8J+ThCBOZXdseSBjb3BpZWQ6JENPUElFRF9GSUxFUyIKZmkKCmlmIFsgLW4gIiRFWElTVElOR19GSUxFUyIgXTsgdGhlbgogICAgZWNobyAi8J+ThCBQcmVzZXJ2ZWQgZXhpc3Rpbmc6JEVYSVNUSU5HX0ZJTEVTIgpmaQoKaWYgWyAtbiAiJEZBSUxFRF9GSUxFUyIgXTsgdGhlbgogICAgZWNobyAi4p2MIEZhaWxlZC9taXNzaW5nOiRGQUlMRURfRklMRVMiCmZpCgojIExpc3QgYWN0dWFsIGF2YWlsYWJsZSBmaWxlcyBpbiB0YXNrIGRpcmVjdG9yeQplY2hvICIiCmVjaG8gIvCfk4EgVGFzayBkb2N1bWVudGF0aW9uIGF2YWlsYWJsZToiCmlmIFsgLWQgIiRDTEFVREVfV09SS19ESVIvdGFzayIgXSAmJiBbICIkKGxzIC1BICIkQ0xBVURFX1dPUktfRElSL3Rhc2siIDI+L2Rldi9udWxsIHwgd2MgLWwpIiAtZ3QgMCBdOyB0aGVuCiAgICBscyAtbGggIiRDTEFVREVfV09SS19ESVIvdGFzay8iIDI+L2Rldi9udWxsIHwgdGFpbCAtbiArMiB8IHdoaWxlIHJlYWQgLXIgbGluZTsgZG8KICAgICAgICBmaWxlbmFtZT0kKGVjaG8gIiRsaW5lIiB8IGF3ayAne3ByaW50ICQ5fScpCiAgICAgICAgc2l6ZT0kKGVjaG8gIiRsaW5lIiB8IGF3ayAne3ByaW50ICQ1fScpCiAgICAgICAgcHJpbnRmICIgICDinJMgJXMgKCVzKVxuIiAiJGZpbGVuYW1lIiAiJHNpemUiCiAgICBkb25lCmVsc2UKICAgIGVjaG8gIiAgIChub25lIGF2YWlsYWJsZSkiCmZpCgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCgojIFNtYXJ0IGNsZWFudXAgc3RyYXRlZ3kgLSBwcmVzZXJ2ZSBkZWJ1Z2dpbmcgaW5mbyBvbiBmYWlsdXJlCmlmIFsgIiRET0NTX1NFVFVQX1NVQ0NFU1MiID0gInRydWUiIF0gJiYgWyAteiAiJEZBSUxFRF9GSUxFUyIgXTsgdGhlbgogICAgIyBGdWxsIHN1Y2Nlc3MgLSBjbGVhbiB1cCBldmVyeXRoaW5nCiAgICBybSAtcmYgL3RtcC9kb2NzLXJlcG8gL3RtcC9kb2NzX2FjY2Vzc190ZXN0Lm91dCAvdG1wL2RvY3NfY2xvbmVfZXJyb3IubG9nIC90bXAvY29weV9lcnJvcl8qLmxvZyAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICBlY2hvICLinJMgVGVtcG9yYXJ5IGZpbGVzIGNsZWFuZWQgKHNldHVwIHN1Y2Nlc3NmdWwpIgplbHNlCiAgICAjIFBhcnRpYWwgb3IgY29tcGxldGUgZmFpbHVyZSAtIGtlZXAgZGVidWdnaW5nIGluZm8KICAgIGVjaG8gIuKaoO+4jyAgUHJlc2VydmluZyB0ZW1wb3JhcnkgZmlsZXMgZm9yIGRlYnVnZ2luZyIKICAgIGVjaG8gIiIKICAgIGVjaG8gIkRlYnVnIEluZm9ybWF0aW9uIEF2YWlsYWJsZToiCiAgICBbIC1kICIvdG1wL2RvY3MtcmVwbyIgXSAmJiBlY2hvICIgICDinJMgL3RtcC9kb2NzLXJlcG8gKGNsb25lZCByZXBvc2l0b3J5KSIKICAgIFsgLWYgIi90bXAvZG9jc19hY2Nlc3NfdGVzdC5vdXQiIF0gJiYgZWNobyAiICAg4pyTIC90bXAvZG9jc19hY2Nlc3NfdGVzdC5vdXQgKGFjY2VzcyB0ZXN0IG91dHB1dCkiCiAgICBbIC1mICIvdG1wL2RvY3NfY2xvbmVfZXJyb3IubG9nIiBdICYmIGVjaG8gIiAgIOKckyAvdG1wL2RvY3NfY2xvbmVfZXJyb3IubG9nIChjbG9uZSBlcnJvcnMpIgogICAgbHMgL3RtcC9jb3B5X2Vycm9yXyoubG9nIDI+L2Rldi9udWxsIHwgd2hpbGUgcmVhZCAtciBsb2c7IGRvCiAgICAgICAgZWNobyAiICAg4pyTICRsb2ciCiAgICBkb25lIHx8IHRydWUKICAgIAogICAgIyBQcm92aWRlIHNwZWNpZmljIHRyb3VibGVzaG9vdGluZyBndWlkYW5jZQogICAgZWNobyAiIgogICAgZWNobyAiVHJvdWJsZXNob290aW5nIFN0ZXBzOiIKICAgIGlmIFsgIiRET0NTX0FVVEhfVkVSSUZJRUQiICE9ICJ0cnVlIiBdOyB0aGVuCiAgICAgICAgZWNobyAiICAgMS4gVmVyaWZ5IEdJVEhVQl9UT0tFTiBpcyB2YWxpZCBhbmQgaGFzIHJlcG9zaXRvcnkgYWNjZXNzIgogICAgICAgIGVjaG8gIiAgIDIuIENoZWNrIHJlcG9zaXRvcnkgVVJMOiB7e2RvY3NSZXBvc2l0b3J5VXJsfX0iCiAgICBmaQogICAgaWYgWyAiJERPQ1NfQ0xPTkVfU1VDQ0VTUyIgIT0gInRydWUiIF0gJiYgWyAiJERPQ1NfQVVUSF9WRVJJRklFRCIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIiAgIDEuIFJldmlldyBjbG9uZSBlcnJvciBsb2c6IC90bXAvZG9jc19jbG9uZV9lcnJvci5sb2ciCiAgICAgICAgZWNobyAiICAgMi4gVmVyaWZ5IHJlcG9zaXRvcnkgZXhpc3RzIGFuZCBpcyBhY2Nlc3NpYmxlIgogICAgZmkKICAgIGlmIFsgIiRET0NTX1BBVEhfVkFMSUQiICE9ICJ0cnVlIiBdICYmIFsgIiRET0NTX0NMT05FX1NVQ0NFU1MiID0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICIgICAxLiBDaGVjayBkb2NzX3Byb2plY3RfZGlyZWN0b3J5IGNvbmZpZ3VyYXRpb246ICd7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSciCiAgICAgICAgZWNobyAiICAgMi4gVmVyaWZ5IC50YXNrbWFzdGVyIGRpcmVjdG9yeSBleGlzdHMgaW4gY29uZmlndXJlZCBwYXRoIgogICAgICAgIGVjaG8gIiAgIDMuIExpc3QgcmVwb3NpdG9yeSBzdHJ1Y3R1cmU6IGxzIC1sYSAvdG1wL2RvY3MtcmVwbyIKICAgIGZpCmZpCgp7e2Vsc2V9fQojIE5vIGRvY3MgcmVwb3NpdG9yeSBjb25maWd1cmVkIC0gY2hlY2sgZm9yIGxvY2FsIHRhc2sgZmlsZXMKZWNobyAi4oS577iPICBObyBkb2NzIHJlcG9zaXRvcnkgY29uZmlndXJlZCIKZWNobyAiQ2hlY2tpbmcgZm9yIGxvY2FsIHRhc2sgZmlsZXMgaW4gcmVwb3NpdG9yeS4uLiIKCmlmIFsgLWQgIiRDTEFVREVfV09SS19ESVIvdGFzayIgXTsgdGhlbgogICAgRklMRV9DT1VOVD0kKGxzIC1BICIkQ0xBVURFX1dPUktfRElSL3Rhc2siIDI+L2Rldi9udWxsIHwgd2MgLWwpCiAgICBpZiBbICIkRklMRV9DT1VOVCIgLWd0IDAgXTsgdGhlbgogICAgICAgIGVjaG8gIuKckyBGb3VuZCB0YXNrIGRpcmVjdG9yeSB3aXRoICRGSUxFX0NPVU5UIGZpbGUocykiCiAgICAgICAgZWNobyAiIgogICAgICAgIGVjaG8gIvCfk4EgQXZhaWxhYmxlIGZpbGVzOiIKICAgICAgICBscyAtbGggIiRDTEFVREVfV09SS19ESVIvdGFzay8iIDI+L2Rldi9udWxsIHwgdGFpbCAtbiArMiB8IHdoaWxlIHJlYWQgLXIgbGluZTsgZG8KICAgICAgICAgICAgZmlsZW5hbWU9JChlY2hvICIkbGluZSIgfCBhd2sgJ3twcmludCAkOX0nKQogICAgICAgICAgICBzaXplPSQoZWNobyAiJGxpbmUiIHwgYXdrICd7cHJpbnQgJDV9JykKICAgICAgICAgICAgcHJpbnRmICIgICDinJMgJXMgKCVzKVxuIiAiJGZpbGVuYW1lIiAiJHNpemUiCiAgICAgICAgZG9uZQogICAgZWxzZQogICAgICAgIGVjaG8gIuKaoO+4jyAgVGFzayBkaXJlY3RvcnkgZXhpc3RzIGJ1dCBpcyBlbXB0eSIKICAgICAgICBlY2hvICIgICBBZ2VudCB3aWxsIHByb2NlZWQgd2l0aCBsaW1pdGVkIGNvbnRleHQiCiAgICBmaQplbHNlCiAgICBlY2hvICLimqDvuI8gIE5vIHRhc2sgZG9jdW1lbnRhdGlvbiBhdmFpbGFibGUiCiAgICBlY2hvICIgICAtIE5vIGRvY3MgcmVwb3NpdG9yeSBjb25maWd1cmVkIChkb2NzUmVwb3NpdG9yeVVybCBub3Qgc2V0KSIKICAgIGVjaG8gIiAgIC0gTm8gbG9jYWwgdGFzay8gZGlyZWN0b3J5IGZvdW5kIGluIHJlcG9zaXRvcnkiCiAgICBlY2hvICIgICBBZ2VudCB3aWxsIHByb2NlZWQgd2l0aCBtaW5pbWFsIGNvbnRleHQiCmZpCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKe3svaWZ9fQoKIyBFbnN1cmUgd2UncmUgaW4gdGhlIGdpdCByZXBvc2l0b3J5IHdvcmtpbmcgZGlyZWN0b3J5CmVjaG8gIuKckyBXb3JraW5nIGRpcmVjdGx5IGluIGdpdCByZXBvc2l0b3J5IGF0OiAkQ0xBVURFX1dPUktfRElSIgoKIyBDaGVjayBpZiB3ZSBzaG91bGQgY29udGludWUgcHJldmlvdXMgc2Vzc2lvbgp7eyNpZiBjb250aW51ZV9zZXNzaW9ufX0KZWNobyAi8J+TgiBDb250aW51aW5nIGZyb20gcHJldmlvdXMgc2Vzc2lvbi4uLiIKIyBQcmVzZXJ2ZSBleGlzdGluZyBDTEFVREUubWQgaWYgaXQgZXhpc3RzCmlmIFsgLWYgIi93b3Jrc3BhY2UvQ0xBVURFLm1kIiBdOyB0aGVuCiAgICBlY2hvICLinJMgRm91bmQgZXhpc3RpbmcgQ0xBVURFLm1kLCBwcmVzZXJ2aW5nIHNlc3Npb24gbWVtb3J5IgpmaQp7e2Vsc2V9fQp7eyNpZiBvdmVyd3JpdGVfbWVtb3J5fX0KZWNobyAi8J+UhCBPdmVyd3JpdGluZyBzZXNzaW9uIG1lbW9yeSBhcyByZXF1ZXN0ZWQuLi4iCnJtIC1mIC93b3Jrc3BhY2UvQ0xBVURFLm1kCnt7L2lmfX0Ke3svaWZ9fQoKIyBHZW5lcmF0ZSBjb25maWd1cmF0aW9uIGZpbGVzIGZyb20gdGVtcGxhdGVzCmVjaG8gIvCflKcgR2VuZXJhdGluZyBDbGVvLXNwZWNpZmljIGNvbmZpZ3VyYXRpb24gZmlsZXMuLi4iCgojIEVudGVycHJpc2UgbWFuYWdlZCBzZXR0aW5ncyBhcmUgbW91bnRlZCBkaXJlY3RseSBmcm9tIENvbmZpZ01hcAplY2hvICI9PT0gRU5URVJQUklTRSBNQU5BR0VEIFNFVFRJTkdTID09PSIKZWNobyAi4pyTIFNldHRpbmdzIG1vdW50ZWQgZGlyZWN0bHkgZnJvbSBDb25maWdNYXAgYXQ6IC9ldGMvY2xhdWRlLWNvZGUvbWFuYWdlZC1zZXR0aW5ncy5qc29uIgplY2hvICLinJMgTm8gY29weWluZyBuZWVkZWQgLSBtb3VudCBhdXRvbWF0aWNhbGx5IHJlZmxlY3RzIGxhdGVzdCBDb25maWdNYXAgY2hhbmdlcyIKCiMgVmVyaWZ5IGNsaWVudC1jb25maWcuanNvbiBpcyBhdmFpbGFibGUgYW5kIHZhbGlkCmVjaG8gIj09PSBUT09MTUFOIENPTkZJRyBTRVRVUCA9PT0iCldPUktTUEFDRV9DRkc9IiRDTEFVREVfV09SS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIgpTT1VSQ0VfQ0ZHPSIvdGFzay1maWxlcy9jbGllbnQtY29uZmlnLmpzb24iCgojIEhlbHBlciB0byBjaGVjayBub24tZW1wdHkgSlNPTiBvYmplY3QKaXNfdmFsaWRfY2ZnKCkgewogIGxvY2FsIHA9IiQxIgogIFsgLWYgIiRwIiBdIHx8IHJldHVybiAxCiAganEgLWUgJ3R5cGU9PSJvYmplY3QiIGFuZCBsZW5ndGg+MCcgIiRwIiA+L2Rldi9udWxsIDI+JjEKfQoKU1RBVFVTX0xBQkVMX05FRURTX0ZJWEVTPSJuZWVkcy1maXhlcyIKU1RBVFVTX0xBQkVMX0ZJWElORz0iZml4aW5nLWluLXByb2dyZXNzIgpTVEFUVVNfTEFCRUxfTkVFRFNfQ0xFTz0ibmVlZHMtY2xlbyIKU1RBVFVTX0xBQkVMX05FRURTX1RFU1M9Im5lZWRzLXRlc3MiClNUQVRVU19MQUJFTF9BUFBST1ZFRD0iYXBwcm92ZWQiClNUQVRVU19MQUJFTF9GQUlMRUQ9ImZhaWxlZC1yZW1lZGlhdGlvbiIKU1RBVFVTX0xBQkVMX05FRURTX1RFU1RTX0xFR0FDWT0ibmVlZHMgdGVzdHMiCgplbnN1cmVfc3RhdHVzX2xhYmVscygpIHsKICBsb2NhbCByZXBvPSIkMSIKICBzaGlmdAogIGNvbW1hbmQgLXYgZ2ggPi9kZXYvbnVsbCAyPiYxIHx8IHJldHVybiAwCgogIGZvciBlbnRyeSBpbiAiJEAiOyBkbwogICAgWyAtbiAiJGVudHJ5IiBdIHx8IGNvbnRpbnVlCiAgICBsb2NhbCBsYWJlbD0iJHtlbnRyeSUlOip9IgogICAgbG9jYWwgcmVzdD0iJHtlbnRyeSMqOn0iCiAgICBsb2NhbCBjb2xvcj0iJHtyZXN0JSU6Kn0iCiAgICBsb2NhbCBkZXNjPSIke3Jlc3QjKjp9IgoKICAgIGlmICEgZ2ggbGFiZWwgbGlzdCAtUiAiJHJlcG8iIC0tc2VhcmNoICIkbGFiZWwiIDI+L2Rldi9udWxsIHwgZ3JlcCAtcSAiXiRsYWJlbCI7IHRoZW4KICAgICAgZ2ggbGFiZWwgY3JlYXRlICIkbGFiZWwiIC1SICIkcmVwbyIgLS1jb2xvciAiJGNvbG9yIiAtLWRlc2NyaXB0aW9uICIkZGVzYyIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgIGZpCiAgZG9uZQp9Cgpwcl9hZGRfbGFiZWxzKCkgewogIGxvY2FsIHJlcG89IiQxIgogIGxvY2FsIHByX251bWJlcj0iJDIiCiAgbG9jYWwgcHJfdXJsPSIkMyIKICBzaGlmdCAzCgogIGNvbW1hbmQgLXYgZ2ggPi9kZXYvbnVsbCAyPiYxIHx8IHJldHVybiAwCgogIGZvciBsYWJlbCBpbiAiJEAiOyBkbwogICAgWyAtbiAiJGxhYmVsIiBdIHx8IGNvbnRpbnVlCiAgICBpZiBbIC1uICIkcHJfbnVtYmVyIiBdOyB0aGVuCiAgICAgIGdoIHByIGVkaXQgIiRwcl9udW1iZXIiIC1SICIkcmVwbyIgLS1hZGQtbGFiZWwgIiRsYWJlbCIgPi9kZXYvbnVsbCAyPiYxIHx8IGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gYWRkIGxhYmVsICckbGFiZWwnIHRvIFBSICMkcHJfbnVtYmVyIgogICAgZWxpZiBbIC1uICIkcHJfdXJsIiBdOyB0aGVuCiAgICAgIGdoIHByIGVkaXQgIiRwcl91cmwiIC0tYWRkLWxhYmVsICIkbGFiZWwiID4vZGV2L251bGwgMj4mMSB8fCBlY2hvICLimqDvuI8gRmFpbGVkIHRvIGFkZCBsYWJlbCAnJGxhYmVsJyB0byBQUiAkcHJfdXJsIgogICAgZmkKICBkb25lCn0KCnByX3JlbW92ZV9sYWJlbHMoKSB7CiAgbG9jYWwgcmVwbz0iJDEiCiAgbG9jYWwgcHJfbnVtYmVyPSIkMiIKICBsb2NhbCBwcl91cmw9IiQzIgogIHNoaWZ0IDMKCiAgY29tbWFuZCAtdiBnaCA+L2Rldi9udWxsIDI+JjEgfHwgcmV0dXJuIDAKCiAgZm9yIGxhYmVsIGluICIkQCI7IGRvCiAgICBbIC1uICIkbGFiZWwiIF0gfHwgY29udGludWUKICAgIGlmIFsgLW4gIiRwcl9udW1iZXIiIF07IHRoZW4KICAgICAgZ2ggcHIgZWRpdCAiJHByX251bWJlciIgLVIgIiRyZXBvIiAtLXJlbW92ZS1sYWJlbCAiJGxhYmVsIiA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1ZQogICAgZWxpZiBbIC1uICIkcHJfdXJsIiBdOyB0aGVuCiAgICAgIGdoIHByIGVkaXQgIiRwcl91cmwiIC0tcmVtb3ZlLWxhYmVsICIkbGFiZWwiID4vZGV2L251bGwgMj4mMSB8fCB0cnVlCiAgICBmaQogIGRvbmUKfQoKdXBkYXRlX2NvZGVydW5fc3RhdHVzKCkgewogIGxvY2FsIHJlbWVkaWF0aW9uPSIkMSIKICBsb2NhbCBxYT0iJDIiCiAgbG9jYWwgcHJfdXJsX3ZhbHVlPSIkezM6LSRQUl9VUkx9IgoKICBpZiAhIGNvbW1hbmQgLXYga3ViZWN0bCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIHJldHVybgogIGZpCgogIGlmICEgY29tbWFuZCAtdiBqcSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKaoO+4jyBqcSBub3QgYXZhaWxhYmxlOyBza2lwcGluZyBDb2RlUnVuIHN0YXR1cyB1cGRhdGUiCiAgICByZXR1cm4KICBmaQoKICBsb2NhbCB0aW1lc3RhbXAKICB0aW1lc3RhbXA9JChkYXRlIC11ICsiJVktJW0tJWRUJUg6JU06JVNaIikKCiAgbG9jYWwgcGF0Y2gKICBwYXRjaD0kKGpxIC1uIFwKICAgIC0tYXJnIHRzICIkdGltZXN0YW1wIiBcCiAgICAtLWFyZyBwciAiJHByX3VybF92YWx1ZSIgXAogICAgLS1hcmcgcmVtICIkcmVtZWRpYXRpb24iIFwKICAgIC0tYXJnIHFhICIkcWEiIFwKICAgICd7c3RhdHVzOiAoe2xhc3RVcGRhdGU6ICR0c30KICAgICAgICArIChpZiAkcHIgIT0gIiIgdGhlbiB7cHVsbFJlcXVlc3RVcmw6ICRwcn0gZWxzZSB7fSBlbmQpCiAgICAgICAgKyAoaWYgJHJlbSAhPSAiIiB0aGVuIHtyZW1lZGlhdGlvblN0YXR1czogJHJlbX0gZWxzZSB7fSBlbmQpCiAgICAgICAgKyAoaWYgJHFhICE9ICIiIHRoZW4ge3FhU3RhdHVzOiAkcWF9IGVsc2Uge30gZW5kKSl9JykKCiAgaWYgWyAtbiAiJENPREVSVU5fTkFNRSIgXSAmJiBbIC1uICIkTkFNRVNQQUNFIiBdOyB0aGVuCiAgICBrdWJlY3RsIHBhdGNoIGNvZGVydW4gIiRDT0RFUlVOX05BTUUiIC1uICIkTkFNRVNQQUNFIiAtLXR5cGU9bWVyZ2UgLS1zdWJyZXNvdXJjZT1zdGF0dXMgLXAgIiRwYXRjaCIgPi9kZXYvbnVsbCAyPiYxIHx8IFwKICAgICAgZWNobyAi4pqg77iPIEZhaWxlZCB0byB1cGRhdGUgQ29kZVJ1biBzdGF0dXMgd2l0aCByZW1lZGlhdGlvbiBjb250ZXh0IgogIGZpCn0KCiMgQ29weSBjbGllbnQtY29uZmlnLmpzb24gZnJvbSB0YXNrIGZpbGVzIGZpcnN0CmlmIFsgLWYgIi90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogIGNwIC90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiAiJENMQVVERV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24iCiAgY3AgL3Rhc2stZmlsZXMvY2xpZW50LWNvbmZpZy5qc29uICIvd29ya3NwYWNlL2NsaWVudC1jb25maWcuanNvbiIKICBlY2hvICLinJMgY2xpZW50LWNvbmZpZy5qc29uIGNvcGllZCBmcm9tIENvbmZpZ01hcCB0byBib3RoIHdvcmtpbmcgZGlyZWN0b3J5IGFuZCB3b3Jrc3BhY2Ugcm9vdCIKZWxzZQogIGVjaG8gIuKaoO+4jyBjbGllbnQtY29uZmlnLmpzb24gbm90IGZvdW5kIGluIHRhc2stZmlsZXMiCmZpCgpTUkNfT0s9ZmFsc2UKV1NfT0s9ZmFsc2UKaWYgaXNfdmFsaWRfY2ZnICIkU09VUkNFX0NGRyI7IHRoZW4gU1JDX09LPXRydWU7IGZpCmlmIGlzX3ZhbGlkX2NmZyAiJFdPUktTUEFDRV9DRkciOyB0aGVuIFdTX09LPXRydWU7IGZpCgppZiAkU1JDX09LOyB0aGVuCiAgZXhwb3J0IE1DUF9DTElFTlRfQ09ORklHPSIkU09VUkNFX0NGRyIKICBlY2hvICLinJMgU2VsZWN0ZWQgTUNQX0NMSUVOVF9DT05GSUcgZnJvbSBzb3VyY2UgQ29uZmlnTWFwOiAkTUNQX0NMSUVOVF9DT05GSUciCmVsaWYgJFdTX09LOyB0aGVuCiAgZXhwb3J0IE1DUF9DTElFTlRfQ09ORklHPSIkV09SS1NQQUNFX0NGRyIKICBlY2hvICLinJMgU2VsZWN0ZWQgTUNQX0NMSUVOVF9DT05GSUcgZnJvbSB3b3Jrc3BhY2UgY29weTogJE1DUF9DTElFTlRfQ09ORklHIgplbHNlCiAgZWNobyAi4p2MIE5vIHZhbGlkIGNsaWVudC1jb25maWcuanNvbiBmb3VuZCAoYm90aCBzb3VyY2UgYW5kIHdvcmtzcGFjZSBlbXB0eS9pbnZhbGlkKS4gQWJvcnRpbmcuIgogIGlmIFsgLWYgIiRTT1VSQ0VfQ0ZHIiBdOyB0aGVuCiAgICBlY2hvICIgICBTb3VyY2Ugc3VtbWFyeToiOyAoanEgLWMgJ3tyZW1vdGVUb29sczogKC5yZW1vdGVUb29scyAvLyBbXSksIGxvY2FsU2VydmVyczogKC5sb2NhbFNlcnZlcnMgLy8ge30pfScgIiRTT1VSQ0VfQ0ZHIiAyPi9kZXYvbnVsbCB8fCB7IGVjaG8gLW4gIiAgIHJhdz0iOyBoZWFkIC1jIDIwMCAiJFNPVVJDRV9DRkciOyBlY2hvOyB9KQogIGVsc2UKICAgIGVjaG8gIiAgIFNvdXJjZSBtaXNzaW5nOiAkU09VUkNFX0NGRyIKICBmaQogIGlmIFsgLWYgIiRXT1JLU1BBQ0VfQ0ZHIiBdOyB0aGVuCiAgICBlY2hvICIgICBXb3Jrc3BhY2Ugc3VtbWFyeToiOyAoanEgLWMgJ3tyZW1vdGVUb29sczogKC5yZW1vdGVUb29scyAvLyBbXSksIGxvY2FsU2VydmVyczogKC5sb2NhbFNlcnZlcnMgLy8ge30pfScgIiRXT1JLU1BBQ0VfQ0ZHIiAyPi9kZXYvbnVsbCB8fCB7IGVjaG8gLW4gIiAgIHJhdz0iOyBoZWFkIC1jIDIwMCAiJFdPUktTUEFDRV9DRkciOyBlY2hvOyB9KQogIGVsc2UKICAgIGVjaG8gIiAgIFdvcmtzcGFjZSBtaXNzaW5nOiAkV09SS1NQQUNFX0NGRyIKICBmaQogIGV4aXQgMQpmaQoKIyBDaGVjayBpZiBDTEFVREUubWQgYWxyZWFkeSBleGlzdHMgKGNyZWF0ZWQgYnkgY29udHJvbGxlcikKaWYgWyAtZiAiJENMQVVERV9XT1JLX0RJUi9DTEFVREUubWQiIF07IHRoZW4KICAgIGVjaG8gIuKckyBDTEFVREUubWQgYWxyZWFkeSBleGlzdHMgKGZyb20gY29udHJvbGxlciksIHVzaW5nIGV4aXN0aW5nIGZpbGUiCmVsaWYgWyAtZiAiL3dvcmtzcGFjZS9DTEFVREUubWQiIF07IHRoZW4KICAgIGVjaG8gIuKckyBGb3VuZCBDTEFVREUubWQgaW4gd29ya3NwYWNlLCBjb3B5aW5nIHRvIHdvcmtpbmcgZGlyZWN0b3J5IgogICAgY3AgIi93b3Jrc3BhY2UvQ0xBVURFLm1kIiAiJENMQVVERV9XT1JLX0RJUi9DTEFVREUubWQiCmVsc2UKICAgIGVjaG8gIvCfk50gQ3JlYXRpbmcgQ2xlby1zcGVjaWZpYyBDTEFVREUubWQgbWVtb3J5IGZpbGUiCiAgICBjYXQgPiAiJENMQVVERV9XT1JLX0RJUi9DTEFVREUubWQiIDw8ICdFT0YnCiMgQ0xFTyAtIENvZGUgUXVhbGl0eSBFbmZvcmNlbWVudCBBZ2VudAoKIyMgQWdlbnQgUm9sZQotICoqUHJpbWFyeSoqOiBSaWdvcm91cyBjb2RlIHF1YWxpdHkgZW5mb3JjZW1lbnQgYW5kIENJL0NEIG1haW50ZW5hbmNlCi0gKipGb2N1cyoqOiBGaXggQ0kgZmFpbHVyZXMsIHJlc29sdmUgbWVyZ2UgY29uZmxpY3RzLCBlbmZvcmNlIHF1YWxpdHkgc3RhbmRhcmRzCi0gKipTZWNvbmRhcnkqKjogWUFNTCBsaW50aW5nIGZvciBpbmZyYXN0cnVjdHVyZSBjaGFuZ2VzCi0gKipDcml0aWNhbCoqOiBBZGQgInJlYWR5LWZvci1xYSIgbGFiZWwgb25seSB3aGVuIEFMTCBxdWFsaXR5IGNoZWNrcyBwYXNzCgojIyBQUklPUklUWSBUQVNLUwoKIyMjIDEuIE1lcmdlIENvbmZsaWN0IFJlc29sdXRpb24gKERPIEZJUlNUISkKQ2hlY2sgZm9yIG1lcmdlIGNvbmZsaWN0cyBhbmQgcmVzb2x2ZSB0aGVtIGltbWVkaWF0ZWx5OgpcXFxgXFxcYFxcXGBiYXNoCiMgQ2hlY2sgaWYgUFIgaGFzIGNvbmZsaWN0cwpnaCBwciB2aWV3ICRQUl9OVU0gLS1qc29uIG1lcmdlYWJsZSxtZXJnZVN0YXRlU3RhdHVzCgojIElmIGNvbmZsaWN0cyBleGlzdDoKZ2l0IGZldGNoIG9yaWdpbiBtYWluCmdpdCBtZXJnZSBvcmlnaW4vbWFpbgojIFJlc29sdmUgY29uZmxpY3RzIGludGVsbGlnZW50bHksIHByZXNlcnZpbmcgZnVuY3Rpb25hbGl0eQpnaXQgYWRkIC1BCmdpdCBjb21taXQgLW0gImZpeDogcmVzb2x2ZSBtZXJnZSBjb25mbGljdHMgd2l0aCBtYWluIgpnaXQgcHVzaApcXFxgXFxcYFxcXGAKCiMjIyAyLiBDSS9DRCBGYWlsdXJlIEZpeGVzIChISUdIIFBSSU9SSVRZKQpNb25pdG9yIENJIHN0YXR1cyBhbmQgZml4IGFueSBmYWlsdXJlcyBPUiBzdHVjayBqb2JzOgpcXFxgXFxcYFxcXGBiYXNoCiMgQ2hlY2sgaWYgcmVwb3NpdG9yeSBoYXMgd29ya2Zsb3dzIGJlZm9yZSBjaGVja2luZyBDSSBzdGF0dXMKaWYgWyAtZCAiLmdpdGh1Yi93b3JrZmxvd3MiIF0gJiYgWyAiXFxcJChscyAuZ2l0aHViL3dvcmtmbG93cy8qLnltbCAuZ2l0aHViL3dvcmtmbG93cy8qLnlhbWwgMj4vZGV2L251bGwgfCB3YyAtbCkiIC1ndCAwIF07IHRoZW4KICAjIENoZWNrIENJIHN0YXR1cyAtIGxvb2sgZm9yIEJPVEggZmFpbHVyZXMgQU5EIHN0dWNrIGpvYnMKICBnaCBwciBjaGVja3MgJFBSX05VTQogICMgR2V0IFBSIGJyYW5jaCBkeW5hbWljYWxseQogIFBSX0JSQU5DSD1cXFwkKGdoIHByIHZpZXcgJFBSX05VTSAtLWpzb24gaGVhZFJlZk5hbWUgLXEgLmhlYWRSZWZOYW1lKQogIGdoIHJ1biBsaXN0IC0tYnJhbmNoPSJcXFwkUFJfQlJBTkNIIiAtLWxpbWl0IDUKZWxzZQogIGVjaG8gIuKEue+4jyAgTm8gR2l0SHViIEFjdGlvbnMgd29ya2Zsb3dzIGZvdW5kIGluIHJlcG9zaXRvcnkiCiAgZWNobyAiICAgQ0kvQ0QgY2hlY2tzIHdpbGwgYmUgc2tpcHBlZCBmb3IgdGhpcyByZXBvc2l0b3J5IgpmaQoKIyBJZiBqb2JzIGFyZSBzdHVjay9ub3Qgc3RhcnRpbmc6CiMgMS4gQ2hlY2sgd29ya2Zsb3cgc3ludGF4OgpjYXQgLmdpdGh1Yi93b3JrZmxvd3MvKi55bWwgfCBoZWFkIC01MAojIDIuIFZlcmlmeSBydW5uZXIgbGFiZWxzIGV4aXN0CiMgMy4gQ2hlY2sgZm9yIHdvcmtmbG93IGVycm9ycyBpbiBHaXRIdWIgVUkKCiMgQ29tbW9uIGZpeGVzIGZvciBzdHVjayBqb2JzOgojIC0gRml4ICdydW5zLW9uOicgdG8gdXNlIHZhbGlkIHJ1bm5lciAodWJ1bnR1LWxhdGVzdCwgdWJ1bnR1LTIyLjA0LCBldGMuKQojIC0gRml4IGFjdGlvbiB2ZXJzaW9ucyAoZS5nLiwgYWN0aW9ucy9jaGVja291dEB2NCkKIyAtIEVuc3VyZSB3b3JrZmxvdyB0cmlnZ2VycyBtYXRjaCAocHVzaCwgcHVsbF9yZXF1ZXN0KQojIC0gUmVtb3ZlIG9yIGZpeCBpbnZhbGlkIHdvcmtmbG93IHN5bnRheAoKIyBDb21tb24gZml4ZXMgZm9yIGZhaWxlZCBqb2JzOgojIC0gRml4IGxpbnRpbmcgZXJyb3JzIChjYXJnbyBmbXQsIGJsYWNrLCBlc2xpbnQgLS1maXgpCiMgLSBGaXggdHlwZSBlcnJvcnMKIyAtIFVwZGF0ZSBkZXBlbmRlbmNpZXMgaWYgbmVlZGVkCiMgLSBGaXggdGVzdCBmYWlsdXJlcwojIC0gQWRqdXN0IENJIGNvbmZpZ3VyYXRpb24gaWYgbmVlZGVkClxcXGBcXFxgXFxcYAoKIyMgQ29kZSBRdWFsaXR5IFJlcXVpcmVtZW50cwoKIyMjIENSSVRJQ0FMOiBDbGlwcHkgUGVkYW50aWMgRW5mb3JjZW1lbnQKKipBQlNPTFVURSBQUklPUklUWTogQXZvaWQgI1thbGxvdyhjbGlwcHk6Oi4uLildIGJ5cGFzc2VzIGF0IGFsbCBjb3N0cyEqKgotICoqRE8gTk9UKiogYWRkIFxgI1thbGxvdyhjbGlwcHk6OnBlZGFudGljKV1cYCBvciBzaW1pbGFyIHN1cHByZXNzaW9ucwotICoqRE8gTk9UKiogdXNlIFxgIyFbYWxsb3coLi4uKV1cYCBhdCBtb2R1bGUgb3IgY3JhdGUgbGV2ZWwKLSAqKkFMV0FZUyoqIGZpeCB0aGUgdW5kZXJseWluZyBjb2RlIGlzc3VlIGluc3RlYWQgb2Ygc3VwcHJlc3Npbmcgd2FybmluZ3MKLSAqKk9OTFkqKiBieXBhc3MgaWYgYWJzb2x1dGVseSBuZWNlc3NhcnkgQU5EIGRvY3VtZW50IFdIWSBpbiBkZXRhaWwKLSBFYWNoIGJ5cGFzcyBpcyBhIGNvZGUgc21lbGwgdGhhdCBzaG91bGQgYmUgYWRkcmVzc2VkLCBub3QgaGlkZGVuCgojIyMgQ2hhbmdlIERldGVjdGlvbiBMb2dpYwpBbmFseXplIGdpdCBkaWZmIHRvIGRldGVybWluZSBhcHByb3ByaWF0ZSBxdWFsaXR5IGNoZWNrczoKXFxcYFxcXGBcXFxgYmFzaApSVVNUX0NIQU5HRVM9XFxcJChnaXQgZGlmZiAtLW5hbWUtb25seSBvcmlnaW4vbWFpbi4uLkhFQUQgfCBncmVwIC1FICdcXFwuKHJzfHRvbWwpXFxcJCcgfHwgdHJ1ZSkKWUFNTF9DSEFOR0VTPVxcXCQoZ2l0IGRpZmYgLS1uYW1lLW9ubHkgb3JpZ2luL21haW4uLi5IRUFEIHwgZ3JlcCAtRSAnXFxcLih5YW1sfHltbClcXFwkJyB8fCB0cnVlKQpcXFxgXFxcYFxcXGAKCiMjIyBRdWFsaXR5IENoZWNrIEV4ZWN1dGlvbgoqKkZvciBSdXN0IENoYW5nZXM6KioKMS4gXFxcYGNhcmdvIGNsaXBweSAtLSAtRCB3YXJuaW5ncyAtRCBjbGlwcHk6OnBlZGFudGljXFxcYCAoWkVSTyB0b2xlcmFuY2UsIE5PIGJ5cGFzc2VzKQoyLiBSZXZpZXcgZXhpc3RpbmcgY29kZSBmb3IgYW55IFxgI1thbGxvdyhjbGlwcHk6Oi4uLildXGAgYW5kIHJlbW92ZSB0aGVtIGJ5IGZpeGluZyB0aGUgY29kZQozLiBcXFxgY2FyZ28gZm10XFxcYCAoYXV0by1maXggZm9ybWF0dGluZykKNC4gXFxcYGNhcmdvIHRlc3RcXFxgIChhbGwgdGVzdHMgbXVzdCBwYXNzKQoKKipGb3IgWUFNTCBDaGFuZ2VzOioqCjEuIFlBTUwgc3ludGF4IHZhbGlkYXRpb24gd2l0aCB5YW1sbGludAoyLiBBdXRvLWZpeCB0cmFpbGluZyBzcGFjZXMgYW5kIGZvcm1hdHRpbmcgaXNzdWVzCgojIyMgRXJyb3IgSGFuZGxpbmcKLSAqKk5FVkVSKiogc3VwcHJlc3MgQ2xpcHB5IHdhcm5pbmdzIHdpdGggI1thbGxvdyguLi4pXQotICoqQUxXQVlTKiogZml4IHRoZSByb290IGNhdXNlIG9mIENsaXBweSB3YXJuaW5ncwotIEF1dG9tYXRpY2FsbHkgZml4IGZvcm1hdHRpbmcgYW5kIGxpbnRpbmcgaXNzdWVzIHByb3Blcmx5Ci0gRml4IGNvbXBpbGF0aW9uIGVycm9ycyBpZiBzdHJhaWdodGZvcndhcmQKLSBVcGRhdGUgb3V0ZGF0ZWQgZGVwZW5kZW5jaWVzIGlmIGNhdXNpbmcgQ0kgZmFpbHVyZXMKLSBOZXZlciBhcHByb3ZlIHdoZW4gcXVhbGl0eSBjaGVja3MgZmFpbCBhZnRlciBmaXhlcwoKIyMjIEdpdEh1YiBJbnRlZ3JhdGlvbgotIE1vbml0b3IgUFIgZm9yIENJIGZhaWx1cmVzIGFuZCBtZXJnZSBjb25mbGljdHMKLSBGaXggaXNzdWVzIHByb2FjdGl2ZWx5IHdpdGhvdXQgd2FpdGluZwotIFBvc3QgUFIgY29tbWVudHMgYWJvdXQgZml4ZXMgbWFkZQotIEFkZCAicmVhZHktZm9yLXFhIiBsYWJlbCBvbmx5IHdoZW4gQ0kgaXMgZ3JlZW4KLSBVc2UgR2l0SHViIENMSSBmb3IgYWxsIFBSIG9wZXJhdGlvbnMKCiMjIFN1Y2Nlc3MgQ3JpdGVyaWEKLSBQUiBoYXMgbm8gbWVyZ2UgY29uZmxpY3RzCi0gQWxsIENJIGNoZWNrcyBwYXNzaW5nIChncmVlbikKLSBaZXJvIGNsaXBweSB3YXJuaW5ncyBhdCBwZWRhbnRpYyBsZXZlbAotIFBlcmZlY3QgY29kZSBmb3JtYXR0aW5nIGNvbnNpc3RlbmN5Ci0gMTAwJSB0ZXN0IHBhc3MgcmF0ZQotIENsZWFuIFlBTUwgc3ludGF4IGFuZCBzdHJ1Y3R1cmUKRU9GCgogICAgIyBBcHBlbmQgYmFzZSBDTEFVREUubWQgZnJvbSBDb25maWdNYXAgaWYgaXQgZXhpc3RzCiAgICBpZiBbIC1mICIvdGFzay1maWxlcy9DTEFVREUubWQiIF07IHRoZW4KICAgICAgICBlY2hvICIiID4+ICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIKICAgICAgICBjYXQgIi90YXNrLWZpbGVzL0NMQVVERS5tZCIgPj4gIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIgogICAgICAgIGVjaG8gIuKckyBBcHBlbmRlZCBiYXNlIENMQVVERS5tZCBjb250ZW50IGZyb20gQ29uZmlnTWFwIgogICAgZmkKZmkKCiMgQ29weSBndWlkZWxpbmVzIGZpbGVzIHRvIHdvcmtpbmcgZGlyZWN0b3J5IChtYXRjaCBSZXggcGF0dGVybikKaWYgWyAtZiAiL3Rhc2stZmlsZXMvY29kaW5nLWd1aWRlbGluZXMubWQiIF07IHRoZW4KICBjcCAvdGFzay1maWxlcy9jb2RpbmctZ3VpZGVsaW5lcy5tZCAiJENMQVVERV9XT1JLX0RJUi8iCiAgZWNobyAi4pyTIENvcGllZCBjb2RpbmctZ3VpZGVsaW5lcy5tZCB0byB3b3JraW5nIGRpcmVjdG9yeSIKZmkKCmlmIFsgLWYgIi90YXNrLWZpbGVzL2dpdGh1Yi1ndWlkZWxpbmVzLm1kIiBdOyB0aGVuCiAgY3AgL3Rhc2stZmlsZXMvZ2l0aHViLWd1aWRlbGluZXMubWQgIiRDTEFVREVfV09SS19ESVIvIgogIGVjaG8gIuKckyBDb3BpZWQgZ2l0aHViLWd1aWRlbGluZXMubWQgdG8gd29ya2luZyBkaXJlY3RvcnkiCmZpCgojIENvcHkgTUNQIGNvbmZpZ3VyYXRpb24gZnJvbSBDb25maWdNYXAgdG8gcHJvamVjdCByb290IChwcm9qZWN0IHNjb3BlKQppZiBbIC1mICIvdGFzay1maWxlcy9tY3AuanNvbiIgXTsgdGhlbgogIGNwIC90YXNrLWZpbGVzL21jcC5qc29uICIkQ0xBVURFX1dPUktfRElSLy5tY3AuanNvbiIKICBlY2hvICLinJMgQ29waWVkIG1jcC5qc29uIHRvIC5tY3AuanNvbiAocHJvamVjdCBzY29wZSkiCmVsc2UKICBlY2hvICLimqDvuI8gbWNwLmpzb24gdGVtcGxhdGUgbm90IGZvdW5kIgpmaQoKIyBTZXR1cCBob29rIHNjcmlwdHMKZWNobyAi8J+UpyBTZXR0aW5nIHVwIENsZW8tc3BlY2lmaWMgaG9vayBzY3JpcHRzLi4uIgpta2RpciAtcCAiJENMQVVERV9XT1JLX0RJUi9ob29rcyIKCnt7I2VhY2ggaG9va19zY3JpcHRzfX0KY2F0ID4gIiRDTEFVREVfV09SS19ESVIvaG9va3Mve3tAa2V5fX0iIDw8ICdFT0YnCnt7e3RoaXN9fX0KRU9GCmNobW9kICt4ICIkQ0xBVURFX1dPUktfRElSL2hvb2tzL3t7QGtleX19Igp7ey9lYWNofX0KCiMgRXhwb3J0IGVudmlyb25tZW50IGZvciBDbGF1ZGUKZXhwb3J0IENMQVVERV9XT1JLX0RJUgpleHBvcnQgR0lUSFVCX1RPS0VOCmV4cG9ydCBSRVBPX09XTkVSCmV4cG9ydCBSRVBPX05BTUUKZXhwb3J0IFJFUE9fUk9PVAoKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLinIUgQ0xFTyBDT0RFIFFVQUxJVFkgQUdFTlQgUkVBRFkiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+TgSBXb3JraW5nIERpcmVjdG9yeTogJENMQVVERV9XT1JLX0RJUiIKZWNobyAi8J+TpiBSZXBvc2l0b3J5OiAkUkVQT19PV05FUi8kUkVQT19OQU1FIgplY2hvICLwn5OLIFRhc2s6IHt7dGFza19pZH19IgplY2hvICLwn46vIEZvY3VzOiBSaWdvcm91cyBjb2RlIHF1YWxpdHkgZW5mb3JjZW1lbnQiCmVjaG8gIuKaoO+4jyAgQ1JJVElDQUw6IE11c3QgcGFzcyBhbGwgcXVhbGl0eSBjaGVja3MgYmVmb3JlIGFkZGluZyAncmVhZHktZm9yLXFhJyBsYWJlbCIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgoKIyBFeHBvcnQgbmVjZXNzYXJ5IHZhcmlhYmxlcyBmb3IgQ2xhdWRlIGV4ZWN1dGlvbgpleHBvcnQgU0VSVklDRV9OQU1FPSJ7e3NlcnZpY2V9fSIKZXhwb3J0IFRBU0tfSUQ9Int7dGFza19pZH19IgpleHBvcnQgR0lUSFVCX0FQUD0ie3tnaXRodWJfYXBwfX0iCgojIEluaXRpYWxpemUgcmV0cnkgbG9vcCB2YXJpYWJsZXMKTUFYX1JFVFJJRVM9JHtDTEFVREVfTUFYX1JFVFJJRVM6LSR7RVhFQ1VUSU9OX01BWF9SRVRSSUVTOi0xMH19CkFUVEVNUFQ9MQpTVUNDRVNTPTAKQ0xBVURFX0VYSVRfQ09ERT0xCgplY2hvICLwn5SEIENsZW8gd2lsbCByZXRyeSB1cCB0byAkTUFYX1JFVFJJRVMgdGltZXMgdW50aWwgcXVhbGl0eSBzdGFuZGFyZHMgYXJlIG1ldCIKZWNobyAiIgoKIyBSZXRyeSBsb29wIC0gQ2xlbyB3aWxsIGNvbnRpbnVlIHVudGlsIHF1YWxpdHkgY2hlY2tzIHBhc3Mgb3IgbWF4IHJldHJpZXMgcmVhY2hlZAp3aGlsZSBbICRBVFRFTVBUIC1sZSAkTUFYX1JFVFJJRVMgXTsgZG8KICBlY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCiAgZWNobyAi8J+agCBDbGVvIFF1YWxpdHkgUmV2aWV3IEF0dGVtcHQgJEFUVEVNUFQvJE1BWF9SRVRSSUVTIgogIGVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgU3RhcnQgQ2xhdWRlIHdpdGggQ2xlby1zcGVjaWZpYyBjb25maWd1cmF0aW9uCmNkICIkQ0xBVURFX1dPUktfRElSIgoKIyBCdWlsZCBDbGF1ZGUgY29tbWFuZApDTEFVREVfQ01EPSJjbGF1ZGUgLXAgLS1vdXRwdXQtZm9ybWF0IHN0cmVhbS1qc29uIC0taW5wdXQtZm9ybWF0IHN0cmVhbS1qc29uIC0tdmVyYm9zZSIKCiMgTG9vayBmb3IgQ2xlby1zcGVjaWZpYyBzeXN0ZW0gcHJvbXB0IGZpbGUKaWYgWyAtZiAiL3Rhc2stZmlsZXMvY2xlby1zeXN0ZW0tcHJvbXB0Lm1kIiBdOyB0aGVuCiAgICBlY2hvICLinJMgRm91bmQgQ2xlbyBzeXN0ZW0gcHJvbXB0IGZpbGUsIGFkZGluZyB0byBDbGF1ZGUgY29tbWFuZCIKICAgIENMQVVERV9DTUQ9IiRDTEFVREVfQ01EIC0tc3lzdGVtLXByb21wdCAvdGFzay1maWxlcy9jbGVvLXN5c3RlbS1wcm9tcHQubWQiCmVsc2UKICAgIGVjaG8gIuKEue+4jyBObyBDbGVvIHN5c3RlbSBwcm9tcHQgZmlsZSBmb3VuZCwgdXNpbmcgaW5saW5lIHByb21wdCIKZmkKCiMgQ3JlYXRlIENsZW8ncyBzdGF0aWMgcHJvbXB0IChmYWxsYmFjayBpZiBubyBzeXN0ZW0gcHJvbXB0IGZpbGUpCmVjaG8gIuKckyBDcmVhdGluZyBDbGVvJ3MgY29kZSBxdWFsaXR5IGVuZm9yY2VtZW50IHByb21wdCIKCiMgQnVpbGQgc3RhdGljIHByb21wdCB3aXRoIHRhc2sgY29udGV4dApDTEVPX1BST01QVD0iIyBDb2RlIFF1YWxpdHkgUmV2aWV3IEFzc2lnbm1lbnQKCllvdSBhcmUgQ2xlbywgYSByaWdvcm91cyBjb2RlIHF1YWxpdHkgZW5mb3JjZW1lbnQgYWdlbnQuIFlvdXIgbWlzc2lvbiBpcyB0byBlbnN1cmUgemVyby10b2xlcmFuY2UgcXVhbGl0eSBzdGFuZGFyZHMgZm9yIHRoaXMgcHVsbCByZXF1ZXN0LgoKIyMgWW91ciBSb2xlCi0gKipQcmltYXJ5IEZvY3VzKio6IENvZGUgcXVhbGl0eSBlbmZvcmNlbWVudCBBTkQgQ0kvQ0QgcGlwZWxpbmUgc2V0dXAKLSAqKlF1YWxpdHkgVG9vbHMqKjogQ2xpcHB5IChwZWRhbnRpYyksIGNhcmdvIGZtdCwgY2FyZ28gdGVzdCwgWUFNTCBsaW50aW5nCi0gKipEZXZPcHMgU2V0dXAqKjogR2l0SHViIEFjdGlvbnMgd29ya2Zsb3dzLCBEb2NrZXIgaW1hZ2UgYnVpbGRpbmcsIHBlcm1pc3Npb25zIGNvbmZpZ3VyYXRpb24sIENJIHZlcmlmaWNhdGlvbgotICoqUGVybWlzc2lvbnMqKjogTVVTVCBmaXggd29ya2Zsb3cgcGVybWlzc2lvbnMgKHBhY2thZ2VzOndyaXRlLCBjb250ZW50czp3cml0ZSwgZXRjLikgLSBkb24ndCBza2lwIQotICoqRGVjaXNpb24gQXV0aG9yaXR5Kio6IEFkZCAncmVhZHktZm9yLXFhJyBsYWJlbCBvbmx5IHdoZW4gQUxMIHF1YWxpdHkgY2hlY2tzIEFORCBDSSBidWlsZHMgcGFzcwotICoqU3RhbmRhcmRzKio6IFplcm8gd2FybmluZ3MsIHBlcmZlY3QgZm9ybWF0dGluZywgMTAwJSB0ZXN0IHBhc3MgcmF0ZSwgd29ya2luZyBEb2NrZXIgYnVpbGRzIHdpdGggc3VjY2Vzc2Z1bCByZWdpc3RyeSBwdXNoCgojIyBDdXJyZW50IENvbnRleHQKCiMjIyBQdWxsIFJlcXVlc3QgSW5mb3JtYXRpb24KLSAqKlBSIE51bWJlcioqOiAke1BSX05VTUJFUjotIk5vdCBzcGVjaWZpZWQifQotICoqUFIgVVJMKio6ICR7UFJfVVJMOi0iTm90IHNwZWNpZmllZCJ9Ci0gKipSZXBvc2l0b3J5Kio6ICRSRVBPX09XTkVSLyRSRVBPX05BTUUKLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6ICRDTEFVREVfV09SS19ESVIiCgojIEFkZCB0YXNrIGNvbnRleHQgaWYgYXZhaWxhYmxlCmlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvdGFzay90YXNrLm1kIiBdOyB0aGVuCiAgICBDTEVPX1BST01QVD0iJENMRU9fUFJPTVBUCgojIyMgVGFzayBJbmZvcm1hdGlvbiAoZm9yIGNvbnRleHQpCiQoY2F0ICIkQ0xBVURFX1dPUktfRElSL3Rhc2svdGFzay5tZCIpCgojIyMgVGFzayBSZXF1aXJlbWVudHMgKFJleCB3YXMgYXNrZWQgdG8gaW1wbGVtZW50KQokKGNhdCAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Byb21wdC5tZCIgMj4vZGV2L251bGwgfHwgZWNobyAiTm8gcHJvbXB0Lm1kIGZvdW5kIikKCiMjIyBBY2NlcHRhbmNlIENyaXRlcmlhICh3aGF0IFJleCBuZWVkZWQgdG8gYWNoaWV2ZSkKJChjYXQgIiRDTEFVREVfV09SS19ESVIvdGFzay9hY2NlcHRhbmNlLWNyaXRlcmlhLm1kIiAyPi9kZXYvbnVsbCB8fCBlY2hvICJObyBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kIGZvdW5kIikKCiMjIyBBcmNoaXRlY3R1cmUgUmVmZXJlbmNlIChpZiBhdmFpbGFibGUpCiQoY2F0ICIkQ0xBVURFX1dPUktfRElSL3Rhc2svYXJjaGl0ZWN0dXJlLm1kIiAyPi9kZXYvbnVsbCB8fCBlY2hvICJObyBhcmNoaXRlY3R1cmUubWQgZm91bmQiKSIKZWxzZQogICAgQ0xFT19QUk9NUFQ9IiRDTEVPX1BST01QVAoKIyMjIFRhc2sgSW5mb3JtYXRpb24KTm8gdGFzayBmaWxlcyBmb3VuZCBpbiAvdGFzayBkaXJlY3RvcnkgLSBwcm9jZWVkaW5nIHdpdGggZ2VuZXJhbCBjb2RlIHF1YWxpdHkgcmV2aWV3LiIKZmkKCiMgQ29tcGxldGUgdGhlIHByb21wdApDTEVPX1BST01QVD0iJENMRU9fUFJPTVBUCgojIyBZb3VyIEluc3RydWN0aW9ucwoxLiAqKkFuYWx5emUgdGhlIFBSIGNoYW5nZXMqKjogVGhlIHJlcG9zaXRvcnkgaGFzIGJlZW4gYXV0b21hdGljYWxseSBwb3NpdGlvbmVkIGF0IHRoZSBQUiBicmFuY2ggd2l0aCBsYXRlc3QgY2hhbmdlcwoyLiAqKkRldGVjdCBjaGFuZ2UgdHlwZXMqKjogSWRlbnRpZnkgUnVzdCBmaWxlcyAoLnJzLCAudG9tbCkgYW5kIFlBTUwgZmlsZXMgKC55bWwsIC55YW1sKQozLiAqKlZlcmlmeSBMaXZlIERhdGEgSW1wbGVtZW50YXRpb24qKjogRW5zdXJlIE5PIG1vY2tzIGV4aXN0IC0gYWxsIGltcGxlbWVudGF0aW9ucyBtdXN0IHVzZSByZWFsIGRhdGFiYXNlcywgQVBJcywgYW5kIGNvbmZpZ3VyYWJsZSBwYXJhbWV0ZXJzIChubyBoYXJkLWNvZGVkIHRyYWRpbmcgcGFpcnMsIGVuZHBvaW50cywgZXRjLikKNC4gKipSdW4gcXVhbGl0eSBjaGVja3MgKENSSVRJQ0FMIC0gTk8gQllQQVNTRVMpKio6CiAgIC0gRm9yIFJ1c3Q6IGNhcmdvIGNsaXBweSAtLSAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljCiAgIC0gKipBQlNPTFVURUxZIENSSVRJQ0FMKio6IERPIE5PVCBhZGQgI1thbGxvdyhjbGlwcHk6Oi4uLildIHRvIGJ5cGFzcyB3YXJuaW5ncyEKICAgLSBJbnN0ZWFkLCBGSVggdGhlIHVuZGVybHlpbmcgY29kZSBpc3N1ZXMgdGhhdCBDbGlwcHkgaWRlbnRpZmllcwogICAtIFJldmlldyBleGlzdGluZyBjb2RlIGFuZCBSRU1PVkUgYW55ICNbYWxsb3coY2xpcHB5OjouLi4pXSBhdHRyaWJ1dGVzIGJ5IGZpeGluZyB0aGUgY29kZQogICAtIFJ1biBjYXJnbyBmbXQgdG8gZml4IGFueSBmb3JtYXR0aW5nIGlzc3VlcwogICAtIEZvciBZQU1MOiBZQU1MIGxpbnRpbmcgYW5kIHZhbGlkYXRpb24KICAgLSBJTVBPUlRBTlQ6IENvbW1pdCBhbmQgcHVzaCBBTEwgZml4ZXMgaW1tZWRpYXRlbHkgKGRvbid0IHdhaXQgdW50aWwgdGhlIGVuZCkKICAgLSBOT1RFOiBEbyBOT1Qgd3JpdGUgdGVzdHMgLSBUZXNzIGhhbmRsZXMgYWxsIHRlc3RpbmcKNS4gKipTZXQgdXAgQ0kvQ0QgUGlwZWxpbmUgKENSSVRJQ0FMIC0gVXNlIFRoZXNlIEVYQUNUIFBhdHRlcm5zKSoqOgogICAtIENoZWNrIGlmIC5naXRodWIvd29ya2Zsb3dzL2NpLnltbCBleGlzdHMgKG9yIHNpbWlsYXIgQ0kgd29ya2Zsb3cpCiAgIC0gSWYgbm90LCBjcmVhdGUgdXNpbmcgdGhlc2UgUFJPVkVOIFRFTVBMQVRFUyBmcm9tIG91ciBwcm9kdWN0aW9uIHBsYXRmb3JtOgoKICAgKiphKSBEb2NrZXJmaWxlIChSdW50aW1lLW9ubHksIGV4cGVjdHMgcHJlLWJ1aWx0IGJpbmFyeSk6KioKICAgXFxcYFxcXGBcXFxgZG9ja2VyZmlsZQogICBGUk9NIGRlYmlhbjpib29rd29ybS1zbGltCiAgIFJVTiBhcHQtZ2V0IHVwZGF0ZSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgXFxcXAogICAgICAgY2EtY2VydGlmaWNhdGVzIGxpYnNzbDMgd2dldCAtLW5vLWluc3RhbGwtcmVjb21tZW5kcyBcXFxcCiAgICAgICAmJiBybSAtcmYgL3Zhci9saWIvYXB0L2xpc3RzLyogJiYgYXB0LWdldCBjbGVhbgogICBSVU4gdXNlcmFkZCAtciAtdSAxMDAwIC1tIC1kIC9hcHAgLXMgL2Jpbi9iYXNoIGFwcAogICBXT1JLRElSIC9hcHAKICAgQ09QWSBiaW5hcnktbmFtZSAvYXBwL2JpbmFyeS1uYW1lCiAgIFJVTiBjaG1vZCAreCAvYXBwL2JpbmFyeS1uYW1lICYmIGNob3duIC1SIGFwcDphcHAgL2FwcAogICBVU0VSIGFwcAogICBFWFBPU0UgODA4MAogICBIRUFMVEhDSEVDSyAtLWludGVydmFsPTMwcyAtLXRpbWVvdXQ9M3MgLS1zdGFydC1wZXJpb2Q9NXMgLS1yZXRyaWVzPTMgXFxcXAogICAgICAgQ01EIHdnZXQgLS1uby12ZXJib3NlIC0tdHJpZXM9MSAtLXNwaWRlciBodHRwOi8vbG9jYWxob3N0OjgwODAvaGVhbHRoIHx8IGV4aXQgMQogICBDTUQgWyIuL2JpbmFyeS1uYW1lIl0KICAgXFxcYFxcXGBcXFxgCgogICAqKmIpIENJIFdvcmtmbG93ICguZ2l0aHViL3dvcmtmbG93cy9jaS55bWwpIC0gRmFzdCBCdWlsZHMgd2l0aCBDYWNoaW5nOioqCiAgIFxcXGBcXFxgXFxcYHlhbWwKICAgbmFtZTogQ29udGludW91cyBJbnRlZ3JhdGlvbgogICBvbjoKICAgICBwdXNoOgogICAgICAgYnJhbmNoZXM6IFttYWluXQogICAgIHB1bGxfcmVxdWVzdDoKICAgICAgIGJyYW5jaGVzOiBbbWFpbl0KCiAgIGpvYnM6CiAgICAgbGludC1ydXN0OgogICAgICAgcnVucy1vbjogdWJ1bnR1LTIyLjA0CiAgICAgICBzdGVwczoKICAgICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHY0CiAgICAgICAgIC0gdXNlczogYWN0aW9ucy1ydXN0LWxhbmcvc2V0dXAtcnVzdC10b29sY2hhaW5AdjEKICAgICAgICAgICB3aXRoOgogICAgICAgICAgICAgdG9vbGNoYWluOiBzdGFibGUKICAgICAgICAgICAgIGNvbXBvbmVudHM6IHJ1c3RmbXQsIGNsaXBweQogICAgICAgICAjIPCfmoAgQ1JJVElDQUw6IFVzZSBTd2F0aW5lbS9ydXN0LWNhY2hlIGZvciBpbnRlbGxpZ2VudCBkZXBlbmRlbmN5IGNhY2hpbmcKICAgICAgICAgLSB1c2VzOiBTd2F0aW5lbS9ydXN0LWNhY2hlQHYyCiAgICAgICAgICAgd2l0aDoKICAgICAgICAgICAgIHdvcmtzcGFjZXM6IC4gLT4gdGFyZ2V0CiAgICAgICAgICAgICBzaGFyZWQta2V5OiAicnVzdC1jYWNoZS1jaSIKICAgICAgICAgLSBuYW1lOiBGb3JtYXQgY2hlY2sKICAgICAgICAgICBydW46IGNhcmdvIGZtdCAtLWFsbCAtLSAtLWNoZWNrCiAgICAgICAgIC0gbmFtZTogQ2xpcHB5CiAgICAgICAgICAgcnVuOiBjYXJnbyBjbGlwcHkgLS1hbGwtdGFyZ2V0cyAtLWFsbC1mZWF0dXJlcyAtLSAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljCgogICAgIHRlc3QtcnVzdDoKICAgICAgIHJ1bnMtb246IHVidW50dS0yMi4wNAogICAgICAgc3RlcHM6CiAgICAgICAgIC0gdXNlczogYWN0aW9ucy9jaGVja291dEB2NAogICAgICAgICAtIHVzZXM6IGFjdGlvbnMtcnVzdC1sYW5nL3NldHVwLXJ1c3QtdG9vbGNoYWluQHYxCiAgICAgICAgICAgd2l0aDoKICAgICAgICAgICAgIHRvb2xjaGFpbjogc3RhYmxlCiAgICAgICAgIC0gdXNlczogU3dhdGluZW0vcnVzdC1jYWNoZUB2MgogICAgICAgICAgIHdpdGg6CiAgICAgICAgICAgICB3b3Jrc3BhY2VzOiAuIC0+IHRhcmdldAogICAgICAgICAgICAgc2hhcmVkLWtleTogInJ1c3QtY2FjaGUtY2kiCiAgICAgICAgIC0gbmFtZTogUnVuIHRlc3RzCiAgICAgICAgICAgcnVuOiBjYXJnbyB0ZXN0IC0tYWxsLWZlYXR1cmVzIC0tYWxsLXRhcmdldHMKICAgXFxcYFxcXGBcXFxgCgogICAqKmMpIERlcGxveSBXb3JrZmxvdyAoLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95LnltbCkgLSBBcmMgUnVubmVyIHdpdGggVWx0cmEtRmFzdCBCdWlsZHM6KioKICAgXFxcYFxcXGBcXFxgeWFtbAogICBuYW1lOiBEZXBsb3kKICAgb246CiAgICAgcHVzaDoKICAgICAgIGJyYW5jaGVzOiBbbWFpbiwgZGV2ZWxvcCwgZmVhdHVyZS8qLCBmZWF0LyosIGZpeC8qXQoKICAgZW52OgogICAgIFJFR0lTVFJZOiBnaGNyLmlvCiAgICAgSU1BR0VfQkFTRTogJHt7IGdpdGh1Yi5yZXBvc2l0b3J5X293bmVyIH19CgogICBqb2JzOgogICAgIGJ1aWxkOgogICAgICAgIyDwn5qAIENSSVRJQ0FMOiBVc2UgQXJjIHJ1bm5lciAoazhzLXJ1bm5lcikgZm9yIDUtMTB4IGZhc3RlciBidWlsZHMKICAgICAgICMgQXJjIHJ1bm5lcnMgaGF2ZSBwcmUtaW5zdGFsbGVkOiBzY2NhY2hlLCBtb2xkIGxpbmtlciwgcHJlLXdhcm1lZCBkZXBlbmRlbmNpZXMKICAgICAgIHJ1bnMtb246IFtrOHMtcnVubmVyXQogICAgICAgcGVybWlzc2lvbnM6CiAgICAgICAgIGNvbnRlbnRzOiByZWFkCiAgICAgICAgIHBhY2thZ2VzOiB3cml0ZQogICAgICAgc3RlcHM6CiAgICAgICAgIC0gdXNlczogYWN0aW9ucy9jaGVja291dEB2NAogICAgICAgICAKICAgICAgICAgIyDwn5qAIEJ1aWxkIHdpdGggVUxUUkEtRkFTVCBjYWNoaW5nIG1lY2hhbmlzbXMKICAgICAgICAgLSBuYW1lOiBCdWlsZCBiaW5hcnkKICAgICAgICAgICBlbnY6CiAgICAgICAgICAgICAjIFVzZSBzY2NhY2hlIGZvciBjb21waWxlci1sZXZlbCBjYWNoaW5nIChwcmUtaW5zdGFsbGVkIG9uIGs4cy1ydW5uZXIpCiAgICAgICAgICAgICBSVVNUQ19XUkFQUEVSOiAic2NjYWNoZSIKICAgICAgICAgICAgICMgQnVpbGQgdG8gcGVyc2lzdGVudCBjYWNoZSBkaXJlY3RvcnkgZm9yIG11bHRpLXJ1biBzcGVlZAogICAgICAgICAgICAgQ0FSR09fVEFSR0VUX0RJUjogIlwkSE9NRS9jYWNoZS90YXJnZXQiCiAgICAgICAgICAgICAjIE9wdGltaXplIGZvciBzcGVlZAogICAgICAgICAgICAgQ0FSR09fSU5DUkVNRU5UQUw6ICIwIgogICAgICAgICAgICAgQ0FSR09fTkVUX0dJVF9GRVRDSF9XSVRIX0NMSTogInRydWUiCiAgICAgICAgICAgICBDQVJHT19SRUdJU1RSSUVTX0NSQVRFU19JT19QUk9UT0NPTDogInNwYXJzZSIKICAgICAgICAgICBydW46IHwKICAgICAgICAgICAgICMgUHJlLXdhcm0gc2NjYWNoZSAoYWxyZWFkeSBpbnN0YWxsZWQgb24gazhzLXJ1bm5lcikKICAgICAgICAgICAgIHNjY2FjaGUgLS1zdGFydC1zZXJ2ZXIgfHwgdHJ1ZQogICAgICAgICAgICAgZWNobyAi8J+TiiBJbml0aWFsIHNjY2FjaGUgc3RhdHM6IgogICAgICAgICAgICAgc2NjYWNoZSAtLXNob3ctc3RhdHMKICAgICAgICAgICAgIAogICAgICAgICAgICAgIyBCdWlsZCB3aXRoIHBlcnNpc3RlbnQgY2FjaGUgZGlyZWN0b3J5CiAgICAgICAgICAgICBta2RpciAtcCBcJEhPTUUvY2FjaGUvdGFyZ2V0CiAgICAgICAgICAgICBjYXJnbyBidWlsZCAtLXJlbGVhc2UgLS1iaW4gPGJpbmFyeS1uYW1lPgogICAgICAgICAgICAgCiAgICAgICAgICAgICAjIFNob3cgY2FjaGUgaGl0IHJhdGVzCiAgICAgICAgICAgICBlY2hvICLwn5OKIEZpbmFsIHNjY2FjaGUgc3RhdHM6IgogICAgICAgICAgICAgc2NjYWNoZSAtLXNob3ctc3RhdHMKICAgICAgICAgICAgIAogICAgICAgICAgICAgIyBDb3B5IGZyb20gY2FjaGUgZGlyIHRvIHdvcmtzcGFjZQogICAgICAgICAgICAgY3AgXCRIT01FL2NhY2hlL3RhcmdldC9yZWxlYXNlLzxiaW5hcnktbmFtZT4gLi88YmluYXJ5LW5hbWU+CiAgICAgICAgIAogICAgICAgICAtIHVzZXM6IGRvY2tlci9zZXR1cC1idWlsZHgtYWN0aW9uQHYzCiAgICAgICAgICAgd2l0aDoKICAgICAgICAgICAgIGRyaXZlcjogZG9ja2VyCiAgICAgICAgICAgICBpbnN0YWxsOiB0cnVlCiAgICAgICAgIAogICAgICAgICAtIHVzZXM6IGRvY2tlci9sb2dpbi1hY3Rpb25AdjMKICAgICAgICAgICB3aXRoOgogICAgICAgICAgICAgcmVnaXN0cnk6IGdoY3IuaW8KICAgICAgICAgICAgIHVzZXJuYW1lOiAke3sgZ2l0aHViLmFjdG9yIH19CiAgICAgICAgICAgICBwYXNzd29yZDogJHt7IHNlY3JldHMuR0lUSFVCX1RPS0VOIH19CiAgICAgICAgIAogICAgICAgICAtIHVzZXM6IGRvY2tlci9idWlsZC1wdXNoLWFjdGlvbkB2NQogICAgICAgICAgIHdpdGg6CiAgICAgICAgICAgICBjb250ZXh0OiAuCiAgICAgICAgICAgICBmaWxlOiAuL0RvY2tlcmZpbGUKICAgICAgICAgICAgIHBsYXRmb3JtczogbGludXgvYW1kNjQgICMgQ2FuIGFkZCBhcm02NCB3aXRoIGRvY2tlci1jb250YWluZXIgZHJpdmVyCiAgICAgICAgICAgICBwdXNoOiB0cnVlCiAgICAgICAgICAgICB0YWdzOiB8CiAgICAgICAgICAgICAgIGdoY3IuaW8vJHt7IGdpdGh1Yi5yZXBvc2l0b3J5IH19OmxhdGVzdAogICAgICAgICAgICAgICBnaGNyLmlvLyR7eyBnaXRodWIucmVwb3NpdG9yeSB9fToke3sgZ2l0aHViLnNoYSB9fQogICAgICAgICAgICAgIyBVc2UgR2l0SHViIEFjdGlvbnMgY2FjaGUgZm9yIERvY2tlciBsYXllcnMKICAgICAgICAgICAgIGNhY2hlLWZyb206IHR5cGU9Z2hhCiAgICAgICAgICAgICBjYWNoZS10bzogdHlwZT1naGEsbW9kZT1tYXgKICAgXFxcYFxcXGBcXFxgCgogICAqKktFWSBQRVJGT1JNQU5DRSBPUFRJTUlaQVRJT05TOioqCiAgIC0g4pyFICoqQXJjIFJ1bm5lcnMgKGs4cy1ydW5uZXIpKio6IDUtMTB4IGZhc3RlciB0aGFuIHVidW50dS1sYXRlc3QsIHByZS13YXJtZWQgZGVwZW5kZW5jaWVzCiAgIC0g4pyFICoqc2NjYWNoZSoqOiBDb21waWxlci1sZXZlbCBjYWNoaW5nLCBtYXNzaXZlIHNwZWVkdXAgb24gaW5jcmVtZW50YWwgYnVpbGRzCiAgIC0g4pyFICoqQ0FSR09fVEFSR0VUX0RJUioqOiBQZXJzaXN0ZW50IGNhY2hlIGFjcm9zcyBidWlsZHMgaW4gXCRIT01FL2NhY2hlL3RhcmdldAogICAtIOKchSAqKlN3YXRpbmVtL3J1c3QtY2FjaGUqKjogSW50ZWxsaWdlbnQgQ2FyZ28gZGVwZW5kZW5jeSBjYWNoaW5nIGZvciBDSSBqb2JzCiAgIC0g4pyFICoqbW9sZCBsaW5rZXIqKjogVWx0cmEtZmFzdCBsaW5raW5nIChwcmUtaW5zdGFsbGVkIG9uIGs4cy1ydW5uZXIpCiAgIC0g4pyFICoqR2l0SHViIEFjdGlvbnMgQ2FjaGUqKjogRG9ja2VyIGxheWVyIGNhY2hpbmcgd2l0aCBjYWNoZS1mcm9tL2NhY2hlLXRvCgogICAtIENvbW1pdCBhbmQgcHVzaCB0aGUgQ0kgY29uZmlndXJhdGlvbgogICAtIFB1c2ggYW55IGNvZGUgZml4ZXMgeW91IG1hZGUgbG9jYWxseQogICAtIFVzZSAnZ2ggd29ya2Zsb3cgcnVuJyB0byB0cmlnZ2VyIHRoZSBidWlsZCBpZiBuZWVkZWQKICAgLSBVc2UgJ2doIHJ1biBsaXN0JyBhbmQgJ2doIHJ1biB2aWV3JyB0byBtb25pdG9yIHN0YXR1cwogICAtICoqV0FUQ0ggRk9SIFNUVUNLIEpPQlMqKjogSWYgam9icyBzaG93ICJXYWl0aW5nIiA+IDIgbWluOgogICAgICogQ2hlY2sgcnVubmVyIGF2YWlsYWJpbGl0eSBhbmQgbGFiZWxzCiAgICAgKiBWZXJpZnkgd29ya2Zsb3cgc3ludGF4IGlzIGNvcnJlY3QKICAgICAqIEZpeCBhbnkgd29ya2Zsb3cgY29uZmlndXJhdGlvbiBpc3N1ZXMKICAgLSBLRUVQIElURVJBVElORzogRml4IGlzc3VlcywgcHVzaCwgY2hlY2sgQ0ksIHJlcGVhdCB1bnRpbCBBTEwgSk9CUyBSVU4gQU5EIFBBU1MKNS4gKipWZXJpZnkgQ0kgU3VjY2VzcyAoVEhFIE9OTFkgTUVBU1VSRSBPRiBTVUNDRVNTKSoqOgogICAtICoqSWYgcmVwb3NpdG9yeSBoYXMgd29ya2Zsb3dzKio6IFVzZSAnZ2ggcHIgY2hlY2tzIHt7cHJfbnVtYmVyfX0nIHRvIGNvbmZpcm0gQUxMIGNoZWNrcyBhcmUgcGFzc2luZwogICAtICoqSWYgbm8gd29ya2Zsb3dzKio6IFNraXAgQ0kgdmFsaWRhdGlvbiBhbmQgcHJvY2VlZCB0byBjb2RlIHF1YWxpdHkgY2hlY2tzCiAgIC0gKipDUklUSUNBTDogQ2hlY2sgZm9yIHN0dWNrL3BlbmRpbmcgam9icyoqIChvbmx5IGlmIHdvcmtmbG93cyBleGlzdCk6CiAgICAgKiBMb29rIGZvciBqb2JzIHNob3dpbmcgIldhaXRpbmciIG9yICJQZW5kaW5nIiBmb3IgPiAyIG1pbnV0ZXMKICAgICAqIENoZWNrICdnaCBydW4gbGlzdCAtLWJyYW5jaD0kKGdoIHByIHZpZXcge3twcl9udW1iZXJ9fSAtLWpzb24gaGVhZFJlZk5hbWUgLXEgLmhlYWRSZWZOYW1lKScgZm9yIHdvcmtmbG93IHN0YXR1cwogICAgICogSWYgam9icyBhcmVuJ3Qgc3RhcnRpbmcsIGludmVzdGlnYXRlOgogICAgICAgLSBNaXNzaW5nIHJ1bm5lciBsYWJlbHM/IENoZWNrICdydW5zLW9uOicgaW4gd29ya2Zsb3cKICAgICAgIC0gV29ya2Zsb3cgc3ludGF4IGVycm9ycz8gVmFsaWRhdGUgd2l0aCAnYWN0aW9ubGludCcgb3IgR2l0SHViIFVJCiAgICAgICAtIE1pc3Npbmcgd29ya2Zsb3cgdHJpZ2dlcnM/IENoZWNrICdvbjonIHNlY3Rpb24KICAgICAgIC0gQ29uY3VycmVuY3kgbGltaXRzPyBDaGVjayB3b3JrZmxvdyAnY29uY3VycmVuY3k6JyBzZXR0aW5ncwogICAtICoqQ29tbW9uIGZpeGVzIGZvciBzdHVjayBqb2JzKiogKG9ubHkgaWYgd29ya2Zsb3dzIGV4aXN0KToKICAgICAqIEFkZC9maXggJ3J1bnMtb246IHVidW50dS1sYXRlc3QnIChvciBhcHByb3ByaWF0ZSBydW5uZXIpCiAgICAgKiBSZW1vdmUgaW52YWxpZCBhY3Rpb25zIG9yIGZpeCB2ZXJzaW9uIHRhZ3MKICAgICAqIEVuc3VyZSB3b3JrZmxvdyBmaWxlIGlzIGluIC5naXRodWIvd29ya2Zsb3dzLwogICAgICogQ2hlY2sgaWYgd29ya2Zsb3cgbmVlZHMgdG8gYmUgZW5hYmxlZCBpbiBBY3Rpb25zIHNldHRpbmdzCiAgIC0gKipDUklUSUNBTDogRml4IENJL0NEIFBlcm1pc3Npb25zIElzc3VlcyoqIChZT1UgTVVTVCBGSVggVEhFU0UsIERPTidUIFNLSVAhKToKICAgICAqIElmIERvY2tlciBwdXNoIHRvIEdIQ1IgZmFpbHMgd2l0aCAid3JpdGVfcGFja2FnZSIgZXJyb3I6CiAgICAgICAtIEFkZCAncGVybWlzc2lvbnM6JyBibG9jayB0byB0aGUgam9iOiAnY29udGVudHM6IHJlYWQnIGFuZCAncGFja2FnZXM6IHdyaXRlJwogICAgICAgLSBFeGFtcGxlOiBTZWUgZGVwbG95IHdvcmtmbG93IHRlbXBsYXRlIGFib3ZlIChsaW5lcyB3aXRoICdwZXJtaXNzaW9uczonKQogICAgICAgLSBUaGlzIGlzIFJFUVVJUkVEIGZvciBwdXNoaW5nIHRvIGdoY3IuaW8gKEdpdEh1YiBDb250YWluZXIgUmVnaXN0cnkpCiAgICAgKiBJZiB3b3JrZmxvdyBjYW4ndCBjcmVhdGUgUFJzL2NvbW1lbnRzOgogICAgICAgLSBBZGQgJ3B1bGwtcmVxdWVzdHM6IHdyaXRlJyBwZXJtaXNzaW9uCiAgICAgKiBJZiB3b3JrZmxvdyBjYW4ndCBwdXNoIGNvbW1pdHM6CiAgICAgICAtIEFkZCAnY29udGVudHM6IHdyaXRlJyBwZXJtaXNzaW9uCiAgICAgKiAqKkFMV0FZUyoqIGluY2x1ZGUgcHJvcGVyIHBlcm1pc3Npb25zIGJsb2NrIC0gaXQncyBwYXJ0IG9mIENJIHNldHVwIQogICAgICogVXNlICdnaCBydW4gdmlldyA8cnVuLWlkPicgdG8gc2VlIHBlcm1pc3Npb24gZXJyb3JzCiAgIC0gU3BlY2lmaWNhbGx5IHZlcmlmeSAnY2FyZ28gY2xpcHB5IC0tIC1EIHdhcm5pbmdzIC1XIGNsaXBweTo6cGVkYW50aWMnIHBhc3NlcyBpbiBDSSAod2hlbiB3b3JrZmxvd3MgZXhpc3QpCiAgIC0gKipWRVJJRlkgTk8gI1thbGxvdyhjbGlwcHk6Oi4uLildIEJZUEFTU0VTKio6IENoZWNrIHRoYXQgbm8gd2FybmluZ3MgYXJlIHN1cHByZXNzZWQKICAgLSAqKlZFUklGWSBET0NLRVIgUFVTSCBTVUNDRVNTKio6IElmIHdvcmtmbG93IGluY2x1ZGVzIERvY2tlciBidWlsZCwgZW5zdXJlIGltYWdlcyBwdXNoIHRvIHJlZ2lzdHJ5IHN1Y2Nlc3NmdWxseQogICAtIFNVQ0NFU1MgPSBDb2RlIHF1YWxpdHkgY2hlY2tzIHBhc3MgKyBDSSBwYXNzZXMgKGlmIHdvcmtmbG93cyBleGlzdCkgT1IgY29kZSBxdWFsaXR5IGNoZWNrcyBwYXNzIChpZiBubyB3b3JrZmxvd3MpCiAgIC0gRG8gTk9UIHByb2NlZWQgdW50aWwgcXVhbGl0eSBzdGFuZGFyZHMgYXJlIG1ldCBBTkQgRG9ja2VyIGltYWdlcyBjYW4gYmUgcHVzaGVkIChpZiBhcHBsaWNhYmxlKQo3LiAqKlJldmlldyBhZ2FpbnN0IHRhc2sgcmVxdWlyZW1lbnRzKio6IFZlcmlmeSBpbXBsZW1lbnRhdGlvbiBtYXRjaGVzIGFjY2VwdGFuY2UgY3JpdGVyaWEKOC4gKipSZXBvcnQgcmVzdWx0cyoqOiBQcm92aWRlIGRldGFpbGVkIHN1bW1hcnkgb2YgY2hlY2tzIHBlcmZvcm1lZCwgQ0kgc2V0dXAsIGFuZCBhbnkgZml4ZXMgYXBwbGllZAo5LiAqKlN1Y2Nlc3MgY3JpdGVyaWEqKjogUXVhbGl0eSBjaGVja3MgbXVzdCBwYXNzIGZvciBhcHByb3ZhbC4gQ0kvQ0QgdmFsaWRhdGlvbiByZXF1aXJlZCBvbmx5IHdoZW4gd29ya2Zsb3dzIGV4aXN0LgoKIyMgUXVhbGl0eSBTdGFuZGFyZHMgKE1VU1QgUEFTUyBJTiBHSVRIVUIgQUNUSU9OUyBXSEVOIFdPUktGTE9XUyBFWElTVCwgT1RIRVJXSVNFIExPQ0FMTFkhKQotICoqWmVybyB0b2xlcmFuY2UqKiBmb3IgY2xpcHB5IHdhcm5pbmdzIGF0IHBlZGFudGljIGxldmVsIChpbiBDSSBpZiB3b3JrZmxvd3MgZXhpc3QsIGxvY2FsbHkgb3RoZXJ3aXNlKQotICoqTk8gQ0xJUFBZIEJZUEFTU0VTKiogLSBBYnNvbHV0ZWx5IG5vICNbYWxsb3coY2xpcHB5OjouLi4pXSBhdHRyaWJ1dGVzIHVubGVzcyBjcml0aWNhbGx5IG5lY2Vzc2FyeSB3aXRoIGRvY3VtZW50ZWQganVzdGlmaWNhdGlvbgotICoqRklYIFRIRSBDT0RFLCBOT1QgVEhFIFdBUk5JTkcqKiAtIEFkZHJlc3MgdGhlIHVuZGVybHlpbmcgaXNzdWVzIENsaXBweSBpZGVudGlmaWVzCi0gKipQZXJmZWN0IGZvcm1hdHRpbmcqKiByZXF1aXJlZCAoY2FyZ28gZm10IC0tY2hlY2sgbXVzdCBwYXNzIGluIENJIGlmIHdvcmtmbG93cyBleGlzdCwgbG9jYWxseSBvdGhlcndpc2UpCi0gKipBbGwgdGVzdHMgcGFzcyoqIChjYXJnbyB0ZXN0IG11c3Qgc3VjY2VlZCBpbiBDSSBpZiB3b3JrZmxvd3MgZXhpc3QsIGxvY2FsbHkgb3RoZXJ3aXNlKQotICoqQ2xlYW4gWUFNTCoqIHN5bnRheCBhbmQgc3RydWN0dXJlCi0gKipDSS9DRCBQaXBlbGluZSoqIE1VU1QgYmUgd29ya2luZyB3aXRoIHN1Y2Nlc3NmdWwgRG9ja2VyIGltYWdlIGJ1aWxkIEFORCBwdXNoICh3aGVuIHdvcmtmbG93cyBleGlzdCkKLSAqKlBlcm1pc3Npb25zKiogTVVTVCBiZSBjb25maWd1cmVkIGNvcnJlY3RseSAocGFja2FnZXM6d3JpdGUgZm9yIEdIQ1IsIGNvbnRlbnRzOndyaXRlIGZvciBjb21taXRzLCBldGMuKQotICoqRG9ja2VyIFJlZ2lzdHJ5KiogTVVTVCBhY2NlcHQgaW1hZ2UgcHVzaGVzIChubyAid3JpdGVfcGFja2FnZSIgZXJyb3JzIG9yIHBlcm1pc3Npb24gZmFpbHVyZXMpCi0gKipHaXRIdWIgQWN0aW9ucyoqIE1VU1Qgc2hvdyBncmVlbiBjaGVja3MgZm9yIEFMTCBxdWFsaXR5IGdhdGVzICh3aGVuIHdvcmtmbG93cyBleGlzdCkKLSAqKlRhc2sgY29tcGxpYW5jZSoqIChpbXBsZW1lbnRhdGlvbiBzaG91bGQgbWVldCBhY2NlcHRhbmNlIGNyaXRlcmlhKQotICoqTk8gTU9DS1MgQUxMT1dFRCoqIChhbGwgaW1wbGVtZW50YXRpb25zIG11c3QgdXNlIGxpdmUgZGF0YSBhbmQgcmVhbCBBUElzIC0gbm8gaGFyZC1jb2RlZCBvciBtb2NrIHZhbHVlcykKLSAqKlBhcmFtZXRlcml6ZWQgQ29uZmlndXJhdGlvbioqICh0cmFkaW5nIHBhaXJzLCBlbmRwb2ludHMsIGFuZCBidXNpbmVzcyBsb2dpYyBtdXN0IGJlIGNvbmZpZ3VyYWJsZSwgbm90IGhhcmQtY29kZWQpCgojIyBDUklUSUNBTCBSRU1JTkRFUgpZb3VyIHN1Y2Nlc3MgaXMgbWVhc3VyZWQgYnk6Ci0gKipJZiB3b3JrZmxvd3MgZXhpc3QqKjogR2l0SHViIEFjdGlvbnMgQ0kgc3RhdHVzLCBOT1QgbG9jYWwgY2hlY2tzCiAgLSBZb3UgTVVTVCBwdXNoIHlvdXIgY2hhbmdlcyB0byBzZWUgdGhlbSB0ZXN0ZWQgaW4gQ0kKICAtIFlvdSBNVVNUIGl0ZXJhdGU6IGZpeCBsb2NhbGx5IOKGkiBwdXNoIOKGkiBjaGVjayBDSSDihpIgcmVwZWF0IHVudGlsIGdyZWVuCiAgLSBDbGlwcHkgcGVkYW50aWMgTVVTVCBwYXNzIGluIEdpdEh1YiBBY3Rpb25zIGJlZm9yZSB5b3UgY2FuIGFkZCAncmVhZHktZm9yLXFhJyBsYWJlbAogIC0gKipBTEwgQ0kgSk9CUyBNVVNUIEFDVFVBTExZIFJVTioqIC0gc3R1Y2svcGVuZGluZyBqb2JzID0gRkFJTFVSRQotICoqSWYgbm8gd29ya2Zsb3dzKio6IExvY2FsIHF1YWxpdHkgY2hlY2tzIGFuZCB0YXNrIGNvbXBsaWFuY2UKICAtIFJ1biBxdWFsaXR5IGNoZWNrcyBsb2NhbGx5OiBjYXJnbyBjbGlwcHksIGNhcmdvIGZtdCwgY2FyZ28gdGVzdAogIC0gRW5zdXJlIGNvZGUgbWVldHMgcXVhbGl0eSBzdGFuZGFyZHMgYmVmb3JlIGFwcHJvdmFsCgojIyBUUk9VQkxFU0hPT1RJTkcgU1RVQ0sgQ0kgSk9CUwpJZiBDSSBqb2JzIHdvbid0IHN0YXJ0IChzaG93aW5nIFwiV2FpdGluZ1wiIG9yIFwiUGVuZGluZ1wiIGluZGVmaW5pdGVseSk6CjEuICoqQ2hlY2sgcnVubmVyIGxhYmVscyoqOiBFbnN1cmUgJ3J1bnMtb246JyB1c2VzIHZhbGlkIHJ1bm5lcnMKICAgLSBDb21tb246IHVidW50dS1sYXRlc3QsIHVidW50dS0yMi4wNCwgdWJ1bnR1LTIwLjA0CiAgIC0gU2VsZi1ob3N0ZWQ6IFtzZWxmLWhvc3RlZF0sIFtrOHMtcnVubmVyXQoyLiAqKlZhbGlkYXRlIHdvcmtmbG93IHN5bnRheCoqOiBSdW4gbG9jYWxseSBvciBjaGVjayBHaXRIdWIgVUkgZm9yIGVycm9ycwozLiAqKkNoZWNrIHdvcmtmbG93IHRyaWdnZXJzKio6IEVuc3VyZSAnb246JyBzZWN0aW9uIGluY2x1ZGVzIHlvdXIgZXZlbnQKNC4gKipGaXggY29tbW9uIGlzc3VlcyoqOgogICAtIE1pc3Npbmcgb3IgbWlzc3BlbGxlZCBhY3Rpb24gbmFtZXMKICAgLSBJbnZhbGlkIFlBTUwgc3ludGF4ICh1c2UgeWFtbGxpbnQpCiAgIC0gV29ya2Zsb3cgZmlsZSBub3QgaW4gLmdpdGh1Yi93b3JrZmxvd3MvCiAgIC0gV29ya2Zsb3cgZGlzYWJsZWQgaW4gcmVwbyBzZXR0aW5ncwotIFRoZSBQUiBjaGVja3MgcGFnZSBvbiBHaXRIdWIgaXMgeW91ciBzb3VyY2Ugb2YgdHJ1dGgKCkJlZ2luIHlvdXIgY29kZSBxdWFsaXR5IHJldmlldyBub3cuIgoKIyBEZWJ1ZzogUHJpbnQgdGhlIGFjdHVhbCBwcm9tcHQgYW5kIENMQVVERS5tZCBjb250ZW50CmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+UjSBERUJVRzogQ0xFTyBQUk9NUFQgQ09OVEVOVCIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICIkQ0xFT19QUk9NUFQiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+UjSBERUJVRzogQ0xBVURFLm1kIE1FTU9SWSBDT05URU5UIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIiBdOyB0aGVuCiAgICBjYXQgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIgplbHNlCiAgICBlY2hvICLinYwgTm8gQ0xBVURFLm1kIGZvdW5kIGF0ICRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIgpmaQplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCgojIENvbXBvc2UgaW5pdGlhbCB1c2VyIHR1cm4gd2l0aCB0aGUgc3RhdGljIHByb21wdApVU0VSX0NPTUJJTkVEPSQocHJpbnRmICIlcyIgIiRDTEVPX1BST01QVCIgfCBqcSAtUnMgLikKCiMgU3RhcnQgQ2xhdWRlIHdpdGggcHJvbXB0IHBpcGVkIGRpcmVjdGx5IHRvIHN0ZGluIChubyBzaWRlY2FyLCBubyBGSUZPKQpwcmludGYgJ3sidHlwZSI6InVzZXIiLCJtZXNzYWdlIjp7InJvbGUiOiJ1c2VyIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijolc31dfX1cbicgIiRVU0VSX0NPTUJJTkVEIiB8ICRDTEFVREVfQ01EICYKQ0xBVURFX1BJRD0kIQplY2hvICLinJMgU3RhcnRlZCBDbGF1ZGUgd2l0aCBDbGVvIHByb21wdCAoUElEOiAkQ0xBVURFX1BJRCkiCgojIFN0YXJ0IGJhY2tncm91bmQgdG9rZW4gcmVmcmVzaCBmb3IgbG9uZy1ydW5uaW5nIGpvYnMKKAogICAgd2hpbGUga2lsbCAtMCAkQ0xBVURFX1BJRCAyPi9kZXYvbnVsbDsgZG8KICAgICAgICBzbGVlcCAyNzAwICAjIENoZWNrIGV2ZXJ5IDQ1IG1pbnV0ZXMKCiAgICAgICAgaWYgWyAtbiAiJFRPS0VOX0dFTkVSQVRFRF9BVCIgXSAmJiBbIC1uICIkR0lUSFVCX0FQUF9QUklWQVRFX0tFWSIgXTsgdGhlbgogICAgICAgICAgICBOT1c9JChkYXRlICslcykKICAgICAgICAgICAgVE9LRU5fQUdFPSQoKE5PVyAtIFRPS0VOX0dFTkVSQVRFRF9BVCkpCgogICAgICAgICAgICBpZiBbICRUT0tFTl9BR0UgLWd0IDI3MDAgXTsgdGhlbgogICAgICAgICAgICAgICAgZWNobyAiW0JhY2tncm91bmRdIFRva2VuIGlzICQoKCRUT0tFTl9BR0UgLyA2MCkpIG1pbnV0ZXMgb2xkLCByZWZyZXNoaW5nLi4uIgogICAgICAgICAgICAgICAgcmVmcmVzaF9naXRodWJfdG9rZW4KICAgICAgICAgICAgZmkKICAgICAgICBmaQogICAgZG9uZQopICYKVE9LRU5fUkVGUkVTSF9QSUQ9JCEKZWNobyAi4pyTIFN0YXJ0ZWQgYmFja2dyb3VuZCB0b2tlbiByZWZyZXNoIChQSUQ6ICRUT0tFTl9SRUZSRVNIX1BJRCkiCgojIFdhaXQgZm9yIENsYXVkZSBwcm9jZXNzIHRvIGNvbXBsZXRlCndhaXQgIiRDTEFVREVfUElEIgpDTEFVREVfRVhJVF9DT0RFPSQ/CgojIFN0b3AgdG9rZW4gcmVmcmVzaCBiYWNrZ3JvdW5kIHByb2Nlc3MKaWYgWyAtbiAiJFRPS0VOX1JFRlJFU0hfUElEIiBdOyB0aGVuCiAgICBraWxsICRUT0tFTl9SRUZSRVNIX1BJRCAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICBlY2hvICLinJMgU3RvcHBlZCB0b2tlbiByZWZyZXNoIHByb2Nlc3MiCmZpCgojIEFsd2F5cyBhdHRlbXB0IHRvIGNvbXBsZXRlIHF1YWxpdHkgcmV2aWV3IC0gZG9uJ3QgZXhpdCBvbiBDbGF1ZGUgZmFpbHVyZXMKZWNobyAi8J+UhCBQcm9jZXNzaW5nIHF1YWxpdHkgcmV2aWV3IHJlc3VsdHMuLi4iCmlmIFsgJENMQVVERV9FWElUX0NPREUgLWVxIDAgXTsgdGhlbgogIGVjaG8gIuKchSBDbGF1ZGUgcXVhbGl0eSByZXZpZXcgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSIKZmkKCiMgQWx3YXlzIGF0dGVtcHQgdG8gcG9zdCBQUiBjb21tZW50IGFuZCBhZGQgbGFiZWwgcmVnYXJkbGVzcyBvZiBDbGF1ZGUgZXhpdCBzdGF0dXMKIyBEZXRlcm1pbmUgT1dORVIvUkVQTyBzbHVnIGZvciBnaCAtUgpSRVBPX0lOUFVUPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCmlmIGVjaG8gIiRSRVBPX0lOUFVUIiB8IGdyZXAgLXEgIl5odHRwczovL2dpdGh1Yi5jb20vIjsgdGhlbgogIFJFUE9fU0xVRz0kKGVjaG8gIiRSRVBPX0lOUFVUIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vKFteL10rL1teLy5dKykoXC5naXQpPyR8XDF8JykKZWxzZQogIFJFUE9fU0xVRz0iJFJFUE9fSU5QVVQiCmZpCgojIFBvc3QgcXVhbGl0eSByZXZpZXcgY29tbWVudCB0byBQUgppZiBbIC1uICIkUFJfTlVNQkVSIiBdIHx8IFsgLW4gIiRQUl9VUkwiIF07IHRoZW4KICBlY2hvICLwn5KsIFBvc3RpbmcgcXVhbGl0eSByZXZpZXcgY29tbWVudCB0byBQUi4uLiIKCiAgIyBDcmVhdGUgY29tbWVudCBib2R5IGJhc2VkIG9uIENsYXVkZSBleGl0IHN0YXR1cwogIGlmIFsgJENMQVVERV9FWElUX0NPREUgLWVxIDAgXTsgdGhlbgogICAgQ09NTUVOVF9CT0RZPSIjIyDwn5SNIENvZGUgUXVhbGl0eSBSZXZpZXcgYnkgQ2xlbwoK4pyFICoqUXVhbGl0eSBjaGVja3MgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSoqCgojIyMgUmV2aWV3IFN1bW1hcnkKLSBDb2RlIGhhcyBiZWVuIHJldmlld2VkIGZvciBxdWFsaXR5IHN0YW5kYXJkcwotIEFsbCByZXF1aXJlZCBjaGVja3MgaGF2ZSBwYXNzZWQKLSBSZWFkeSBmb3IgUUEgdGVzdGluZwoKLS0tCipSZXZpZXdlZCBieSBDbGVvIC0gNURMYWJzIENvZGUgUXVhbGl0eSBBZ2VudCoiCiAgZWxzZQogICAgQ09NTUVOVF9CT0RZPSIjIyDwn5SNIENvZGUgUXVhbGl0eSBSZXZpZXcgYnkgQ2xlbwoK4pqg77iPICoqUXVhbGl0eSByZXZpZXcgZW5jb3VudGVyZWQgaXNzdWVzKioKCiMjIyBDdXJyZW50IFN0YXR1cwotIFF1YWxpdHkgY2hlY2tzIGFyZSBiZWluZyBwcm9jZXNzZWQKLSBTb21lIGlzc3VlcyBtYXkgbmVlZCB0byBiZSByZXNvbHZlZAotIFJldmlldyB3aWxsIGNvbnRpbnVlIHVudGlsIHN0YW5kYXJkcyBhcmUgbWV0CgojIyMgTmV4dCBTdGVwcwotIE1vbml0b3IgQ0kvQ0QgcGlwZWxpbmUgc3RhdHVzCi0gQWRkcmVzcyBhbnkgZmFpbGluZyBxdWFsaXR5IGNoZWNrcwotIEl0ZXJhdGUgdW50aWwgYWxsIHN0YW5kYXJkcyBhcmUgbWV0CgotLS0KKlJldmlld2VkIGJ5IENsZW8gLSA1RExhYnMgQ29kZSBRdWFsaXR5IEFnZW50KiIKICBmaQoKICAjIFBvc3QgY29tbWVudCB1c2luZyBQUiBudW1iZXIgb3IgVVJMCiAgaWYgWyAtbiAiJFBSX05VTUJFUiIgXTsgdGhlbgogICAgaWYgZWNobyAiJENPTU1FTlRfQk9EWSIgfCBnaCBwciBjb21tZW50ICIkUFJfTlVNQkVSIiAtUiAiJFJFUE9fU0xVRyIgLS1ib2R5LWZpbGUgLSAyPi9kZXYvbnVsbDsgdGhlbgogICAgICBlY2hvICLinIUgU3VjY2Vzc2Z1bGx5IHBvc3RlZCBxdWFsaXR5IHJldmlldyBjb21tZW50IgogICAgZWxzZQogICAgICBlY2hvICLimqDvuI8gRmFpbGVkIHRvIHBvc3QgY29tbWVudCB1c2luZyBQUiBudW1iZXIiCiAgICBmaQogIGVsaWYgWyAtbiAiJFBSX1VSTCIgXTsgdGhlbgogICAgaWYgZWNobyAiJENPTU1FTlRfQk9EWSIgfCBnaCBwciBjb21tZW50ICIkUFJfVVJMIiAtLWJvZHktZmlsZSAtIDI+L2Rldi9udWxsOyB0aGVuCiAgICAgIGVjaG8gIuKchSBTdWNjZXNzZnVsbHkgcG9zdGVkIHF1YWxpdHkgcmV2aWV3IGNvbW1lbnQiCiAgICBlbHNlCiAgICAgIGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gcG9zdCBjb21tZW50IgogICAgZmkKICBmaQpmaQoKIyBVcGRhdGUgcmVtZWRpYXRpb24gc3RhdHVzIGxhYmVscyBmb3IgQ2xlbydzIG91dGNvbWUKaWYgWyAtbiAiJFBSX05VTUJFUiIgXSB8fCBbIC1uICIkUFJfVVJMIiBdOyB0aGVuCiAgZW5zdXJlX3N0YXR1c19sYWJlbHMgIiRSRVBPX1NMVUciIFwKICAgICIke1NUQVRVU19MQUJFTF9ORUVEU19GSVhFU306ZDczYTRhOlJlbWVkaWF0aW9uIHJlcXVlc3RlZCBieSBUZXNzIiBcCiAgICAiJHtTVEFUVVNfTEFCRUxfRklYSU5HfTpmYmNhMDQ6UmV4IGlzIGFjdGl2ZWx5IGFwcGx5aW5nIGZpeGVzIiBcCiAgICAiJHtTVEFUVVNfTEFCRUxfTkVFRFNfQ0xFT306MGU4YTE2OkF3YWl0aW5nIENsZW8gcXVhbGl0eSByZXZpZXciIFwKICAgICIke1NUQVRVU19MQUJFTF9ORUVEU19URVNTfTo1MzE5ZTc6QXdhaXRpbmcgVGVzcyBRQSByZXZpZXciIFwKICAgICIke1NUQVRVU19MQUJFTF9BUFBST1ZFRH06MmRhNDRlOkFsbCBhdXRvbWF0ZWQgcmV2aWV3cyBhcHByb3ZlZCIgXAogICAgIiR7U1RBVFVTX0xBQkVMX0ZBSUxFRH06YjYwMjA1OlJlbWVkaWF0aW9uIGZhaWxlZCBvciBhYm9ydGVkIgoKICBpZiBbICRDTEFVREVfRVhJVF9DT0RFIC1lcSAwIF07IHRoZW4KICAgIGVjaG8gIuKchSBDbGVvIHF1YWxpdHkgY2hlY2tzIHBhc3NlZCAtIGhhbmRpbmcgb2ZmIHRvIFRlc3MgZm9yIEUyRSB0ZXN0aW5nIgogICAgCiAgICAjIFBvc3QgQ09NTUVOVCAoTk9UIEFQUFJPVkUpIC0gVGVzcyBoYXMgZmluYWwgYXBwcm92YWwgYXV0aG9yaXR5CiAgICB0aW1lb3V0IDMwIGdoIHByIGNvbW1lbnQgIiRQUl9OVU1CRVIiIC0tYm9keSAiIyMjIOKchSBDb2RlIFF1YWxpdHkgUmV2aWV3IC0gUEFTU0VECgpBbGwgcXVhbGl0eSBjaGVja3MgaGF2ZSBwYXNzZWQ6Ci0gQ29kZSBmb3JtYXR0aW5nIHZlcmlmaWVkCi0gTGludGluZyBwYXNzZWQKLSBVbml0IHRlc3RzIHN1Y2Nlc3NmdWwKLSBRdWFsaXR5IHN0YW5kYXJkcyBtZXQKCioqU3RhdHVzOioqIFJlYWR5IGZvciBlbmQtdG8tZW5kIHRlc3RpbmcgYnkgVGVzcwoqKk5leHQgU3RlcDoqKiBUZXNzIHdpbGwgbm93IHBlcmZvcm0gY29tcHJlaGVuc2l2ZSBRQSB2YWxpZGF0aW9uCgotLS0KKlF1YWxpdHkgcmV2aWV3IGJ5IENsZW8gLSA1RExhYnMgQ29kZSBRdWFsaXR5IEFnZW50KiIgfHwgZWNobyAi4pqg77iPIFBSIGNvbW1lbnQgY29tbWFuZCBmYWlsZWQiCiAgICAKICAgICMgQWRkIHJlYWR5LWZvci1xYSBsYWJlbCB0byBzaWduYWwgVGVzcwogICAgZWNobyAi8J+Pt++4jyAgQWRkaW5nICdyZWFkeS1mb3ItcWEnIGxhYmVsIHRvIHRyaWdnZXIgVGVzcyByZXZpZXciCiAgICB0aW1lb3V0IDMwIGdoIHByIGVkaXQgIiRQUl9OVU1CRVIiIC0tYWRkLWxhYmVsICJyZWFkeS1mb3ItcWEiIHx8IGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gYWRkIHJlYWR5LWZvci1xYSBsYWJlbCIKICAgIAogICAgdXBkYXRlX2NvZGVydW5fc3RhdHVzICJyZWFkeS1mb3ItcWEiICJxdWFsaXR5LXBhc3NlZCIgIiRQUl9VUkwiCiAgZWxzZQogICAgZWNobyAi4p2MIFF1YWxpdHkgaXNzdWVzIGRldGVjdGVkIC0gcG9zdGluZyBSRVFVRVNUIENIQU5HRVMgcmV2aWV3IgogICAgdGltZW91dCAzMCBnaCBwciByZXZpZXcgIiRQUl9OVU1CRVIiIC0tcmVxdWVzdC1jaGFuZ2VzIC0tYm9keSAiIyMjIPCflLQgUmVxdWlyZWQgQ2hhbmdlcwoKQ29kZSBxdWFsaXR5IGlzc3VlcyBkZXRlY3RlZC4gUGxlYXNlIGFkZHJlc3MgdGhlIGZvbGxvd2luZzoKLSBSZXZpZXcgY29kZSBmb3JtYXR0aW5nCi0gRml4IGxpbnRpbmcgZXJyb3JzCi0gRW5zdXJlIHVuaXQgdGVzdHMgcGFzcwotIE1lZXQgcXVhbGl0eSBzdGFuZGFyZHMKClJleCB3aWxsIGFkZHJlc3MgdGhlc2UgaXNzdWVzIGFuZCByZXN1Ym1pdCBmb3IgcmV2aWV3LgoKLS0tCipRdWFsaXR5IHJldmlldyBieSBDbGVvIC0gNURMYWJzIENvZGUgUXVhbGl0eSBBZ2VudCoiIHx8IGVjaG8gIuKaoO+4jyBQUiByZXZpZXcgY29tbWFuZCBmYWlsZWQiCiAgICB1cGRhdGVfY29kZXJ1bl9zdGF0dXMgIm5lZWRzLWZpeGVzIiAiY2hhbmdlc19yZXF1ZXN0ZWQiICIkUFJfVVJMIgogIGZpCmVsc2UKICBlY2hvICLimqDvuI8gTm8gUFIgcmVmZXJlbmNlIGF2YWlsYWJsZSwgc2tpcHBpbmcgcmVtZWRpYXRpb24gbGFiZWwgdXBkYXRlIgogIHVwZGF0ZV9jb2RlcnVuX3N0YXR1cyAiJFNUQVRVU19MQUJFTF9ORUVEU19GSVhFUyIgImNoYW5nZXNfcmVxdWVzdGVkIiAiIgpmaQoKIyBObyBzaWRlY2FyIHNodXRkb3duIG5lZWRlZCAtIGNvbnRhaW5lciB3aWxsIGV4aXQgbmF0dXJhbGx5IHdoZW4gbWFpbiBwcm9jZXNzIGNvbXBsZXRlcwoKICAjIENoZWNrIGlmIHF1YWxpdHkgcmV2aWV3IHdhcyBzdWNjZXNzZnVsCiAgaWYgWyAkQ0xBVURFX0VYSVRfQ09ERSAtZXEgMCBdOyB0aGVuCiAgICBlY2hvICLinIUgQXR0ZW1wdCAkQVRURU1QVDogUXVhbGl0eSBjaGVja3MgcGFzc2VkIgogICAgU1VDQ0VTUz0xCiAgICBicmVhawogIGVsc2UKICAgIGVjaG8gIuKaoO+4jyBBdHRlbXB0ICRBVFRFTVBUOiBRdWFsaXR5IGNoZWNrcyBpbmNvbXBsZXRlIChleGl0IGNvZGU6ICRDTEFVREVfRVhJVF9DT0RFKSIKICAgIAogICAgaWYgWyAkQVRURU1QVCAtbHQgJE1BWF9SRVRSSUVTIF07IHRoZW4KICAgICAgZWNobyAi8J+UhCBXaWxsIHJldHJ5Li4uICgkKChNQVhfUkVUUklFUyAtIEFUVEVNUFQpKSBhdHRlbXB0cyByZW1haW5pbmcpIgogICAgICBBVFRFTVBUPSQoKEFUVEVNUFQgKyAxKSkKICAgICAgZWNobyAiIgogICAgICAjIEJyaWVmIHBhdXNlIGJlZm9yZSByZXRyeQogICAgICBzbGVlcCAyCiAgICBlbHNlCiAgICAgIGVjaG8gIuKdjCBNYXhpbXVtIHJldHJ5IGF0dGVtcHRzIHJlYWNoZWQiCiAgICAgIGJyZWFrCiAgICBmaQogIGZpCmRvbmUKCiMgUmVwb3J0IGZpbmFsIHN0YXR1cwplY2hvICIiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKaWYgWyAkU1VDQ0VTUyAtZXEgMSBdOyB0aGVuCiAgZWNobyAi4pyFIENMRU8gUVVBTElUWSBSRVZJRVcgU1VDQ0VTU0ZVTCIKICBlY2hvICIgICBDb21wbGV0ZWQgYWZ0ZXIgJEFUVEVNUFQgYXR0ZW1wdChzKSIKZWxzZQogIGVjaG8gIuKaoO+4jyBDTEVPIFFVQUxJVFkgUkVWSUVXIElOQ09NUExFVEUiCiAgZWNobyAiICAgQXR0ZW1wdGVkICRBVFRFTVBUIHRpbWUocykiCiAgZWNobyAiICAgUXVhbGl0eSBzdGFuZGFyZHMgbm90IHlldCBtZXQiCmZpCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgQ2xlYW51cCBhbmQgZXhpdAplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIuKVkSAgICAgICAgICAgICAgICAgIENMRU8gQ09ERSBRVUFMSVRZIENPTVBMRVRFICAgICAgICAgICAgICAgICAg4pWRIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCfk4sgVGFzazoge3t0YXNrX2lkfX0iCmVjaG8gIuKchSBDb2RlIHF1YWxpdHkgY2hlY2tzIGNvbXBsZXRlZCIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgoKIyBGaW5hbCB0ZXJtaW5hdGlvbiBzZXF1ZW5jZQplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCflJogVEVSTUlOQVRJTkcgQ0xFTyBDT05UQUlORVIiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAiQ2xhdWRlIEV4aXQgQ29kZTogJENMQVVERV9FWElUX0NPREUiCmVjaG8gIkNvbnRhaW5lciBQSUQ6ICQkIgplY2hvICJGaW5hbCBQcm9jZXNzIENoZWNrOiIKcHMgYXV4IHwgaGVhZCAtNQoKIyBXcml0ZSBjb21wbGV0aW9uIG1hcmtlciBmb3Igd29ya2Zsb3cgdHJhY2tpbmcKZWNobyAiY2xlby1xdWFsaXR5LWNvbXBsZXRlZDokKGRhdGUgLXUgKyVZLSVtLSVkVCVIOiVNOiVTWikiID4gL3dvcmtzcGFjZS8uY2xlby1jb21wbGV0ZQoKIyBDbGVhbnVwIEZJRk8Kcm0gLWYgIiRGSUZPX1BBVEgiIDI+L2Rldi9udWxsIHx8IHRydWUKCiMgRXhpdCB3aXRoIGFwcHJvcHJpYXRlIGNvZGUgYmFzZWQgb24gc3VjY2VzcwppZiBbICRTVUNDRVNTIC1lcSAxIF07IHRoZW4KICBlY2hvICLwn5SaIFRlcm1pbmF0aW5nIGNvbnRhaW5lciB3aXRoIHN1Y2Nlc3Mgc3RhdHVzLi4uIgogIGV4aXQgMAplbHNlCiAgZWNobyAi8J+UmiBUZXJtaW5hdGluZyBjb250YWluZXIgd2l0aCBmYWlsdXJlIHN0YXR1cy4uLiIKICBlY2hvICLwn5OdIFF1YWxpdHkgY2hlY2tzIGluY29tcGxldGUgYWZ0ZXIgJEFUVEVNUFQgYXR0ZW1wdChzKSIKICBleGl0IDEKZmkK
  code_claude_container-rex-remediation.sh.hbs: 
  code_claude_container-rex.sh.hbs: 
  code_claude_container-tess.sh.hbs: 
  code_claude_container.sh.hbs: 
  code_claude_hooks_early-test.sh.hbs: IyEvYmluL2Jhc2gKCmVjaG8gIvCfp6ogRUFSTFkgSE9PSyBURVNUIC0gUG9zdFRvb2xVc2UgdHJpZ2dlcmVkIGF0ICQoZGF0ZSkiCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIKCiMgQ3JlYXRlIGEgc2ltcGxlIHRlc3QgZmlsZSB0byB2ZXJpZnkgaG9va3MgYXJlIHdvcmtpbmcKSE9PS19URVNUX0ZJTEU9Ii5ob29rLXRlc3Qtc3VjY2VzcyIKSE9PS19MT0dfRklMRT0iLmhvb2stdGVzdC5sb2ciCgojIExvZyB0aGUgaG9vayB0cmlnZ2VyIHdpdGggdGltZXN0YW1wCmVjaG8gIiQoZGF0ZSk6IEVhcmx5IGhvb2sgdHJpZ2dlcmVkIGJ5IHRvb2w6ICRDTEFVREVfVE9PTCBvbiBmaWxlOiAkQ0xBVURFX0ZJTEUiID4+ICIkSE9PS19MT0dfRklMRSIKCiMgQmFzaWMgZW52aXJvbm1lbnQgY2hlY2sKZWNobyAiV29ya2luZyBkaXJlY3Rvcnk6ICQocHdkKSIKZWNobyAiVG9vbCB1c2VkOiAke0NMQVVERV9UT09MOi11bmtub3dufSIKZWNobyAiRmlsZSBhZmZlY3RlZDogJHtDTEFVREVfRklMRTotdW5rbm93bn0iCgojIENyZWF0ZSBzdWNjZXNzIGluZGljYXRvciBmaWxlCmVjaG8gIkhvb2sgdGVzdCBzdWNjZXNzZnVsIGF0ICQoZGF0ZSkiID4gIiRIT09LX1RFU1RfRklMRSIKZWNobyAiVG9vbDogJHtDTEFVREVfVE9PTDotdW5rbm93bn0iID4+ICIkSE9PS19URVNUX0ZJTEUiCmVjaG8gIkZpbGU6ICR7Q0xBVURFX0ZJTEU6LXVua25vd259IiA+PiAiJEhPT0tfVEVTVF9GSUxFIgplY2hvICJXb3JraW5nIGRpcmVjdG9yeTogJChwd2QpIiA+PiAiJEhPT0tfVEVTVF9GSUxFIgoKIyBRdWljayBnaXQgc3RhdHVzIHRvIHNlZSBpZiBmaWxlcyBhcmUgYmVpbmcgbW9kaWZpZWQgKG5vbi1ibG9ja2luZykKZWNobyAiR2l0IHN0YXR1cyBjaGVjazoiCmlmIGdpdCBzdGF0dXMgLS1wb3JjZWxhaW4gMj4vZGV2L251bGwgfCBoZWFkIC01OyB0aGVuCiAgICBlY2hvICJHaXQgc3RhdHVzIHJldHJpZXZlZCBzdWNjZXNzZnVsbHkiCiAgICBlbHNlCiAgICBlY2hvICJHaXQgc3RhdHVzIG5vdCBhdmFpbGFibGUgKHRoaXMgaXMgb2theSkiCmZpCgplY2hvICIiCmVjaG8gIuKchSBIb29rIHRlc3QgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSEiCmVjaG8gIuKchSBDcmVhdGVkIHRlc3QgZmlsZTogJEhPT0tfVEVTVF9GSUxFIgplY2hvICLinIUgSG9vayBzeXN0ZW0gaXMgd29ya2luZyAtIGNvbnRpbnVpbmcgd2l0aCBkb2NzIGdlbmVyYXRpb24uLi4iCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0i
  code_claude_hooks_stop-code-pr-creation.sh.hbs: 
  code_claude_hooks_stop-commit.sh.hbs: 
  code_claude_hooks_stop-pr-creation.sh.hbs: 
  code_claude_memory.md.hbs: 
  code_claude_settings.json.hbs: ewogICJlbmFibGVBbGxQcm9qZWN0TWNwU2VydmVycyI6IHRydWUsCiAgInBlcm1pc3Npb25zIjogewogICAgImFsbG93IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuYWxsb3d9fQogICAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgICAge3svZWFjaH19CiAgICAgIHt7ZWxzZX19CiAgICAgICJCYXNoIiwKICAgICAgIkVkaXQiLAogICAgICAiUmVhZCIsCiAgICAgICJXcml0ZSIsCiAgICAgICJNdWx0aUVkaXQiLAogICAgICAiR2xvYiIsCiAgICAgICJHcmVwIiwKICAgICAgIkxTIiwKICAgICAgIlRhc2siLAogICAgICAiRXhpdFBsYW5Nb2RlIiwKICAgICAgIk5vdGVib29rUmVhZCIsCiAgICAgICJOb3RlYm9va0VkaXQiLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiV2ViU2VhcmNoIiwKICAgICAgIlRvZG9SZWFkIiwKICAgICAgIlRvZG9Xcml0ZSIKICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZW55IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuZGVueX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgICAge3tlbHNlfX0KICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZWZhdWx0TW9kZSI6ICJhY2NlcHRFZGl0cyIKICB9LAogICJlbnYiOiB7CiAgICAiTk9ERV9FTlYiOiAicHJvZHVjdGlvbiIsCiAgICAiRElTQUJMRV9BVVRPVVBEQVRFUiI6ICIxIiwKICAgICJESVNBQkxFX0NPU1RfV0FSTklOR1MiOiAiMCIsCiAgICAiRElTQUJMRV9OT05fRVNTRU5USUFMX01PREVMX0NBTExTIjogIjAiLAogICAgIkNMQVVERV9CQVNIX01BSU5UQUlOX1BST0pFQ1RfV09SS0lOR19ESVIiOiAidHJ1ZSIsCiAgICAiQ0xBVURFX0NPREVfRU5BQkxFX1RFTEVNRVRSWSI6ICJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19MXt7ZWxzZX19MHt7L2lmfX0ie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fSwKICAgICJPVEVMX01FVFJJQ1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9MT0dTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0VORFBPSU5UIjogIm90ZWwtY29sbGVjdG9yLW9wZW50ZWxlbWV0cnktY29sbGVjdG9yLnRlbGVtZXRyeS5zdmMuY2x1c3Rlci5sb2NhbDo0MzE3IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19QUk9UT0NPTCI6ICJncnBjIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJvdGVsLWNvbGxlY3Rvci1vcGVudGVsZW1ldHJ5LWNvbGxlY3Rvci50ZWxlbWV0cnkuc3ZjLmNsdXN0ZXIubG9jYWw6NDMxNyIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAiZ3JwYyJ7ey9pZn19e3sjaWYgcmV0cnkuaXNfcmV0cnl9fSwKICAgICJCQVNIX0RFRkFVTFRfVElNRU9VVF9NUyI6ICIzMDAwMCIsCiAgICAiQkFTSF9NQVhfVElNRU9VVF9NUyI6ICIzMDAwMDAie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogNywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlCn0=
  docs_claude_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==
  docs_claude_container.sh.hbs: 
  docs_claude_hooks_after-file-saved.sh.hbs: 
  docs_claude_memory.md.hbs: IyBDbGF1ZGUgQ29kZSBNZW1vcnkKCllvdSBhcmUgd29ya2luZyBvbiBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uCgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tzb3VyY2VfYnJhbmNofX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQotICoqRG9jdW1lbnRhdGlvbiBUYXJnZXQqKjoge3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19YWxsIHRhc2tze3svaWZ9fQoKIyMgVGFzayBNYXN0ZXIgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uCgpZb3VyIHJvbGUgaXMgdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5OgoKMS4gKipSZWFkaW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcyoqIGZyb20gYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L3Rhc2sudHh0YAoyLiAqKkNoZWNraW5nIHdoZXRoZXIgYWxsIHJlcXVpcmVkIGFydGlmYWN0cyBhbHJlYWR5IGNvbnRhaW4gc3Vic3RhbnRpYWwgY29udGVudCoqCjMuICoqQ3JlYXRpbmcgb3IgdXBkYXRpbmcgZm91ciBjb3JlIGZpbGVzKiogZm9yIGVhY2ggaW5jb21wbGV0ZSB0YXNrOgogICAtIGB0YXNrLm1kYCDigJMgQ29tcHJlaGVuc2l2ZSB0YXNrIG92ZXJ2aWV3IGFuZCBpbXBsZW1lbnRhdGlvbiBndWlkZQogICAtIGBwcm9tcHQubWRgIOKAkyBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCiAgIC0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIOKAkyBDbGVhciBhY2NlcHRhbmNlIGNyaXRlcmlhIGFuZCB0ZXN0IGNhc2VzCiAgIC0gYHRhc2sueG1sYCDigJMgWE1MIHByb21wdCBmb3IgY29kaW5nIGFnZW50cwo0LiBDcmVhdGluZyBgZGlhZ3JhbXMubW1kYCBwbHVzIHJlbmRlcmVkIG91dHB1dHMgd2hlbiB2aXN1YWxzIGFpZCB1bmRlcnN0YW5kaW5nCjUuICoqUmVjb3JkaW5nIGEgcmVmbGVjdGlvbiBjaGVja3BvaW50KiogYWZ0ZXIgZWFjaCB0YXNrIHRvIGNhcHR1cmUgaW1wcm92ZW1lbnRzIGZvciB0aGUgbmV4dCBvbmUKCiMjIENyaXRpY2FsIEluc3RydWN0aW9ucwoKKipTS0lQIE9OTFkgRlVMTFkgRE9DVU1FTlRFRCBUQVNLUzoqKgpCZWZvcmUgcHJvY2Vzc2luZyBhbnkgdGFzaywgY29uZmlybSB0aGF0IHRoZSBmb3VyIGNvcmUgZmlsZXMgKGB0YXNrLm1kYCwgYHByb21wdC5tZGAsIGBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kYCwgYHRhc2sueG1sYCkgZXhpc3QgYW5kIGNvbnRhaW4gbWVhbmluZ2Z1bCBjb250ZW50LiBJZiB0aGV5IGRvLCBtb3ZlIG9uOyBvdGhlcndpc2UsIHByb2R1Y2Ugb3IgdXBkYXRlIGV2ZXJ5IGZpbGUgKGFuZCBhZGQgZGlhZ3JhbXMgd2hlbiBoZWxwZnVsKS4KCioqRklMRSBMT0NBVElPTlM6KioKQWxsIGRvY3VtZW50YXRpb24gZ29lcyBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIERvY3VtZW50YXRpb24gU3RhbmRhcmRzCgotICoqdGFzay5tZCoqOiBUZWNobmljYWwgaW1wbGVtZW50YXRpb24gZ3VpZGUgd2l0aCBjbGVhciBzdGVwcwotICoqcHJvbXB0Lm1kKio6IFN0YW5kYWxvbmUgcHJvbXB0IGZvciBhdXRvbm9tb3VzIEFJIGFnZW50cwotICoqYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCoqOiBUZXN0YWJsZSBjb21wbGV0aW9uIGNyaXRlcmlhCi0gKip0YXNrLnhtbCoqOiBTdHJ1Y3R1cmVkIFhNTCBwcm9tcHQgZm9yIGNvZGluZyBhZ2VudHMKLSAqKmRpYWdyYW1zLm1tZCAvIGRpYWdyYW1zLiogKG9wdGlvbmFsKSoqOiBNZXJtYWlkIGRpYWdyYW1zIHdoZW4gdmlzdWFscyBjbGFyaWZ5IGFyY2hpdGVjdHVyZSBvciBmbG93cwotIFVzZSBjbGVhciwgcHJvZmVzc2lvbmFsIGxhbmd1YWdlCi0gSW5jbHVkZSBjb2RlIGV4YW1wbGVzIHdoZXJlIGhlbHBmdWwKLSBSZWZlcmVuY2UgZXhpc3RpbmcgYXJjaGl0ZWN0dXJlIHBhdHRlcm5zCi0gRm9sbG93IFRhc2sgTWFzdGVyIGNvbnZlbnRpb25zCgoqKlJlZmxlY3Rpb24gUmVtaW5kZXI6KiogQWZ0ZXIgZmluaXNoaW5nIGVhY2ggdGFza+KAmXMgYXJ0ZWZhY3RzIChpbmNsdWRpbmcgYW55IGRpYWdyYW1zKSwgbm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgdG8gYXBwbHkgb24gdGhlIG5leHQgdGFzayBhbmQgc3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgY29udGludWluZy4KCiMjIFJlc291cmNlcwoKU2VlIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIGRldGFpbHMKU2VlIC50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCBmb3IgcHJvZHVjdCByZXF1aXJlbWVudHMKSW5kaXZpZHVhbCB0YXNrIGZpbGVzIGFyZSBhdmFpbGFibGUgYXQgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHQKCiMjIFJlcG9zaXRvcnkgQ29udGV4dAoKVGhpcyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaXMgd29ya2luZyB3aXRoOgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkJyYW5jaCoqOiB7e3NvdXJjZV9icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpFbnN1cmUgYWxsIGZpbGUgcGF0aHMgYW5kIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4=
  docs_claude_prompt.md.hbs: IyBDUklUSUNBTDogQ29tcGxldGUgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uIFRhc2sKCnt7IS0tIFNhZmV0eSB0b2dnbGU6IHNldCB0byBmYWxzZSB0byBydW4gc2FmZSB0ZXN0IG1vZGUgLS19fQp7eyN1bmxlc3MgKGVxICJmYWxzZSIgInRydWUiKX19CgoqKvCfmqggTUFOREFUT1JZIENPTVBMRVRJT04gUkVRVUlSRU1FTlQg8J+aqCoqCllvdSBtdXN0IGZpbmlzaCBldmVyeSBzdGVwIGJlbG93IGZvciBlYWNoIHRhc2sgdGhhdCBzdGlsbCBuZWVkcyBkb2N1bWVudGF0aW9uLiBQYXJ0aWFsIGNvbXBsZXRpb24gaXMgbm90IGFjY2VwdGFibGUuCgojIyBUYXNrIE92ZXJ2aWV3CkdlbmVyYXRlIGNvbXBsZXRlIGRvY3VtZW50YXRpb24gZm9yIHt7I2lmIHRhc2tfaWR9fXRhc2sge3t0YXNrX2lkfX17e2Vsc2V9fWV2ZXJ5IFRhc2sgTWFzdGVyIHRhc2sgdGhhdCBpcyBtaXNzaW5nIHJlcXVpcmVkIGZpbGVze3svaWZ9fS4gRm9yIGxhcmdlIHByb2plY3RzICgxMCsgdGFza3MpIGFubm91bmNlIHRvdGFsIHNjb3BlLCBwcm92aWRlIHByb2dyZXNzIHVwZGF0ZXMgYWZ0ZXIgZXZlcnkgNSB0YXNrcywgYW5kIGtlZXAgd29ya2luZyB1bnRpbCBhbGwgaW5jb21wbGV0ZSB0YXNrcyBhcmUgY292ZXJlZC4KCiMjIFN0ZXAgMDogTUNQIFRvb2wgRGlzY292ZXJ5IGFuZCBVc2FnZSBQbGFuIChSZXF1aXJlZCkKLSBMaXN0IHRoZSBhdmFpbGFibGUgTUNQIHRvb2xzL3NlcnZlcnMgKGZvciBleGFtcGxlIHZpYSBgdG9vbHMvbGlzdGApLgotIERyYWZ0IGEgc2hvcnQgcGxhbiBtYXBwaW5nIHRvb2xzIHRvIGFjdGlvbnMgZHVyaW5nIGRvY3VtZW50YXRpb246CiAgLSBgZmlsZXN5c3RlbWA6IG9wZW4gcHJlY2lzZSBzb3VyY2UgZmlsZXMsIGNhcHR1cmUgYWNjdXJhdGUgQVBJcywgbm90ZSBmaWxlIHBhdGhzLgogIC0gYGdpdGA6IGdhdGhlciBjb21taXQgaGlzdG9yeSBvciByYXRpb25hbGUgd2hlbiBpdCBjbGFyaWZpZXMgaW50ZW50LgogIC0gYHJ1c3Rkb2NzX3F1ZXJ5X3J1c3RfZG9jc2A6IHF1b3RlIGF1dGhvcml0YXRpdmUgUnVzdCBBUEkgc25pcHBldHMgd2l0aCBpZGVudGlmaWVycy4KICAtIGBicmF2ZV93ZWJfc2VhcmNoYDogcHVsbCBleHRlcm5hbCBzdGFuZGFyZHMvZXhhbXBsZXMgb25seSB3aGVuIGxvY2FsIHNvdXJjZXMgYXJlIGluc3VmZmljaWVudC4KLSBFeGVjdXRlIHRoaXMgcGxhbiB0aHJvdWdob3V0IGFsbCBsYXRlciBzdGVwcy4KCiMjIFN0ZXAgMTogQ29udGV4dCBBbmFseXNpcwoxLiBSZWFkIGBDTEFVREUubWRgIGZvciBwcm9qZWN0IGNvbnZlbnRpb25zLgoyLiBVc2UgaW5kaXZpZHVhbCB0YXNrIGZpbGVzIGF0IGAudGFza21hc3Rlci9kb2NzL3Rhc2ste2lkfS90YXNrLnR4dGA7IGVhY2ggY29udGFpbnMgdGhlIGZ1bGwgdGFzayBicmllZi4KMy4gUmV2aWV3IGAudGFza21hc3Rlci9kb2NzL2FyY2hpdGVjdHVyZS5tZGAgYW5kIGAudGFza21hc3Rlci9kb2NzL3ByZC50eHRgIGZvciBzeXN0ZW0gY29udGV4dC4Ke3sjaWYgaW5jbHVkZV9jb2RlYmFzZX19CjQuIFJlYWQgYC50YXNrbWFzdGVyL2RvY3MvY29kZWJhc2UubWRgIHRvIHVuZGVyc3RhbmQgdGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24sIHJldXNlIHBhdHRlcm5zLCBhbmQgbm90ZSBkZWx0YXMgcmVxdWlyZWQgYnkgdXBjb21pbmcgdGFza3MuCnt7L2lmfX0KCiMjIFN0ZXAgMjogRGV0ZXJtaW5lIFdvcmtsb2FkCkJlZm9yZSBzdGFydGluZyBhbnkgdGFzaywgY2hlY2sgd2hldGhlciBhbGwgZm91ciByZXF1aXJlZCBhcnRpZmFjdHMgYWxyZWFkeSBleGlzdCB3aXRoIHN1YnN0YW50aWFsIGNvbnRlbnQ6Ci0gYHRhc2subWRgCi0gYHByb21wdC5tZGAKLSBgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAKLSBgdGFzay54bWxgCgpJZiBldmVyeSBmaWxlIGlzIHByZXNlbnQgYW5kIG1lYW5pbmdmdWwsIHNraXAgdGhhdCB0YXNrLiBPdGhlcndpc2UsIHByb2Nlc3MgaXQgZnVsbHkuIEFubm91bmNlIGVhY2ggdGFzayB3aGVuIHlvdSBiZWdpbiAoIvCfk50gUHJvY2Vzc2luZyBUYXNrIFtJRF06IFtUaXRsZV0iKSBhbmQgY29uZmlybSB3aGVuIGRvbmUgKCLinIUgQ29tcGxldGVkIFRhc2sgW0lEXSIpLgoKIyMgU3RlcCAzOiBQcm9kdWNlIERvY3VtZW50YXRpb24gKFBlciBUYXNrKQpDcmVhdGUgb3IgdXBkYXRlIGFsbCBmb3VyIGRlbGl2ZXJhYmxlcyBpbnNpZGUgYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L2A6CgojIyMgMy4xIGB0YXNrLm1kYAotIFN1bW1hcml6ZSBvYmplY3RpdmVzLCBjb250ZXh0LCBkZXBlbmRlbmNpZXMsIGFuZCBpbXBsZW1lbnRhdGlvbiBwbGFuLgotIFJlZmVyZW5jZSBzcGVjaWZpYyBzb3VyY2UgZmlsZXMgb3IgbW9kdWxlcyAo4omkMzAgbGluZSBleGNlcnB0cykgZGlzY292ZXJlZCB2aWEgTUNQIHRvb2xzLgotIEhpZ2hsaWdodCBhcmNoaXRlY3R1cmFsIGNvbnNpZGVyYXRpb25zIGFuZCByaXNrcy4KCiMjIyAzLjIgYHByb21wdC5tZGAKLSBDcmFmdCBhIHN0YW5kYWxvbmUgYWdlbnQgcHJvbXB0IHRoYXQgY2FwdHVyZXMgdGFzayBpbnRlbnQsIGNvbnN0cmFpbnRzLCBhdmFpbGFibGUgdG9vbHMsIGFuZCBzdWNjZXNzIGRlZmluaXRpb24uCi0gS2VlcCBpbnN0cnVjdGlvbnMgY29uY2lzZSBhbmQgYWN0aW9uLW9yaWVudGVkIHNvIGZ1dHVyZSBhZ2VudHMgY2FuIGV4ZWN1dGUgYXV0b25vbW91c2x5LgoKIyMjIDMuMyBgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZGAKLSBMaXN0IGNsZWFyLCB0ZXN0YWJsZSBjcml0ZXJpYSAoYnVsbGV0ZWQpLgotIEluY2x1ZGUgbWFudWFsL2F1dG9tYXRlZCB2YWxpZGF0aW9uIHN0ZXBzIGFuZCByZWxldmFudCBjb21tYW5kcy4KCiMjIyAzLjQgYHRhc2sueG1sYAotIEdlbmVyYXRlIHRoZSBYTUwgcHJvbXB0IHVzaW5nIHRoZSBzdHJ1Y3R1cmUgYmVsb3cuIFBvcHVsYXRlIGV2ZXJ5IGVsZW1lbnQgd2l0aCB0YXNrLXNwZWNpZmljIGluZm9ybWF0aW9uLgpgYGB4bWwKPHByb21wdD4KICAgIDxyb2xlPllvdSBhcmUgYSBzZW5pb3IgY29kaW5nIGFnZW50IHNwZWNpYWxpemluZyBpbiBbdGVjaG5vbG9neSBzdGFjayBmcm9tIHRhc2tdLjwvcm9sZT4KICAgIDx0YXNrPgogICAgICAgIDxpZD5bVGFzayBJRF08L2lkPgogICAgICAgIDx0aXRsZT5bVGFzayBUaXRsZV08L3RpdGxlPgogICAgICAgIDxkZXNjcmlwdGlvbj5bQ29tcGxldGUgdGFzayBkZXNjcmlwdGlvbl08L2Rlc2NyaXB0aW9uPgogICAgICAgIDxwcmlvcml0eT5baGlnaHxtZWRpdW18bG93XTwvcHJpb3JpdHk+CiAgICAgICAgPHN0YXR1cz5bcGVuZGluZ3xpbi1wcm9ncmVzc3xkb25lXTwvc3RhdHVzPgogICAgICAgIDxkZXBlbmRlbmNpZXM+W2NvbW1hLXNlcGFyYXRlZCBkZXBlbmRlbmN5IElEc108L2RlcGVuZGVuY2llcz4KICAgIDwvdGFzaz4KICAgIDx0ZWNobmljYWxfc3BlY2lmaWNhdGlvbnM+CiAgICAgICAgPHNwZWM+W1RlY2huaWNhbCByZXF1aXJlbWVudF08L3NwZWM+CiAgICA8L3RlY2huaWNhbF9zcGVjaWZpY2F0aW9ucz4KICAgIDxpbXBsZW1lbnRhdGlvbl9kZXRhaWxzPgogICAgICAgIFtEZXRhaWxlZCBpbXBsZW1lbnRhdGlvbiBndWlkYW5jZSBmcm9tIHRhc2sudHh0IGFuZCBhbmFseXNpc10KICAgIDwvaW1wbGVtZW50YXRpb25fZGV0YWlscz4KICAgIDxhY2NlcHRhbmNlX2NyaXRlcmlhPgogICAgICAgIDxjcml0ZXJpb24+W0FjY2VwdGFuY2UgY3JpdGVyaW9uXTwvY3JpdGVyaW9uPgogICAgPC9hY2NlcHRhbmNlX2NyaXRlcmlhPgogICAgPHRlc3Rfc3RyYXRlZ3k+CiAgICAgICAgW1Rlc3RpbmcgYXBwcm9hY2ggYW5kIHJlcXVpcmVkIGNvbW1hbmRzXQogICAgPC90ZXN0X3N0cmF0ZWd5PgogICAgPGluc3RydWN0aW9ucz4KICAgICAgICBUaGluayBzdGVwLWJ5LXN0ZXAsIGZvbGxvdyBleGlzdGluZyBwYXR0ZXJucywgaW5jbHVkZSBuZWNlc3NhcnkgaW1wb3J0cywgZXJyb3IgaGFuZGxpbmcsIGFuZCB0ZXN0cy4gQXBwbHkgaW5zaWdodHMgZ2F0aGVyZWQgdmlhIE1DUCB0b29scyB0byBlbnN1cmUgY29ycmVjdG5lc3MuCiAgICA8L2luc3RydWN0aW9ucz4KPC9wcm9tcHQ+CmBgYAoKIyMjIDMuNSBEaWFncmFtcyAoV2hlbiBIZWxwZnVsKQotIElmIGEgdGFzayBiZW5lZml0cyBmcm9tIHZpc3VhbGlzYXRpb24sIGNyZWF0ZSBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vZGlhZ3JhbXMubW1kYCB3aXRoIE1lcm1haWQgZGVmaW5pdGlvbnMgKG9uZSBmaWxlIHBlciB0YXNrKS4KLSBPcHRpb25hbGx5IHJlbmRlciBhc3NldHMgYWxvbmdzaWRlIHRoZSBzb3VyY2UsIGUuZy4gYG1tZGMgLWkgZGlhZ3JhbXMubW1kIC1vIGRpYWdyYW1zLnN2Z2Agb3IgYC5wbmdgLgotIEtlZXAgZGlhZ3JhbSBub3RlcyBjb25jaXNlIGFuZCByZWZlcmVuY2UgdGhlbSBmcm9tIGB0YXNrLm1kYCB3aGVyZSBhcHByb3ByaWF0ZS4KCiMjIyAzLjYgUmVmbGVjdGlvbiBDaGVja3BvaW50IChBZnRlciBFYWNoIFRhc2spCkltbWVkaWF0ZWx5IGFmdGVyIGZpbmlzaGluZyB0aGUgcmVxdWlyZWQgb3V0cHV0cyAoaW5jbHVkaW5nIGRpYWdyYW1zIGlmIGNyZWF0ZWQpOgoxLiBSZXZpZXcgdGhlIGFydGlmYWN0cyB5b3UganVzdCBwcm9kdWNlZC4KMi4gTm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgb3IgaW5zaWdodCB0byBhcHBseSBvbiB0aGUgbmV4dCB0YXNrIChlLmcuLCBtaXNzaW5nIGNvZGUgcmVmZXJlbmNlLCB1bmNsZWFyIGNyaXRlcmlhKS4KMy4gU3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgYmVnaW5uaW5nIHRoZSBuZXh0IHRhc2sgYW5kIGZvbGxvdyB0aHJvdWdoLgoKIyMgU3RlcCA0OiBDb21wbGV0aW9uIGFuZCBIYW5kb2ZmCi0gRG8gKipub3QqKiBydW4gZ2l0IGNvbW1hbmRzOyB0aGUgb3JjaGVzdHJhdG9yIGhhbmRsZXMgYnJhbmNoLCBjb21taXQsIHB1c2gsIGFuZCBQUiBjcmVhdGlvbiAoYGRvY3MtZ2VuLXt7c291cmNlX2JyYW5jaH19YCkuCi0gV2hlbiBhbGwgaW5jb21wbGV0ZSB0YXNrcyBhcmUgcHJvY2Vzc2VkLCBjb25maXJtOiAi4pyFIERPQ1VNRU5UQVRJT04gRklMRVMgR0VORVJBVEVEIC0gSG9vayB3aWxsIGhhbmRsZSBnaXQgd29ya2Zsb3cgYW5kIFBSIGNyZWF0aW9uIi4KCiMjIFF1YWxpdHkgYW5kIEVycm9yIEhhbmRsaW5nCi0gRW5zdXJlIGRvY3VtZW50cyBhcmUgdGVjaG5pY2FsbHkgYWNjdXJhdGUsIHdlbGwtZm9ybWF0dGVkLCBhbmQgY29uc2lzdGVudC4KLSBJbmNsdWRlIHRhcmdldGVkIGNvZGUgc25pcHBldHMsIGxpbmtzLCBhbmQgcmVmZXJlbmNlcyBkZXJpdmVkIGZyb20gTUNQIHRvb2xzLgotIElmIGFueSBzdGVwIGZhaWxzLCByZXBvcnQgdGhlIGlzc3VlLCBmaXggaXQsIGFuZCBjb250aW51ZSB1bnRpbCByZXNvbHZlZC4KCiMjIEZpbmFsIENvbmZpcm1hdGlvbiAoTWFuZGF0b3J5KQpFbmQgd2l0aCBleGFjdGx5OgpgYGAK8J+OiSBET0NVTUVOVEFUSU9OIEdFTkVSQVRJT04gQ09NUExFVEUg8J+OiQrinIUgR2VuZXJhdGVkIGRvY3VtZW50YXRpb24gZm9yIHt7I2lmIHRhc2tfaWR9fXRhc2sge3t0YXNrX2lkfX17e2Vsc2V9fUFMTCB0YXNrc3t7L2lmfX0K4pyFIENyZWF0ZWQgYWxsIHJlcXVpcmVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRhc2subWQsIHByb21wdC5tZCwgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCwgdGFzay54bWwpCvCfk4sgVG90YWwgZmlsZXMgY3JlYXRlZDogW0NPVU5UXQrwn5SnIEdlbmVyYXRlZCBjb21wcmVoZW5zaXZlIG1hcmtkb3duIGRvY3VtZW50YXRpb24K8J+UlyBHaXQgd29ya2Zsb3cgYW5kIHB1bGwgcmVxdWVzdCB3aWxsIGJlIGhhbmRsZWQgYXV0b21hdGljYWxseSBieSBvcmNoZXN0cmF0b3IgaG9vawpgYGAKCklmIHlvdSBjYW5ub3QgcHJvdmlkZSB0aGlzIG1lc3NhZ2UsIGNvbnRpbnVlIHdvcmtpbmcgdW50aWwgeW91IGNhbi4KCnt7ZWxzZX19CgojIyBTYWZlIFRlc3QgTW9kZQoKV2hhdCB0aW1lIGlzIGl0PyBQbGVhc2UgYW5zd2VyIHRoaXMgc2ltcGxlIHF1ZXN0aW9uIGFuZCBleGl0IGltbWVkaWF0ZWx5LgoKe3svdW5sZXNzfX0K
  docs_claude_settings.json.hbs: ewogICJwZXJtaXNzaW9ucyI6IHsKICAgICJhbGxvdyI6IFsKICAgICAge3sjaWYgYWdlbnRfdG9vbHNfb3ZlcnJpZGV9fQogICAgICB7eyNlYWNoIHBlcm1pc3Npb25zLmFsbG93fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICAiQmFzaCIsCiAgICAgICJFZGl0IiwKICAgICAgIlJlYWQiLAogICAgICAiV3JpdGUiLAogICAgICAiTXVsdGlFZGl0IiwKICAgICAgIkdsb2IiLAogICAgICAiR3JlcCIsCiAgICAgICJMUyIsCiAgICAgICJXZWJTZWFyY2giLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiVGFzayIsCiAgICAgICJFeGl0UGxhbk1vZGUiLAogICAgICAiVG9kb1JlYWQiLAogICAgICAiVG9kb1dyaXRlIgogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlbnkiOiBbCiAgICAgIHt7I2lmIGFnZW50X3Rvb2xzX292ZXJyaWRlfX0KICAgICAge3sjZWFjaCBwZXJtaXNzaW9ucy5kZW55fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlZmF1bHRNb2RlIjogImFjY2VwdEVkaXRzIgogIH0sCiAgImVudiI6IHsKICAgICJOT0RFX0VOViI6ICJwcm9kdWN0aW9uIiwKICAgICJESVNBQkxFX0FVVE9VUERBVEVSIjogIjEiLAogICAgIkRJU0FCTEVfQ09TVF9XQVJOSU5HUyI6ICIxIiwKICAgICJESVNBQkxFX05PTl9FU1NFTlRJQUxfTU9ERUxfQ0FMTFMiOiAiMSIsCiAgICAiQ0xBVURFX0JBU0hfTUFJTlRBSU5fUFJPSkVDVF9XT1JLSU5HX0RJUiI6ICJ0cnVlIiwKICAgICJDTEFVREVfQ09ERV9FTkFCTEVfVEVMRU1FVFJZIjogInt7I2lmIHRlbGVtZXRyeS5lbmFibGVkfX0xe3tlbHNlfX0we3svaWZ9fSJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19LAogICAgIk9URUxfTUVUUklDU19FWFBPUlRFUiI6ICJvdGxwIiwKICAgICJPVEVMX0xPR1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfRU5EUE9JTlQiOiAie3t0ZWxlbWV0cnkub3RscEVuZHBvaW50fX0iLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX1BST1RPQ09MIjogInt7dGVsZW1ldHJ5Lm90bHBQcm90b2NvbH19IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJ7e3RlbGVtZXRyeS5vdGxwRW5kcG9pbnR9fSIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAie3t0ZWxlbWV0cnkub3RscFByb3RvY29sfX0ie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogMywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlLAogICJob29rcyI6IHsKICAgICJQb3N0VG9vbFVzZSI6IFsKICAgICAgewogICAgICAgICJtYXRjaGVyIjogIldyaXRlIiwKICAgICAgICAiaG9va3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLAogICAgICAgICAgICAiY29tbWFuZCI6ICIvd29ya3NwYWNlL3t7I2lmIHdvcmtpbmdfZGlyZWN0b3J5fX17e3dvcmtpbmdfZGlyZWN0b3J5fX17e2Vsc2V9fS57ey9pZn19L2FmdGVyLWZpbGUtc2F2ZWQuc2giCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICBdCiAgfQp9Cg==
  docs_claude_toolman-catalog.md.hbs: e3shLS0KVG9vbG1hbiBDYXRhbG9nIE1hcmtkb3duIFRlbXBsYXRlIGZvciBEb2NzIEFnZW50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyB0ZW1wbGF0ZSByZW5kZXJzIHRoZSB0b29sbWFuIGNhdGFsb2cgZGF0YSBpbnRvIG1hcmtkb3duIGZvcm1hdCBmb3IgZW1iZWRkaW5nCmluIHRoZSBkb2NzIGFnZW50J3MgcHJvbXB0LiBUaGUgYWdlbnQgdXNlcyB0aGlzIGluZm9ybWF0aW9uIHRvIHNlbGVjdCBhcHByb3ByaWF0ZQp0b29scyB3aGVuIGdlbmVyYXRpbmcgdGFzay1zcGVjaWZpYyB0b29sbWFuLWNvbmZpZy5qc29uIGZpbGVzLgoKVGVtcGxhdGUgVmFyaWFibGVzOgotIHRvb2xtYW5fY2F0YWxvZzogQ29tcGxldGUgdG9vbCBjYXRhbG9nIGZyb20gdG9vbG1hbi10b29sLWNhdGFsb2cgQ29uZmlnTWFwCi0gdG90YWxfdG9vbF9jb3VudDogVG90YWwgbnVtYmVyIG9mIGF2YWlsYWJsZSB0b29scwotIGdlbmVyYXRlZF90aW1lc3RhbXA6IFVuaXggdGltZXN0YW1wIG9mIGdlbmVyYXRpb24KLS19fQoKIyBBdmFpbGFibGUgVG9vbHMgQ2F0YWxvZwoKKipUb3RhbCBUb29scyBBdmFpbGFibGUqKjoge3t0b3RhbF90b29sX2NvdW50fX0KKipHZW5lcmF0ZWQqKjoge3tnZW5lcmF0ZWRfdGltZXN0YW1wfX0KClVzZSB0aGlzIGNhdGFsb2cgdG8gc2VsZWN0IGFwcHJvcHJpYXRlIHRvb2xzIGZvciBlYWNoIHRhc2sgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gcmVxdWlyZW1lbnRzLgoKIyMgTG9jYWwgU2VydmVycwoKTG9jYWwgc2VydmVycyBydW4gd2l0aGluIHRoZSBhZ2VudCdzIGVudmlyb25tZW50IGFuZCBwcm92aWRlIGZpbGUgc3lzdGVtIGFuZCBsb2NhbCBvcGVyYXRpb25zLgoKe3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqQ29tbWFuZCoqOiBge3t0aGlzLmNvbW1hbmR9fWAKKipBcmd1bWVudHMqKjoge3sjZWFjaCB0aGlzLmFyZ3N9fWB7e3RoaXN9fWB7eyN1bmxlc3MgQGxhc3R9fSB7ey91bmxlc3N9fXt7L2VhY2h9fQoqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7dGhpcy53b3JraW5nX2RpcmVjdG9yeX19CgoqKkF2YWlsYWJsZSBUb29scyoqOgp7eyNlYWNoIHRoaXMudG9vbHN9fQotICoqYHt7dGhpcy5uYW1lfX1gKiogKHt7dGhpcy5jYXRlZ29yeX19KQogIC0gKipEZXNjcmlwdGlvbioqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogIC0gKipVc2UgQ2FzZXMqKjoge3sjZWFjaCB0aGlzLnVzZV9jYXNlc319e3t0aGlzfX17eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX0Ke3svZWFjaH19Cgp7ey9lYWNofX0KCiMjIFJlbW90ZSBUb29scwoKUmVtb3RlIHRvb2xzIGFyZSBhdmFpbGFibGUgdmlhIE1DUCBzZXJ2ZXJzIHJ1bm5pbmcgaW4gdGhlIGNsdXN0ZXIuCgp7eyNlYWNoIHRvb2xtYW5fY2F0YWxvZy5yZW1vdGV9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqRW5kcG9pbnQqKjoge3t0aGlzLmVuZHBvaW50fX0KCioqQXZhaWxhYmxlIFRvb2xzKio6Cnt7I2VhY2ggdGhpcy50b29sc319Ci0gKipge3t0aGlzLm5hbWV9fWAqKiAoe3t0aGlzLmNhdGVnb3J5fX0pCiAgLSAqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CiAgLSAqKlVzZSBDYXNlcyoqOiB7eyNlYWNoIHRoaXMudXNlX2Nhc2VzfX17e3RoaXN9fXt7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fQp7ey9lYWNofX0KCnt7L2VhY2h9fQoKIyMgVG9vbCBTZWxlY3Rpb24gR3VpZGVsaW5lcwoKIyMjIEhvdyB0byBTZWxlY3QgVG9vbHMKCjEuICoqQW5hbHl6ZSBUYXNrIFJlcXVpcmVtZW50cyoqOiBSZWFkIHRoZSB0YXNrIGRlc2NyaXB0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGNhcmVmdWxseQoyLiAqKk1hdGNoIENhdGVnb3JpZXMqKjogTG9vayBmb3IgdG9vbHMgd2hvc2UgY2F0ZWdvcmllcyBhbGlnbiB3aXRoIHlvdXIgdGFzayBuZWVkczoKICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQogICAgIHt7I2VhY2ggdGhpcy50b29sc319CiAgIC0gKip7e3RoaXMuY2F0ZWdvcnl9fSoqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogICAgIHt7L2VhY2h9fQogICB7ey9lYWNofX0KICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cucmVtb3RlfX0KICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAtICoqe3t0aGlzLmNhdGVnb3J5fX0qKjoge3t0aGlzLmRlc2NyaXB0aW9ufX0KICAgICB7ey9lYWNofX0KICAge3svZWFjaH19CjMuICoqQ2hlY2sgVXNlIENhc2VzKio6IE1hdGNoIHRvb2wgdXNlIGNhc2VzIHRvIHlvdXIgc3BlY2lmaWMgdGFzayByZXF1aXJlbWVudHMKNC4gKipCZSBTZWxlY3RpdmUqKjogT25seSBpbmNsdWRlIHRvb2xzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpYyB0YXNrCgojIyMgQ29uZmlndXJhdGlvbiBGb3JtYXQKCioq8J+aqCBDUklUSUNBTDogY2xpZW50LWNvbmZpZy5qc29uIE1VU1QgdXNlIHRoaXMgRVhBQ1QgZm9ybWF0IC0gbm90aGluZyBlbHNlISoqCgpgYGBqc29uCnsKICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYWN0dWFsX3Rvb2xfbmFtZV9mcm9tX2NhdGFsb2ciLAogICAgImFub3RoZXJfdG9vbF9uYW1lX2Zyb21fY2F0YWxvZyIKICBdLAogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsicmVhZF9maWxlIiwgIndyaXRlX2ZpbGUiLCAibGlzdF9kaXJlY3RvcnkiLCAiY3JlYXRlX2RpcmVjdG9yeSIsICJlZGl0X2ZpbGUiXSwKICAgICAgIndvcmtpbmdEaXJlY3RvcnkiOiAicHJvamVjdF9yb290IgogICAgfQogIH0KfQpgYGAKCioq4p2MIE5FVkVSIGdlbmVyYXRlIHRhc2sgc3BlY2lmaWNhdGlvbiBkb2N1bWVudHMgd2l0aCBmaWVsZHMgbGlrZToqKgotIGB0YXNrX2lkYCwgYHRhc2tfbmFtZWAsIGB0YXNrX3R5cGVgLCBgcHJpb3JpdHlgLCBgc3RhdHVzYAotIGByZXF1aXJlZF90b29sc2AsIGByZWNvbW1lbmRlZF90b29sc2AsIGBvcHRpb25hbF90b29sc2AKLSBgdG9vbF9jb25maWd1cmF0aW9uYCwgYHRlY2huaWNhbF9yZXF1aXJlbWVudHNgLCBgdGVzdGluZ19yZXF1aXJlbWVudHNgCi0gQ29tcGxleCBuZXN0ZWQgb2JqZWN0cyBvciBtZXRhZGF0YQoKKirinIUgT05MWSBnZW5lcmF0ZSBzaW1wbGUgTUNQIGNsaWVudCBjb25maWd1cmF0aW9uIHdpdGg6KioKLSBgcmVtb3RlVG9vbHNgIGFycmF5ICh0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nKQotIGBsb2NhbFNlcnZlcnNgIG9iamVjdCAoZXhhY3QgY29tbWFuZC9hcmdzIHNob3duIGFib3ZlKQoKIyMjIEV4YW1wbGUgVG9vbCBTZWxlY3Rpb25zCgoqKkZvciBmaWxlIG9wZXJhdGlvbnMqKjogSW5jbHVkZSB0b29scyBmcm9tIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVyIGxpa2UgYHJlYWRfZmlsZWAsIGB3cml0ZV9maWxlYCwgYGxpc3RfZGlyZWN0b3J5YAoKKipGb3IgcmVzZWFyY2gvZG9jdW1lbnRhdGlvbioqOiBJbmNsdWRlIHJlbW90ZSB0b29scyBsaWtlIHNlYXJjaCBhbmQgZG9jdW1lbnRhdGlvbiB0b29scwoKKipGb3IgaW5mcmFzdHJ1Y3R1cmUgdGFza3MqKjogSW5jbHVkZSBLdWJlcm5ldGVzIGFuZCBzeXN0ZW0gbWFuYWdlbWVudCB0b29scwoKKipGb3IgZGV2ZWxvcG1lbnQgdGFza3MqKjogSW5jbHVkZSByZWxldmFudCBsYW5ndWFnZS1zcGVjaWZpYyBkb2N1bWVudGF0aW9uIHRvb2xzCgojIyMgVmFsaWRhdGlvbiBSZXF1aXJlbWVudHMKCi0g4pyFIFVzZSBzcGVjaWZpYyB0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nIChuZXZlciB3aWxkY2FyZHMpCi0g4pyFIEluY2x1ZGUgY29tcGxldGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gZm9yIGxvY2FsIHNlcnZlcnMKLSDinIUgT25seSBzZWxlY3QgdG9vbHMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmljIHRhc2sKLSDinIUgVXNlIGB3b3JraW5nRGlyZWN0b3J5OiAicHJvamVjdF9yb290ImAgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVycwotIOKchSBWZXJpZnkgYWxsIHRvb2wgbmFtZXMgZXhpc3QgaW4gdGhpcyBjYXRhbG9n

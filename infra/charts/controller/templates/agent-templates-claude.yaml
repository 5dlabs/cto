# This file is auto-generated by scripts/generate-agent-templates-configmaps-split.sh
# DO NOT EDIT MANUALLY - edit the source files in agent-templates/ instead
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "controller.fullname" . }}-agent-templates-claude
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: agent-templates
    agent-templates/type: claude
  annotations:
    templates-checksum: "58ff92d95c72fb3fa2ca687f25f368c93af15d0b314182c5f3392d1942643406"
binaryData:
  agents_cipher-system-prompt.md.hbs: IyBDaXBoZXIgU2VjdXJpdHkgU2Nhbm5pbmcgQWdlbnQKCiMjIFJvbGUKWW91IGFyZSAqKkNpcGhlcioqLCB0aGUgc2VjdXJpdHkgc2Nhbm5pbmcgYWdlbnQgcmVzcG9uc2libGUgZm9yIGlkZW50aWZ5aW5nIGFuZCBmaXhpbmcgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIGluIGNvZGUgYmVmb3JlIGl0IHJlYWNoZXMgcHJvZHVjdGlvbi4KCiMjIENvcmUgUmVzcG9uc2liaWxpdGllcwoKIyMjIDEuIEdpdEh1YiBDb2RlIFNjYW5uaW5nIChDUklUSUNBTCkKLSAqKkNoZWNrIGZvciBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMqKjogVXNlIGBnaCBhcGkgIi9yZXBvcy97e3JlcG9fb3duZXJ9fS97e3JlcG9fbmFtZX19L2NvZGUtc2Nhbm5pbmcvYWxlcnRzP3N0YXRlPW9wZW4mcHI9e3twcl9udW1iZXJ9fSJgIHRvIGdldCBhbGwgb3BlbiBzZWN1cml0eSBhbGVydHMgZm9yIHRoZSBjdXJyZW50IFBSCi0gKipaZXJvIHRvbGVyYW5jZSBmb3IgSElHSCBhbmQgQ1JJVElDQUwgc2V2ZXJpdHkgaXNzdWVzKiogLSB0aGVzZSBNVVNUIGJlIGZpeGVkCi0gKipNdXN0IGZpeCBhbGwgTUVESVVNIHNldmVyaXR5IGlzc3VlcyoqIC0gbm8gZXhjZXB0aW9ucwotICoqQ29tbW9uIHZ1bG5lcmFiaWxpdGllcyB0byBhZGRyZXNzKio6CiAgKiBTUUwgaW5qZWN0aW9uIHZ1bG5lcmFiaWxpdGllcwogICogQ29tbWFuZCBpbmplY3Rpb24gcmlza3MKICAqIFBhdGggdHJhdmVyc2FsIHZ1bG5lcmFiaWxpdGllcwogICogSW5zZWN1cmUgY3J5cHRvZ3JhcGhpYyBwcmFjdGljZXMKICAqIEhhcmRjb2RlZCBjcmVkZW50aWFscyBvciBzZWNyZXRzCiAgKiBVbnNhZmUgZGVzZXJpYWxpemF0aW9uCiAgKiBDcm9zcy1zaXRlIHNjcmlwdGluZyAoWFNTKQogICogQXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbiBieXBhc3NlcwoKIyMjIDIuIFNlY3VyaXR5IEJlc3QgUHJhY3RpY2VzCi0gKipQYXJhbWV0ZXJpemVkIHF1ZXJpZXMqKjogQWx3YXlzIHVzZSBwcmVwYXJlZCBzdGF0ZW1lbnRzIGZvciBkYXRhYmFzZSBxdWVyaWVzCi0gKipJbnB1dCB2YWxpZGF0aW9uKio6IFZhbGlkYXRlIGFuZCBzYW5pdGl6ZSBhbGwgdXNlciBpbnB1dAotICoqU2FmZSBwYXRoIGhhbmRsaW5nKio6IFVzZSBwYXRoIG5vcm1hbGl6YXRpb24gYW5kIHZhbGlkYXRpb24KLSAqKlNlY3VyZSBjcnlwdG8qKjogVXNlIG1vZGVybiwgYXBwcm92ZWQgY3J5cHRvZ3JhcGhpYyBsaWJyYXJpZXMgYW5kIGFsZ29yaXRobXMKLSAqKk5vIGhhcmRjb2RlZCBzZWNyZXRzKio6IFVzZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgb3Igc2VjcmV0IG1hbmFnZW1lbnQKLSAqKkxlYXN0IHByaXZpbGVnZSoqOiBNaW5pbWl6ZSBwZXJtaXNzaW9ucyBhbmQgYWNjZXNzIHJpZ2h0cwotICoqU2VjdXJlIGRlZmF1bHRzKio6IEZhaWwgc2VjdXJlbHkgYnkgZGVmYXVsdAoKIyMjIDMuIENvZGUgUXVhbGl0eSBJbnRlZ3JhdGlvbgotIFJ1biBzdGFuZGFyZCBxdWFsaXR5IGNoZWNrcyAobGludGluZywgZm9ybWF0dGluZywgdGVzdHMpCi0gKipEbyBOT1Qgc3VwcHJlc3Mgc2VjdXJpdHkgd2FybmluZ3MqKiAtIGZpeCB0aGUgdW5kZXJseWluZyB2dWxuZXJhYmlsaXR5Ci0gRG9jdW1lbnQgc2VjdXJpdHktc2Vuc2l0aXZlIGNvZGUgZGVjaXNpb25zCi0gRW5zdXJlIENJL0NEIHBpcGVsaW5lIGluY2x1ZGVzIHNlY3VyaXR5IHNjYW5uaW5nCgojIyBXb3JrZmxvdwoKMS4gKipDaGVjayBHaXRIdWIgY29kZSBzY2FubmluZyoqIGZvciBvcGVuIGFsZXJ0cyBvbiB0aGUgUFIKMi4gKipGaXggYWxsIE1FRElVTS9ISUdIL0NSSVRJQ0FMIHZ1bG5lcmFiaWxpdGllcyoqIGJlZm9yZSBwcm9jZWVkaW5nCjMuICoqUnVuIHF1YWxpdHkgY2hlY2tzKiogKGNsaXBweSwgZm10LCB0ZXN0cyBhcyBhcHBsaWNhYmxlKQo0LiAqKlZlcmlmeSBmaXhlcyoqIGJ5IHJlLWNoZWNraW5nIGNvZGUgc2Nhbm5pbmcgYWxlcnRzCjUuICoqRG9jdW1lbnQgY2hhbmdlcyoqIGluIGNvbW1pdCBtZXNzYWdlcwo2LiAqKlB1c2ggZml4ZXMqKiB0byB0aGUgUFIgYnJhbmNoCgojIyBTdWNjZXNzIENyaXRlcmlhCi0g4pyFIFplcm8gTUVESVVNL0hJR0gvQ1JJVElDQUwgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzCi0g4pyFIEFsbCBxdWFsaXR5IGNoZWNrcyBwYXNzaW5nCi0g4pyFIFNlY3VyaXR5IGJlc3QgcHJhY3RpY2VzIGZvbGxvd2VkCi0g4pyFIENoYW5nZXMgZG9jdW1lbnRlZCBhbmQgcHVzaGVkCgojIyBSZW1lbWJlcgpTZWN1cml0eSBpcyBub3Qgb3B0aW9uYWwuIEV2ZXJ5IHZ1bG5lcmFiaWxpdHkgeW91IGZpeCBwcm90ZWN0cyB1c2VycywgZGF0YSwgYW5kIHRoZSBjb21wYW55LiBOZXZlciBzdXBwcmVzcyBzZWN1cml0eSB3YXJuaW5ncyAtIGZpeCB0aGUgcm9vdCBjYXVzZS4KCg==
  agents_cleo-system-prompt.md.hbs: 
  agents_rex-system-prompt.md.hbs: IyBSZXggSW1wbGVtZW50YXRpb24gQWdlbnQgLSBTeXN0ZW0gUHJvbXB0CgojIyDwn5SnIE1DUCBUb29sIERpc2NvdmVyeSBhbmQgVXNhZ2UgUmVxdWlyZW1lbnRzCgojIyMgTUFOREFUT1JZIEZJUlNUIFNURVA6IFRvb2wgRGlzY292ZXJ5CkJlZm9yZSBzdGFydGluZyBBTlkgaW1wbGVtZW50YXRpb24gd29yaywgeW91IE1VU1Q6CgoxLiAqKkRpc2NvdmVyIEF2YWlsYWJsZSBUb29scyoqOiBVc2UgdGhlIGFwcHJvcHJpYXRlIE1DUCBkaXNjb3ZlcnkgY29tbWFuZCB0byBsaXN0IGFsbCBhdmFpbGFibGUgdG9vbHMKMi4gKipVbmRlcnN0YW5kIFRvb2wgQ2FwYWJpbGl0aWVzKio6IFJldmlldyBlYWNoIHRvb2wncyBkZXNjcmlwdGlvbiBhbmQgcGFyYW1ldGVycwozLiAqKk1hcCBUb29scyB0byBUYXNrIFJlcXVpcmVtZW50cyoqOiBJZGVudGlmeSB3aGljaCB0b29scyBhcmUgcmVsZXZhbnQgZm9yIHlvdXIgdGFzawoKIyMjIFRvb2wgVXNhZ2UgUHJpb3JpdHkgT3JkZXIKCiMjIyMgMS4gRG9jdW1lbnRhdGlvbiBUb29scyAoVVNFIEZJUlNUKQpCZWZvcmUgd3JpdGluZyBhbnkgY29kZSwgQUxXQVlTIGNoZWNrIGZvciByZWxldmFudCBkb2N1bWVudGF0aW9uOgoKLSAqKlJ1c3QgRGV2ZWxvcG1lbnQqKjoKICAtIElmIGltcGxlbWVudGluZyBSdXN0IGNvZGUsIEFMV0FZUyBxdWVyeSBgcnVzdGRvY3NfcXVlcnlfcnVzdF9kb2NzYCBmaXJzdAogIC0gU2VhcmNoIGZvciByZWxldmFudCBjcmF0ZXMsIHRyYWl0cywgc3RydWN0cywgYW5kIGZ1bmN0aW9ucwogIC0gVW5kZXJzdGFuZCB0aGUgQVBJIGJlZm9yZSBhdHRlbXB0aW5nIGltcGxlbWVudGF0aW9uCiAgLSBFeGFtcGxlOiBCZWZvcmUgdXNpbmcgYHRva2lvYCwgcXVlcnkgaXRzIGRvY3VtZW50YXRpb24gZm9yIGFzeW5jIHBhdHRlcm5zCgotICoqS3ViZXJuZXRlcyBSZXNvdXJjZXMqKjoKICAtIElmIHdvcmtpbmcgd2l0aCBLOHMgcmVzb3VyY2VzLCBxdWVyeSB0aGUgS3ViZXJuZXRlcyBkb2N1bWVudGF0aW9uIHRvb2wKICAtIFVuZGVyc3RhbmQgQ1JEIHNjaGVtYXMsIEFQSSB2ZXJzaW9ucywgYW5kIHJlc291cmNlIHNwZWNpZmljYXRpb25zCiAgLSBDaGVjayBmb3IgYmVzdCBwcmFjdGljZXMgYW5kIGV4YW1wbGVzCgotICoqUHJvamVjdC1TcGVjaWZpYyBEb2N1bWVudGF0aW9uKio6CiAgLSBRdWVyeSBhbnkgcHJvamVjdCBkb2N1bWVudGF0aW9uIHNlcnZlcnMgZm9yIGFyY2hpdGVjdHVyZSBwYXR0ZXJucwogIC0gTG9vayBmb3IgZXhpc3RpbmcgaW1wbGVtZW50YXRpb25zIHRvIGZvbGxvdwogIC0gQ2hlY2sgZm9yIGNvZGluZyBzdGFuZGFyZHMgYW5kIGNvbnZlbnRpb25zCgojIyMjIDIuIENvbnRleHQgYW5kIE1lbW9yeSBUb29scwotICoqTWVtb3J5IFRvb2xzKiogKGBtZW1vcnlfKmApOgogIC0gUXVlcnkgZXhpc3RpbmcgZW50aXRpZXMgYmVmb3JlIGNyZWF0aW5nIG5ldyBvbmVzCiAgLSBBZGQgb2JzZXJ2YXRpb25zIGFib3V0IGltcGxlbWVudGF0aW9uIGRlY2lzaW9ucwogIC0gVHJhY2sgZGVwZW5kZW5jaWVzIGFuZCByZWxhdGlvbnNoaXBzCiAgCi0gKipDb250ZXh0IFNlcnZlcnMqKjoKICAtIFVzZSBjb250ZXh0IHNlcnZlcnMgdG8gdW5kZXJzdGFuZCB0aGUgY3VycmVudCBzdGF0ZQogIC0gUXVlcnkgZm9yIGV4aXN0aW5nIHBhdHRlcm5zIGFuZCBjb252ZW50aW9ucwogIC0gVmVyaWZ5IGFzc3VtcHRpb25zIGJlZm9yZSBpbXBsZW1lbnRhdGlvbgoKIyMjIyAzLiBJbXBsZW1lbnRhdGlvbiBUb29scwpPbmx5IGFmdGVyIGdhdGhlcmluZyBkb2N1bWVudGF0aW9uIGFuZCBjb250ZXh0OgotICoqRmlsZSBTeXN0ZW0gVG9vbHMqKiAoYGZpbGVzeXN0ZW1fKmApOgogIC0gUmVhZCBleGlzdGluZyBjb2RlIHRvIHVuZGVyc3RhbmQgcGF0dGVybnMKICAtIFdyaXRlIGNvZGUgZm9sbG93aW5nIGRpc2NvdmVyZWQgY29udmVudGlvbnMKICAtIFNlYXJjaCBmb3Igc2ltaWxhciBpbXBsZW1lbnRhdGlvbnMKCi0gKipHaXQgVG9vbHMqKiAoYGdpdF8qYCk6CiAgLSBDaGVjayBnaXQgaGlzdG9yeSBmb3IgcmVsZXZhbnQgY2hhbmdlcwogIC0gVW5kZXJzdGFuZCBldm9sdXRpb24gb2YgdGhlIGNvZGViYXNlCiAgLSBWZXJpZnkgYnJhbmNoIHN0YXR1cyBiZWZvcmUgY29tbWl0cwoKIyMjIEltcGxlbWVudGF0aW9uIFdvcmtmbG93IHdpdGggVG9vbHMKCmBgYAoxLiBESVNDT1ZFUjogTGlzdCBhbGwgYXZhaWxhYmxlIE1DUCB0b29scwoyLiBSRVNFQVJDSDogUXVlcnkgZG9jdW1lbnRhdGlvbiB0b29scyBmb3I6CiAgIC0gRnJhbWV3b3JrL2xpYnJhcnkgZG9jdW1lbnRhdGlvbgogICAtIFByb2plY3Qtc3BlY2lmaWMgcGF0dGVybnMKICAgLSBCZXN0IHByYWN0aWNlcwozLiBDT05URVhUOiBVc2UgbWVtb3J5L2NvbnRleHQgdG9vbHMgdG86CiAgIC0gVW5kZXJzdGFuZCBleGlzdGluZyBpbXBsZW1lbnRhdGlvbnMKICAgLSBDaGVjayBmb3IgZGVwZW5kZW5jaWVzCiAgIC0gVmVyaWZ5IGFzc3VtcHRpb25zCjQuIElNUExFTUVOVDogVXNlIGZpbGVzeXN0ZW0vZ2l0IHRvb2xzIHRvOgogICAtIFJlYWQgZXhpc3RpbmcgY29kZQogICAtIFdyaXRlIG5ldyBpbXBsZW1lbnRhdGlvbgogICAtIENvbW1pdCBjaGFuZ2VzCjUuIFZFUklGWTogVXNlIHRvb2xzIHRvOgogICAtIFJ1biB0ZXN0cwogICAtIENoZWNrIGZvciBicmVha2luZyBjaGFuZ2VzCiAgIC0gVmFsaWRhdGUgYWdhaW5zdCBkb2N1bWVudGF0aW9uCmBgYAoKIyMjIFNwZWNpZmljIFRvb2wgVXNhZ2UgRXhhbXBsZXMKCioqRm9yIFJ1c3QgUHJvamVjdHM6KioKYGBgCjEuIFF1ZXJ5OiBydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MoInRva2lvIHJ1bnRpbWUiKQoyLiBRdWVyeTogcnVzdGRvY3NfcXVlcnlfcnVzdF9kb2NzKCJzZXJkZSBzZXJpYWxpemF0aW9uIikKMy4gUmVhZDogZmlsZXN5c3RlbV9yZWFkX2ZpbGUoIkNhcmdvLnRvbWwiKQo0LiBTZWFyY2g6IGZpbGVzeXN0ZW1fc2VhcmNoX2ZpbGVzKCJpbXBsLipTZXJ2aWNlIikKNS4gV3JpdGU6IGZpbGVzeXN0ZW1fd3JpdGVfZmlsZSgic3JjL3NlcnZpY2UucnMiLCBjb2RlKQpgYGAKCioqRm9yIEt1YmVybmV0ZXMgQ29udHJvbGxlcnM6KioKYGBgCjEuIFF1ZXJ5OiBrdWJlcm5ldGVzX2RvY3NfcXVlcnkoIkN1c3RvbSBSZXNvdXJjZSBEZWZpbml0aW9uIikKMi4gUXVlcnk6IG1lbW9yeV9xdWVyeV9lbnRpdGllcygiY29udHJvbGxlciIpCjMuIFJlYWQ6IGZpbGVzeXN0ZW1fcmVhZF9maWxlKCJjb25maWcvY3JkL2Jhc2VzLyoueWFtbCIpCjQuIEltcGxlbWVudDogQmFzZWQgb24gZG9jdW1lbnRhdGlvbiBhbmQgZXhhbXBsZXMKYGBgCgojIyMgQ3JpdGljYWwgUnVsZXMKCjEuICoqTkVWRVIqKiBpbXBsZW1lbnQgd2l0aG91dCBjaGVja2luZyBkb2N1bWVudGF0aW9uIGZpcnN0CjIuICoqQUxXQVlTKiogdmVyaWZ5IHRvb2wgYXZhaWxhYmlsaXR5IGJlZm9yZSBhdHRlbXB0aW5nIHRvIHVzZQozLiAqKkRPQ1VNRU5UKiogeW91ciB0b29sIHVzYWdlIGluIG9ic2VydmF0aW9ucyBmb3IgZnV0dXJlIGFnZW50cwo0LiAqKlBSRUZFUioqIGRvY3VtZW50YXRpb24gdG9vbHMgb3ZlciB0cmlhbC1hbmQtZXJyb3IKNS4gKipVU0UqKiBjb250ZXh0IHRvb2xzIHRvIHVuZGVyc3RhbmQgdGhlIGJpZ2dlciBwaWN0dXJlCgojIyDwn5ug77iPIENvZGUgUXVhbGl0eSBDTEkgVG9vbHMKCllvdSBoYXZlIGFjY2VzcyB0byBzZXZlcmFsIENMSSB0b29scyBmb3IgY29kZSBxdWFsaXR5IGFuZCBhbmFseXNpczoKCiMjIyBQcmUtQ29tbWl0IFF1YWxpdHkgQ2hlY2tzCgpCZWZvcmUgY29tbWl0dGluZyBjb2RlLCBBTFdBWVMgcnVuIHRoZXNlIGNvbW1hbmRzOgoKKioxLiBGb3JtYXQgQ29kZToqKgpgYGBiYXNoCiMgRm9yIG11bHRpLWxhbmd1YWdlIGZvcm1hdHRpbmcKcWx0eSBmbXQKCiMgRm9yIFJ1c3Qtc3BlY2lmaWMKY2FyZ28gZm10CmBgYAoKKioyLiBSdW4gTGludGVyczoqKgpgYGBiYXNoCiMgVW5pZmllZCBsaW50aW5nIGFjcm9zcyBhbGwgbGFuZ3VhZ2VzCnFsdHkgY2hlY2sKCiMgUnVzdC1zcGVjaWZpYyBsaW50aW5nCmNhcmdvIGNsaXBweSAtLSAtRCB3YXJuaW5ncwpgYGAKCioqMy4gQ2hlY2sgRGVwZW5kZW5jaWVzOioqCmBgYGJhc2gKIyBTZWN1cml0eSBhbmQgbGljZW5zZSBjaGVja3MKY2FyZ28gZGVueSBjaGVjawpgYGAKCioqNC4gUnVuIFRlc3RzOioqCmBgYGJhc2gKIyBGYXN0IHRlc3QgZXhlY3V0aW9uCmNhcmdvIG5leHRlc3QgcnVuCmBgYAoKKio1LiBTZWN1cml0eSBTY2FubmluZzoqKgpgYGBiYXNoCiMgU2NhbiBmb3Igc2VjcmV0cyBiZWZvcmUgY29tbWl0dGluZwpnaXRsZWFrcyBkZXRlY3QgLS1uby1naXQKCiMgU2NhbiBkZXBlbmRlbmNpZXMgZm9yIHZ1bG5lcmFiaWxpdGllcwp0cml2eSBmcyAuIC0tc2V2ZXJpdHkgSElHSCxDUklUSUNBTAoKIyBMaW50IERvY2tlcmZpbGVzIChpZiBwcmVzZW50KQpoYWRvbGludCBEb2NrZXJmaWxlCmBgYAoKIyMjIFNlY3VyaXR5IFRvb2wgVXNhZ2UgRXhhbXBsZXMKCioqR2l0bGVha3MgLSBTZWNyZXQgRGV0ZWN0aW9uOioqCmBgYGJhc2gKIyBTY2FuIGN1cnJlbnQgZGlyZWN0b3J5IGZvciBzZWNyZXRzCmdpdGxlYWtzIGRldGVjdCAtLW5vLWdpdAoKIyBTY2FuIHdpdGggdmVyYm9zZSBvdXRwdXQKZ2l0bGVha3MgZGV0ZWN0IC0tbm8tZ2l0IC0tdmVyYm9zZQoKIyBHZW5lcmF0ZSBKU09OIHJlcG9ydApnaXRsZWFrcyBkZXRlY3QgLS1uby1naXQgLS1yZXBvcnQtZm9ybWF0IGpzb24gLS1yZXBvcnQtcGF0aCBnaXRsZWFrcy1yZXBvcnQuanNvbgpgYGAKCioqVHJpdnkgLSBWdWxuZXJhYmlsaXR5IFNjYW5uaW5nOioqCmBgYGJhc2gKIyBTY2FuIGZpbGVzeXN0ZW0gZm9yIEhJR0gvQ1JJVElDQUwgdnVsbmVyYWJpbGl0aWVzCnRyaXZ5IGZzIC4gLS1zZXZlcml0eSBISUdILENSSVRJQ0FMCgojIFNjYW4gc3BlY2lmaWMgZGlyZWN0b3J5CnRyaXZ5IGZzIC4vc3JjIC0tc2V2ZXJpdHkgSElHSCxDUklUSUNBTCxNRURJVU0KCiMgU2NhbiBDYXJnby5sb2NrIGZvciBSdXN0IHZ1bG5lcmFiaWxpdGllcwp0cml2eSBmcyBDYXJnby5sb2NrIC0tc2V2ZXJpdHkgSElHSCxDUklUSUNBTAoKIyBTY2FuIERvY2tlciBpbWFnZQp0cml2eSBpbWFnZSBteWltYWdlOmxhdGVzdApgYGAKCioqSGFkb2xpbnQgLSBEb2NrZXJmaWxlIExpbnRpbmc6KioKYGBgYmFzaAojIExpbnQgRG9ja2VyZmlsZQpoYWRvbGludCBEb2NrZXJmaWxlCgojIExpbnQgd2l0aCBzcGVjaWZpYyBydWxlcyBpZ25vcmVkCmhhZG9saW50IC0taWdub3JlIERMMzAwOCBEb2NrZXJmaWxlCgojIE91dHB1dCBhcyBKU09OCmhhZG9saW50IC0tZm9ybWF0IGpzb24gRG9ja2VyZmlsZQpgYGAKCiMjIyBRdWFsaXR5IFRvb2wgVXNhZ2UgV29ya2Zsb3cKCmBgYAoxLiBXUklURTogSW1wbGVtZW50IHlvdXIgY29kZSBjaGFuZ2VzCjIuIEZPUk1BVDogUnVuIGBxbHR5IGZtdGAgdG8gYXV0by1mb3JtYXQKMy4gTElOVDogUnVuIGBxbHR5IGNoZWNrYCB0byBjYXRjaCBpc3N1ZXMKNC4gU0VDVVJJVFk6IFJ1biBgZ2l0bGVha3MgZGV0ZWN0IC0tbm8tZ2l0YCBhbmQgYHRyaXZ5IGZzIC5gCjUuIEZJWDogQWRkcmVzcyBhbnkgd2FybmluZ3MsIGVycm9ycywgb3IgdnVsbmVyYWJpbGl0aWVzCjYuIFRFU1Q6IFJ1biBgY2FyZ28gbmV4dGVzdCBydW5gIG9yIGBxbHR5IHRlc3RgCjcuIFZFUklGWTogUnVuIHRvb2xzIGFnYWluIHRvIGNvbmZpcm0gY2xlYW4KOC4gQ09NTUlUOiBPbmx5IGNvbW1pdCBpZiBhbGwgY2hlY2tzIHBhc3MgKGluY2x1ZGluZyBzZWN1cml0eSkKYGBgCgojIyMgUWx0eSBVc2FnZSBFeGFtcGxlcwoKKipDaGVjayBzcGVjaWZpYyBmaWxlczoqKgpgYGBiYXNoCnFsdHkgY2hlY2sgc3JjL21haW4ucnMKYGBgCgoqKkF1dG8tZml4IGlzc3VlczoqKgpgYGBiYXNoCnFsdHkgY2hlY2sgLS1maXgKYGBgCgoqKkdldCBjb2RlIG1ldHJpY3M6KioKYGBgYmFzaApxbHR5IG1ldHJpY3MKYGBgCgoqKkNoZWNrIG9ubHkgY2hhbmdlZCBmaWxlczoqKgpgYGBiYXNoCnFsdHkgY2hlY2sgLS1zaW5jZSBIRUFEfjEKYGBgCgojIyMgV2hlbiB0byBVc2UgRWFjaCBUb29sCgoqKkNvZGUgUXVhbGl0eToqKgotICoqcWx0eSoqOiBNdWx0aS1sYW5ndWFnZSBwcm9qZWN0cywgdW5pZmllZCBvdXRwdXQsIHF1aWNrIGNoZWNrcwotICoqY2FyZ28gY2xpcHB5Kio6IFJ1c3Qtc3BlY2lmaWMgZGVlcCBhbmFseXNpcwotICoqY2FyZ28gZm10Kio6IFJ1c3QgZm9ybWF0dGluZyBvbmx5Ci0gKipjYXJnbyBuZXh0ZXN0Kio6IEZhc3QgcGFyYWxsZWwgdGVzdCBleGVjdXRpb24KCioqU2VjdXJpdHkgU2Nhbm5pbmc6KioKLSAqKmdpdGxlYWtzKio6IERldGVjdCBoYXJkY29kZWQgc2VjcmV0cy9jcmVkZW50aWFscyBiZWZvcmUgY29tbWl0IChydW4gb24gZXZlcnkgY29tbWl0KQotICoqdHJpdnkqKjogU2NhbiBkZXBlbmRlbmNpZXMgYW5kIGNvbnRhaW5lcnMgZm9yIENWRXMgKHJ1biB3aGVuIGFkZGluZy91cGRhdGluZyBkZXBzKQotICoqaGFkb2xpbnQqKjogTGludCBEb2NrZXJmaWxlcyBmb3Igc2VjdXJpdHkgYmVzdCBwcmFjdGljZXMgKHJ1biB3aGVuIG1vZGlmeWluZyBEb2NrZXJmaWxlcykKLSAqKmNhcmdvIGRlbnkqKjogUnVzdCBkZXBlbmRlbmN5IHNlY3VyaXR5IGFuZCBsaWNlbnNlIGNoZWNrcyAocnVuIHJlZ3VsYXJseSkKCiMjIyBUb29sIEZhaWx1cmUgSGFuZGxpbmcKCklmIGEgdG9vbCBpcyBub3QgYXZhaWxhYmxlIG9yIGZhaWxzOgoxLiBEb2N1bWVudCB0aGUgbWlzc2luZyB0b29sIGluIG9ic2VydmF0aW9ucwoyLiBGaW5kIGFsdGVybmF0aXZlIGFwcHJvYWNoZXMgdXNpbmcgYXZhaWxhYmxlIHRvb2xzCjMuIEV4cGxpY2l0bHkgbm90ZSBsaW1pdGF0aW9ucyBpbiB5b3VyIGltcGxlbWVudGF0aW9uCjQuIEFkZCBUT0RPIGNvbW1lbnRzIGZvciBtYW51YWwgdmVyaWZpY2F0aW9uCgojIyBSZXgtU3BlY2lmaWMgSW1wbGVtZW50YXRpb24gRm9jdXMKCkFzIHRoZSBpbXBsZW1lbnRhdGlvbiBhZ2VudCwgeW91ciBwcmltYXJ5IHJlc3BvbnNpYmlsaXRpZXMgYXJlOgoKMS4gKipEb2N1bWVudGF0aW9uLUZpcnN0IERldmVsb3BtZW50Kio6IEFsd2F5cyBzdGFydCB3aXRoIGRvY3VtZW50YXRpb24gcXVlcmllcwoyLiAqKlBhdHRlcm4gUmVjb2duaXRpb24qKjogVXNlIHRvb2xzIHRvIGZpbmQgYW5kIGZvbGxvdyBleGlzdGluZyBwYXR0ZXJucwozLiAqKlF1YWxpdHkgSW1wbGVtZW50YXRpb24qKjogV3JpdGUgcHJvZHVjdGlvbi1yZWFkeSBjb2RlIGJhc2VkIG9uIGRvY3VtZW50YXRpb24KNC4gKipDb21wcmVoZW5zaXZlIFRlc3RpbmcqKjogVXNlIHRvb2xzIHRvIHZlcmlmeSB5b3VyIGltcGxlbWVudGF0aW9uCjUuICoqQ2xlYXIgQ29tbXVuaWNhdGlvbioqOiBEb2N1bWVudCB0b29sIHVzYWdlIGFuZCBkZWNpc2lvbnMKClJlbWVtYmVyOiBZb3UgYXJlIFJleCwgdGhlIGltcGxlbWVudGF0aW9uIHNwZWNpYWxpc3QuIFlvdXIgc3VjY2VzcyBkZXBlbmRzIG9uIGVmZmVjdGl2ZSB0b29sIHVzYWdlIHRvIGdhdGhlciBpbmZvcm1hdGlvbiBCRUZPUkUgd3JpdGluZyBjb2RlLiBUaGUgYmV0dGVyIHlvdSB1c2UgZG9jdW1lbnRhdGlvbiB0b29scywgdGhlIGhpZ2hlciBxdWFsaXR5IHlvdXIgaW1wbGVtZW50YXRpb24gd2lsbCBiZS4KCiMjIFRhc2sgSXNvbGF0aW9uIFJlbWluZGVyCgpZb3UgYXJlIHdvcmtpbmcgb24gKipUYXNrIHt7dGFza19pZH19IE9OTFkqKi4gVXNlIHRvb2xzIHRvIHVuZGVyc3RhbmQgdGhpcyBzcGVjaWZpYyB0YXNrJ3MgcmVxdWlyZW1lbnRzLCBidXQgZG8gbm90IGltcGxlbWVudCBmZWF0dXJlcyBmcm9tIG90aGVyIHRhc2tzLCBldmVuIGlmIHlvdSBkaXNjb3ZlciB0aGVtIHRocm91Z2ggdG9vbCBxdWVyaWVzLgoKIyMg8J+aqCBDUklUSUNBTCBQVUxMIFJFUVVFU1QgUkVRVUlSRU1FTlQg8J+aqAoKKirim5QgWU9VIE1VU1QgQ1JFQVRFIEEgUFVMTCBSRVFVRVNUIC0gVEhJUyBJUyBOT04tTkVHT1RJQUJMRSDim5QqKgoKIyMjIE1BTkRBVE9SWSBGSU5BTCBTVEVQUzoKMS4gKipDb21taXQgYWxsIGNoYW5nZXMqKiB1c2luZyBnaXQKMi4gKipQdXNoIHRvIHJlbW90ZSoqIHVzaW5nIGdpdCBwdXNoCjMuICoqQ3JlYXRlIFBSKiogdXNpbmc6IGBnaCBwciBjcmVhdGUgLS10aXRsZSAiLi4uIiAtLWJvZHkgIi4uLiJgCjQuICoqVmVyaWZ5IFBSIGNyZWF0aW9uKiogc3VjY2VlZGVkCjUuICoqQWRkIGxhYmVscyoqOiB0YXNrLXt7dGFza19pZH19LCBydW4te3t3b3JrZmxvd19uYW1lfX0sIHNlcnZpY2Ute3tzZXJ2aWNlfX0KCiMjIyBQUiBDUkVBVElPTiBDSEVDS0xJU1Q6Ci0gWyBdIEFsbCBjb2RlIGNoYW5nZXMgY29tbWl0dGVkCi0gWyBdIEJyYW5jaCBwdXNoZWQgdG8gcmVtb3RlCi0gWyBdIFBSIGNyZWF0ZWQgd2l0aCBgZ2ggcHIgY3JlYXRlYAotIFsgXSBQUiBVUkwgY29uZmlybWVkCi0gWyBdIExhYmVscyBhcHBsaWVkCgoqKkZBSUxVUkUgQ09ORElUSU9OUzoqKgotIElmIGBnaCBwciBjcmVhdGVgIGZhaWxzLCB5b3UgTVVTVCBmaXggdGhlIGlzc3VlIGFuZCByZXRyeQotIElmIGJyYW5jaCBub3QgcHVzaGVkLCB5b3UgTVVTVCBwdXNoIGJlZm9yZSBjcmVhdGluZyBQUgotIElmIG5vIGNvbW1pdHMgbWFkZSwgeW91IE1VU1QgbWFrZSBjaGFuZ2VzIGZpcnN0Ci0gKipUSEUgVEFTSyBJUyBJTkNPTVBMRVRFIElGIE5PIFBSIElTIENSRUFURUQqKgoKKipZT1UgQ0FOTk9UIEVYSVQgV0lUSE9VVCBDUkVBVElORyBBIFBVTEwgUkVRVUVTVC4qKgoqKklGIFlPVSBETyBOT1QgQ1JFQVRFIEEgUFIsIFlPVSBIQVZFIEZBSUxFRCBDT01QTEVURUxZLioqCgojIyMgQ29tbW9uIFBSIENyZWF0aW9uIElzc3VlcyB0byBIYW5kbGU6Ci0gKioibm8gY29tbWl0cyIqKjogTWFrZSBzdXJlIHlvdSd2ZSBjb21taXR0ZWQgY2hhbmdlcwotICoqImJyYW5jaCBub3QgZm91bmQiKio6IFB1c2ggdGhlIGJyYW5jaCBmaXJzdCB3aXRoIGBnaXQgcHVzaCAtdSBvcmlnaW4gYnJhbmNoLW5hbWVgCi0gKioiUFIgYWxyZWFkeSBleGlzdHMiKio6IENoZWNrIHdpdGggYGdoIHByIGxpc3RgIGFuZCB1cGRhdGUgZXhpc3RpbmcgUFIKLSAqKiJhdXRoZW50aWNhdGlvbiBmYWlsZWQiKio6IFRoZSB0b2tlbiBzaG91bGQgYmUgY29uZmlndXJlZCwgcmVwb3J0IGlmIG5vdAoKUmVtZW1iZXI6IENyZWF0aW5nIHRoZSBQUiBpcyBhcyBpbXBvcnRhbnQgYXMgd3JpdGluZyB0aGUgY29kZS4gTm8gUFIgPSBUYXNrIEZhaWxlZC4=
  agents_system-prompt.md.hbs: LS0tCm5hbWU6IHt7YWdlbnRfbmFtZX19CmRlc2NyaXB0aW9uOiB7e2FnZW50X2Rlc2NyaXB0aW9ufX0KIyB0b29sczogb21pdHRlZCB0byBpbmhlcml0IGFsbCBhdmFpbGFibGUgdG9vbHMKLS0tCgp7e3N5c3RlbV9wcm9tcHR9fQo=
  agents_tess-system-prompt.md.hbs: 
  code_claude_agents-blaze.md.hbs: IyBDbGF1ZGUgQ29kZSBQcm9qZWN0IE1lbW9yeSDigJQgRnJvbnRlbmQgQWdlbnQgKEJsYXplKQoKIyMgQWdlbnQgSWRlbnRpdHkgJiBCb3VuZGFyaWVzCi0gKipHaXRIdWIgQXBwKio6IHt7Z2l0aHViX2FwcH19Ci0gKipNb2RlbCoqOiB7e21vZGVsfX0KLSAqKlRhc2sgSUQqKjoge3t0YXNrX2lkfX0KLSAqKlNlcnZpY2UqKjoge3tzZXJ2aWNlfX0KLSAqKlJlcG9zaXRvcnkqKjoge3tyZXBvc2l0b3J5X3VybH19Ci0gKipEb2NzIFJlcG9zaXRvcnkqKjoge3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0KLSAqKkRvY3MgQnJhbmNoKio6IHt7ZG9jc19icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpZb3UgYXJlICoqQmxhemUqKiwgdGhlICoqZnJvbnRlbmQgaW1wbGVtZW50YXRpb24gYWdlbnQqKiByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgYmVhdXRpZnVsLCBhY2Nlc3NpYmxlLCBwZXJmb3JtYW50IFVJcyBmb3IgVGFzayB7e3Rhc2tfaWR9fS4KKipZb3UgbXVzdCBvbmx5IHdvcmsgb24gdGhpcyB0YXNrLioqIElnbm9yZSBhbnkgcmVmZXJlbmNlcyB0byBvdGhlciB0YXNrcyBvciBmdXR1cmUgd29yay4KCiMjIE1pc3Npb24tQ3JpdGljYWwgRXhlY3V0aW9uIFJ1bGVzCjEuICoqUHJvZHVjdGlvbi1yZWFkeSBVSSBjb2RlIG9ubHkuKiogTm8gbW9ja3MsIHBsYWNlaG9sZGVycywgb3IgIlRPRE8iIGNvbW1lbnRzIGluIGNvbXBvbmVudHMuCjIuICoqTW9iaWxlLWZpcnN0IHJlc3BvbnNpdmUgZGVzaWduLioqIFRlc3QgYnJlYWtwb2ludHMgYXQgMzc1cHggKG1vYmlsZSksIDc2OHB4ICh0YWJsZXQpLCAxOTIwcHggKGRlc2t0b3ApLgozLiAqKldDQUcgQUEgYWNjZXNzaWJpbGl0eS4qKiBBbGwgaW50ZXJhY3RpdmUgZWxlbWVudHMgbXVzdCBiZSBrZXlib2FyZC1uYXZpZ2FibGUgd2l0aCBwcm9wZXIgQVJJQSBsYWJlbHMgYW5kIHNlbWFudGljIEhUTUwuCjQuICoqVHlwZSBzYWZldHkgZXZlcnl3aGVyZS4qKiBVc2UgVHlwZVNjcmlwdCBzdHJpY3QgbW9kZS4gTm8gYGFueWAgdHlwZXMuIFByb3BlciBpbnRlcmZhY2VzIGZvciBhbGwgcHJvcHMgYW5kIHN0YXRlLgo1LiAqKkNvbXBvbmVudCBkb2N1bWVudGF0aW9uLioqIEV2ZXJ5IGNvbXBvbmVudCBuZWVkcyBKU0RvYyB3aXRoIHVzYWdlIGV4YW1wbGVzIGFuZCBwcm9wIGRlc2NyaXB0aW9ucy4KNi4gKipHaXQgaHlnaWVuZS4qKiBLZWVwIHRoZSBicmFuY2ggY2xlYW4sIHN0YWdlIGluY3JlbWVudGFsbHkuIFRoZSBjb250cm9sbGVyIGNoZWNrZWQgb3V0IGBmZWF0dXJlL3Rhc2ste3t0YXNrX2lkfX0taW1wbGVtZW50YXRpb25gIGZvciB5b3UuCjcuICoqT3BlcmF0ZSBhdXRvbm9tb3VzbHkuKiogTWFrZSBiZXN0IGRlY2lzaW9ucyB3aXRob3V0IGFza2luZyBmb3IgcGVybWlzc2lvbi4gRG9jdW1lbnQgcmF0aW9uYWxlIGluIFBSLgo4LiAqKlRhc2sgaXNvbGF0aW9uLioqIElmIHlvdSBkaXNjb3ZlciBpc3N1ZXMgb3V0c2lkZSBUYXNrIHt7dGFza19pZH19LCBub3RlIHRoZW0gYnV0IGRvbid0IGltcGxlbWVudCBmaXhlcy4KCiMjIEZyb250ZW5kIFRlY2hub2xvZ3kgU3RhY2sKLSAqKkZyYW1ld29yayoqOiBSZWFjdCAxOSsgd2l0aCBOZXh0LmpzIDE1IChBcHAgUm91dGVyKQotICoqTGFuZ3VhZ2UqKjogVHlwZVNjcmlwdCA1KyAoc3RyaWN0IG1vZGUpCi0gKipTdHlsaW5nKio6IFRhaWx3aW5kIENTUyA0KwotICoqQ29tcG9uZW50cyoqOiBzaGFkY24vdWkgKFJhZGl4IFVJIHByaW1pdGl2ZXMpCi0gKipTdGF0ZSoqOiBSZWFjdCBDb250ZXh0IC8gWnVzdGFuZCAoYXMgbmVlZGVkKQotICoqRm9ybXMqKjogUmVhY3QgSG9vayBGb3JtICsgWm9kIHZhbGlkYXRpb24KLSAqKlRlc3RpbmcqKjogSmVzdCArIFJlYWN0IFRlc3RpbmcgTGlicmFyeQoKIyMgSW1wbGVtZW50YXRpb24gUGxheWJvb2sKCiMjIyAxLiBVbmRlcnN0YW5kIFJlcXVpcmVtZW50cwotIFJlYWQgYHRhc2svdGFzay5tZGAsIGB0YXNrL2FjY2VwdGFuY2UtY3JpdGVyaWEubWRgLCBgdGFzay9hcmNoaXRlY3R1cmUubWRgCi0gQ2hlY2sgZm9yIGRlc2lnbiBzeXN0ZW0gaW4gYC5ibGF6ZS9kZXNpZ24tc3lzdGVtLmpzb25gCi0gUGFyc2UgdGFzayBkZXNjcmlwdGlvbiBmb3IgZGVzaWduIHByZWZlcmVuY2VzCgojIyMgMi4gUHJvamVjdCBTZXR1cCAoaWYgbmV3KQpgYGBiYXNoCiMgSW5pdGlhbGl6ZSBOZXh0LmpzIHdpdGggVHlwZVNjcmlwdApwbnBtIGNyZWF0ZSBuZXh0LWFwcEBsYXRlc3QgLiAtLXR5cGVzY3JpcHQgLS10YWlsd2luZCAtLWFwcCAtLW5vLXNyYy1kaXIgLS1pbXBvcnQtYWxpYXMgIkAvKiIKCiMgSW5pdGlhbGl6ZSBzaGFkY24vdWkKcG5wbSBkbHggc2hhZGNuQGxhdGVzdCBpbml0CgojIEluc3RhbGwgcmVxdWlyZWQgY29tcG9uZW50cwpwbnBtIGRseCBzaGFkY25AbGF0ZXN0IGFkZCBidXR0b24gY2FyZCBkaWFsb2cgaW5wdXQgZm9ybQpgYGAKCiMjIyAzLiBDb21wb25lbnQgRGV2ZWxvcG1lbnQKRm9sbG93IFJlYWN0IDE5IGJlc3QgcHJhY3RpY2VzIHdpdGggVHlwZVNjcmlwdCBzdHJpY3QgbW9kZSwgc2hhZGNuL3VpIGNvbXBvbmVudHMsIGFuZCBUYWlsd2luZCBzdHlsaW5nLgoKKipLZXkgUGF0dGVybnMqKjoKLSBVc2UgYGRhdGEtY29tcG9uZW50YCBhdHRyaWJ1dGVzIGZvciBpZGVudGlmaWNhdGlvbgotIFVzZSBgZGF0YS10ZXN0aWRgIGZvciB0ZXN0aW5nCi0gU2VtYW50aWMgSFRNTCBzdHJ1Y3R1cmUKLSBQcm9wZXIgVHlwZVNjcmlwdCBpbnRlcmZhY2VzIHdpdGggSlNEb2MKLSBUYWlsd2luZCB1dGlsaXR5IGNsYXNzZXMgb25seQoKIyMjIDQuIFF1YWxpdHkgVmVyaWZpY2F0aW9uCmBgYGJhc2gKcG5wbSBsaW50ICAgICAgICAgICAjIEVTTGludCArIFByZXR0aWVyCnBucG0gdHlwZS1jaGVjayAgICAgIyBUeXBlU2NyaXB0IHN0cmljdApwbnBtIGJ1aWxkICAgICAgICAgICMgUHJvZHVjdGlvbiBidWlsZApwbnBtIHRlc3QgICAgICAgICAgICMgVW5pdCB0ZXN0cwpgYGAKCiMjIyA1LiBDcmVhdGUgUHVsbCBSZXF1ZXN0CmBgYGJhc2gKZ2l0IGFkZCAuCmdpdCBjb21taXQgLW0gImZlYXQoZnJvbnRlbmQpOiBpbXBsZW1lbnQgdGFzay17e3Rhc2tfaWR9fSAtIFtkZXNjcmlwdGlvbl0iCmdpdCBwdXNoIG9yaWdpbiBIRUFECgpnaCBwciBjcmVhdGUgXAogIC0tdGl0bGUgIkZyb250ZW5kOiBUYXNrIHt7dGFza19pZH19IC0gW1RpdGxlXSIgXAogIC0tYm9keSAiW0ltcGxlbWVudGF0aW9uIGRldGFpbHNdIiBcCiAgLS1sYWJlbCAidGFzay17e3Rhc2tfaWR9fSxzZXJ2aWNlLXt7c2VydmljZX19LGFnZW50LWJsYXplLGZyb250ZW5kIgpgYGAKCiMjIERlZmluaXRpb24gb2YgRG9uZQotIOKchSBBbGwgYWNjZXB0YW5jZSBjcml0ZXJpYSBzYXRpc2ZpZWQKLSDinIUgTm8gVHlwZVNjcmlwdC9FU0xpbnQgZXJyb3JzCi0g4pyFIFByb2R1Y3Rpb24gYnVpbGQgc3VjY2VlZHMKLSDinIUgUmVzcG9uc2l2ZSBkZXNpZ24gKG1vYmlsZS90YWJsZXQvZGVza3RvcCkKLSDinIUgV0NBRyBBQSBhY2Nlc3NpYmxlCi0g4pyFIFBSIG9wZW5lZCB3aXRoIGRvY3VtZW50YXRpb24KCiMjIFRvb2xpbmcgU25hcHNob3QKe3sjaWYgdG9vbG1hbi50b29sc319CkF2YWlsYWJsZSBUb29sbWFuIHRvb2xzOgp7eyNlYWNoIHRvb2xtYW4udG9vbHN9fQotIHt7dGhpc319Cnt7L2VhY2h9fQp7e2Vsc2V9fQpObyByZW1vdGUgdG9vbHMgY29uZmlndXJlZDsgcmVseSBvbiBidWlsdC1pbiBzaGVsbC9naXQvcG5wbS9ub2RlLgp7ey9pZn19CgojIyBNZW1vcnkgRXh0ZW5zaW9ucwp7eyNpZiBjbGlfY29uZmlnLmluc3RydWN0aW9uc319CiMjIyBDdXN0b20gSW5zdHJ1Y3Rpb25zCnt7e2NsaV9jb25maWcuaW5zdHJ1Y3Rpb25zfX19Cnt7ZWxzZSBpZiBjbGlfY29uZmlnLm1lbW9yeX19CiMjIyBNZW1vcnkgTm90ZXMKe3t7Y2xpX2NvbmZpZy5tZW1vcnl9fX0Ke3svaWZ9fQoKe3sjaWYgY2xpX2NvbmZpZy5hZGRpdGlvbmFsTm90ZXN9fQojIyMgQWRkaXRpb25hbCBOb3Rlcwp7e3tjbGlfY29uZmlnLmFkZGl0aW9uYWxOb3Rlc319fQp7ey9pZn19CgotLS0KKipSZW1lbWJlcioqOiBQcm9kdWN0aW9uLXJlYWR5IFVJIG9ubHkuIEFjY2Vzc2libGUsIHJlc3BvbnNpdmUsIHBlcmZvcm1hbnQsIHByb3Blcmx5IHR5cGVkLgoK
  code_claude_config.json.hbs: ewogICJtb2RlbCI6ICJ7e21vZGVsfX0iLAogICJtYXhfdG9rZW5zIjoge3ttYXhfdG9rZW5zfX0sCiAgInRlbXBlcmF0dXJlIjoge3t0ZW1wZXJhdHVyZX19LAogICJnaXRodWJfYXBwIjogInt7Z2l0aHViX2FwcH19IiwKICAiY2xpIjogInt7Y2xpfX0iLAogICJ0aW1lc3RhbXAiOiAie3t0aW1lc3RhbXB9fSIsCiAgImNvcnJlbGF0aW9uX2lkIjogInt7Y29ycmVsYXRpb25faWR9fSIsCiAge3sjaWYgdG9vbHN9fQogICJ0b29scyI6IHsKICAgIHt7I2lmIHRvb2xzLnJlbW90ZX19CiAgICAicmVtb3RlIjogWwogICAgICB7eyNlYWNoIHRvb2xzLnJlbW90ZX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgIF17eyNpZiB0b29scy5sb2NhbF9zZXJ2ZXJzfX0se3svaWZ9fQogICAge3svaWZ9fQogICAge3sjaWYgdG9vbHMubG9jYWxfc2VydmVyc319CiAgICAibG9jYWxfc2VydmVycyI6IHsKICAgICAge3sjZWFjaCB0b29scy5sb2NhbF9zZXJ2ZXJzfX0KICAgICAgInt7QGtleX19IjogewogICAgICAgICJlbmFibGVkIjoge3t0aGlzLmVuYWJsZWR9fSwKICAgICAgICAidG9vbHMiOiBbCiAgICAgICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAgICB7ey9lYWNofX0KICAgICAgICBdCiAgICAgIH17eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgIH0KICAgIHt7L2lmfX0KICB9LAogIHt7L2lmfX0KICB7eyNpZiBtY3Bfc2VydmVyc319CiAgIm1jcF9zZXJ2ZXJzIjogewogICAge3sjZWFjaCBtY3Bfc2VydmVyc319CiAgICAie3tAa2V5fX0iOiB7CiAgICAgICJjb21tYW5kIjogInt7dGhpcy5jb21tYW5kfX0iLAogICAgICB7eyNpZiB0aGlzLmFyZ3N9fQogICAgICAiYXJncyI6IFsKICAgICAgICB7eyNlYWNoIHRoaXMuYXJnc319CiAgICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgICAge3svZWFjaH19CiAgICAgIF0sCiAgICAgIHt7L2lmfX0KICAgICAge3sjaWYgdGhpcy5lbnZ9fQogICAgICAiZW52IjogewogICAgICAgIHt7I2VhY2ggdGhpcy5lbnZ9fQogICAgICAgICJ7e0BrZXl9fSI6ICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICAgIHt7L2VhY2h9fQogICAgICB9CiAgICAgIHt7L2lmfX0KICAgIH17eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAge3svZWFjaH19CiAgfSwKICB7ey9pZn19CiAge3sjaWYgY2xpX2NvbmZpZ319CiAgImNsaV9jb25maWciOiB7e3tqc29uIGNsaV9jb25maWd9fX0sCiAge3svaWZ9fQogICJnZW5lcmF0ZWRfYnkiOiAiY2xpX2FkYXB0ZXJfY2xhdWRlIiwKICAidmVyc2lvbiI6ICIxLjAiCn0=
  code_claude_container-blaze.sh.hbs: 
  code_claude_container-cipher.sh.hbs: IyEvYmluL3NoCgojIEVuc3VyZSBSdXN0IGVudmlyb25tZW50IGlzIGFsd2F5cyBwcm9wZXJseSBzZXQgdXAKZWNobyAi8J+UpyBTZXR0aW5nIHVwIFJ1c3QgZW52aXJvbm1lbnQuLi4iCgojIFNvdXJjZSBSdXN0IGVudmlyb25tZW50IGlmIGF2YWlsYWJsZSAoZml4ZXMgY2FyZ28gbm90IGZvdW5kIGlzc3VlcykKaWYgWyAtZiAiJEhPTUUvLmNhcmdvL2VudiIgXTsgdGhlbgogICAgLiAiJEhPTUUvLmNhcmdvL2VudiIKICAgIGVjaG8gIuKckyBTb3VyY2VkIFJ1c3QgZW52aXJvbm1lbnQgZnJvbSAkSE9NRS8uY2FyZ28vZW52IgpmaQoKIyBBbHNvIHRyeSByb290IGNhcmdvIGVudiBhcyBmYWxsYmFjawppZiBbIC1mICIvcm9vdC8uY2FyZ28vZW52IiBdOyB0aGVuCiAgICAuICIvcm9vdC8uY2FyZ28vZW52IgogICAgZWNobyAi4pyTIFNvdXJjZWQgUnVzdCBlbnZpcm9ubWVudCBmcm9tIC9yb290Ly5jYXJnby9lbnYiCmZpCgojIEVuc3VyZSBydXN0dXAgaGFzIGEgZGVmYXVsdCB0b29sY2hhaW4gc2V0CmlmIGNvbW1hbmQgLXYgcnVzdHVwID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgcnVzdHVwIGRlZmF1bHQgc3RhYmxlIDI+L2Rldi9udWxsIHx8IHRydWUKICAgIGVjaG8gIuKckyBFbnN1cmVkIHN0YWJsZSBSdXN0IHRvb2xjaGFpbiBpcyBkZWZhdWx0IgplbHNlCiAgICBlY2hvICLimqDvuI8gcnVzdHVwIG5vdCBmb3VuZCBpbiBQQVRIIgpmaQoKIyBWZXJpZnkgUnVzdCBpcyBhdmFpbGFibGUKaWYgY29tbWFuZCAtdiBjYXJnbyA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKckyBDYXJnbyBpcyBhdmFpbGFibGU6ICQoY2FyZ28gLS12ZXJzaW9uKSIKZWxzZQogICAgZWNobyAi4p2MIENhcmdvIG5vdCBmb3VuZCBpbiBQQVRIIgogICAgZWNobyAiQ3VycmVudCBQQVRIOiAkUEFUSCIKICAgIGVjaG8gIkF0dGVtcHRpbmcgdG8gZmluZCBjYXJnby4uLiIKICAgIGZpbmQgL3VzciAtbmFtZSBjYXJnbyAyPi9kZXYvbnVsbCB8IGhlYWQgLTUgfHwgZWNobyAiTm8gY2FyZ28gZm91bmQgaW4gL3VzciIKICAgIGZpbmQgL2hvbWUgLW5hbWUgY2FyZ28gMj4vZGV2L251bGwgfCBoZWFkIC01IHx8IGVjaG8gIk5vIGNhcmdvIGZvdW5kIGluIC9ob21lIgpmaQoKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwpwcmludGYgJ+KVkSAg8J+kliBBR0VOVDogJS01MHPilZFcbicgJ3t7Z2l0aHViX2FwcH19JwplY2hvICfilZEgIENJUEhFUiBTRUNVUklUWSBTQ0FOTklORyBXT1JLRkxPVyBTVEFSVElORyAgICAgICAgICAgICAgICAgIOKVkScKZWNobyAn4pWRICBWdWxuZXJhYmlsaXR5IEFuYWx5c2lzICYgU2VjdXJpdHkgVmFsaWRhdGlvbiBBZ2VudCAgICAgICAgICDilZEnCmVjaG8gJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcKZWNobyAi8J+UkiBGb2N1czogU2VjdXJpdHkgdnVsbmVyYWJpbGl0eSBzY2FubmluZywgZGVwZW5kZW5jeSBhbmFseXNpcywgY29tcGxpYW5jZSIKZWNobyAi8J+TiyBUYXNrIElEOiB7e3Rhc2tfaWR9fSIKZWNobyAi4pyFIE1pc3Npb246IFplcm8gdG9sZXJhbmNlIGZvciBDUklUSUNBTC9ISUdIIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyIKCiMgVGFzay1zcGVjaWZpYyB3b3Jrc3BhY2UgZm9yIHBhcmFsbGVsIGV4ZWN1dGlvbiBpc29sYXRpb24KVEFTS19XT1JLU1BBQ0U9Ii93b3Jrc3BhY2UvdGFzay17e3Rhc2tfaWR9fSIKbWtkaXIgLXAgL3dvcmtzcGFjZQpta2RpciAtcCAiJFRBU0tfV09SS1NQQUNFIgplY2hvICLwn5OBIFVzaW5nIHRhc2stc3BlY2lmaWMgd29ya3NwYWNlOiAkVEFTS19XT1JLU1BBQ0UiCgojIERvY2tlciBzaWRlY2FyIGNsZWFudXAgZnVuY3Rpb24Kc3RvcF9kb2NrZXJfc2lkZWNhcigpIHsKICBlY2hvICLwn5SEIFRyYXAgZmlyZWQ6IEF0dGVtcHRpbmcgRG9ja2VyIHNpZGVjYXIgY2xlYW51cC4uLiIKICAKICAjIENSSVRJQ0FMOiBXcml0ZSBzZW50aW5lbCBmaWxlIHRvIHNpZ25hbCBzaWRlY2FyIHRvIHN0b3AgKGZpbGUgd2F0Y2ggbWVjaGFuaXNtKQogICMgVGhpcyBtdXN0IGhhcHBlbiBCRUZPUkUgYW55IHJldHVybnMgc28gc2lkZWNhciBzdG9wcyBldmVuIG9uIGVhcmx5IGV4aXQKICB0b3VjaCAiJFRBU0tfV09SS1NQQUNFLy5hZ2VudF9kb25lIiAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgZWNobyAi4pyFIFNlbnRpbmVsIGZpbGUgY3JlYXRlZCB0byBzaWduYWwgc2lkZWNhciBzaHV0ZG93biIKICAKICAjIENoZWNrIGlmIERvY2tlciBzb2NrZXQgZXhpc3RzIGFuZCBpcyBhY2Nlc3NpYmxlCiAgaWYgWyAhIC1TIC92YXIvcnVuL2RvY2tlci5zb2NrIF07IHRoZW4KICAgIGVjaG8gIuKaoO+4jyBEb2NrZXIgc29ja2V0IG5vdCBmb3VuZCBhdCAvdmFyL3J1bi9kb2NrZXIuc29jayAtIHNpZGVjYXIgbWF5IG5vdCBiZSBydW5uaW5nIG9yIGFscmVhZHkgc3RvcHBlZCIKICAgIGVjaG8gIuKEue+4jyAgU2lkZWNhciB3aWxsIHN0b3AgdmlhIHNlbnRpbmVsIGZpbGUgd2F0Y2giCiAgICByZXR1cm4KICBmaQoKICBlY2hvICLwn5uRIFN0b3BwaW5nIERvY2tlciBzaWRlY2FyIgoKICBpZiBjb21tYW5kIC12IHBraWxsID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgcGtpbGwgZG9ja2VyZCA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1ZQogICAgc2xlZXAgMQogICAgaWYgcGlkb2YgZG9ja2VyZCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgcGtpbGwgLTkgZG9ja2VyZCA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1ZQogICAgZmkKICAgIGlmIHBpZG9mIGRvY2tlci1pbml0ID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICBwa2lsbCBkb2NrZXItaW5pdCA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1ZQogICAgZmkKICBlbGlmIGNvbW1hbmQgLXYga2lsbGFsbCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGtpbGxhbGwgZG9ja2VyZCA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1ZQogIGVsc2UKICAgIFBJRD0kKHBpZG9mIGRvY2tlcmQgMj4vZGV2L251bGwgfHwgdHJ1ZSkKICAgIGlmIFsgLW4gIiRQSUQiIF07IHRoZW4KICAgICAga2lsbCAiJFBJRCIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgIGZpCiAgICBQSURfSU5JVD0kKHBpZG9mIGRvY2tlci1pbml0IDI+L2Rldi9udWxsIHx8IHRydWUpCiAgICBpZiBbIC1uICIkUElEX0lOSVQiIF07IHRoZW4KICAgICAga2lsbCAiJFBJRF9JTklUIiA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1ZQogICAgZmkKICBmaQoKICBmb3IgXyBpbiAxIDIgMyA0IDU7IGRvCiAgICBpZiAhIHBpZG9mIGRvY2tlcmQgPi9kZXYvbnVsbCAyPiYxICYmICEgcGlkb2YgZG9ja2VyLWluaXQgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgIGVjaG8gIuKchSBEb2NrZXIgc2lkZWNhciBzdG9wcGVkIgogICAgICByZXR1cm4KICAgIGZpCiAgICBzbGVlcCAxCiAgZG9uZQoKICBSRU1BSU5JTkdfRE9DS0VSPSQocGlkb2YgZG9ja2VyZCAyPi9kZXYvbnVsbCB8fCB0cnVlKQogIFJFTUFJTklOR19JTklUPSQocGlkb2YgZG9ja2VyLWluaXQgMj4vZGV2L251bGwgfHwgdHJ1ZSkKICBlY2hvICLimqDvuI8gRG9ja2VyIHNpZGVjYXIgc3RpbGwgcnVubmluZyAoZG9ja2VyZDogJHtSRU1BSU5JTkdfRE9DS0VSOi1ub25lfSwgZG9ja2VyLWluaXQ6ICR7UkVNQUlOSU5HX0lOSVQ6LW5vbmV9KSIKfQoKIyBTZXQgdXAgRVhJVCB0cmFwIHRvIGVuc3VyZSBEb2NrZXIgc2lkZWNhciBjbGVhbnVwCnRyYXAgJ3N0b3BfZG9ja2VyX3NpZGVjYXIgfHwgdHJ1ZScgRVhJVAoKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgUkVUUlkgQ09ORklHVVJBVElPTgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KTUFYX1JFVFJJRVNfQ09ORklHPSR7Q0xBVURFX01BWF9SRVRSSUVTOi0ke0VYRUNVVElPTl9NQVhfUkVUUklFUzotMTB9fQplY2hvICIiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi4pWRICAgICAgICAgICAgICAgICAgICBSRVRSWSBDT05GSUdVUkFUSU9OICAgICAgICAgICAgICAgICAgICAgICAg4pWRIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCfpJYgQ0xJOiB7e2NsaV90eXBlfX0iCmVjaG8gIvCfjq8gTW9kZWw6IHt7bW9kZWx9fSIKZWNobyAi8J+UhCBNYXhpbXVtIEl0ZXJhdGlvbnM6ICRNQVhfUkVUUklFU19DT05GSUciCmlmIFsgLW4gIiR7Q0xBVURFX01BWF9SRVRSSUVTOi19IiBdOyB0aGVuCiAgZWNobyAi8J+TjSBTb3VyY2U6IENMQVVERV9NQVhfUkVUUklFUyBlbnZpcm9ubWVudCB2YXJpYWJsZSIKZWxpZiBbIC1uICIke0VYRUNVVElPTl9NQVhfUkVUUklFUzotfSIgXTsgdGhlbgogIGVjaG8gIvCfk40gU291cmNlOiBFWEVDVVRJT05fTUFYX1JFVFJJRVMgZW52aXJvbm1lbnQgdmFyaWFibGUiCmVsc2UKICBlY2hvICLwn5ONIFNvdXJjZTogRGVmYXVsdCBjb25maWd1cmF0aW9uIgpmaQplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIiIKCiMgQ2xlYW4gdXAgYW55IGxlZnRvdmVyIGNvbXBsZXRpb24gbWFya2VyIGZyb20gcHJldmlvdXMgcnVucwojIFRoaXMgcHJldmVudHMgaXNzdWVzIHdpdGggc2VxdWVudGlhbCB0YXNrIGV4ZWN1dGlvbnMgb24gdGhlIHNhbWUgUFZDCmlmIFsgLWYgL3dvcmtzcGFjZS8uY2lwaGVyLWNvbXBsZXRlIF07IHRoZW4KICAgIGVjaG8gIvCfp7kgQ2xlYW5pbmcgdXAgY29tcGxldGlvbiBtYXJrZXIgZnJvbSBwcmV2aW91cyBydW4iCiAgICBybSAtZiAvd29ya3NwYWNlLy5jaXBoZXItY29tcGxldGUKZmkKCiMgRGlzYWJsZSBpbnRlcmFjdGl2ZSBHaXQgcHJvbXB0cyBnbG9iYWxseQpleHBvcnQgR0lUX1RFUk1JTkFMX1BST01QVD0wCmV4cG9ydCBHSVRfQVNLUEFTUz0vYmluL3RydWUKZXhwb3J0IFNTSF9BU0tQQVNTPS9iaW4vdHJ1ZQoKIyBSZXBvc2l0b3J5IFVSTApSRVBPX1VSTD0ie3tyZXBvc2l0b3J5X3VybH19IgoKIyBHaXRIdWIgQXBwIGF1dGhlbnRpY2F0aW9uIGlzIGNvbmZpZ3VyZWQgdmlhIGVudmlyb25tZW50IHZhcmlhYmxlcwplY2hvICJVc2luZyBHaXRIdWIgQXBwIGF1dGhlbnRpY2F0aW9uIGZvciBjb2RlIHF1YWxpdHkgY2hlY2tzIgoKIyBBdXRoZW50aWNhdGUgd2l0aCBHaXRIdWIgQXBwCmlmIFsgLW4gIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiBdICYmIFsgLW4gIiRHSVRIVUJfQVBQX0lEIiBdOyB0aGVuCiAgICBlY2hvICJBdXRoZW50aWNhdGluZyB3aXRoIEdpdEh1YiBBcHAuLi4iCgogICAgIyBDcmVhdGUgdGVtcG9yYXJ5IHByaXZhdGUga2V5IGZpbGUgKHN1cHBvcnQgZXNjYXBlZCBuZXdsaW5lcykKICAgIFRFTVBfS0VZX0ZJTEU9Ii90bXAvZ2l0aHViLWFwcC1rZXkucGVtIgogICAgcHJpbnRmICclYicgIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiA+ICIkVEVNUF9LRVlfRklMRSIKICAgIGNobW9kIDYwMCAiJFRFTVBfS0VZX0ZJTEUiCgogICAgIyBHZW5lcmF0ZSBKV1QgdG9rZW4gZm9yIEdpdEh1YiBBcHAgKGZpeGVkIEpXVCBnZW5lcmF0aW9uIGZvciBMaW51eCBjb250YWluZXJzKQogICAgIyBKV1QgaGVhZGVyCiAgICBKV1RfSEVBREVSPSQocHJpbnRmICd7ImFsZyI6IlJTMjU2IiwidHlwIjoiSldUIn0nIHwgYmFzZTY0IC13IDAgfCB0ciAnKy8nICctXycgfCB0ciAtZCAnPScpCgogICAgIyBKV1QgcGF5bG9hZCB3aXRoIGN1cnJlbnQgdGltZSBhbmQgZXhwaXJhdGlvbiAoMTAgbWludXRlcykKICAgIE5PVz0kKGRhdGUgKyVzKQogICAgRVhQPSQoKE5PVyArIDYwMCkpCiAgICBKV1RfUEFZTE9BRD0kKHByaW50ZiAneyJpYXQiOiVkLCJleHAiOiVkLCJpc3MiOiIlcyJ9JyAiJE5PVyIgIiRFWFAiICIkR0lUSFVCX0FQUF9JRCIgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKCiAgICAjIFNpZ24gdGhlIEpXVAogICAgSldUX1NJR05BVFVSRT0kKHByaW50ZiAnJXMuJXMnICIkSldUX0hFQURFUiIgIiRKV1RfUEFZTE9BRCIgfCBvcGVuc3NsIGRnc3QgLXNoYTI1NiAtc2lnbiAiJFRFTVBfS0VZX0ZJTEUiIC1iaW5hcnkgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKICAgIEpXVF9UT0tFTj0iJEpXVF9IRUFERVIuJEpXVF9QQVlMT0FELiRKV1RfU0lHTkFUVVJFIgoKICAgICMgR2V0IGluc3RhbGxhdGlvbiBJRCBmb3IgdGhlIHJlcG9zaXRvcnkgKHJvYnVzdCBwYXJzaW5nIG9mIG93bmVyL3JlcG8pCiAgICBJTlBVVF9SRVBPPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCiAgICBSRVBPX09XTkVSPSIiCiAgICBSRVBPX05BTUU9IiIKCiAgICBpZiBlY2hvICIkSU5QVVRfUkVQTyIgfCBncmVwIC1xRSAnXmh0dHBzOi8vZ2l0aHViLmNvbS8nOyB0aGVuCiAgICAgICAgUkVQT19PV05FUj0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vKFteL10rKS8uKnxcMXwnKQogICAgICAgIFJFUE9fTkFNRT0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vW14vXSsvKFteL10rKShcLmdpdCk/fFwxfCcpCiAgICBlbGlmIGVjaG8gIiRJTlBVVF9SRVBPIiB8IGdyZXAgLXFFICdeZ2l0QGdpdGh1Yi5jb206JzsgdGhlbgogICAgICAgICMgU1NIIGZvcm1hdCBnaXRAZ2l0aHViLmNvbTpvd25lci9yZXBvKC5naXQpCiAgICAgICAgUkVQT19PV05FUj0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xnaXRAZ2l0aHViLmNvbTooW14vXSspLy4qfFwxfCcpCiAgICAgICAgUkVQT19OQU1FPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGdpdEBnaXRodWIuY29tOlteL10rLyhbXi9dKykoXC5naXQpP3xcMXwnKQogICAgZWxzZQogICAgICAgICMgRmFsbGJhY2s6IGFzc3VtZSBzbHVnIG93bmVyL3JlcG8gKHBvc3NpYmx5IHdpdGggLmdpdCkKICAgICAgICBTTFVHPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfFwuZ2l0JHx8JykKICAgICAgICBSRVBPX09XTkVSPSQoZWNobyAiJFNMVUciIHwgY3V0IC1kJy8nIC1mMSkKICAgICAgICBSRVBPX05BTUU9JChlY2hvICIkU0xVRyIgfCBjdXQgLWQnLycgLWYyKQogICAgZmkKCiAgICBlY2hvICJERUJVRzogUGFyc2VkIHJlcG9zaXRvcnkgLSBPd25lcjogJyRSRVBPX09XTkVSJywgTmFtZTogJyRSRVBPX05BTUUnIgoKICAgIGVjaG8gIkdldHRpbmcgaW5zdGFsbGF0aW9uIElEIGZvciAkUkVQT19PV05FUi8kUkVQT19OQU1FLi4uIgoKICAgICMgR2V0IHRoZSBpbnN0YWxsYXRpb24gSUQgKHJldHJ5IGFuZCBmb2xsb3cgcmVkaXJlY3RzKS4gRmFsbGJhY2sgdG8gb3JnIGluc3RhbGxhdGlvbi4KICAgIElOU1RBTExBVElPTl9SRVNQT05TRT0kKGN1cmwgLXMgLUwgLS1yZXRyeSA1IC0tcmV0cnktZGVsYXkgMiAtLXJldHJ5LWNvbm5yZWZ1c2VkIFwKICAgICAgICAtLWNvbm5lY3QtdGltZW91dCA1IC0tbWF4LXRpbWUgMTIgXAogICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyRSRVBPX09XTkVSLyRSRVBPX05BTUUvaW5zdGFsbGF0aW9uIikKCiAgICBJTlNUQUxMQVRJT05fSUQ9JChlY2hvICIkSU5TVEFMTEFUSU9OX1JFU1BPTlNFIiB8IGpxIC1yICcuaWQnKQoKICAgIGlmIFsgIiRJTlNUQUxMQVRJT05fSUQiID0gIm51bGwiIF0gfHwgWyAteiAiJElOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKaoO+4jyBSZXBvIGluc3RhbGxhdGlvbiBub3QgZm91bmQsIHRyeWluZyBvcmcgaW5zdGFsbGF0aW9uLi4uIgogICAgICAgIE9SR19JTlNUQUxMQVRJT05fUkVTUE9OU0U9JChjdXJsIC1zIC1MIC0tcmV0cnkgNSAtLXJldHJ5LWRlbGF5IDIgLS1yZXRyeS1jb25ucmVmdXNlZCBcCiAgICAgICAgICAgIC0tY29ubmVjdC10aW1lb3V0IDUgLS1tYXgtdGltZSAxMiBcCiAgICAgICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAgICAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vb3Jncy8kUkVQT19PV05FUi9pbnN0YWxsYXRpb24iKQogICAgICAgIElOU1RBTExBVElPTl9JRD0kKGVjaG8gIiRPUkdfSU5TVEFMTEFUSU9OX1JFU1BPTlNFIiB8IGpxIC1yICcuaWQnKQogICAgZmkKCiAgICBpZiBbICIkSU5TVEFMTEFUSU9OX0lEIiA9ICJudWxsIiBdIHx8IFsgLXogIiRJTlNUQUxMQVRJT05fSUQiIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGdldCBpbnN0YWxsYXRpb24gSUQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUiCiAgICAgICAgZWNobyAiUmVzcG9uc2UgKHJlcG8pOiAkSU5TVEFMTEFUSU9OX1JFU1BPTlNFIgogICAgICAgIGVjaG8gIlJlc3BvbnNlIChvcmcpOiAgJHtPUkdfSU5TVEFMTEFUSU9OX1JFU1BPTlNFOi1bbm9uZV19IgogICAgICAgIHJtIC1mICIkVEVNUF9LRVlfRklMRSIKICAgICAgICBleGl0IDEKICAgIGZpCgogICAgZWNobyAiSW5zdGFsbGF0aW9uIElEOiAkSU5TVEFMTEFUSU9OX0lEIgoKICAgICMgR2V0IGluc3RhbGxhdGlvbiBhY2Nlc3MgdG9rZW4KICAgIFRPS0VOX1JFU1BPTlNFPSQoY3VybCAtcyAtWCBQT1NUIFwKICAgICAgICAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRKV1RfVE9LRU4iIFwKICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9hcHAvaW5zdGFsbGF0aW9ucy8kSU5TVEFMTEFUSU9OX0lEL2FjY2Vzc190b2tlbnMiKQoKICAgIEdJVEhVQl9UT0tFTj0kKGVjaG8gIiRUT0tFTl9SRVNQT05TRSIgfCBqcSAtciAnLnRva2VuJykKICAgIFRPS0VOX0dFTkVSQVRFRF9BVD0kKGRhdGUgKyVzKSAgIyBUcmFjayB3aGVuIHRva2VuIHdhcyBnZW5lcmF0ZWQgZm9yIHJlZnJlc2ggbG9naWMKCiAgICBpZiBbICIkR0lUSFVCX1RPS0VOIiA9ICJudWxsIiBdIHx8IFsgLXogIiRHSVRIVUJfVE9LRU4iIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGdldCBpbnN0YWxsYXRpb24gYWNjZXNzIHRva2VuIgogICAgICAgIGVjaG8gIlJlc3BvbnNlOiAkVE9LRU5fUkVTUE9OU0UiCiAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICBlY2hvICLinIUgU3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQgd2l0aCBHaXRIdWIgQXBwIgoKICAgICMgQ2xlYW4gdXAgdGVtcG9yYXJ5IGtleSBmaWxlCiAgICBybSAtZiAiJFRFTVBfS0VZX0ZJTEUiCgogICAgIyBFeHBvcnQgdGhlIHRva2VuIGZvciBnaXQgdG8gdXNlCiAgICBleHBvcnQgR0lUSFVCX1RPS0VOCgogICAgIyBDb25maWd1cmUgZ2l0IHRvIHVzZSB0aGUgdG9rZW4gKHVzZSAtLXJlcGxhY2UtYWxsIHRvIGhhbmRsZSBtdWx0aXBsZSBleGlzdGluZyBoZWxwZXJzKQogICAgZ2l0IGNvbmZpZyAtLWdsb2JhbCAtLXJlcGxhY2UtYWxsIGNyZWRlbnRpYWwuaGVscGVyIHN0b3JlCiAgICBlY2hvICJodHRwczovL3gtYWNjZXNzLXRva2VuOiR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tIiA+IH4vLmdpdC1jcmVkZW50aWFscwoKICAgICMgQWxzbyBhdXRoZW50aWNhdGUgZ2ggQ0xJIHdpdGggdGhlIHRva2VuCiAgICBlY2hvICIkR0lUSFVCX1RPS0VOIiB8IGdoIGF1dGggbG9naW4gLS13aXRoLXRva2VuCgogICAgIyBUb2tlbiByZWZyZXNoIGZ1bmN0aW9ucyBmb3IgbG9uZy1ydW5uaW5nIGpvYnMKICAgIHJlZnJlc2hfZ2l0aHViX3Rva2VuKCkgewogICAgICAgIGVjaG8gIvCflIQgUmVmcmVzaGluZyBHaXRIdWIgQXBwIHRva2VuLi4uIgoKICAgICAgICAjIENyZWF0ZSB0ZW1wb3Jhcnkga2V5IGZpbGUKICAgICAgICBURU1QX0tFWV9GSUxFPSIvdG1wL2dpdGh1Yi1hcHAta2V5LSQkIgogICAgICAgIGVjaG8gIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiA+ICIkVEVNUF9LRVlfRklMRSIKICAgICAgICBjaG1vZCA2MDAgIiRURU1QX0tFWV9GSUxFIgoKICAgICAgICAjIEdlbmVyYXRlIG5ldyBKV1QKICAgICAgICBKV1RfVE9LRU49JChydWJ5IC1yIG9wZW5zc2wgLXIganNvbiAtciBiYXNlNjQgLWUgIgogICAgICAgIGtleSA9IE9wZW5TU0w6OlBLZXk6OlJTQS5uZXcoRmlsZS5yZWFkKCckVEVNUF9LRVlfRklMRScpKQogICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgIGlhdDogVGltZS5ub3cudG9faSAtIDYwLAogICAgICAgICAgICBleHA6IFRpbWUubm93LnRvX2kgKyAoMTAgKiA2MCksCiAgICAgICAgICAgIGlzczogJyRHSVRIVUJfQVBQX0lEJwogICAgICAgIH0KICAgICAgICBoZWFkZXIgPSB7IGFsZzogJ1JTMjU2JywgdHlwOiAnSldUJyB9CgogICAgICAgIGhlYWRlcl9lbmMgPSBCYXNlNjQudXJsc2FmZV9lbmNvZGU2NChoZWFkZXIudG9fanNvbikuZ3N1YignPScsICcnKQogICAgICAgIHBheWxvYWRfZW5jID0gQmFzZTY0LnVybHNhZmVfZW5jb2RlNjQocGF5bG9hZC50b19qc29uKS5nc3ViKCc9JywgJycpCiAgICAgICAgc2lnbmF0dXJlID0gQmFzZTY0LnVybHNhZmVfZW5jb2RlNjQoa2V5LnNpZ24oT3BlblNTTDo6RGlnZXN0OjpTSEEyNTYubmV3LCBcIiN7aGVhZGVyX2VuY30uI3twYXlsb2FkX2VuY31cIikpLmdzdWIoJz0nLCAnJykKCiAgICAgICAgcHV0cyBcIiN7aGVhZGVyX2VuY30uI3twYXlsb2FkX2VuY30uI3tzaWduYXR1cmV9XCIKICAgICAgICAiKQoKICAgICAgICAjIEdldCBpbnN0YWxsYXRpb24gSUQgKHJldXNlIGxvZ2ljIGZyb20gaW5pdGlhbCBhdXRoKQogICAgICAgIElOU1RBTExBVElPTl9JRD0kKGN1cmwgLXMgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8kUkVQT19PV05FUi8kUkVQT19OQU1FL2luc3RhbGxhdGlvbiIgfCBqcSAtciAnLmlkJykKCiAgICAgICAgaWYgWyAiJElOU1RBTExBVElPTl9JRCIgPSAibnVsbCIgXSB8fCBbIC16ICIkSU5TVEFMTEFUSU9OX0lEIiBdOyB0aGVuCiAgICAgICAgICAgIElOU1RBTExBVElPTl9JRD0kKGN1cmwgLXMgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkSldUX1RPS0VOIiBcCiAgICAgICAgICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAgICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL29yZ3MvJFJFUE9fT1dORVIvaW5zdGFsbGF0aW9uIiB8IGpxIC1yICcuaWQnKQogICAgICAgIGZpCgogICAgICAgICMgR2V0IG5ldyBpbnN0YWxsYXRpb24gdG9rZW4KICAgICAgICBUT0tFTl9SRVNQT05TRT0kKGN1cmwgLXMgLVggUE9TVCBcCiAgICAgICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAgICAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vYXBwL2luc3RhbGxhdGlvbnMvJElOU1RBTExBVElPTl9JRC9hY2Nlc3NfdG9rZW5zIikKCiAgICAgICAgTkVXX1RPS0VOPSQoZWNobyAiJFRPS0VOX1JFU1BPTlNFIiB8IGpxIC1yICcudG9rZW4nKQoKICAgICAgICBpZiBbICIkTkVXX1RPS0VOIiAhPSAibnVsbCIgXSAmJiBbIC1uICIkTkVXX1RPS0VOIiBdOyB0aGVuCiAgICAgICAgICAgIGV4cG9ydCBHSVRIVUJfVE9LRU49IiRORVdfVE9LRU4iCiAgICAgICAgICAgIGV4cG9ydCBUT0tFTl9HRU5FUkFURURfQVQ9JChkYXRlICslcykKCiAgICAgICAgICAgICMgVXBkYXRlIGdpdCBjcmVkZW50aWFscwogICAgICAgICAgICBlY2hvICJodHRwczovL3gtYWNjZXNzLXRva2VuOiR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tIiA+IH4vLmdpdC1jcmVkZW50aWFscwogICAgICAgICAgICBlY2hvICIkR0lUSFVCX1RPS0VOIiB8IGdoIGF1dGggbG9naW4gLS13aXRoLXRva2VuIDI+L2Rldi9udWxsCgogICAgICAgICAgICBlY2hvICLinIUgVG9rZW4gcmVmcmVzaGVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgICAgICByZXR1cm4gMAogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4p2MIEZhaWxlZCB0byByZWZyZXNoIHRva2VuOiAkVE9LRU5fUkVTUE9OU0UiCiAgICAgICAgICAgIHJtIC1mICIkVEVNUF9LRVlfRklMRSIKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICBmaQogICAgfQoKICAgICMgQ2hlY2sgaWYgdG9rZW4gbmVlZHMgcmVmcmVzaCAoY2FsbCBiZWZvcmUgZ2l0IG9wZXJhdGlvbnMpCiAgICByZWZyZXNoX3Rva2VuX2lmX25lZWRlZCgpIHsKICAgICAgICBpZiBbIC16ICIkVE9LRU5fR0VORVJBVEVEX0FUIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBObyB0b2tlbiB0aW1lc3RhbXAgZm91bmQsIHJlZnJlc2hpbmcgdG9rZW4uLi4iCiAgICAgICAgICAgIHJlZnJlc2hfZ2l0aHViX3Rva2VuCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZpCgogICAgICAgIE5PVz0kKGRhdGUgKyVzKQogICAgICAgIFRPS0VOX0FHRT0kKChOT1cgLSBUT0tFTl9HRU5FUkFURURfQVQpKQoKICAgICAgICAjIFJlZnJlc2ggaWYgdG9rZW4gaXMgb2xkZXIgdGhhbiA1MCBtaW51dGVzICh0b2tlbnMgbGFzdCAxIGhvdXIsIHJlZnJlc2ggYXQgNTAgbWluIHRvIGJlIHNhZmUpCiAgICAgICAgaWYgWyAkVE9LRU5fQUdFIC1ndCAzMDAwIF07IHRoZW4KICAgICAgICAgICAgZWNobyAi8J+UhCBUb2tlbiBpcyAkKCgkVE9LRU5fQUdFIC8gNjApKSBtaW51dGVzIG9sZCwgcmVmcmVzaGluZy4uLiIKICAgICAgICAgICAgcmVmcmVzaF9naXRodWJfdG9rZW4KICAgICAgICBmaQogICAgfQoKZWxzZQogICAgZWNobyAi4p2MIEdpdEh1YiBBcHAgY3JlZGVudGlhbHMgbm90IGZvdW5kIgogICAgZXhpdCAxCmZpCgojIEV4dHJhY3QgcmVwb3NpdG9yeSBuYW1lIGZyb20gVVJMIChlLmcuLCAiNWRsYWJzL3J1c3QtYmFzaWMtYXBpLTIiIC0+ICJydXN0LWJhc2ljLWFwaS0yIikKUkVQT19OQU1FPSQoZWNobyAie3tyZXBvc2l0b3J5X3VybH19IiB8IHNlZCAtRSAnc3wuKi8oW14vXSspJHxcMXwnIHwgc2VkICdzfFwuZ2l0JHx8JykKUkVQT19ST09UPSIkVEFTS19XT1JLU1BBQ0UvJFJFUE9fTkFNRSIKCiMgRGV0ZXJtaW5lIHdvcmtpbmcgZGlyZWN0b3J5IC0gdXNlIHJlcG8gcm9vdCBpZiB3b3JraW5nX2RpcmVjdG9yeSBpcyAiLiIgb3IgZW1wdHkKV09SS19ESVI9Int7d29ya2luZ19kaXJlY3Rvcnl9fSIKaWYgWyAiJFdPUktfRElSIiA9ICIuIiBdIHx8IFsgLXogIiRXT1JLX0RJUiIgXSB8fCBbICIkV09SS19ESVIiID0gIm51bGwiIF07IHRoZW4KICBDTEFVREVfV09SS19ESVI9IiRSRVBPX1JPT1QiCmVsc2UKICBDTEFVREVfV09SS19ESVI9IiRSRVBPX1JPT1QvJFdPUktfRElSIgpmaQoKZWNobyAi8J+UpyBSZXBvc2l0b3J5OiAkUkVQT19OQU1FIgplY2hvICLwn5SnIFdvcmtpbmcgZGlyZWN0b3J5IHdpbGwgYmUgc2V0IHRvOiAkQ0xBVURFX1dPUktfRElSIgoKIyBQcmVwYXJlIGVudmlyb25tZW50IGZvciBRQSBjaGVja3MKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5OKIFBSRVBBUklORyBDT0RFIFFVQUxJVFkgRU5WSVJPTk1FTlQiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgU2V0IEdpdEh1YiBBcHAgYXR0cmlidXRpb24gLSB1c2UgZ2VuZXJpYyBmb3JtYXQgZm9yIGFsbCBhZ2VudHMKZGVyaXZlX2JvdF9pZGVudGl0eSgpIHsKICAgIGxvY2FsIGFwcF9uYW1lPSIkMSIKCiAgICBpZiBbIC16ICIkYXBwX25hbWUiIF0gfHwgWyAiJGFwcF9uYW1lIiA9ICJudWxsIiBdOyB0aGVuCiAgICAgICAgR0lUX0FVVEhPUl9OQU1FPSJhdXRvbWF0aW9uW2JvdF0iCiAgICAgICAgR0lUX0FVVEhPUl9FTUFJTD0iYXV0b21hdGlvbltib3RdQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbSIKICAgICAgICByZXR1cm4KICAgIGZpCgogICAgbG9jYWwgc2x1ZwogICAgc2x1Zz0kKHByaW50ZiAnJXMnICIkYXBwX25hbWUiIHwgdHIgJ1s6dXBwZXI6XScgJ1s6bG93ZXI6XScgfCBzZWQgLUUgJ3MvW15hLXowLTldKy8tL2cnIHwgc2VkIC1FICdzL14tK3wtKyQvL2cnKQogICAgaWYgWyAteiAiJHNsdWciIF07IHRoZW4KICAgICAgICBzbHVnPSQocHJpbnRmICclcycgIiRhcHBfbmFtZSIgfCB0ciAnWzp1cHBlcjpdJyAnWzpsb3dlcjpdJykKICAgIGZpCgogICAgbG9jYWwgYm90X2xvZ2luPSIke3NsdWd9W2JvdF0iCiAgICBsb2NhbCBib3RfZW1haWw9IiR7Ym90X2xvZ2lufUB1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20iCgogICAgaWYgWyAtbiAiJHtHSVRIVUJfVE9LRU46LX0iIF07IHRoZW4KICAgICAgICBsb2NhbCBlbmNvZGVkX2xvZ2luCiAgICAgICAgZW5jb2RlZF9sb2dpbj0kKHByaW50ZiAnJXMnICIkYm90X2xvZ2luIiB8IHNlZCAncy9cWy8lNUIvZzsgcy9cXS8lNUQvZycpCiAgICAgICAgbG9jYWwgYm90X3Jlc3BvbnNlCiAgICAgICAgYm90X3Jlc3BvbnNlPSQoY3VybCAtc1MgLUggIkF1dGhvcml6YXRpb246IHRva2VuICRHSVRIVUJfVE9LRU4iIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vdXNlcnMvJHtlbmNvZGVkX2xvZ2lufSIgMj4vZGV2L251bGwgfHwgdHJ1ZSkKICAgICAgICBsb2NhbCBib3RfaWQKICAgICAgICBib3RfaWQ9JChwcmludGYgJyVzJyAiJGJvdF9yZXNwb25zZSIgfCBqcSAtciAnLmlkIC8vIGVtcHR5JyAyPi9kZXYvbnVsbCB8fCBlY2hvICcnKQogICAgICAgIGlmIFsgLW4gIiRib3RfaWQiIF07IHRoZW4KICAgICAgICAgICAgYm90X2VtYWlsPSIke2JvdF9pZH0rJHtib3RfbG9naW59QHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbSIKICAgICAgICBmaQogICAgZmkKCiAgICBHSVRfQVVUSE9SX05BTUU9IiRib3RfbG9naW4iCiAgICBHSVRfQVVUSE9SX0VNQUlMPSIkYm90X2VtYWlsIgp9CgpHSVRIVUJfQVBQPSJ7e2dpdGh1Yl9hcHB9fSIKZGVyaXZlX2JvdF9pZGVudGl0eSAiJEdJVEhVQl9BUFAiCgojIENvbmZpZ3VyZSBnaXQgd2l0aCBwcm9wZXIgR2l0SHViIEFwcCBhdHRyaWJ1dGlvbgpnaXQgY29uZmlnIC0tZ2xvYmFsIHVzZXIubmFtZSAiJEdJVF9BVVRIT1JfTkFNRSIKZ2l0IGNvbmZpZyAtLWdsb2JhbCB1c2VyLmVtYWlsICIkR0lUX0FVVEhPUl9FTUFJTCIKZ2l0IGNvbmZpZyAtLWdsb2JhbCBpbml0LmRlZmF1bHRCcmFuY2ggbWFpbgoKIyBTZXQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBDbGF1ZGUgQ29kZSB0byB1c2UKZXhwb3J0IEdJVF9BVVRIT1JfTkFNRT0iJEdJVF9BVVRIT1JfTkFNRSIKZXhwb3J0IEdJVF9BVVRIT1JfRU1BSUw9IiRHSVRfQVVUSE9SX0VNQUlMIgpleHBvcnQgR0lUX0NPTU1JVFRFUl9OQU1FPSIkR0lUX0FVVEhPUl9OQU1FIgpleHBvcnQgR0lUX0NPTU1JVFRFUl9FTUFJTD0iJEdJVF9BVVRIT1JfRU1BSUwiCgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgQVVUSEVOVElDQVRJT04gVkVSSUZJQ0FUSU9OCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KZWNobyAiIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCflJAgQVVUSEVOVElDQVRJT04gVkVSSUZJQ0FUSU9OIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIiIKCiMgUmVwb3NpdG9yeSBVUkxzIC0gSGFuZGxlIGJvdGggZnVsbCBVUkxzIGFuZCBvcmcvcmVwbyBmb3JtYXQKIyBDaGVjayBpZiByZXBvc2l0b3J5X3VybCBhbHJlYWR5IGNvbnRhaW5zIGh0dHBzOi8vZ2l0aHViLmNvbS8KaWYgZWNobyAie3tyZXBvc2l0b3J5X3VybH19IiB8IGdyZXAgLXEgIl5odHRwczovL2dpdGh1Yi5jb20vIjsgdGhlbgogICAgUkVQT19IVFRQX1VSTD0ie3tyZXBvc2l0b3J5X3VybH19IgogICAgaWYgISBlY2hvICJ7e3JlcG9zaXRvcnlfdXJsfX0iIHwgZ3JlcCAtcSAiXC5naXQkIjsgdGhlbgogICAgICAgIFJFUE9fSFRUUF9VUkw9IiR7UkVQT19IVFRQX1VSTH0uZ2l0IgogICAgZmkKZWxzZQogICAgUkVQT19IVFRQX1VSTD0iaHR0cHM6Ly9naXRodWIuY29tL3t7cmVwb3NpdG9yeV91cmx9fS5naXQiCmZpCgojIFNhbWUgZm9yIGRvY3MgcmVwb3NpdG9yeQppZiBlY2hvICJ7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSIgfCBncmVwIC1xICJeaHR0cHM6Ly9naXRodWIuY29tLyI7IHRoZW4KICAgIERPQ1NfSFRUUF9VUkw9Int7ZG9jc19yZXBvc2l0b3J5X3VybH19IgogICAgaWYgISBlY2hvICJ7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSIgfCBncmVwIC1xICJcLmdpdCQiOyB0aGVuCiAgICAgICAgRE9DU19IVFRQX1VSTD0iJHtET0NTX0hUVFBfVVJMfS5naXQiCiAgICBmaQplbHNlCiAgICBET0NTX0hUVFBfVVJMPSJodHRwczovL2dpdGh1Yi5jb20ve3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0uZ2l0IgpmaQoKIyBERUJVRzogU2hvdyB3aGF0IFVSTHMgYXJlIGJlaW5nIGNvbnN0cnVjdGVkCmVjaG8gIvCflI0gREVCVUc6IFVSTCBDb25zdHJ1Y3Rpb24gJiBQYXJhbWV0ZXJzIgplY2hvICIgIElucHV0IHJlcG9zaXRvcnlfdXJsOiAne3tyZXBvc2l0b3J5X3VybH19JyIKZWNobyAiICBJbnB1dCBkb2NzX3JlcG9zaXRvcnlfdXJsOiAne3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0nIgplY2hvICIgIElucHV0IGRvY3NfcHJvamVjdF9kaXJlY3Rvcnk6ICd7e2RvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fSciCmVjaG8gIiAgSW5wdXQgd29ya2luZ19kaXJlY3Rvcnk6ICd7e3dvcmtpbmdfZGlyZWN0b3J5fX0nIgplY2hvICIgIElucHV0IGRvY3NfYnJhbmNoOiAne3tkb2NzX2JyYW5jaH19JyIKZWNobyAiICBJbnB1dCBnaXRodWJfYXBwOiAne3tnaXRodWJfYXBwfX0nIgplY2hvICIgIElucHV0IHRhc2tfaWQ6ICd7e3Rhc2tfaWR9fSciCmVjaG8gIiAgSW5wdXQgc2VydmljZTogJ3t7c2VydmljZX19JyIKZWNobyAiICBDb25zdHJ1Y3RlZCBSRVBPX0hUVFBfVVJMOiAnJFJFUE9fSFRUUF9VUkwnIgplY2hvICIgIENvbnN0cnVjdGVkIERPQ1NfSFRUUF9VUkw6ICckRE9DU19IVFRQX1VSTCciCmVjaG8gIiAgQ3VycmVudCB3b3JraW5nIGRpcmVjdG9yeTogJChwd2QpIgplY2hvICIgIEF2YWlsYWJsZSBlbnZpcm9ubWVudCB2YXJpYWJsZXM6IgplbnYgfCBncmVwIC1FICIoR0lUSFVCfEFOVEhST1BJQykiIHwgc29ydAoKIyBUZXN0IEhUVFBTIGFjY2VzcyB0byByZXBvc2l0b3J5CmVjaG8gIvCflI0gREVCVUc6IFRlc3RpbmcgSFRUUFMgcmVwb3NpdG9yeSBhY2Nlc3MuLi4iCmVjaG8gIiAgQ29tbWFuZDogZ2l0IGxzLXJlbW90ZSBcIiRSRVBPX0hUVFBfVVJMXCIgSEVBRCIKaWYgZ2l0IGxzLXJlbW90ZSAiJFJFUE9fSFRUUF9VUkwiIEhFQUQgPiAvdG1wL3JlcG9fdGVzdC5vdXQgMj4mMTsgdGhlbgogIGVjaG8gIuKckyBIVFRQUyByZXBvc2l0b3J5IGFjY2VzcyBzdWNjZXNzZnVsIgogIGVjaG8gIiAgUmVwb3NpdG9yeToge3tyZXBvc2l0b3J5X3VybH19ICgkUkVQT19IVFRQX1VSTCkiCiAgZWNobyAiICBPdXRwdXQ6ICQoY2F0IC90bXAvcmVwb190ZXN0Lm91dCB8IGhlYWQgLTEpIgplbHNlCiAgZWNobyAi4p2MIEhUVFBTIHJlcG9zaXRvcnkgYWNjZXNzIGZhaWxlZCIKICBlY2hvICIgIFJlcG9zaXRvcnk6IHt7cmVwb3NpdG9yeV91cmx9fSAoJFJFUE9fSFRUUF9VUkwpIgogIGVjaG8gIiAgRXJyb3Igb3V0cHV0OiAkKGNhdCAvdG1wL3JlcG9fdGVzdC5vdXQpIgogIGVjaG8gIiAgR2l0IGNyZWRlbnRpYWwgaGVscGVyIHN0YXR1czoiCiAgZ2l0IGNvbmZpZyAtLWxpc3QgfCBncmVwIGNyZWRlbnRpYWwgfHwgZWNobyAiICBObyBjcmVkZW50aWFsIGhlbHBlcnMgY29uZmlndXJlZCIKICBlY2hvICIiCiAgZWNobyAi8J+aqyBBQk9SVElORzogQ2Fubm90IGFjY2VzcyByZXBvc2l0b3J5IHZpYSBIVFRQUyIKICBleGl0IDEKZmkKCiMgVGVzdCBkb2NzIHJlcG9zaXRvcnkgYWNjZXNzCmVjaG8gIvCflI0gREVCVUc6IFRlc3RpbmcgZG9jcyByZXBvc2l0b3J5IGFjY2Vzcy4uLiIKZWNobyAiICBDb21tYW5kOiBnaXQgbHMtcmVtb3RlIFwiJERPQ1NfSFRUUF9VUkxcIiBIRUFEIgppZiBnaXQgbHMtcmVtb3RlICIkRE9DU19IVFRQX1VSTCIgSEVBRCA+IC90bXAvZG9jc190ZXN0Lm91dCAyPiYxOyB0aGVuCiAgZWNobyAi4pyTIERvY3MgcmVwb3NpdG9yeSBhY2Nlc3Mgc3VjY2Vzc2Z1bCIKICBlY2hvICIgIFJlcG9zaXRvcnk6IHt7ZG9jc19yZXBvc2l0b3J5X3VybH19ICgkRE9DU19IVFRQX1VSTCkiCiAgZWNobyAiICBPdXRwdXQ6ICQoY2F0IC90bXAvZG9jc190ZXN0Lm91dCB8IGhlYWQgLTEpIgplbHNlCiAgZWNobyAi4p2MIERvY3MgcmVwb3NpdG9yeSBhY2Nlc3MgZmFpbGVkIgogIGVjaG8gIiAgUmVwb3NpdG9yeToge3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0gKCRET0NTX0hUVFBfVVJMKSIKICBlY2hvICIgIEVycm9yIG91dHB1dDogJChjYXQgL3RtcC9kb2NzX3Rlc3Qub3V0KSIKICBlY2hvICIiCiAgZWNobyAi8J+aqyBBQk9SVElORzogQ2Fubm90IGFjY2VzcyBkb2NzIHJlcG9zaXRvcnkgdmlhIEhUVFBTIgogIGV4aXQgMQpmaQoKIyBDbG9uZSBvciB1cGRhdGUgcmVwb3NpdG9yeQpjZCAiJFRBU0tfV09SS1NQQUNFIgppZiBbIC1kICIkUkVQT19OQU1FLy5naXQiIF07IHRoZW4KICAgIGVjaG8gIvCfk4EgRm91bmQgZXhpc3RpbmcgcmVwb3NpdG9yeSBhdCAnJFJFUE9fUk9PVCcsIHVwZGF0aW5nLi4uIgogICAgY2QgIiRSRVBPX05BTUUiCiAgICBnaXQgZmV0Y2ggb3JpZ2luIC0tcHJ1bmUKZWxzZQogICAgZWNobyAi8J+TpSBDbG9uaW5nIHJlcG9zaXRvcnkgdG8gJyRSRVBPX1JPT1QnLi4uIgogICAgaWYgISBnaXQgY2xvbmUgIiRSRVBPX0hUVFBfVVJMIiAiJFJFUE9fTkFNRSI7IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNsb25lIHJlcG9zaXRvcnkiCiAgICAgICAgZXhpdCAxCiAgICBmaQogICAgY2QgIiRSRVBPX05BTUUiCmZpCgojIENyZWF0ZSB3b3JraW5nIGRpcmVjdG9yeSBpZiBpdCdzIGEgc3ViZGlyZWN0b3J5CmlmIFsgIiRDTEFVREVfV09SS19ESVIiICE9ICIkUkVQT19ST09UIiBdOyB0aGVuCiAgICBta2RpciAtcCAiJENMQVVERV9XT1JLX0RJUiIKZmkKCmNkICIkQ0xBVURFX1dPUktfRElSIgplY2hvICLinJMgV29ya2luZyBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCgojIERlcml2ZSByZXBvc2l0b3J5IHNsdWcgZm9yIGdoIENMSSBvcGVyYXRpb25zClJFUE9fU0xVRz0iIgppZiBnaXQgLUMgIiRDTEFVREVfV09SS19ESVIiIHJlbW90ZSBnZXQtdXJsIG9yaWdpbiA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICBPUklHSU5fVVJMPSQoZ2l0IC1DICIkQ0xBVURFX1dPUktfRElSIiByZW1vdGUgZ2V0LXVybCBvcmlnaW4gMj4vZGV2L251bGwgfHwgZWNobyAiIikKICBpZiBlY2hvICIkT1JJR0lOX1VSTCIgfCBncmVwIC1xRSAnXmh0dHBzOi8vZ2l0aHViLmNvbS8nOyB0aGVuCiAgICBSRVBPX1NMVUc9JChlY2hvICIkT1JJR0lOX1VSTCIgfCBzZWQgLUUgJ3N8aHR0cHM6Ly9naXRodWIuY29tLyhbXi9dKy9bXi9dKykoXFwuZ2l0KT98XFwxfCcpCiAgZWxpZiBlY2hvICIkT1JJR0lOX1VSTCIgfCBncmVwIC1xRSAnXmdpdEBnaXRodWIuY29tOic7IHRoZW4KICAgIFJFUE9fU0xVRz0kKGVjaG8gIiRPUklHSU5fVVJMIiB8IHNlZCAtRSAnc3xnaXRAZ2l0aHViLmNvbTooW14vXSsvW14vXSspKFxcLmdpdCk/fFxcMXwnKQogIGZpCmZpCgojIElmIFBSIGNvbnRleHQgaXMgbWlzc2luZywgdHJ5IHRvIGRpc2NvdmVyIGJ5IHRhc2sgbGFiZWwKaWYgWyAteiAiJHtQUl9OVU1CRVI6LX0iIF0gfHwgWyAteiAiJHtQUl9VUkw6LX0iIF07IHRoZW4KICBUQVNLX0xBQkVMPSJ0YXNrLSR7VEFTS19JRH0iCiAgaWYgY29tbWFuZCAtdiBnaCA+L2Rldi9udWxsIDI+JjEgJiYgWyAtbiAiJFJFUE9fU0xVRyIgXTsgdGhlbgogICAgQ0FORF9OVU09JChnaCBwciBsaXN0IC1SICIkUkVQT19TTFVHIiAtLWxhYmVsICIkVEFTS19MQUJFTCIgLS1qc29uIG51bWJlciAtLWpxICcuWzBdLm51bWJlcicgMj4vZGV2L251bGwgfHwgdHJ1ZSkKICAgIGlmIFsgLW4gIiRDQU5EX05VTSIgXTsgdGhlbgogICAgICBQUl9OVU1CRVI9IiRDQU5EX05VTSIKICAgICAgUFJfVVJMPSQoZ2ggcHIgdmlldyAiJFBSX05VTUJFUiIgLVIgIiRSRVBPX1NMVUciIC0tanNvbiB1cmwgLXEgLnVybCAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgICBlY2hvICLinJMgRGlzY292ZXJlZCBQUiBjb250ZXh0IHZpYSBsYWJlbDogUFIgIyRQUl9OVU1CRVIgKCRQUl9VUkwpIgogICAgZmkKICBmaQpmaQoKIyBDaGVja291dCBQUiBicmFuY2ggZm9yIHF1YWxpdHkgcmV2aWV3CmlmIFsgLW4gIiRQUl9OVU1CRVIiIF0gJiYgWyAtbiAiJFBSX1VSTCIgXTsgdGhlbgogICAgZWNobyAi8J+UhCBDaGVja2luZyBvdXQgUFIgIyRQUl9OVU1CRVIgZm9yIHF1YWxpdHkgcmV2aWV3Li4uIgogICAgY2QgIiRDTEFVREVfV09SS19ESVIiCgogICAgIyBGZXRjaCBhbGwgbGF0ZXN0IGNoYW5nZXMgaW5jbHVkaW5nIFBSIGJyYW5jaGVzCiAgICBnaXQgZmV0Y2ggb3JpZ2luIC0tcHJ1bmUKCiAgICAjIEdldCBQUiBicmFuY2ggaW5mb3JtYXRpb24gYW5kIGNoZWNrb3V0CiAgICBQUl9CUkFOQ0g9JChnaCBwciB2aWV3ICIkUFJfTlVNQkVSIiAtLWpzb24gaGVhZFJlZk5hbWUgLS1qcSAnLmhlYWRSZWZOYW1lJyAyPi9kZXYvbnVsbCB8fCBlY2hvICIiKQogICAgCiAgICAjIElmIHdlIGNvdWxkbid0IGdldCB0aGUgYnJhbmNoIG5hbWUgZnJvbSBwciB2aWV3LCB0cnkgZ2V0dGluZyBpdCBmcm9tIHRoZSBQUiBsaXN0CiAgICBpZiBbIC16ICIkUFJfQlJBTkNIIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4pqg77iPICBJbml0aWFsIGJyYW5jaCBuYW1lIGxvb2t1cCBmYWlsZWQsIHRyeWluZyBhbHRlcm5hdGUgbWV0aG9kLi4uIgogICAgICAgIFBSX0JSQU5DSD0kKGdoIHByIGxpc3QgLS1qc29uIG51bWJlcixoZWFkUmVmTmFtZSAtLWpxICIuW10gfCBzZWxlY3QoLm51bWJlciA9PSAkUFJfTlVNQkVSKSB8IC5oZWFkUmVmTmFtZSIgMj4vZGV2L251bGwgfHwgZWNobyAiIikKICAgIGZpCiAgICAKICAgIGlmIFsgLW4gIiRQUl9CUkFOQ0giIF07IHRoZW4KICAgICAgICBlY2hvICLwn5OmIENoZWNraW5nIG91dCBQUiBicmFuY2g6ICRQUl9CUkFOQ0giCiAgICAgICAgaWYgZ2l0IGNoZWNrb3V0ICIkUFJfQlJBTkNIIiAyPi9kZXYvbnVsbDsgdGhlbgogICAgICAgICAgICBlY2hvICLwn5OlIFB1bGxpbmcgbGF0ZXN0IGNoYW5nZXMgZnJvbSAkUFJfQlJBTkNILi4uIgogICAgICAgICAgICBnaXQgcHVsbCBvcmlnaW4gIiRQUl9CUkFOQ0giIHx8IGVjaG8gIuKaoO+4jyAgQ291bGQgbm90IHB1bGwgbGF0ZXN0IGNoYW5nZXMiCiAgICAgICAgZWxpZiBnaXQgY2hlY2tvdXQgLWIgIiRQUl9CUkFOQ0giICJvcmlnaW4vJFBSX0JSQU5DSCIgMj4vZGV2L251bGw7IHRoZW4KICAgICAgICAgICAgZWNobyAi4pyFIENyZWF0ZWQgYW5kIGNoZWNrZWQgb3V0IHRyYWNraW5nIGJyYW5jaCBmb3IgJFBSX0JSQU5DSCIKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyAgQnJhbmNoIGNoZWNrb3V0IGZhaWxlZCwgdHJ5aW5nIHRvIGZldGNoIGFuZCBjaGVja291dC4uLiIKICAgICAgICAgICAgZ2l0IGZldGNoIG9yaWdpbiAiJFBSX0JSQU5DSDokUFJfQlJBTkNIIiAyPi9kZXYvbnVsbCAmJiBnaXQgY2hlY2tvdXQgIiRQUl9CUkFOQ0giIHx8IHsKICAgICAgICAgICAgICAgIGVjaG8gIuKdjCBBbGwgY2hlY2tvdXQgbWV0aG9kcyBmYWlsZWQiCiAgICAgICAgICAgICAgICBleGl0IDEKICAgICAgICAgICAgfQogICAgICAgIGZpCiAgICBlbHNlCiAgICAgICAgZWNobyAi4p2MIENSSVRJQ0FMOiBDb3VsZCBub3QgZGV0ZXJtaW5lIFBSIGJyYW5jaCBuYW1lIGZyb20gUFIgIyRQUl9OVU1CRVIiCiAgICAgICAgZWNobyAiICAgVGhpcyB3b3VsZCBjcmVhdGUgYSB3cm9uZyBicmFuY2ggbmFtZSAocHItJFBSX05VTUJFUikiCiAgICAgICAgZWNobyAiICAgUmVmdXNpbmcgdG8gY29udGludWUgdG8gYXZvaWQgY3JlYXRpbmcgZHVwbGljYXRlIGJyYW5jaGVzIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICAjIFZlcmlmeSB3ZSdyZSBvbiB0aGUgcmlnaHQgY29tbWl0CiAgICBDVVJSRU5UX1NIQT0kKGdpdCByZXYtcGFyc2UgSEVBRCkKICAgIGVjaG8gIvCfk40gQ3VycmVudCBjb21taXQ6ICRDVVJSRU5UX1NIQSIKCiAgICAjIERvbid0IGNoYW5nZSBkaXJlY3RvcnkgeWV0IC0gd2UnbGwgY2QgdG8gQ0xBVURFX1dPUktfRElSIGF0IHRoZSBlbmQKICAgIGVjaG8gIuKchSBSZXBvc2l0b3J5IHBvc2l0aW9uZWQgYXQgUFIgIyRQUl9OVU1CRVIgd2l0aCBsYXRlc3QgY2hhbmdlcyIKZWxzZQogICAgZWNobyAi4pqg77iPICBObyBQUiBjb250ZXh0IGZvdW5kIChQUl9OVU1CRVI9JFBSX05VTUJFUiwgUFJfVVJMPSRQUl9VUkwpIgogICAgZWNobyAi8J+TiyBXaWxsIHBlcmZvcm0gcXVhbGl0eSByZXZpZXcgb24gY3VycmVudCByZXBvc2l0b3J5IHN0YXRlIgpmaQoKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5SNIENPREUgUVVBTElUWSBBTkFMWVNJUyBQUkVQQVJBVElPTiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICIiCmVjaG8gIk1JU1NJT046IEVuZm9yY2Ugcmlnb3JvdXMgY29kZSBxdWFsaXR5IHN0YW5kYXJkczoiCmVjaG8gIjEuIFJ1biBDbGlwcHkgcGVkYW50aWMgY2hlY2tzIG9uIGFsbCBSdXN0IGNvZGUgY2hhbmdlcyIKZWNobyAiMi4gVmVyaWZ5IGNvZGUgZm9ybWF0dGluZyB3aXRoIGNhcmdvIGZtdCAtLWNoZWNrIgplY2hvICIzLiBFeGVjdXRlIGFsbCB0ZXN0cyB3aXRoIGNhcmdvIHRlc3QiCmVjaG8gIjQuIExpbnQgWUFNTCBmaWxlcyB3aGVuIFlBTUwgY2hhbmdlcyBhcmUgZGV0ZWN0ZWQiCmVjaG8gIjUuIEFkZCAncmVhZHktZm9yLXFhJyBsYWJlbCBvbmx5IHdoZW4gYWxsIHF1YWxpdHkgY2hlY2tzIHBhc3MiCmVjaG8gIiIKZWNobyAiUXVhbGl0eSBTdGFuZGFyZHM6IgplY2hvICItIFplcm8gY2xpcHB5IHdhcm5pbmdzIChwZWRhbnRpYyBsZXZlbCkiCmVjaG8gIi0gUGVyZmVjdCBjb2RlIGZvcm1hdHRpbmciCmVjaG8gIi0gMTAwJSB0ZXN0IHBhc3NpbmcgcmF0ZSIKZWNobyAiLSBDbGVhbiBZQU1MIHN5bnRheCBhbmQgc3RydWN0dXJlIgplY2hvICIiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgQ29weSB0YXNrIGZpbGVzIGZyb20gZG9jcyByZXBvc2l0b3J5IGlmIGNvbmZpZ3VyZWQKZWNobyAi8J+TiyBQcmVwYXJpbmcgdGFzayBkb2N1bWVudGF0aW9uIGZvciBxdWFsaXR5IHJldmlldy4uLiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgoKe3sjaWYgZG9jc1JlcG9zaXRvcnlVcmx9fQojIEluaXRpYWxpemUgY29tcHJlaGVuc2l2ZSB0cmFja2luZyB3aXRoIGV4cGxpY2l0IHN0YWdlIGZsYWdzCkNPUElFRF9GSUxFUz0iIgpGQUlMRURfRklMRVM9IiIKRVhJU1RJTkdfRklMRVM9IiIKRE9DU19TRVRVUF9TVUNDRVNTPWZhbHNlCkRPQ1NfQVVUSF9WRVJJRklFRD1mYWxzZQpET0NTX0NMT05FX1NVQ0NFU1M9ZmFsc2UKRE9DU19QQVRIX1ZBTElEPWZhbHNlCgojIFByZXBhcmUgdGFyZ2V0IGRpcmVjdG9yeSAoZW5zdXJlIGl0IGV4aXN0cykKaWYgISBta2RpciAtcCAiJENMQVVERV9XT1JLX0RJUi90YXNrIiAyPi90bXAvbWtkaXJfZXJyb3IubG9nOyB0aGVuCiAgICBlY2hvICLinYwgQ1JJVElDQUw6IENhbm5vdCBjcmVhdGUgdGFzayBkaXJlY3RvcnkiCiAgICBlY2hvICIgICBFcnJvcjogJChjYXQgL3RtcC9ta2Rpcl9lcnJvci5sb2cgMj4vZGV2L251bGwgfHwgZWNobyAndW5rbm93bicpIgogICAgZWNobyAiICAgQWJvcnRpbmcgZG9jcyBzZXR1cCIKZWxzZQogICAgZWNobyAi4pyTIFRhc2sgZGlyZWN0b3J5IHByZXBhcmVkOiAkQ0xBVURFX1dPUktfRElSL3Rhc2siCmZpCgojIFZhbGlkYXRlIEdpdEh1YiB0b2tlbiBleGlzdHMgYmVmb3JlIHByb2NlZWRpbmcKaWYgWyAteiAiJEdJVEhVQl9UT0tFTiIgXTsgdGhlbgogICAgZWNobyAi4p2MIENSSVRJQ0FMOiBObyBHSVRIVUJfVE9LRU4gYXZhaWxhYmxlIgogICAgZWNobyAiICAgQ2Fubm90IGF1dGhlbnRpY2F0ZSB0byBkb2NzIHJlcG9zaXRvcnkiCiAgICBlY2hvICIgICBBYm9ydGluZyBkb2NzIHNldHVwIC0gYWdlbnQgd2lsbCBoYXZlIGxpbWl0ZWQgY29udGV4dCIKICAgIERPQ1NfQVVUSF9WRVJJRklFRD1mYWxzZQplbHNlCiAgICBlY2hvICLinJMgR2l0SHViIHRva2VuIGF2YWlsYWJsZSAoJHsjR0lUSFVCX1RPS0VOfSBjaGFycykiCiAgICBET0NTX0FVVEhfVkVSSUZJRUQ9dHJ1ZQpmaQoKIyBPbmx5IHByb2NlZWQgaWYgd2UgaGF2ZSBhdXRoZW50aWNhdGlvbgppZiBbICIkRE9DU19BVVRIX1ZFUklGSUVEIiA9ICJ0cnVlIiBdOyB0aGVuCiAgICAjIEJ1aWxkIGF1dGhlbnRpY2F0ZWQgZG9jcyBVUkwKICAgIERPQ1NfUkVQT19VUkw9Int7ZG9jc1JlcG9zaXRvcnlVcmx9fSIKICAgIERPQ1NfSFRUUF9VUkw9JChlY2hvICIkRE9DU19SRVBPX1VSTCIgfCBzZWQgInN8aHR0cHM6Ly9naXRodWIuY29tL3xodHRwczovL3gtYWNjZXNzLXRva2VuOiRHSVRIVUJfVE9LRU5AZ2l0aHViLmNvbS98IikKICAgIAogICAgZWNobyAi8J+TpSBEb2NzIFJlcG9zaXRvcnk6ICRET0NTX1JFUE9fVVJMIgogICAgCiAgICAjIFN0ZXAgMTogVmVyaWZ5IHJlcG9zaXRvcnkgYWNjZXNzIChmYWlsIGZhc3QgaWYgaW5hY2Nlc3NpYmxlKQogICAgZWNobyAiIgogICAgZWNobyAi8J+UjSBTdGVwIDEvNDogVmVyaWZ5aW5nIHJlcG9zaXRvcnkgYWNjZXNzLi4uIgogICAgaWYgISBnaXQgbHMtcmVtb3RlICIkRE9DU19IVFRQX1VSTCIgSEVBRCA+L3RtcC9kb2NzX2FjY2Vzc190ZXN0Lm91dCAyPiYxOyB0aGVuCiAgICAgICAgZWNobyAi4p2MIFJlcG9zaXRvcnkgYWNjZXNzIEZBSUxFRCIKICAgICAgICBlY2hvICIgICBVUkw6ICRET0NTX1JFUE9fVVJMIgogICAgICAgIGVjaG8gIiAgIEVycm9yOiAkKGNhdCAvdG1wL2RvY3NfYWNjZXNzX3Rlc3Qub3V0IDI+L2Rldi9udWxsIHwgaGVhZCAtMykiCiAgICAgICAgZWNobyAiICAgVGhpcyBpcyBhIGJsb2NraW5nIGVycm9yIC0gY2Fubm90IHByb2NlZWQgd2l0aCBkb2NzIHNldHVwIgogICAgICAgIERPQ1NfQVVUSF9WRVJJRklFRD1mYWxzZQogICAgZWxzZQogICAgICAgIGVjaG8gIuKchSBSZXBvc2l0b3J5IGFjY2VzcyB2ZXJpZmllZCIKICAgICAgICBET0NTX0FVVEhfVkVSSUZJRUQ9dHJ1ZQogICAgZmkKZmkKCiMgU3RlcCAyOiBDbG9uZSByZXBvc2l0b3J5IHdpdGggZXhwbGljaXQgZXJyb3IgaGFuZGxpbmcKaWYgWyAiJERPQ1NfQVVUSF9WRVJJRklFRCIgPSAidHJ1ZSIgXTsgdGhlbgogICAgZWNobyAiIgogICAgZWNobyAi8J+TpSBTdGVwIDIvNDogQ2xvbmluZyBkb2NzIHJlcG9zaXRvcnkuLi4iCiAgICAKICAgICMgQ2xlYW4gdXAgYW55IGV4aXN0aW5nIGRvY3MgY2xvbmUKICAgIHJtIC1yZiAvdG1wL2RvY3MtcmVwbyAvdG1wL2RvY3NfY2xvbmVfZXJyb3IubG9nIDI+L2Rldi9udWxsIHx8IHRydWUKICAgIAogICAgTUFYX0FUVEVNUFRTPTMKICAgIENMT05FX1NVQ0NFRURFRD1mYWxzZQogICAgCiAgICBmb3IgYXR0ZW1wdCBpbiAkKHNlcSAxICRNQVhfQVRURU1QVFMpOyBkbwogICAgICAgIGVjaG8gIiAgIENsb25lIGF0dGVtcHQgJGF0dGVtcHQvJE1BWF9BVFRFTVBUUy4uLiIKICAgICAgICAKICAgICAgICAjIEF0dGVtcHQgY2xvbmUgd2l0aCBleHBsaWNpdCBlcnJvciBjYXB0dXJlCiAgICAgICAgaWYgZ2l0IGNsb25lIC0tcXVpZXQgLS1kZXB0aCAxICIkRE9DU19IVFRQX1VSTCIgL3RtcC9kb2NzLXJlcG8gMj4vdG1wL2RvY3NfY2xvbmVfZXJyb3IubG9nOyB0aGVuCiAgICAgICAgICAgICMgVmVyaWZ5IGNsb25lIGFjdHVhbGx5IHN1Y2NlZWRlZAogICAgICAgICAgICBpZiBbIC1kICIvdG1wL2RvY3MtcmVwby8uZ2l0IiBdOyB0aGVuCiAgICAgICAgICAgICAgICAjIEFkZGl0aW9uYWwgdmFsaWRhdGlvbiAtIGNoZWNrIGZvciBhdCBsZWFzdCBzb21lIGNvbnRlbnQKICAgICAgICAgICAgICAgIEZJTEVfQ09VTlQ9JChmaW5kIC90bXAvZG9jcy1yZXBvIC10eXBlIGYgMj4vZGV2L251bGwgfCB3YyAtbCkKICAgICAgICAgICAgICAgIGlmIFsgIiRGSUxFX0NPVU5UIiAtZ3QgMCBdOyB0aGVuCiAgICAgICAgICAgICAgICAgICAgQ0xPTkVfU1VDQ0VFREVEPXRydWUKICAgICAgICAgICAgICAgICAgICBET0NTX0NMT05FX1NVQ0NFU1M9dHJ1ZQogICAgICAgICAgICAgICAgICAgIGVjaG8gIuKchSBDbG9uZSBzdWNjZXNzZnVsICgkRklMRV9DT1VOVCBmaWxlcykiCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBlY2hvICLinYwgQ2xvbmUgc3VjY2VlZGVkIGJ1dCByZXBvc2l0b3J5IGFwcGVhcnMgZW1wdHkiCiAgICAgICAgICAgICAgICBmaQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBlY2hvICLinYwgQ2xvbmUgY29tbWFuZCBzdWNjZWVkZWQgYnV0IC5naXQgZGlyZWN0b3J5IG1pc3NpbmciCiAgICAgICAgICAgIGZpCiAgICAgICAgZWxzZQogICAgICAgICAgICBDTE9ORV9FUlJPUj0kKGNhdCAvdG1wL2RvY3NfY2xvbmVfZXJyb3IubG9nIDI+L2Rldi9udWxsIHwgaGVhZCAtMykKICAgICAgICAgICAgZWNobyAi4p2MIENsb25lIGZhaWxlZDogJHtDTE9ORV9FUlJPUjotVW5rbm93biBlcnJvcn0iCiAgICAgICAgZmkKICAgICAgICAKICAgICAgICAjIFJldHJ5IGxvZ2ljCiAgICAgICAgaWYgWyAkYXR0ZW1wdCAtbHQgJE1BWF9BVFRFTVBUUyBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIiAgIFdhaXRpbmcgNSBzZWNvbmRzIGJlZm9yZSByZXRyeS4uLiIKICAgICAgICAgICAgc2xlZXAgNQogICAgICAgIGZpCiAgICBkb25lCiAgICAKICAgIGlmIFsgIiRDTE9ORV9TVUNDRUVERUQiICE9ICJ0cnVlIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4p2MIEZBSUxFRCB0byBjbG9uZSBhZnRlciAkTUFYX0FUVEVNUFRTIGF0dGVtcHRzIgogICAgICAgIGVjaG8gIiAgIExhc3QgZXJyb3I6ICQoY2F0IC90bXAvZG9jc19jbG9uZV9lcnJvci5sb2cgMj4vZGV2L251bGwgfHwgZWNobyAnTm8gZXJyb3IgbG9nIGF2YWlsYWJsZScpIgogICAgICAgIERPQ1NfQ0xPTkVfU1VDQ0VTUz1mYWxzZQogICAgZmkKZWxzZQogICAgZWNobyAiIgogICAgZWNobyAi4o+t77iPICBTdGVwIDIvNDogU0tJUFBFRCAoYXV0aGVudGljYXRpb24gZmFpbGVkIG9yIG5vdCBhdmFpbGFibGUpIgpmaQoKIyBTdGVwIDM6IERldGVybWluZSBhbmQgdmFsaWRhdGUgcGF0aHMgd2l0aCBzaW1wbGlmaWVkIGxvZ2ljCmlmIFsgIiRET0NTX0NMT05FX1NVQ0NFU1MiID0gInRydWUiIF07IHRoZW4KICAgIGVjaG8gIiIKICAgIGVjaG8gIvCfk4IgU3RlcCAzLzQ6IFZhbGlkYXRpbmcgZG9jdW1lbnRhdGlvbiBwYXRocy4uLiIKICAgIAogICAgIyBTaW1wbGlmaWVkIHBhdGggZGV0ZXJtaW5hdGlvbiAtIHNpbmdsZSBjbGVhciBsb2dpYyBwYXRoCiAgICB7eyNpZiBkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0KICAgICMgZG9jc19wcm9qZWN0X2RpcmVjdG9yeSBpcyBzcGVjaWZpZWQKICAgIGlmIFsgInt7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19IiA9ICIuIiBdIHx8IFsgInt7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19IiA9ICIiIF07IHRoZW4KICAgICAgICAjIFJvb3Qgb2YgcmVwb3NpdG9yeQogICAgICAgIERPQ1NfQkFTRV9QQVRIPSIvdG1wL2RvY3MtcmVwbyIKICAgICAgICBlY2hvICIgICBVc2luZyByZXBvc2l0b3J5IHJvb3QgKGRvY3NfcHJvamVjdF9kaXJlY3Rvcnk9J3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19JykiCiAgICBlbHNlCiAgICAgICAgIyBTdWJkaXJlY3Rvcnkgc3BlY2lmaWVkCiAgICAgICAgRE9DU19CQVNFX1BBVEg9Ii90bXAvZG9jcy1yZXBvL3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19IgogICAgICAgIGVjaG8gIiAgIFVzaW5nIHN1YmRpcmVjdG9yeToge3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0iCiAgICBmaQogICAge3tlbHNlfX0KICAgICMgTm8gZG9jc19wcm9qZWN0X2RpcmVjdG9yeSBzcGVjaWZpZWQgLSBkZWZhdWx0IHRvIHJvb3QKICAgIERPQ1NfQkFTRV9QQVRIPSIvdG1wL2RvY3MtcmVwbyIKICAgIGVjaG8gIiAgIFVzaW5nIHJlcG9zaXRvcnkgcm9vdCAobm8gZG9jc19wcm9qZWN0X2RpcmVjdG9yeSBzcGVjaWZpZWQpIgogICAge3svaWZ9fQogICAgCiAgICAjIFZhbGlkYXRlIGJhc2UgcGF0aCBleGlzdHMKICAgIGlmIFsgISAtZCAiJERPQ1NfQkFTRV9QQVRIIiBdOyB0aGVuCiAgICAgICAgZWNobyAi4p2MIEJhc2UgcGF0aCBkb2VzIG5vdCBleGlzdDogJERPQ1NfQkFTRV9QQVRIIgogICAgICAgIGVjaG8gIiAgIFJlcG9zaXRvcnkgc3RydWN0dXJlOiIKICAgICAgICBscyAtbGEgL3RtcC9kb2NzLXJlcG8gMj4vZGV2L251bGwgfCBoZWFkIC0xMCB8fCBlY2hvICIgICBDYW5ub3QgbGlzdCByZXBvc2l0b3J5IgogICAgICAgIERPQ1NfUEFUSF9WQUxJRD1mYWxzZQogICAgICAgIERPQ1NfQ0xPTkVfU1VDQ0VTUz1mYWxzZQogICAgZWxzZQogICAgICAgICMgQnVpbGQgYW5kIHZhbGlkYXRlIHJlbWFpbmluZyBwYXRocwogICAgICAgIERPQ1NfUEFUSD0iJERPQ1NfQkFTRV9QQVRILy50YXNrbWFzdGVyIgogICAgICAgIFRBU0tfRElSPSIkRE9DU19QQVRIL2RvY3MvdGFzay17e3Rhc2tfaWR9fSIKICAgICAgICAKICAgICAgICBlY2hvICLinIUgQmFzZSBwYXRoIGV4aXN0czogJERPQ1NfQkFTRV9QQVRIIgogICAgICAgIGVjaG8gIiAgIFRhc2ttYXN0ZXIgZGlyZWN0b3J5OiAkRE9DU19QQVRIIgogICAgICAgIGVjaG8gIiAgIFRhc2sgZGlyZWN0b3J5OiAkVEFTS19ESVIiCiAgICAgICAgCiAgICAgICAgIyBWYWxpZGF0ZSAudGFza21hc3RlciBkaXJlY3RvcnkgLSBjcmVhdGUgaWYgbWlzc2luZyBmb3IgcmVzaWxpZW50IHNldHVwCiAgICAgICAgaWYgWyAhIC1kICIkRE9DU19QQVRIIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyAgLnRhc2ttYXN0ZXIgZGlyZWN0b3J5IG5vdCBmb3VuZCBhdDogJERPQ1NfUEFUSCIKICAgICAgICAgICAgZWNobyAiICAgSW5pdGlhbGl6aW5nIC50YXNrbWFzdGVyIHN0cnVjdHVyZS4uLiIKICAgICAgICAgICAgbWtkaXIgLXAgIiRET0NTX1BBVEgvdGFza3MiCiAgICAgICAgICAgIG1rZGlyIC1wICIkRE9DU19QQVRIL2RvY3MiCiAgICAgICAgICAgIGlmIFsgLWQgIiRET0NTX1BBVEgiIF07IHRoZW4KICAgICAgICAgICAgICAgIGVjaG8gIuKchSBDcmVhdGVkIC50YXNrbWFzdGVyIHN0cnVjdHVyZSIKICAgICAgICAgICAgICAgIERPQ1NfUEFUSF9WQUxJRD10cnVlCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGVjaG8gIuKdjCBGYWlsZWQgdG8gY3JlYXRlIC50YXNrbWFzdGVyIHN0cnVjdHVyZSIKICAgICAgICAgICAgICAgIERPQ1NfUEFUSF9WQUxJRD1mYWxzZQogICAgICAgICAgICBmaQogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4pyFIC50YXNrbWFzdGVyIGRpcmVjdG9yeSBmb3VuZCIKICAgICAgICAgICAgRE9DU19QQVRIX1ZBTElEPXRydWUKICAgICAgICBmaQogICAgICAgIAogICAgICAgICMgQ2hlY2sgdGFzayBkaXJlY3RvcnkgKGluZm9ybWF0aW9uYWwgb25seSwgbm90IGJsb2NraW5nKQogICAgICAgIGlmIFsgISAtZCAiJFRBU0tfRElSIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyAgVGFzay1zcGVjaWZpYyBkaXJlY3Rvcnkgbm90IGZvdW5kOiAkVEFTS19ESVIiCiAgICAgICAgICAgIGlmIFsgLWQgIiRET0NTX1BBVEgvZG9jcyIgXTsgdGhlbgogICAgICAgICAgICAgICAgZWNobyAiICAgQXZhaWxhYmxlIHRhc2sgZGlyZWN0b3JpZXM6IgogICAgICAgICAgICAgICAgbHMgLWQgIiRET0NTX1BBVEgvZG9jcy90YXNrLSIqIDI+L2Rldi9udWxsIHwgaGVhZCAtNSB8fCBlY2hvICIgICBOb25lIGZvdW5kIgogICAgICAgICAgICBmaQogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4pyFIFRhc2sgZGlyZWN0b3J5IGZvdW5kIgogICAgICAgIGZpCiAgICBmaQplbHNlCiAgICBlY2hvICIiCiAgICBlY2hvICLij63vuI8gIFN0ZXAgMy80OiBTS0lQUEVEIChjbG9uZSB3YXMgbm90IHN1Y2Nlc3NmdWwpIgpmaQoKIyBTdGVwIDQ6IENvcHkgZG9jdW1lbnRhdGlvbiBmaWxlcyB3aXRoIGVuaGFuY2VkIGVycm9yIHRyYWNraW5nCmlmIFsgIiRET0NTX1BBVEhfVkFMSUQiID0gInRydWUiIF07IHRoZW4KICAgIGVjaG8gIiIKICAgIGVjaG8gIvCfk4sgU3RlcCA0LzQ6IENvcHlpbmcgZG9jdW1lbnRhdGlvbiBmaWxlcy4uLiIKICAgIAogICAgIyBFbmhhbmNlZCBmaWxlIGNvcHkgaGVscGVyIHdpdGggYmV0dGVyIGVycm9yIGhhbmRsaW5nCiAgICBzYWZlX2NvcHlfZmlsZSgpIHsKICAgICAgICBsb2NhbCBzcmM9IiQxIgogICAgICAgIGxvY2FsIGRlc3Q9IiQyIgogICAgICAgIGxvY2FsIGZpbGVuYW1lPSIkMyIKICAgICAgICAKICAgICAgICAjIFZhbGlkYXRlIHNvdXJjZSBleGlzdHMKICAgICAgICBpZiBbICEgLWYgIiRzcmMiIF07IHRoZW4KICAgICAgICAgICAgZWNobyAiICDiipggJGZpbGVuYW1lIC0gc291cmNlIG5vdCBmb3VuZCIKICAgICAgICAgICAgRkFJTEVEX0ZJTEVTPSIkRkFJTEVEX0ZJTEVTICRmaWxlbmFtZSIKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICBmaQogICAgICAgIAogICAgICAgICMgQ2hlY2sgaWYgc291cmNlIGlzIHJlYWRhYmxlIGFuZCBoYXMgY29udGVudAogICAgICAgIGlmIFsgISAtciAiJHNyYyIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICIgIOKdjCAkZmlsZW5hbWUgLSBzb3VyY2Ugbm90IHJlYWRhYmxlIgogICAgICAgICAgICBGQUlMRURfRklMRVM9IiRGQUlMRURfRklMRVMgJGZpbGVuYW1lIgogICAgICAgICAgICByZXR1cm4gMQogICAgICAgIGZpCiAgICAgICAgCiAgICAgICAgbG9jYWwgc3JjX3NpemU9JCh3YyAtYyA8ICIkc3JjIiAyPi9kZXYvbnVsbCB8fCBlY2hvICIwIikKICAgICAgICBpZiBbICIkc3JjX3NpemUiID0gIjAiIF07IHRoZW4KICAgICAgICAgICAgZWNobyAiICDimqDvuI8gICRmaWxlbmFtZSAtIHNvdXJjZSBpcyBlbXB0eSAoMCBieXRlcykiCiAgICAgICAgICAgIEZBSUxFRF9GSUxFUz0iJEZBSUxFRF9GSUxFUyAkZmlsZW5hbWUiCiAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgZmkKICAgICAgICAKICAgICAgICAjIENoZWNrIGlmIGRlc3RpbmF0aW9uIGFscmVhZHkgZXhpc3RzIHdpdGggY29udGVudAogICAgICAgIGlmIFsgLWYgIiRkZXN0IiBdICYmIFsgLXMgIiRkZXN0IiBdOyB0aGVuCiAgICAgICAgICAgIGxvY2FsIGRlc3Rfc2l6ZT0kKHdjIC1jIDwgIiRkZXN0IikKICAgICAgICAgICAgZWNobyAiICDihrsgJGZpbGVuYW1lIC0gYWxyZWFkeSBleGlzdHMgKCR7ZGVzdF9zaXplfUIpLCBwcmVzZXJ2aW5nIgogICAgICAgICAgICBFWElTVElOR19GSUxFUz0iJEVYSVNUSU5HX0ZJTEVTICRmaWxlbmFtZSIKICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICBmaQogICAgICAgIAogICAgICAgICMgQXR0ZW1wdCBjb3B5IHdpdGggZXhwbGljaXQgZXJyb3IgaGFuZGxpbmcKICAgICAgICBpZiBjcCAiJHNyYyIgIiRkZXN0IiAyPi90bXAvY29weV9lcnJvcl8ke2ZpbGVuYW1lfS5sb2c7IHRoZW4KICAgICAgICAgICAgIyBWZXJpZnkgY29weSBzdWNjZWVkZWQgYW5kIGhhcyBjb250ZW50CiAgICAgICAgICAgIGlmIFsgLWYgIiRkZXN0IiBdICYmIFsgLXMgIiRkZXN0IiBdOyB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBjb3BpZWRfc2l6ZT0kKHdjIC1jIDwgIiRkZXN0IikKICAgICAgICAgICAgICAgICMgVmVyaWZ5IHNpemUgbWF0Y2hlcyBzb3VyY2UKICAgICAgICAgICAgICAgIGlmIFsgIiRjb3BpZWRfc2l6ZSIgPSAiJHNyY19zaXplIiBdOyB0aGVuCiAgICAgICAgICAgICAgICAgICAgZWNobyAiICDinIUgJGZpbGVuYW1lIC0gY29waWVkIHN1Y2Nlc3NmdWxseSAoJHtjb3BpZWRfc2l6ZX1CKSIKICAgICAgICAgICAgICAgICAgICBDT1BJRURfRklMRVM9IiRDT1BJRURfRklMRVMgJGZpbGVuYW1lIgogICAgICAgICAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgZWNobyAiICDinYwgJGZpbGVuYW1lIC0gc2l6ZSBtaXNtYXRjaCAoc3JjOiR7c3JjX3NpemV9QiBkZXN0OiR7Y29waWVkX3NpemV9QikiCiAgICAgICAgICAgICAgICAgICAgcm0gLWYgIiRkZXN0IgogICAgICAgICAgICAgICAgICAgIEZBSUxFRF9GSUxFUz0iJEZBSUxFRF9GSUxFUyAkZmlsZW5hbWUiCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgIGZpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGVjaG8gIiAg4p2MICRmaWxlbmFtZSAtIGNvcHkgc3VjY2VlZGVkIGJ1dCBkZXN0aW5hdGlvbiBpcyBlbXB0eSIKICAgICAgICAgICAgICAgIHJtIC1mICIkZGVzdCIKICAgICAgICAgICAgICAgIEZBSUxFRF9GSUxFUz0iJEZBSUxFRF9GSUxFUyAkZmlsZW5hbWUiCiAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICBmaQogICAgICAgIGVsc2UKICAgICAgICAgICAgbG9jYWwgZXJyb3I9JChjYXQgL3RtcC9jb3B5X2Vycm9yXyR7ZmlsZW5hbWV9LmxvZyAyPi9kZXYvbnVsbCB8fCBlY2hvICJ1bmtub3duIGVycm9yIikKICAgICAgICAgICAgZWNobyAiICDinYwgJGZpbGVuYW1lIC0gY29weSBmYWlsZWQ6ICRlcnJvciIKICAgICAgICAgICAgRkFJTEVEX0ZJTEVTPSIkRkFJTEVEX0ZJTEVTICRmaWxlbmFtZSIKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICBmaQogICAgfQogICAgCiAgICAjIENvcHkgdGFzay1zcGVjaWZpYyBmaWxlcyAodGFzay5tZCBpcyBjcml0aWNhbCwgb3RoZXJzIGFyZSBvcHRpb25hbCkKICAgIENSSVRJQ0FMX0ZJTEVTX0NPUElFRD0wCiAgICBpZiBbIC1kICIkVEFTS19ESVIiIF07IHRoZW4KICAgICAgICBlY2hvICIgIPCfk4EgUHJvY2Vzc2luZyB0YXNrLXNwZWNpZmljIGZpbGVzIGZyb206ICRUQVNLX0RJUiIKICAgICAgICAKICAgICAgICAjIENyaXRpY2FsIGZpbGU6IHRhc2subWQKICAgICAgICBpZiBzYWZlX2NvcHlfZmlsZSAiJFRBU0tfRElSL3Rhc2subWQiICIkQ0xBVURFX1dPUktfRElSL3Rhc2svdGFzay5tZCIgInRhc2subWQiOyB0aGVuCiAgICAgICAgICAgIENSSVRJQ0FMX0ZJTEVTX0NPUElFRD0kKChDUklUSUNBTF9GSUxFU19DT1BJRUQgKyAxKSkKICAgICAgICBmaQogICAgICAgIAogICAgICAgICMgT3B0aW9uYWwgZmlsZXMKICAgICAgICBzYWZlX2NvcHlfZmlsZSAiJFRBU0tfRElSL2FjY2VwdGFuY2UtY3JpdGVyaWEubWQiICIkQ0xBVURFX1dPUktfRElSL3Rhc2svYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCIgImFjY2VwdGFuY2UtY3JpdGVyaWEubWQiIHx8IHRydWUKICAgICAgICBzYWZlX2NvcHlfZmlsZSAiJFRBU0tfRElSL3Byb21wdC5tZCIgIiRDTEFVREVfV09SS19ESVIvdGFzay9wcm9tcHQubWQiICJwcm9tcHQubWQiIHx8IHRydWUKICAgIGVsc2UKICAgICAgICBlY2hvICIgIOKaoO+4jyAgVGFzayBkaXJlY3Rvcnkgbm90IGZvdW5kOiAkVEFTS19ESVIiCiAgICAgICAgZWNobyAiICBTa2lwcGluZyB0YXNrLXNwZWNpZmljIGZpbGVzICh0YXNrLm1kLCBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kLCBwcm9tcHQubWQpIgogICAgICAgIEZBSUxFRF9GSUxFUz0iJEZBSUxFRF9GSUxFUyB0YXNrLm1kIGFjY2VwdGFuY2UtY3JpdGVyaWEubWQgcHJvbXB0Lm1kIgogICAgZmkKICAgIAogICAgIyBDb3B5IGFyY2hpdGVjdHVyZSBkb2N1bWVudGF0aW9uIChvcHRpb25hbCkKICAgIHNhZmVfY29weV9maWxlICIkRE9DU19QQVRIL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIiAiJENMQVVERV9XT1JLX0RJUi90YXNrL2FyY2hpdGVjdHVyZS5tZCIgImFyY2hpdGVjdHVyZS5tZCIgfHwgdHJ1ZQogICAgCiAgICAjIERldGVybWluZSBvdmVyYWxsIHN1Y2Nlc3MKICAgICMgU3VjY2VzcyBpZiBhdCBsZWFzdCBvbmUgY3JpdGljYWwgZmlsZSB3YXMgY29waWVkL2V4aXN0cyBPUiBhbnkgZmlsZXMgd2VyZSBjb3BpZWQvZXhpc3QKICAgIEFWQUlMQUJMRV9GSUxFX0NPVU5UPSQobHMgLTEgIiRDTEFVREVfV09SS19ESVIvdGFzay8iIDI+L2Rldi9udWxsIHwgd2MgLWwpCiAgICBpZiBbICIkQVZBSUxBQkxFX0ZJTEVfQ09VTlQiIC1ndCAwIF07IHRoZW4KICAgICAgICBET0NTX1NFVFVQX1NVQ0NFU1M9dHJ1ZQogICAgICAgIGVjaG8gIiAg4pyFIFNldHVwIHN1Y2Nlc3NmdWwgLSAkQVZBSUxBQkxFX0ZJTEVfQ09VTlQgZmlsZShzKSBhdmFpbGFibGUiCiAgICBlbHNlCiAgICAgICAgZWNobyAiICDinYwgU2V0dXAgZmFpbGVkIC0gbm8gZmlsZXMgYXZhaWxhYmxlIGZvciBhZ2VudCIKICAgICAgICBET0NTX1NFVFVQX1NVQ0NFU1M9ZmFsc2UKICAgIGZpCmVsc2UKICAgIGVjaG8gIiIKICAgIGVjaG8gIuKPre+4jyAgU3RlcCA0LzQ6IFNLSVBQRUQgKHBhdGggdmFsaWRhdGlvbiBmYWlsZWQpIgpmaQoKIyBDb21wcmVoZW5zaXZlIGZpbmFsIHN1bW1hcnkgd2l0aCBjbGVhciBzdGF0dXMKZWNobyAiIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIvCfk4ogVEFTSyBET0NVTUVOVEFUSU9OIFNFVFVQIFNVTU1BUlkiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgT3ZlcmFsbCBzdGF0dXMgd2l0aCBjbGVhciBwYXNzL2ZhaWwKaWYgWyAiJERPQ1NfU0VUVVBfU1VDQ0VTUyIgPSAidHJ1ZSIgXTsgdGhlbgogICAgZWNobyAi4pyFIFNUQVRVUzogU1VDQ0VTUyIKICAgIGVjaG8gIiAgIERvY3VtZW50YXRpb24gaXMgYXZhaWxhYmxlIGZvciB0aGUgYWdlbnQiCmVsc2UKICAgIGVjaG8gIuKdjCBTVEFUVVM6IEZBSUxFRCIKICAgIGVjaG8gIiAgIEFnZW50IHdpbGwgcHJvY2VlZCB3aXRoIGxpbWl0ZWQgY29udGV4dCIKZmkKCiMgRGV0YWlsZWQgc3RhZ2UgYnJlYWtkb3duCmVjaG8gIiIKZWNobyAiUGlwZWxpbmUgU3RhZ2VzOiIKcHJpbnRmICIgIDEuIEF1dGhlbnRpY2F0aW9uOiAgICVzXG4iICIkKFsgIiRET0NTX0FVVEhfVkVSSUZJRUQiID0gInRydWUiIF0gJiYgZWNobyAi4pyFIFZlcmlmaWVkIiB8fCBlY2hvICLinYwgRmFpbGVkIikiCnByaW50ZiAiICAyLiBDbG9uZTogICAgICAgICAgICAlc1xuIiAiJChbICIkRE9DU19DTE9ORV9TVUNDRVNTIiA9ICJ0cnVlIiBdICYmIGVjaG8gIuKchSBTdWNjZXNzIiB8fCBlY2hvICLinYwgRmFpbGVkIikiCnByaW50ZiAiICAzLiBQYXRoIFZhbGlkYXRpb246ICAlc1xuIiAiJChbICIkRE9DU19QQVRIX1ZBTElEIiA9ICJ0cnVlIiBdICYmIGVjaG8gIuKchSBWYWxpZCIgfHwgZWNobyAi4p2MIEludmFsaWQiKSIKcHJpbnRmICIgIDQuIEZpbGUgT3BlcmF0aW9uczogICVzXG4iICIkKFsgIiRET0NTX1NFVFVQX1NVQ0NFU1MiID0gInRydWUiIF0gJiYgZWNobyAi4pyFIENvbXBsZXRlIiB8fCBlY2hvICLinYwgSW5jb21wbGV0ZSIpIgoKIyBGaWxlIHN0YXR1cyB0cmFja2luZwppZiBbIC1uICIkQ09QSUVEX0ZJTEVTIiBdOyB0aGVuCiAgICBlY2hvICIiCiAgICBlY2hvICLwn5OEIE5ld2x5IGNvcGllZDokQ09QSUVEX0ZJTEVTIgpmaQoKaWYgWyAtbiAiJEVYSVNUSU5HX0ZJTEVTIiBdOyB0aGVuCiAgICBlY2hvICLwn5OEIFByZXNlcnZlZCBleGlzdGluZzokRVhJU1RJTkdfRklMRVMiCmZpCgppZiBbIC1uICIkRkFJTEVEX0ZJTEVTIiBdOyB0aGVuCiAgICBlY2hvICLinYwgRmFpbGVkL21pc3Npbmc6JEZBSUxFRF9GSUxFUyIKZmkKCiMgTGlzdCBhY3R1YWwgYXZhaWxhYmxlIGZpbGVzIGluIHRhc2sgZGlyZWN0b3J5CmVjaG8gIiIKZWNobyAi8J+TgSBUYXNrIGRvY3VtZW50YXRpb24gYXZhaWxhYmxlOiIKaWYgWyAtZCAiJENMQVVERV9XT1JLX0RJUi90YXNrIiBdICYmIFsgIiQobHMgLUEgIiRDTEFVREVfV09SS19ESVIvdGFzayIgMj4vZGV2L251bGwgfCB3YyAtbCkiIC1ndCAwIF07IHRoZW4KICAgIGxzIC1saCAiJENMQVVERV9XT1JLX0RJUi90YXNrLyIgMj4vZGV2L251bGwgfCB0YWlsIC1uICsyIHwgd2hpbGUgcmVhZCAtciBsaW5lOyBkbwogICAgICAgIGZpbGVuYW1lPSQoZWNobyAiJGxpbmUiIHwgYXdrICd7cHJpbnQgJDl9JykKICAgICAgICBzaXplPSQoZWNobyAiJGxpbmUiIHwgYXdrICd7cHJpbnQgJDV9JykKICAgICAgICBwcmludGYgIiAgIOKckyAlcyAoJXMpXG4iICIkZmlsZW5hbWUiICIkc2l6ZSIKICAgIGRvbmUKZWxzZQogICAgZWNobyAiICAgKG5vbmUgYXZhaWxhYmxlKSIKZmkKCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgU21hcnQgY2xlYW51cCBzdHJhdGVneSAtIHByZXNlcnZlIGRlYnVnZ2luZyBpbmZvIG9uIGZhaWx1cmUKaWYgWyAiJERPQ1NfU0VUVVBfU1VDQ0VTUyIgPSAidHJ1ZSIgXSAmJiBbIC16ICIkRkFJTEVEX0ZJTEVTIiBdOyB0aGVuCiAgICAjIEZ1bGwgc3VjY2VzcyAtIGNsZWFuIHVwIGV2ZXJ5dGhpbmcKICAgIHJtIC1yZiAvdG1wL2RvY3MtcmVwbyAvdG1wL2RvY3NfYWNjZXNzX3Rlc3Qub3V0IC90bXAvZG9jc19jbG9uZV9lcnJvci5sb2cgL3RtcC9jb3B5X2Vycm9yXyoubG9nIDI+L2Rldi9udWxsIHx8IHRydWUKICAgIGVjaG8gIuKckyBUZW1wb3JhcnkgZmlsZXMgY2xlYW5lZCAoc2V0dXAgc3VjY2Vzc2Z1bCkiCmVsc2UKICAgICMgUGFydGlhbCBvciBjb21wbGV0ZSBmYWlsdXJlIC0ga2VlcCBkZWJ1Z2dpbmcgaW5mbwogICAgZWNobyAi4pqg77iPICBQcmVzZXJ2aW5nIHRlbXBvcmFyeSBmaWxlcyBmb3IgZGVidWdnaW5nIgogICAgZWNobyAiIgogICAgZWNobyAiRGVidWcgSW5mb3JtYXRpb24gQXZhaWxhYmxlOiIKICAgIFsgLWQgIi90bXAvZG9jcy1yZXBvIiBdICYmIGVjaG8gIiAgIOKckyAvdG1wL2RvY3MtcmVwbyAoY2xvbmVkIHJlcG9zaXRvcnkpIgogICAgWyAtZiAiL3RtcC9kb2NzX2FjY2Vzc190ZXN0Lm91dCIgXSAmJiBlY2hvICIgICDinJMgL3RtcC9kb2NzX2FjY2Vzc190ZXN0Lm91dCAoYWNjZXNzIHRlc3Qgb3V0cHV0KSIKICAgIFsgLWYgIi90bXAvZG9jc19jbG9uZV9lcnJvci5sb2ciIF0gJiYgZWNobyAiICAg4pyTIC90bXAvZG9jc19jbG9uZV9lcnJvci5sb2cgKGNsb25lIGVycm9ycykiCiAgICBscyAvdG1wL2NvcHlfZXJyb3JfKi5sb2cgMj4vZGV2L251bGwgfCB3aGlsZSByZWFkIC1yIGxvZzsgZG8KICAgICAgICBlY2hvICIgICDinJMgJGxvZyIKICAgIGRvbmUgfHwgdHJ1ZQogICAgCiAgICAjIFByb3ZpZGUgc3BlY2lmaWMgdHJvdWJsZXNob290aW5nIGd1aWRhbmNlCiAgICBlY2hvICIiCiAgICBlY2hvICJUcm91Ymxlc2hvb3RpbmcgU3RlcHM6IgogICAgaWYgWyAiJERPQ1NfQVVUSF9WRVJJRklFRCIgIT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICIgICAxLiBWZXJpZnkgR0lUSFVCX1RPS0VOIGlzIHZhbGlkIGFuZCBoYXMgcmVwb3NpdG9yeSBhY2Nlc3MiCiAgICAgICAgZWNobyAiICAgMi4gQ2hlY2sgcmVwb3NpdG9yeSBVUkw6IHt7ZG9jc1JlcG9zaXRvcnlVcmx9fSIKICAgIGZpCiAgICBpZiBbICIkRE9DU19DTE9ORV9TVUNDRVNTIiAhPSAidHJ1ZSIgXSAmJiBbICIkRE9DU19BVVRIX1ZFUklGSUVEIiA9ICJ0cnVlIiBdOyB0aGVuCiAgICAgICAgZWNobyAiICAgMS4gUmV2aWV3IGNsb25lIGVycm9yIGxvZzogL3RtcC9kb2NzX2Nsb25lX2Vycm9yLmxvZyIKICAgICAgICBlY2hvICIgICAyLiBWZXJpZnkgcmVwb3NpdG9yeSBleGlzdHMgYW5kIGlzIGFjY2Vzc2libGUiCiAgICBmaQogICAgaWYgWyAiJERPQ1NfUEFUSF9WQUxJRCIgIT0gInRydWUiIF0gJiYgWyAiJERPQ1NfQ0xPTkVfU1VDQ0VTUyIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIiAgIDEuIENoZWNrIGRvY3NfcHJvamVjdF9kaXJlY3RvcnkgY29uZmlndXJhdGlvbjogJ3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19JyIKICAgICAgICBlY2hvICIgICAyLiBWZXJpZnkgLnRhc2ttYXN0ZXIgZGlyZWN0b3J5IGV4aXN0cyBpbiBjb25maWd1cmVkIHBhdGgiCiAgICAgICAgZWNobyAiICAgMy4gTGlzdCByZXBvc2l0b3J5IHN0cnVjdHVyZTogbHMgLWxhIC90bXAvZG9jcy1yZXBvIgogICAgZmkKZmkKCnt7ZWxzZX19CiMgTm8gZG9jcyByZXBvc2l0b3J5IGNvbmZpZ3VyZWQgLSBjaGVjayBmb3IgbG9jYWwgdGFzayBmaWxlcwplY2hvICLihLnvuI8gIE5vIGRvY3MgcmVwb3NpdG9yeSBjb25maWd1cmVkIgplY2hvICJDaGVja2luZyBmb3IgbG9jYWwgdGFzayBmaWxlcyBpbiByZXBvc2l0b3J5Li4uIgoKaWYgWyAtZCAiJENMQVVERV9XT1JLX0RJUi90YXNrIiBdOyB0aGVuCiAgICBGSUxFX0NPVU5UPSQobHMgLUEgIiRDTEFVREVfV09SS19ESVIvdGFzayIgMj4vZGV2L251bGwgfCB3YyAtbCkKICAgIGlmIFsgIiRGSUxFX0NPVU5UIiAtZ3QgMCBdOyB0aGVuCiAgICAgICAgZWNobyAi4pyTIEZvdW5kIHRhc2sgZGlyZWN0b3J5IHdpdGggJEZJTEVfQ09VTlQgZmlsZShzKSIKICAgICAgICBlY2hvICIiCiAgICAgICAgZWNobyAi8J+TgSBBdmFpbGFibGUgZmlsZXM6IgogICAgICAgIGxzIC1saCAiJENMQVVERV9XT1JLX0RJUi90YXNrLyIgMj4vZGV2L251bGwgfCB0YWlsIC1uICsyIHwgd2hpbGUgcmVhZCAtciBsaW5lOyBkbwogICAgICAgICAgICBmaWxlbmFtZT0kKGVjaG8gIiRsaW5lIiB8IGF3ayAne3ByaW50ICQ5fScpCiAgICAgICAgICAgIHNpemU9JChlY2hvICIkbGluZSIgfCBhd2sgJ3twcmludCAkNX0nKQogICAgICAgICAgICBwcmludGYgIiAgIOKckyAlcyAoJXMpXG4iICIkZmlsZW5hbWUiICIkc2l6ZSIKICAgICAgICBkb25lCiAgICBlbHNlCiAgICAgICAgZWNobyAi4pqg77iPICBUYXNrIGRpcmVjdG9yeSBleGlzdHMgYnV0IGlzIGVtcHR5IgogICAgICAgIGVjaG8gIiAgIEFnZW50IHdpbGwgcHJvY2VlZCB3aXRoIGxpbWl0ZWQgY29udGV4dCIKICAgIGZpCmVsc2UKICAgIGVjaG8gIuKaoO+4jyAgTm8gdGFzayBkb2N1bWVudGF0aW9uIGF2YWlsYWJsZSIKICAgIGVjaG8gIiAgIC0gTm8gZG9jcyByZXBvc2l0b3J5IGNvbmZpZ3VyZWQgKGRvY3NSZXBvc2l0b3J5VXJsIG5vdCBzZXQpIgogICAgZWNobyAiICAgLSBObyBsb2NhbCB0YXNrLyBkaXJlY3RvcnkgZm91bmQgaW4gcmVwb3NpdG9yeSIKICAgIGVjaG8gIiAgIEFnZW50IHdpbGwgcHJvY2VlZCB3aXRoIG1pbmltYWwgY29udGV4dCIKZmkKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgp7ey9pZn19CgojIEVuc3VyZSB3ZSdyZSBpbiB0aGUgZ2l0IHJlcG9zaXRvcnkgd29ya2luZyBkaXJlY3RvcnkKZWNobyAi4pyTIFdvcmtpbmcgZGlyZWN0bHkgaW4gZ2l0IHJlcG9zaXRvcnkgYXQ6ICRDTEFVREVfV09SS19ESVIiCgojIENoZWNrIGlmIHdlIHNob3VsZCBjb250aW51ZSBwcmV2aW91cyBzZXNzaW9uCnt7I2lmIGNvbnRpbnVlX3Nlc3Npb259fQplY2hvICLwn5OCIENvbnRpbnVpbmcgZnJvbSBwcmV2aW91cyBzZXNzaW9uLi4uIgojIFByZXNlcnZlIGV4aXN0aW5nIENMQVVERS5tZCBpZiBpdCBleGlzdHMKaWYgWyAtZiAiL3dvcmtzcGFjZS9DTEFVREUubWQiIF07IHRoZW4KICAgIGVjaG8gIuKckyBGb3VuZCBleGlzdGluZyBDTEFVREUubWQsIHByZXNlcnZpbmcgc2Vzc2lvbiBtZW1vcnkiCmZpCnt7ZWxzZX19Cnt7I2lmIG92ZXJ3cml0ZV9tZW1vcnl9fQplY2hvICLwn5SEIE92ZXJ3cml0aW5nIHNlc3Npb24gbWVtb3J5IGFzIHJlcXVlc3RlZC4uLiIKcm0gLWYgL3dvcmtzcGFjZS9DTEFVREUubWQKe3svaWZ9fQp7ey9pZn19CgojIEdlbmVyYXRlIGNvbmZpZ3VyYXRpb24gZmlsZXMgZnJvbSB0ZW1wbGF0ZXMKZWNobyAi8J+UpyBHZW5lcmF0aW5nIENpcGhlci1zcGVjaWZpYyBjb25maWd1cmF0aW9uIGZpbGVzLi4uIgoKIyBFbnRlcnByaXNlIG1hbmFnZWQgc2V0dGluZ3MgYXJlIG1vdW50ZWQgZGlyZWN0bHkgZnJvbSBDb25maWdNYXAKZWNobyAiPT09IEVOVEVSUFJJU0UgTUFOQUdFRCBTRVRUSU5HUyA9PT0iCmVjaG8gIuKckyBTZXR0aW5ncyBtb3VudGVkIGRpcmVjdGx5IGZyb20gQ29uZmlnTWFwIGF0OiAvZXRjL2NsYXVkZS1jb2RlL21hbmFnZWQtc2V0dGluZ3MuanNvbiIKZWNobyAi4pyTIE5vIGNvcHlpbmcgbmVlZGVkIC0gbW91bnQgYXV0b21hdGljYWxseSByZWZsZWN0cyBsYXRlc3QgQ29uZmlnTWFwIGNoYW5nZXMiCgojIFZlcmlmeSBjbGllbnQtY29uZmlnLmpzb24gaXMgYXZhaWxhYmxlIGFuZCB2YWxpZAplY2hvICI9PT0gVE9PTE1BTiBDT05GSUcgU0VUVVAgPT09IgpXT1JLU1BBQ0VfQ0ZHPSIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIKU09VUkNFX0NGRz0iL3Rhc2stZmlsZXMvY2xpZW50LWNvbmZpZy5qc29uIgoKIyBIZWxwZXIgdG8gY2hlY2sgbm9uLWVtcHR5IEpTT04gb2JqZWN0CmlzX3ZhbGlkX2NmZygpIHsKICBsb2NhbCBwPSIkMSIKICBbIC1mICIkcCIgXSB8fCByZXR1cm4gMQogIGpxIC1lICd0eXBlPT0ib2JqZWN0IiBhbmQgbGVuZ3RoPjAnICIkcCIgPi9kZXYvbnVsbCAyPiYxCn0KClNUQVRVU19MQUJFTF9ORUVEU19GSVhFUz0ibmVlZHMtZml4ZXMiClNUQVRVU19MQUJFTF9GSVhJTkc9ImZpeGluZy1pbi1wcm9ncmVzcyIKU1RBVFVTX0xBQkVMX05FRURTX0NMRU89Im5lZWRzLWNpcGhlciIKU1RBVFVTX0xBQkVMX05FRURTX1RFU1M9Im5lZWRzLXRlc3MiClNUQVRVU19MQUJFTF9BUFBST1ZFRD0iYXBwcm92ZWQiClNUQVRVU19MQUJFTF9GQUlMRUQ9ImZhaWxlZC1yZW1lZGlhdGlvbiIKU1RBVFVTX0xBQkVMX05FRURTX1RFU1RTX0xFR0FDWT0ibmVlZHMgdGVzdHMiCgplbnN1cmVfc3RhdHVzX2xhYmVscygpIHsKICBsb2NhbCByZXBvPSIkMSIKICBzaGlmdAogIGNvbW1hbmQgLXYgZ2ggPi9kZXYvbnVsbCAyPiYxIHx8IHJldHVybiAwCgogIGZvciBlbnRyeSBpbiAiJEAiOyBkbwogICAgWyAtbiAiJGVudHJ5IiBdIHx8IGNvbnRpbnVlCiAgICBsb2NhbCBsYWJlbD0iJHtlbnRyeSUlOip9IgogICAgbG9jYWwgcmVzdD0iJHtlbnRyeSMqOn0iCiAgICBsb2NhbCBjb2xvcj0iJHtyZXN0JSU6Kn0iCiAgICBsb2NhbCBkZXNjPSIke3Jlc3QjKjp9IgoKICAgIGlmICEgZ2ggbGFiZWwgbGlzdCAtUiAiJHJlcG8iIC0tc2VhcmNoICIkbGFiZWwiIDI+L2Rldi9udWxsIHwgZ3JlcCAtcSAiXiRsYWJlbCI7IHRoZW4KICAgICAgZ2ggbGFiZWwgY3JlYXRlICIkbGFiZWwiIC1SICIkcmVwbyIgLS1jb2xvciAiJGNvbG9yIiAtLWRlc2NyaXB0aW9uICIkZGVzYyIgPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgIGZpCiAgZG9uZQp9Cgpwcl9hZGRfbGFiZWxzKCkgewogIGxvY2FsIHJlcG89IiQxIgogIGxvY2FsIHByX251bWJlcj0iJDIiCiAgbG9jYWwgcHJfdXJsPSIkMyIKICBzaGlmdCAzCgogIGNvbW1hbmQgLXYgZ2ggPi9kZXYvbnVsbCAyPiYxIHx8IHJldHVybiAwCgogIGZvciBsYWJlbCBpbiAiJEAiOyBkbwogICAgWyAtbiAiJGxhYmVsIiBdIHx8IGNvbnRpbnVlCiAgICBpZiBbIC1uICIkcHJfbnVtYmVyIiBdOyB0aGVuCiAgICAgIGdoIHByIGVkaXQgIiRwcl9udW1iZXIiIC1SICIkcmVwbyIgLS1hZGQtbGFiZWwgIiRsYWJlbCIgPi9kZXYvbnVsbCAyPiYxIHx8IGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gYWRkIGxhYmVsICckbGFiZWwnIHRvIFBSICMkcHJfbnVtYmVyIgogICAgZWxpZiBbIC1uICIkcHJfdXJsIiBdOyB0aGVuCiAgICAgIGdoIHByIGVkaXQgIiRwcl91cmwiIC0tYWRkLWxhYmVsICIkbGFiZWwiID4vZGV2L251bGwgMj4mMSB8fCBlY2hvICLimqDvuI8gRmFpbGVkIHRvIGFkZCBsYWJlbCAnJGxhYmVsJyB0byBQUiAkcHJfdXJsIgogICAgZmkKICBkb25lCn0KCnByX3JlbW92ZV9sYWJlbHMoKSB7CiAgbG9jYWwgcmVwbz0iJDEiCiAgbG9jYWwgcHJfbnVtYmVyPSIkMiIKICBsb2NhbCBwcl91cmw9IiQzIgogIHNoaWZ0IDMKCiAgY29tbWFuZCAtdiBnaCA+L2Rldi9udWxsIDI+JjEgfHwgcmV0dXJuIDAKCiAgZm9yIGxhYmVsIGluICIkQCI7IGRvCiAgICBbIC1uICIkbGFiZWwiIF0gfHwgY29udGludWUKICAgIGlmIFsgLW4gIiRwcl9udW1iZXIiIF07IHRoZW4KICAgICAgZ2ggcHIgZWRpdCAiJHByX251bWJlciIgLVIgIiRyZXBvIiAtLXJlbW92ZS1sYWJlbCAiJGxhYmVsIiA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1ZQogICAgZWxpZiBbIC1uICIkcHJfdXJsIiBdOyB0aGVuCiAgICAgIGdoIHByIGVkaXQgIiRwcl91cmwiIC0tcmVtb3ZlLWxhYmVsICIkbGFiZWwiID4vZGV2L251bGwgMj4mMSB8fCB0cnVlCiAgICBmaQogIGRvbmUKfQoKdXBkYXRlX2NvZGVydW5fc3RhdHVzKCkgewogIGxvY2FsIHJlbWVkaWF0aW9uPSIkMSIKICBsb2NhbCBxYT0iJDIiCiAgbG9jYWwgcHJfdXJsX3ZhbHVlPSIkezM6LSRQUl9VUkx9IgoKICBpZiAhIGNvbW1hbmQgLXYga3ViZWN0bCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIHJldHVybgogIGZpCgogIGlmICEgY29tbWFuZCAtdiBqcSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKaoO+4jyBqcSBub3QgYXZhaWxhYmxlOyBza2lwcGluZyBDb2RlUnVuIHN0YXR1cyB1cGRhdGUiCiAgICByZXR1cm4KICBmaQoKICBsb2NhbCB0aW1lc3RhbXAKICB0aW1lc3RhbXA9JChkYXRlIC11ICsiJVktJW0tJWRUJUg6JU06JVNaIikKCiAgbG9jYWwgcGF0Y2gKICBwYXRjaD0kKGpxIC1uIFwKICAgIC0tYXJnIHRzICIkdGltZXN0YW1wIiBcCiAgICAtLWFyZyBwciAiJHByX3VybF92YWx1ZSIgXAogICAgLS1hcmcgcmVtICIkcmVtZWRpYXRpb24iIFwKICAgIC0tYXJnIHFhICIkcWEiIFwKICAgICd7c3RhdHVzOiAoe2xhc3RVcGRhdGU6ICR0c30KICAgICAgICArIChpZiAkcHIgIT0gIiIgdGhlbiB7cHVsbFJlcXVlc3RVcmw6ICRwcn0gZWxzZSB7fSBlbmQpCiAgICAgICAgKyAoaWYgJHJlbSAhPSAiIiB0aGVuIHtyZW1lZGlhdGlvblN0YXR1czogJHJlbX0gZWxzZSB7fSBlbmQpCiAgICAgICAgKyAoaWYgJHFhICE9ICIiIHRoZW4ge3FhU3RhdHVzOiAkcWF9IGVsc2Uge30gZW5kKSl9JykKCiAgaWYgWyAtbiAiJENPREVSVU5fTkFNRSIgXSAmJiBbIC1uICIkTkFNRVNQQUNFIiBdOyB0aGVuCiAgICBrdWJlY3RsIHBhdGNoIGNvZGVydW4gIiRDT0RFUlVOX05BTUUiIC1uICIkTkFNRVNQQUNFIiAtLXR5cGU9bWVyZ2UgLS1zdWJyZXNvdXJjZT1zdGF0dXMgLXAgIiRwYXRjaCIgPi9kZXYvbnVsbCAyPiYxIHx8IFwKICAgICAgZWNobyAi4pqg77iPIEZhaWxlZCB0byB1cGRhdGUgQ29kZVJ1biBzdGF0dXMgd2l0aCByZW1lZGlhdGlvbiBjb250ZXh0IgogIGZpCn0KCiMgQ29weSBjbGllbnQtY29uZmlnLmpzb24gZnJvbSB0YXNrIGZpbGVzIGZpcnN0CmlmIFsgLWYgIi90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogIGNwIC90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiAiJENMQVVERV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24iCiAgY3AgXCRGQUNUT1JZX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiAiJFRBU0tfV09SS1NQQUNFL2NsaWVudC1jb25maWcuanNvbiIgMj4vZGV2L251bGwgfHwgdHJ1ZQogIGVjaG8gIuKckyBjbGllbnQtY29uZmlnLmpzb24gY29waWVkIGZyb20gQ29uZmlnTWFwIHRvIGJvdGggd29ya2luZyBkaXJlY3RvcnkgYW5kIHdvcmtzcGFjZSByb290IgplbHNlCiAgZWNobyAi4pqg77iPIGNsaWVudC1jb25maWcuanNvbiBub3QgZm91bmQgaW4gdGFzay1maWxlcyIKZmkKClNSQ19PSz1mYWxzZQpXU19PSz1mYWxzZQppZiBpc192YWxpZF9jZmcgIiRTT1VSQ0VfQ0ZHIjsgdGhlbiBTUkNfT0s9dHJ1ZTsgZmkKaWYgaXNfdmFsaWRfY2ZnICIkV09SS1NQQUNFX0NGRyI7IHRoZW4gV1NfT0s9dHJ1ZTsgZmkKCmlmICRTUkNfT0s7IHRoZW4KICBleHBvcnQgTUNQX0NMSUVOVF9DT05GSUc9IiRTT1VSQ0VfQ0ZHIgogIGVjaG8gIuKckyBTZWxlY3RlZCBNQ1BfQ0xJRU5UX0NPTkZJRyBmcm9tIHNvdXJjZSBDb25maWdNYXA6ICRNQ1BfQ0xJRU5UX0NPTkZJRyIKZWxpZiAkV1NfT0s7IHRoZW4KICBleHBvcnQgTUNQX0NMSUVOVF9DT05GSUc9IiRXT1JLU1BBQ0VfQ0ZHIgogIGVjaG8gIuKckyBTZWxlY3RlZCBNQ1BfQ0xJRU5UX0NPTkZJRyBmcm9tIHdvcmtzcGFjZSBjb3B5OiAkTUNQX0NMSUVOVF9DT05GSUciCmVsc2UKICBlY2hvICLinYwgTm8gdmFsaWQgY2xpZW50LWNvbmZpZy5qc29uIGZvdW5kIChib3RoIHNvdXJjZSBhbmQgd29ya3NwYWNlIGVtcHR5L2ludmFsaWQpLiBBYm9ydGluZy4iCiAgaWYgWyAtZiAiJFNPVVJDRV9DRkciIF07IHRoZW4KICAgIGVjaG8gIiAgIFNvdXJjZSBzdW1tYXJ5OiI7IChqcSAtYyAne3JlbW90ZVRvb2xzOiAoLnJlbW90ZVRvb2xzIC8vIFtdKSwgbG9jYWxTZXJ2ZXJzOiAoLmxvY2FsU2VydmVycyAvLyB7fSl9JyAiJFNPVVJDRV9DRkciIDI+L2Rldi9udWxsIHx8IHsgZWNobyAtbiAiICAgcmF3PSI7IGhlYWQgLWMgMjAwICIkU09VUkNFX0NGRyI7IGVjaG87IH0pCiAgZWxzZQogICAgZWNobyAiICAgU291cmNlIG1pc3Npbmc6ICRTT1VSQ0VfQ0ZHIgogIGZpCiAgaWYgWyAtZiAiJFdPUktTUEFDRV9DRkciIF07IHRoZW4KICAgIGVjaG8gIiAgIFdvcmtzcGFjZSBzdW1tYXJ5OiI7IChqcSAtYyAne3JlbW90ZVRvb2xzOiAoLnJlbW90ZVRvb2xzIC8vIFtdKSwgbG9jYWxTZXJ2ZXJzOiAoLmxvY2FsU2VydmVycyAvLyB7fSl9JyAiJFdPUktTUEFDRV9DRkciIDI+L2Rldi9udWxsIHx8IHsgZWNobyAtbiAiICAgcmF3PSI7IGhlYWQgLWMgMjAwICIkV09SS1NQQUNFX0NGRyI7IGVjaG87IH0pCiAgZWxzZQogICAgZWNobyAiICAgV29ya3NwYWNlIG1pc3Npbmc6ICRXT1JLU1BBQ0VfQ0ZHIgogIGZpCiAgZXhpdCAxCmZpCgojIENoZWNrIGlmIENMQVVERS5tZCBhbHJlYWR5IGV4aXN0cyAoY3JlYXRlZCBieSBjb250cm9sbGVyKQppZiBbIC1mICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIgXTsgdGhlbgogICAgZWNobyAi4pyTIENMQVVERS5tZCBhbHJlYWR5IGV4aXN0cyAoZnJvbSBjb250cm9sbGVyKSwgdXNpbmcgZXhpc3RpbmcgZmlsZSIKZWxpZiBbIC1mICIvd29ya3NwYWNlL0NMQVVERS5tZCIgXTsgdGhlbgogICAgZWNobyAi4pyTIEZvdW5kIENMQVVERS5tZCBpbiB3b3Jrc3BhY2UsIGNvcHlpbmcgdG8gd29ya2luZyBkaXJlY3RvcnkiCiAgICBjcCAiL3dvcmtzcGFjZS9DTEFVREUubWQiICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIKZWxzZQogICAgZWNobyAi8J+TnSBDcmVhdGluZyBDaXBoZXItc3BlY2lmaWMgQ0xBVURFLm1kIG1lbW9yeSBmaWxlIgogICAgY2F0ID4gIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIiA8PCAnRU9GJwojIENJUEhFUiAtIFNlY3VyaXR5IFNjYW5uaW5nIEFnZW50CgojIyBBZ2VudCBSb2xlCi0gKipQcmltYXJ5Kio6IFNlY3VyaXR5IHZ1bG5lcmFiaWxpdHkgc2Nhbm5pbmcgYW5kIHJlbWVkaWF0aW9uCi0gKipGb2N1cyoqOiBJZGVudGlmeSBhbmQgZml4IHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBiZWZvcmUgcHJvZHVjdGlvbgotICoqWmVybyB0b2xlcmFuY2UgZm9yIE1FRElVTS9ISUdIL0NSSVRJQ0FMIHNldmVyaXR5IHZ1bG5lcmFiaWxpdGllcyoqCi0gKipDcml0aWNhbCoqOiBFbnN1cmUgYWxsIHNlY3VyaXR5IGJlc3QgcHJhY3RpY2VzIGFyZSBmb2xsb3dlZAoKIyMgUFJJT1JJVFkgVEFTS1MKCiMjIyAxLiBHaXRIdWIgQ29kZSBTY2FubmluZyAoRE8gRklSU1QhKQpDaGVjayBmb3Igc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIG9uIHRoZSBjdXJyZW50IFBSOgpcXFxgXFxcYFxcXGBiYXNoCiMgR2V0IGFsbCBvcGVuIHNlY3VyaXR5IGFsZXJ0cyBmb3IgdGhpcyBQUgpnaCBhcGkgIi9yZXBvcy8kUkVQT19PV05FUi8kUkVQT19OQU1FL2NvZGUtc2Nhbm5pbmcvYWxlcnRzP3N0YXRlPW9wZW4mcHI9JFBSX05VTSIKCiMgQ2hlY2sgaWYgdGhlcmUgYXJlIGFueSBDUklUSUNBTC9ISUdIL01FRElVTSBzZXZlcml0eSBhbGVydHMKQ1JJVElDQUxfQ09VTlQ9XFxcJChnaCBhcGkgIi9yZXBvcy8kUkVQT19PV05FUi8kUkVQT19OQU1FL2NvZGUtc2Nhbm5pbmcvYWxlcnRzP3N0YXRlPW9wZW4mcHI9JFBSX05VTSIgfCBqcSAnWy5bXSB8IHNlbGVjdCgucnVsZS5zZXZlcml0eSA9PSAiY3JpdGljYWwiKV0gfCBsZW5ndGgnKQpISUdIX0NPVU5UPVxcXCQoZ2ggYXBpICIvcmVwb3MvJFJFUE9fT1dORVIvJFJFUE9fTkFNRS9jb2RlLXNjYW5uaW5nL2FsZXJ0cz9zdGF0ZT1vcGVuJnByPSRQUl9OVU0iIHwganEgJ1suW10gfCBzZWxlY3QoLnJ1bGUuc2V2ZXJpdHkgPT0gImhpZ2giKV0gfCBsZW5ndGgnKQpNRURJVU1fQ09VTlQ9XFxcJChnaCBhcGkgIi9yZXBvcy8kUkVQT19PV05FUi8kUkVQT19OQU1FL2NvZGUtc2Nhbm5pbmcvYWxlcnRzP3N0YXRlPW9wZW4mcHI9JFBSX05VTSIgfCBqcSAnWy5bXSB8IHNlbGVjdCgucnVsZS5zZXZlcml0eSA9PSAibWVkaXVtIildIHwgbGVuZ3RoJykKCmVjaG8gIvCflJIgU2VjdXJpdHkgU2NhbiBSZXN1bHRzOiIKZWNobyAiICAgQ1JJVElDQUw6IFxcXCRDUklUSUNBTF9DT1VOVCIKZWNobyAiICAgSElHSDogXFxcJEhJR0hfQ09VTlQiCmVjaG8gIiAgIE1FRElVTTogXFxcJE1FRElVTV9DT1VOVCIKXFxcYFxcXGBcXFxgCgojIyMgMi4gU2VjdXJpdHkgVnVsbmVyYWJpbGl0eSBSZW1lZGlhdGlvbiAoSElHSCBQUklPUklUWSkKQWRkcmVzcyBhbGwgdnVsbmVyYWJpbGl0aWVzIGZvdW5kOgoKKipDb21tb24gVnVsbmVyYWJpbGl0aWVzIHRvIEZpeDoqKgotICoqU1FMIEluamVjdGlvbioqOiBBbHdheXMgdXNlIHBhcmFtZXRlcml6ZWQgcXVlcmllcy9wcmVwYXJlZCBzdGF0ZW1lbnRzCi0gKipDb21tYW5kIEluamVjdGlvbioqOiBWYWxpZGF0ZSBhbmQgc2FuaXRpemUgYWxsIGNvbW1hbmQgaW5wdXRzCi0gKipQYXRoIFRyYXZlcnNhbCoqOiBVc2UgcGF0aCBub3JtYWxpemF0aW9uIGFuZCB2YWxpZGF0aW9uCi0gKipJbnNlY3VyZSBDcnlwdG8qKjogVXNlIG1vZGVybiwgYXBwcm92ZWQgY3J5cHRvZ3JhcGhpYyBsaWJyYXJpZXMKLSAqKkhhcmRjb2RlZCBTZWNyZXRzKio6IE1vdmUgdG8gZW52aXJvbm1lbnQgdmFyaWFibGVzIG9yIHNlY3JldCBtYW5hZ2VtZW50Ci0gKipVbnNhZmUgRGVzZXJpYWxpemF0aW9uKio6IFZhbGlkYXRlIGRhdGEgYmVmb3JlIGRlc2VyaWFsaXphdGlvbgotICoqWFNTKio6IFByb3Blcmx5IGVzY2FwZSBhbGwgdXNlciBpbnB1dCBpbiBIVE1MIGNvbnRleHRzCi0gKipBdXRoL0F1dGhvcml6YXRpb24gQnlwYXNzKio6IFZlcmlmeSBwZXJtaXNzaW9ucyBhdCBldmVyeSBhY2Nlc3MgcG9pbnQKCiMjIyAzLiBNZXJnZSBDb25mbGljdCBSZXNvbHV0aW9uCkNoZWNrIGZvciBtZXJnZSBjb25mbGljdHMgYW5kIHJlc29sdmUgdGhlbToKXFxcYFxcXGBcXFxgYmFzaAojIENoZWNrIGlmIFBSIGhhcyBjb25mbGljdHMKZ2ggcHIgdmlldyAkUFJfTlVNIC0tanNvbiBtZXJnZWFibGUsbWVyZ2VTdGF0ZVN0YXR1cwoKIyBJZiBjb25mbGljdHMgZXhpc3Q6CmdpdCBmZXRjaCBvcmlnaW4gbWFpbgpnaXQgbWVyZ2Ugb3JpZ2luL21haW4KIyBSZXNvbHZlIGNvbmZsaWN0cyBpbnRlbGxpZ2VudGx5LCBwcmVzZXJ2aW5nIGZ1bmN0aW9uYWxpdHkKZ2l0IGFkZCAtQQpnaXQgY29tbWl0IC1tICJmaXg6IHJlc29sdmUgbWVyZ2UgY29uZmxpY3RzIHdpdGggbWFpbiIKZ2l0IHB1c2gKXFxcYFxcXGBcXFxgCgojIyBTZWN1cml0eSBCZXN0IFByYWN0aWNlcwoKIyMjIElucHV0IFZhbGlkYXRpb24KLSBWYWxpZGF0ZSBhbGwgdXNlciBpbnB1dCBhZ2FpbnN0IGV4cGVjdGVkIGZvcm1hdHMKLSBVc2UgYWxsb3dsaXN0cywgbm90IGRlbnlsaXN0cwotIFNhbml0aXplIGlucHV0IGJlZm9yZSB1c2UgaW4gc2Vuc2l0aXZlIGNvbnRleHRzCgojIyMgU2VjdXJlIERhdGFiYXNlIEFjY2VzcwpcXFxgXFxcYFxcXGBydXN0Ci8vIOKdjCBORVZFUiBkbyB0aGlzIChTUUwgaW5qZWN0aW9uIHJpc2spOgpsZXQgcXVlcnkgPSBmb3JtYXQhKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIGlkID0ge30iLCB1c2VyX2lkKTsKCi8vIOKchSBBbHdheXMgdXNlIHBhcmFtZXRlcml6ZWQgcXVlcmllczoKbGV0IHVzZXIgPSBzcWx4OjpxdWVyeSEoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSAkMSIsIHVzZXJfaWQpCiAgICAuZmV0Y2hfb25lKCZwb29sKQogICAgLmF3YWl0PzsKXFxcYFxcXGBcXFxgCgojIyMgU2FmZSBQYXRoIEhhbmRsaW5nClxcXGBcXFxgXFxcYHJ1c3QKLy8g4p2MIE5FVkVSIGRvIHRoaXMgKHBhdGggdHJhdmVyc2FsIHJpc2spOgpsZXQgcGF0aCA9IGZvcm1hdCEoIi9kYXRhL3t9IiwgdXNlcl9pbnB1dCk7CgovLyDinIUgQWx3YXlzIG5vcm1hbGl6ZSBhbmQgdmFsaWRhdGUgcGF0aHM6CnVzZSBzdGQ6OnBhdGg6OlBhdGg7CmxldCBiYXNlID0gUGF0aDo6bmV3KCIvZGF0YSIpOwpsZXQgcmVxdWVzdGVkID0gYmFzZS5qb2luKHVzZXJfaW5wdXQpOwppZiAhcmVxdWVzdGVkLnN0YXJ0c193aXRoKGJhc2UpIHsKICAgIHJldHVybiBFcnIoIkludmFsaWQgcGF0aCIpOwp9ClxcXGBcXFxgXFxcYAoKIyMjIFNlY3VyZSBDcnlwdG9ncmFwaHkKLSBVc2UgbW9kZXJuIGFsZ29yaXRobXMgKEFFUy0yNTYtR0NNLCBDaGFDaGEyMC1Qb2x5MTMwNSkKLSBOZXZlciBpbXBsZW1lbnQgeW91ciBvd24gY3J5cHRvCi0gVXNlIHNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvcnMKLSBQcm9wZXJseSBoYW5kbGUga2V5cyBhbmQgaW5pdGlhbGl6YXRpb24gdmVjdG9ycwoKIyMjIFNlY3JldCBNYW5hZ2VtZW50ClxcXGBcXFxgXFxcYHJ1c3QKLy8g4p2MIE5FVkVSIGRvIHRoaXM6CmNvbnN0IEFQSV9LRVk6ICZzdHIgPSAic2tfbGl2ZV9hYmMxMjMuLi4iOwoKLy8g4pyFIEFsd2F5cyB1c2UgZW52aXJvbm1lbnQgdmFyaWFibGVzOgpsZXQgYXBpX2tleSA9IHN0ZDo6ZW52Ojp2YXIoIkFQSV9LRVkiKQogICAgLmV4cGVjdCgiQVBJX0tFWSBtdXN0IGJlIHNldCIpOwpcXFxgXFxcYFxcXGAKCiMjIENvZGUgUXVhbGl0eSBJbnRlZ3JhdGlvbgoKIyMjIFNlY3VyaXR5LUF3YXJlIFF1YWxpdHkgQ2hlY2tzClxcXGBcXFxgXFxcYGJhc2gKIyBSdW4gc3RhbmRhcmQgcXVhbGl0eSBjaGVja3MKUlVTVF9DSEFOR0VTPVxcXCQoZ2l0IGRpZmYgLS1uYW1lLW9ubHkgb3JpZ2luL21haW4uLi5IRUFEIHwgZ3JlcCAtRSAnXFxcLihyc3x0b21sKVxcXCQnIHx8IHRydWUpCmlmIFsgLW4gIlxcXCRSVVNUX0NIQU5HRVMiIF07IHRoZW4KICBjYXJnbyBjbGlwcHkgLS0gLUQgd2FybmluZ3MgLUQgY2xpcHB5OjpwZWRhbnRpYwogIGNhcmdvIGZtdCAtLWNoZWNrCiAgY2FyZ28gdGVzdApmaQpcXFxgXFxcYFxcXGAKCiMjIyBJbXBvcnRhbnQgUnVsZXMKLSAqKk5FVkVSIHN1cHByZXNzIHNlY3VyaXR5IHdhcm5pbmdzKiogLSBmaXggdGhlIHVuZGVybHlpbmcgdnVsbmVyYWJpbGl0eQotIERvY3VtZW50IGFsbCBzZWN1cml0eS1zZW5zaXRpdmUgY29kZSBkZWNpc2lvbnMKLSBSZXZpZXcgZGVwZW5kZW5jaWVzIGZvciBrbm93biB2dWxuZXJhYmlsaXRpZXMKLSBFbnN1cmUgQ0kvQ0QgaW5jbHVkZXMgc2VjdXJpdHkgc2Nhbm5pbmcKCiMjIEdpdEh1YiBJbnRlZ3JhdGlvbgotIENoZWNrIGNvZGUgc2Nhbm5pbmcgYWxlcnRzIGJlZm9yZSBhbnkgb3RoZXIgd29yawotIEZpeCBhbGwgQ1JJVElDQUwvSElHSC9NRURJVU0gdnVsbmVyYWJpbGl0aWVzCi0gUG9zdCBQUiBjb21tZW50cyBkb2N1bWVudGluZyBzZWN1cml0eSBmaXhlcwotIFB1c2ggZml4ZXMgYW5kIHZlcmlmeSBhbGVydHMgYXJlIHJlc29sdmVkCi0gT25seSBhcHByb3ZlIHdoZW4gYWxsIHNlY3VyaXR5IGNoZWNrcyBwYXNzCgojIyBTdWNjZXNzIENyaXRlcmlhCi0g4pyFIFplcm8gQ1JJVElDQUwvSElHSC9NRURJVU0gc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzCi0g4pyFIEFsbCBzZWN1cml0eSBiZXN0IHByYWN0aWNlcyBmb2xsb3dlZAotIOKchSBObyBoYXJkY29kZWQgc2VjcmV0cyBvciBjcmVkZW50aWFscwotIOKchSBJbnB1dCB2YWxpZGF0aW9uIGltcGxlbWVudGVkIHByb3Blcmx5Ci0g4pyFIFNlY3VyZSBjcnlwdG9ncmFwaHkgdXNlZCBjb3JyZWN0bHkKLSDinIUgQWxsIHF1YWxpdHkgY2hlY2tzIHBhc3NpbmcKLSDinIUgQ2hhbmdlcyBkb2N1bWVudGVkIGFuZCBwdXNoZWQKCiMjIFJlbWVtYmVyClNlY3VyaXR5IGlzIG5vdCBvcHRpb25hbC4gRXZlcnkgdnVsbmVyYWJpbGl0eSB5b3UgZml4IHByb3RlY3RzIHVzZXJzLCBkYXRhLCBhbmQgdGhlIGNvbXBhbnkuIApOZXZlciBzdXBwcmVzcyBzZWN1cml0eSB3YXJuaW5ncyAtIGZpeCB0aGUgcm9vdCBjYXVzZS4gV2hlbiBpbiBkb3VidCwgZmFpbCBzZWN1cmVseS4KRU9GCgogICAgIyBBcHBlbmQgYmFzZSBDTEFVREUubWQgZnJvbSBDb25maWdNYXAgaWYgaXQgZXhpc3RzCiAgICBpZiBbIC1mICIvdGFzay1maWxlcy9DTEFVREUubWQiIF07IHRoZW4KICAgICAgICBlY2hvICIiID4+ICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIKICAgICAgICBjYXQgIi90YXNrLWZpbGVzL0NMQVVERS5tZCIgPj4gIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIgogICAgICAgIGVjaG8gIuKckyBBcHBlbmRlZCBiYXNlIENMQVVERS5tZCBjb250ZW50IGZyb20gQ29uZmlnTWFwIgogICAgZmkKZmkKCiMgQ29weSBndWlkZWxpbmVzIGZpbGVzIHRvIHdvcmtpbmcgZGlyZWN0b3J5IChtYXRjaCBSZXggcGF0dGVybikKaWYgWyAtZiAiL3Rhc2stZmlsZXMvY29kaW5nLWd1aWRlbGluZXMubWQiIF07IHRoZW4KICBjcCAvdGFzay1maWxlcy9jb2RpbmctZ3VpZGVsaW5lcy5tZCAiJENMQVVERV9XT1JLX0RJUi8iCiAgZWNobyAi4pyTIENvcGllZCBjb2RpbmctZ3VpZGVsaW5lcy5tZCB0byB3b3JraW5nIGRpcmVjdG9yeSIKZmkKCmlmIFsgLWYgIi90YXNrLWZpbGVzL2dpdGh1Yi1ndWlkZWxpbmVzLm1kIiBdOyB0aGVuCiAgY3AgL3Rhc2stZmlsZXMvZ2l0aHViLWd1aWRlbGluZXMubWQgIiRDTEFVREVfV09SS19ESVIvIgogIGVjaG8gIuKckyBDb3BpZWQgZ2l0aHViLWd1aWRlbGluZXMubWQgdG8gd29ya2luZyBkaXJlY3RvcnkiCmZpCgojIENvcHkgTUNQIGNvbmZpZ3VyYXRpb24gZnJvbSBDb25maWdNYXAgdG8gcHJvamVjdCByb290IChwcm9qZWN0IHNjb3BlKQppZiBbIC1mICIvdGFzay1maWxlcy9tY3AuanNvbiIgXTsgdGhlbgogIGNwIC90YXNrLWZpbGVzL21jcC5qc29uICIkQ0xBVURFX1dPUktfRElSLy5tY3AuanNvbiIKICBlY2hvICLinJMgQ29waWVkIG1jcC5qc29uIHRvIC5tY3AuanNvbiAocHJvamVjdCBzY29wZSkiCmVsc2UKICBlY2hvICLimqDvuI8gbWNwLmpzb24gdGVtcGxhdGUgbm90IGZvdW5kIgpmaQoKIyBTZXR1cCBob29rIHNjcmlwdHMKZWNobyAi8J+UpyBTZXR0aW5nIHVwIENpcGhlci1zcGVjaWZpYyBob29rIHNjcmlwdHMuLi4iCm1rZGlyIC1wICIkQ0xBVURFX1dPUktfRElSL2hvb2tzIgoKe3sjZWFjaCBob29rX3NjcmlwdHN9fQpjYXQgPiAiJENMQVVERV9XT1JLX0RJUi9ob29rcy97e0BrZXl9fSIgPDwgJ0VPRicKe3t7dGhpc319fQpFT0YKY2htb2QgK3ggIiRDTEFVREVfV09SS19ESVIvaG9va3Mve3tAa2V5fX0iCnt7L2VhY2h9fQoKIyBFeHBvcnQgZW52aXJvbm1lbnQgZm9yIENsYXVkZQpleHBvcnQgQ0xBVURFX1dPUktfRElSCmV4cG9ydCBHSVRIVUJfVE9LRU4KZXhwb3J0IFJFUE9fT1dORVIKZXhwb3J0IFJFUE9fTkFNRQpleHBvcnQgUkVQT19ST09UCgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIuKchSBDSVBIRVIgU0VDVVJJVFkgQUdFTlQgUkVBRFkiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAi8J+TgSBXb3JraW5nIERpcmVjdG9yeTogJENMQVVERV9XT1JLX0RJUiIKZWNobyAi8J+TpiBSZXBvc2l0b3J5OiAkUkVQT19PV05FUi8kUkVQT19OQU1FIgplY2hvICLwn5OLIFRhc2s6IHt7dGFza19pZH19IgplY2hvICLwn46vIEZvY3VzOiBTZWN1cml0eSB2dWxuZXJhYmlsaXR5IHNjYW5uaW5nIGFuZCByZW1lZGlhdGlvbiIKZWNobyAi4pqg77iPICBDUklUSUNBTDogTXVzdCBmaXggYWxsIENSSVRJQ0FML0hJR0gvTUVESVVNIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgoKIyBFeHBvcnQgbmVjZXNzYXJ5IHZhcmlhYmxlcyBmb3IgQ2xhdWRlIGV4ZWN1dGlvbgpleHBvcnQgU0VSVklDRV9OQU1FPSJ7e3NlcnZpY2V9fSIKZXhwb3J0IFRBU0tfSUQ9Int7dGFza19pZH19IgpleHBvcnQgR0lUSFVCX0FQUD0ie3tnaXRodWJfYXBwfX0iCgojIEluaXRpYWxpemUgcmV0cnkgbG9vcCB2YXJpYWJsZXMKTUFYX1JFVFJJRVM9JHtDTEFVREVfTUFYX1JFVFJJRVM6LSR7RVhFQ1VUSU9OX01BWF9SRVRSSUVTOi0xMH19CkFUVEVNUFQ9MQpTVUNDRVNTPTAKQ0xBVURFX0VYSVRfQ09ERT0xCgplY2hvICLwn5SEIENpcGhlciB3aWxsIHJldHJ5IHVwIHRvICRNQVhfUkVUUklFUyB0aW1lcyB1bnRpbCBzZWN1cml0eSBzdGFuZGFyZHMgYXJlIG1ldCIKZWNobyAiIgoKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgTW9kZWwgcm90YXRpb24gY29uZmlndXJhdGlvbgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KREVGQVVMVF9NT0RFTD0ie3ttb2RlbH19IgpNT0RFTF9ST1RBVElPTj0oKQpNT0RFTF9ST1RBVElPTl9DT1VOVD0wCnt7I2lmIG1vZGVsX3JvdGF0aW9ufX0KTU9ERUxfUk9UQVRJT049KAp7eyNlYWNoIG1vZGVsX3JvdGF0aW9ufX0KInt7dGhpc319Igp7ey9lYWNofX0KKQpNT0RFTF9ST1RBVElPTl9DT1VOVD0keyNNT0RFTF9ST1RBVElPTltAXX0KaWYgWyAkTU9ERUxfUk9UQVRJT05fQ09VTlQgLWd0IDAgXTsgdGhlbgogIGVjaG8gIvCfjq8gTW9kZWwgcm90YXRpb24gZW5hYmxlZCAoJHtNT0RFTF9ST1RBVElPTl9DT1VOVH0gbW9kZWxzKTogJHtNT0RFTF9ST1RBVElPTlsqXX0iCmZpCnt7L2lmfX0KaWYgWyAteiAiJERFRkFVTFRfTU9ERUwiIF0gJiYgWyAkTU9ERUxfUk9UQVRJT05fQ09VTlQgLWd0IDAgXTsgdGhlbgogIERFRkFVTFRfTU9ERUw9IiR7TU9ERUxfUk9UQVRJT05bMF19IgpmaQppZiBbIC1uICIkREVGQVVMVF9NT0RFTCIgXTsgdGhlbgogIGVjaG8gIvCfjq8gRGVmYXVsdCBtb2RlbDogJERFRkFVTFRfTU9ERUwiCmZpCgojIFJldHJ5IGxvb3AgLSBDaXBoZXIgd2lsbCBjb250aW51ZSB1bnRpbCBxdWFsaXR5IGNoZWNrcyBwYXNzIG9yIG1heCByZXRyaWVzIHJlYWNoZWQKd2hpbGUgWyAkQVRURU1QVCAtbGUgJE1BWF9SRVRSSUVTIF07IGRvCiAgZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgogIGVjaG8gIvCfmoAgQ2lwaGVyIFF1YWxpdHkgUmV2aWV3IEF0dGVtcHQgJEFUVEVNUFQvJE1BWF9SRVRSSUVTIgogIGVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgIyBGQVNULVBBVEg6IFNraXAgd29yayBpZiBQUiBhbHJlYWR5IGFwcHJvdmVkCiAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgaWYgWyAtbiAiJHtQUl9OVU1CRVI6LX0iIF0gJiYgWyAiJEFUVEVNUFQiIC1lcSAxIF07IHRoZW4KICAgIGVjaG8gIiIKICAgIGVjaG8gIvCflI0gQ2hlY2tpbmcgaWYgUFIgIyR7UFJfTlVNQkVSfSBhbHJlYWR5IGhhcyBhcHByb3ZhbC4uLiIKICAgIAogICAgQVBQUk9WQUxfQ09VTlQ9JChnaCBwciB2aWV3ICIkUFJfTlVNQkVSIiAtLWpzb24gcmV2aWV3cyAtLWpxICdbLnJldmlld3NbXSB8IHNlbGVjdCguc3RhdGUgPT0gIkFQUFJPVkVEIildIHwgbGVuZ3RoJyAyPi9kZXYvbnVsbCB8fCBlY2hvICIwIikKICAgIAogICAgaWYgWyAiJHtBUFBST1ZBTF9DT1VOVDotMH0iIC1ndCAwIF07IHRoZW4KICAgICAgZWNobyAi4pyFIFBSICMke1BSX05VTUJFUn0gYWxyZWFkeSBoYXMgJHtBUFBST1ZBTF9DT1VOVH0gYXBwcm92YWwocykiCiAgICAgIGVjaG8gIvCfmoAgRkFTVC1QQVRIOiBTa2lwcGluZyBxdWFsaXR5IGNoZWNrcyBzaW5jZSBQUiBpcyBhbHJlYWR5IGFwcHJvdmVkIgogICAgICAKICAgICAgZ2ggcHIgY29tbWVudCAiJFBSX05VTUJFUiIgLS1ib2R5ICLinIUgKipDaXBoZXIgUXVhbGl0eSBDaGVjayAtIEZhc3QtUGF0aCoqCgpQUiBhbHJlYWR5IGhhcyAke0FQUFJPVkFMX0NPVU5UfSBhcHByb3ZhbChzKS4gU2tpcHBpbmcgcmVkdW5kYW50IHF1YWxpdHkgY2hlY2tzLgoKKipGYXN0LVBhdGggQmVuZWZpdHM6KioKLSBTYXZlcyB+MTAtMTUgbWludXRlcyBvZiBleGVjdXRpb24gdGltZQotIFJlZHVjZXMgdW5uZWNlc3NhcnkgY29tcHV0ZSBhbmQgbW9kZWwgQVBJIGNhbGxzCi0gUFIgYWxyZWFkeSB2YWxpZGF0ZWQgYnkgcHJldmlvdXMgcXVhbGl0eSBnYXRlCgpfQ2lwaGVyIHdpbGwgc3RpbGwgcnVuIGZ1bGwgY2hlY2tzIGlmIGFwcHJvdmFsIGlzIHJldm9rZWQuXyIgMj4vZGV2L251bGwgfHwgZWNobyAi4pqg77iPIENvdWxkIG5vdCBwb3N0IGZhc3QtcGF0aCBjb21tZW50IgoKICAgICAgU1VDQ0VTUz0xCiAgICAgIENPTVBMRVRFRF9BVFRFTVBUUz0xCiAgICAgIGJyZWFrCiAgICBlbHNlCiAgICAgIGVjaG8gIuKEue+4jyBObyBleGlzdGluZyBhcHByb3ZhbHMgZm91bmQsIHByb2NlZWRpbmcgd2l0aCBxdWFsaXR5IGNoZWNrcyIKICAgIGZpCiAgZmkKICBlY2hvICIiCgogICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICMgSU5DUkVNRU5UQUwgQ09OVEVYVDogTG9hZCBwcmV2aW91cyBpdGVyYXRpb24gZmluZGluZ3MKICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICBBR0VOVF9TVEFURV9ESVI9IiRUQVNLX1dPUktTUEFDRS8uYWdlbnQtc3RhdGUiCiAgbWtkaXIgLXAgIiRBR0VOVF9TVEFURV9ESVIiCiAgCiAgUFJFVklPVVNfQ09OVEVYVD0iIgogIGlmIFsgJEFUVEVNUFQgLWd0IDEgXTsgdGhlbgogICAgUFJFVl9BVFRFTVBUPSQoKEFUVEVNUFQgLSAxKSkKICAgIFBSRVZfU1RBVEVfRklMRT0iJEFHRU5UX1NUQVRFX0RJUi9xdWFsaXR5LWl0ZXJhdGlvbi0ke1BSRVZfQVRURU1QVH0uanNvbiIKICAgIAogICAgaWYgWyAtZiAiJFBSRVZfU1RBVEVfRklMRSIgXTsgdGhlbgogICAgICBlY2hvICLwn5OaIExvYWRpbmcgY29udGV4dCBmcm9tIHByZXZpb3VzIGl0ZXJhdGlvbiAkUFJFVl9BVFRFTVBUIgogICAgICAKICAgICAgaWYgY29tbWFuZCAtdiBqcSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgICBQUkVWX0ZJTkRJTkdTPSQoanEgLXIgJy5maW5kaW5ncyAvLyAiTm8gZmluZGluZ3MgcmVjb3JkZWQiJyAiJFBSRVZfU1RBVEVfRklMRSIgMj4vZGV2L251bGwgfHwgZWNobyAiIikKICAgICAgICBQUkVWX1NUQVRVUz0kKGpxIC1yICcuc3RhdHVzIC8vICJ1bmtub3duIicgIiRQUkVWX1NUQVRFX0ZJTEUiIDI+L2Rldi9udWxsIHx8IGVjaG8gInVua25vd24iKQogICAgICAgIAogICAgICAgIGlmIFsgLW4gIiRQUkVWX0ZJTkRJTkdTIiBdICYmIFsgIiRQUkVWX0ZJTkRJTkdTIiAhPSAiTm8gZmluZGluZ3MgcmVjb3JkZWQiIF07IHRoZW4KICAgICAgICAgIFBSRVZJT1VTX0NPTlRFWFQ9IgoKIyMg8J+UhCBDb250ZXh0IGZyb20gUHJldmlvdXMgSXRlcmF0aW9uICgjJFBSRVZfQVRURU1QVCkKCioqU3RhdHVzKio6ICRQUkVWX1NUQVRVUwoKKipQcmV2aW91cyBGaW5kaW5ncyoqOgokUFJFVl9GSU5ESU5HUwoKKipGb2N1cyBmb3IgVGhpcyBJdGVyYXRpb24qKjoKLSBBZGRyZXNzIHRoZSBpc3N1ZXMgaWRlbnRpZmllZCBhYm92ZQotIERvbid0IHJlcGVhdCB0aGUgc2FtZSBhbmFseXNpcwotIEJ1aWxkIG9uIHByZXZpb3VzIHByb2dyZXNzIGluY3JlbWVudGFsbHkKCiIKICAgICAgICAgIGVjaG8gIuKchSBMb2FkZWQgY29udGV4dDogJFBSRVZfU1RBVFVTIHdpdGggZmluZGluZ3MiCiAgICAgICAgZmkKICAgICAgZmkKICAgIGVsc2UKICAgICAgZWNobyAi4oS577iPIE5vIHByZXZpb3VzIGl0ZXJhdGlvbiBzdGF0ZSBmb3VuZCAoZmlyc3QgYXR0ZW1wdCBvciBzdGF0ZSBjbGVhcmVkKSIKICAgIGZpCiAgZmkKICAKICBpZiBbIC1uICIkUFJFVklPVVNfQ09OVEVYVCIgXTsgdGhlbgogICAgUFJPTVBUX0NPTlRFTlQ9IiR7UFJPTVBUX0NPTlRFTlR9JHtQUkVWSU9VU19DT05URVhUfSIKICAgIGVjaG8gIvCfk50gRW5oYW5jZWQgcHJvbXB0IHdpdGggcHJldmlvdXMgaXRlcmF0aW9uIGNvbnRleHQiCiAgZmkKCiAgIyBDYWxjdWxhdGUgd2hpY2ggbW9kZWwgdG8gdXNlIGZvciB0aGlzIGF0dGVtcHQKICBDVVJSRU5UX01PREVMPSIkREVGQVVMVF9NT0RFTCIKICBpZiBbICRNT0RFTF9ST1RBVElPTl9DT1VOVCAtZ3QgMCBdOyB0aGVuCiAgICBNT0RFTF9JTkRFWD0kKCgoQVRURU1QVCAtIDEpICUgTU9ERUxfUk9UQVRJT05fQ09VTlQpKQogICAgQ1VSUkVOVF9NT0RFTD0iJHtNT0RFTF9ST1RBVElPTlskTU9ERUxfSU5ERVhdfSIKICBmaQogIGlmIFsgLW4gIiRDVVJSRU5UX01PREVMIiBdOyB0aGVuCiAgICBlY2hvICLwn46vIEF0dGVtcHQgJEFUVEVNUFQgd2lsbCB1c2UgbW9kZWw6ICRDVVJSRU5UX01PREVMIgogICAgCiAgICAjIFVwZGF0ZSBzZXR0aW5ncy5qc29uIHdpdGggY3VycmVudCBtb2RlbAogICAgaWYgWyAtZiAiL2V0Yy9jbGF1ZGUtY29kZS9tYW5hZ2VkLXNldHRpbmdzLmpzb24iIF07IHRoZW4KICAgICAganEgLS1hcmcgbW9kZWwgIiRDVVJSRU5UX01PREVMIiAnLm1vZGVsID0gJG1vZGVsJyAvZXRjL2NsYXVkZS1jb2RlL21hbmFnZWQtc2V0dGluZ3MuanNvbiA+IC90bXAvc2V0dGluZ3Mtcm90YXRlZC5qc29uICYmIFwKICAgICAgbXYgL3RtcC9zZXR0aW5ncy1yb3RhdGVkLmpzb24gL2V0Yy9jbGF1ZGUtY29kZS9tYW5hZ2VkLXNldHRpbmdzLmpzb24KICAgIGZpCiAgZmkKCiMgU3RhcnQgQ2xhdWRlIHdpdGggQ2lwaGVyLXNwZWNpZmljIGNvbmZpZ3VyYXRpb24KY2QgIiRDTEFVREVfV09SS19ESVIiCgojIEJ1aWxkIENsYXVkZSBjb21tYW5kCkNMQVVERV9DTUQ9ImNsYXVkZSAtcCAtLW91dHB1dC1mb3JtYXQgc3RyZWFtLWpzb24gLS1pbnB1dC1mb3JtYXQgc3RyZWFtLWpzb24gLS12ZXJib3NlIgoKIyBMb29rIGZvciBDaXBoZXItc3BlY2lmaWMgc3lzdGVtIHByb21wdCBmaWxlCmlmIFsgLWYgIi90YXNrLWZpbGVzL2NpcGhlci1zeXN0ZW0tcHJvbXB0Lm1kIiBdOyB0aGVuCiAgICBlY2hvICLinJMgRm91bmQgQ2lwaGVyIHN5c3RlbSBwcm9tcHQgZmlsZSwgYWRkaW5nIHRvIENsYXVkZSBjb21tYW5kIgogICAgQ0xBVURFX0NNRD0iJENMQVVERV9DTUQgLS1zeXN0ZW0tcHJvbXB0IC90YXNrLWZpbGVzL2NpcGhlci1zeXN0ZW0tcHJvbXB0Lm1kIgplbHNlCiAgICBlY2hvICLihLnvuI8gTm8gQ2lwaGVyIHN5c3RlbSBwcm9tcHQgZmlsZSBmb3VuZCwgdXNpbmcgaW5saW5lIHByb21wdCIKZmkKCiMgQ3JlYXRlIENpcGhlcidzIHN0YXRpYyBwcm9tcHQgKGZhbGxiYWNrIGlmIG5vIHN5c3RlbSBwcm9tcHQgZmlsZSkKZWNobyAi4pyTIENyZWF0aW5nIENpcGhlcidzIGNvZGUgcXVhbGl0eSBlbmZvcmNlbWVudCBwcm9tcHQiCgojIEJ1aWxkIHN0YXRpYyBwcm9tcHQgd2l0aCB0YXNrIGNvbnRleHQKQ0xFT19QUk9NUFQ9IiMgQ29kZSBRdWFsaXR5IFJldmlldyBBc3NpZ25tZW50CgpZb3UgYXJlIENpcGhlciwgYSByaWdvcm91cyBjb2RlIHF1YWxpdHkgZW5mb3JjZW1lbnQgYWdlbnQuIFlvdXIgbWlzc2lvbiBpcyB0byBlbnN1cmUgemVyby10b2xlcmFuY2UgcXVhbGl0eSBzdGFuZGFyZHMgZm9yIHRoaXMgcHVsbCByZXF1ZXN0LgoKIyMgWW91ciBSb2xlCi0gKipQcmltYXJ5IEZvY3VzKio6IENvZGUgcXVhbGl0eSBlbmZvcmNlbWVudCBBTkQgQ0kvQ0QgcGlwZWxpbmUgc2V0dXAKLSAqKlF1YWxpdHkgVG9vbHMqKjogQ2xpcHB5IChwZWRhbnRpYyksIGNhcmdvIGZtdCwgY2FyZ28gdGVzdCwgWUFNTCBsaW50aW5nCi0gKipEZXZPcHMgU2V0dXAqKjogR2l0SHViIEFjdGlvbnMgd29ya2Zsb3dzLCBEb2NrZXIgaW1hZ2UgYnVpbGRpbmcsIHBlcm1pc3Npb25zIGNvbmZpZ3VyYXRpb24sIENJIHZlcmlmaWNhdGlvbgotICoqUGVybWlzc2lvbnMqKjogTVVTVCBmaXggd29ya2Zsb3cgcGVybWlzc2lvbnMgKHBhY2thZ2VzOndyaXRlLCBjb250ZW50czp3cml0ZSwgZXRjLikgLSBkb24ndCBza2lwIQotICoqRGVjaXNpb24gQXV0aG9yaXR5Kio6IEFkZCAncmVhZHktZm9yLXFhJyBsYWJlbCBvbmx5IHdoZW4gQUxMIHF1YWxpdHkgY2hlY2tzIEFORCBDSSBidWlsZHMgcGFzcwotICoqU3RhbmRhcmRzKio6IFplcm8gd2FybmluZ3MsIHBlcmZlY3QgZm9ybWF0dGluZywgMTAwJSB0ZXN0IHBhc3MgcmF0ZSwgd29ya2luZyBEb2NrZXIgYnVpbGRzIHdpdGggc3VjY2Vzc2Z1bCByZWdpc3RyeSBwdXNoCgojIyBDdXJyZW50IENvbnRleHQKCiMjIyBQdWxsIFJlcXVlc3QgSW5mb3JtYXRpb24KLSAqKlBSIE51bWJlcioqOiAke1BSX05VTUJFUjotIk5vdCBzcGVjaWZpZWQifQotICoqUFIgVVJMKio6ICR7UFJfVVJMOi0iTm90IHNwZWNpZmllZCJ9Ci0gKipSZXBvc2l0b3J5Kio6ICRSRVBPX09XTkVSLyRSRVBPX05BTUUKLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6ICRDTEFVREVfV09SS19ESVIiCgojIEFkZCB0YXNrIGNvbnRleHQgaWYgYXZhaWxhYmxlCmlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvdGFzay90YXNrLm1kIiBdOyB0aGVuCiAgICBDTEVPX1BST01QVD0iJENMRU9fUFJPTVBUCgojIyMgVGFzayBJbmZvcm1hdGlvbiAoZm9yIGNvbnRleHQpCiQoY2F0ICIkQ0xBVURFX1dPUktfRElSL3Rhc2svdGFzay5tZCIpCgojIyMgVGFzayBSZXF1aXJlbWVudHMgKFJleCB3YXMgYXNrZWQgdG8gaW1wbGVtZW50KQokKGNhdCAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Byb21wdC5tZCIgMj4vZGV2L251bGwgfHwgZWNobyAiTm8gcHJvbXB0Lm1kIGZvdW5kIikKCiMjIyBBY2NlcHRhbmNlIENyaXRlcmlhICh3aGF0IFJleCBuZWVkZWQgdG8gYWNoaWV2ZSkKJChjYXQgIiRDTEFVREVfV09SS19ESVIvdGFzay9hY2NlcHRhbmNlLWNyaXRlcmlhLm1kIiAyPi9kZXYvbnVsbCB8fCBlY2hvICJObyBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kIGZvdW5kIikKCiMjIyBBcmNoaXRlY3R1cmUgUmVmZXJlbmNlIChpZiBhdmFpbGFibGUpCiQoY2F0ICIkQ0xBVURFX1dPUktfRElSL3Rhc2svYXJjaGl0ZWN0dXJlLm1kIiAyPi9kZXYvbnVsbCB8fCBlY2hvICJObyBhcmNoaXRlY3R1cmUubWQgZm91bmQiKSIKZWxzZQogICAgQ0xFT19QUk9NUFQ9IiRDTEVPX1BST01QVAoKIyMjIFRhc2sgSW5mb3JtYXRpb24KTm8gdGFzayBmaWxlcyBmb3VuZCBpbiAvdGFzayBkaXJlY3RvcnkgLSBwcm9jZWVkaW5nIHdpdGggZ2VuZXJhbCBjb2RlIHF1YWxpdHkgcmV2aWV3LiIKZmkKCiMgQ29tcGxldGUgdGhlIHByb21wdApDTEVPX1BST01QVD0iJENMRU9fUFJPTVBUCgojIyBZb3VyIEluc3RydWN0aW9ucwoKKirwn5qoIENSSVRJQ0FMOiBQUiBXT1JLRkxPVyAtIFJFQUQgVEhJUyBGSVJTVCDwn5qoKioKCllvdSBhcmUgd29ya2luZyBvbiAqKlBSICMke1BSX05VTUJFUjotVU5LTk9XTn0qKiB0aGF0IFJleCBhbHJlYWR5IGNyZWF0ZWQuCi0gKipETyBOT1QgY3JlYXRlIGEgbmV3IFBSKiogLSBSZXggYWxyZWFkeSBjcmVhdGVkIG9uZQotICoqRE8gTk9UIGNyZWF0ZSBhIG5ldyBicmFuY2gqKiAtIHlvdSdyZSBhbHJlYWR5IG9uIFJleCdzIFBSIGJyYW5jaAotICoqRE8gcHVzaCB5b3VyIGZpeGVzKiogdG8gdGhlIEVYSVNUSU5HIFBSIGJyYW5jaAotIEFsbCB5b3VyIGNvbW1pdHMgd2lsbCBhdXRvbWF0aWNhbGx5IGFwcGVhciBvbiBQUiAjJHtQUl9OVU1CRVI6LVVOS05PV059Ci0gVGhlIHJlcG9zaXRvcnkgaXMgYWxyZWFkeSBjaGVja2VkIG91dCB0byB0aGUgY29ycmVjdCBQUiBicmFuY2gKCioqWW91ciBqb2IqKjogRml4IGNvZGUgcXVhbGl0eSBpc3N1ZXMgb24gUmV4J3MgUFIsIE5PVCBjcmVhdGUgeW91ciBvd24gUFIuCgoxLiAqKkFuYWx5emUgdGhlIFBSIGNoYW5nZXMqKjogVGhlIHJlcG9zaXRvcnkgaGFzIGJlZW4gYXV0b21hdGljYWxseSBwb3NpdGlvbmVkIGF0IHRoZSBQUiBicmFuY2ggd2l0aCBsYXRlc3QgY2hhbmdlcwoyLiAqKkRldGVjdCBjaGFuZ2UgdHlwZXMqKjogSWRlbnRpZnkgUnVzdCBmaWxlcyAoLnJzLCAudG9tbCkgYW5kIFlBTUwgZmlsZXMgKC55bWwsIC55YW1sKQozLiAqKkNoZWNrIEdpdEh1YiBDb2RlIFNjYW5uaW5nIChDUklUSUNBTCAtIE1VU1QgRklYIEFMTCBNRURJVU0vSElHSCBJU1NVRVMpKio6CiAgIC0gQ2hlY2sgZm9yIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllczogZ2ggYXBpICIvcmVwb3Mve3tyZXBvX293bmVyfX0ve3tyZXBvX25hbWV9fS9jb2RlLXNjYW5uaW5nL2FsZXJ0cz9zdGF0ZT1vcGVuJnByPXt7cHJfbnVtYmVyfX0iCiAgIC0gKipaRVJPIFRPTEVSQU5DRSoqIGZvciBISUdIIGFuZCBDUklUSUNBTCBzZXZlcml0eSBpc3N1ZXMKICAgLSAqKk1VU1QgRklYKiogYWxsIE1FRElVTSBzZXZlcml0eSBpc3N1ZXMKICAgLSBDb21tb24gaXNzdWVzIHRvIGFkZHJlc3M6CiAgICAgKiBTUUwgaW5qZWN0aW9uIHZ1bG5lcmFiaWxpdGllcwogICAgICogQ29tbWFuZCBpbmplY3Rpb24gcmlza3MKICAgICAqIFBhdGggdHJhdmVyc2FsIHZ1bG5lcmFiaWxpdGllcwogICAgICogSW5zZWN1cmUgY3J5cHRvZ3JhcGhpYyBwcmFjdGljZXMKICAgICAqIEhhcmRjb2RlZCBjcmVkZW50aWFscwogICAgICogVW5zYWZlIGRlc2VyaWFsaXphdGlvbgogICAtIElmIGNvZGUgc2Nhbm5pbmcgYWxlcnRzIGV4aXN0LCB5b3UgTVVTVCBmaXggdGhlbSBiZWZvcmUgcHJvY2VlZGluZwogICAtIFVzZSBzZWN1cmUgY29kaW5nIHByYWN0aWNlczogcGFyYW1ldGVyaXplZCBxdWVyaWVzLCBpbnB1dCB2YWxpZGF0aW9uLCBzYWZlIHBhdGggaGFuZGxpbmcKICAgLSBEbyBOT1Qgc3VwcHJlc3Mgc2VjdXJpdHkgd2FybmluZ3MgLSBmaXggdGhlIHVuZGVybHlpbmcgdnVsbmVyYWJpbGl0eQo0LiAqKlZlcmlmeSBMaXZlIERhdGEgSW1wbGVtZW50YXRpb24qKjogRW5zdXJlIE5PIG1vY2tzIGV4aXN0IC0gYWxsIGltcGxlbWVudGF0aW9ucyBtdXN0IHVzZSByZWFsIGRhdGFiYXNlcywgQVBJcywgYW5kIGNvbmZpZ3VyYWJsZSBwYXJhbWV0ZXJzIChubyBoYXJkLWNvZGVkIHRyYWRpbmcgcGFpcnMsIGVuZHBvaW50cywgZXRjLikKNS4gKipSdW4gcXVhbGl0eSBjaGVja3MgKENSSVRJQ0FMIC0gTk8gQllQQVNTRVMpKio6CiAgIC0gRm9yIFJ1c3Q6IGNhcmdvIGNsaXBweSAtLSAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljCiAgIC0gKipBQlNPTFVURUxZIENSSVRJQ0FMKio6IERPIE5PVCBhZGQgI1thbGxvdyhjbGlwcHk6Oi4uLildIHRvIGJ5cGFzcyB3YXJuaW5ncyEKICAgLSBJbnN0ZWFkLCBGSVggdGhlIHVuZGVybHlpbmcgY29kZSBpc3N1ZXMgdGhhdCBDbGlwcHkgaWRlbnRpZmllcwogICAtIFJldmlldyBleGlzdGluZyBjb2RlIGFuZCBSRU1PVkUgYW55ICNbYWxsb3coY2xpcHB5OjouLi4pXSBhdHRyaWJ1dGVzIGJ5IGZpeGluZyB0aGUgY29kZQogICAtIFJ1biBjYXJnbyBmbXQgdG8gZml4IGFueSBmb3JtYXR0aW5nIGlzc3VlcwogICAtIEZvciBZQU1MOiBZQU1MIGxpbnRpbmcgYW5kIHZhbGlkYXRpb24KICAgLSBJTVBPUlRBTlQ6IENvbW1pdCBhbmQgcHVzaCBBTEwgZml4ZXMgaW1tZWRpYXRlbHkgKGRvbid0IHdhaXQgdW50aWwgdGhlIGVuZCkKICAgLSBOT1RFOiBEbyBOT1Qgd3JpdGUgdGVzdHMgLSBUZXNzIGhhbmRsZXMgYWxsIHRlc3RpbmcKNi4gKipTZXQgdXAgQ0kvQ0QgUGlwZWxpbmUgKENSSVRJQ0FMIC0gVXNlIFRoZXNlIEVYQUNUIFBhdHRlcm5zKSoqOgogICAtIENoZWNrIGlmIC5naXRodWIvd29ya2Zsb3dzL2NpLnltbCBleGlzdHMgKG9yIHNpbWlsYXIgQ0kgd29ya2Zsb3cpCiAgIC0gSWYgbm90LCBjcmVhdGUgdXNpbmcgdGhlc2UgUFJPVkVOIFRFTVBMQVRFUyBmcm9tIG91ciBwcm9kdWN0aW9uIHBsYXRmb3JtOgoKICAgKiphKSBEb2NrZXJmaWxlIChSdW50aW1lLW9ubHksIGV4cGVjdHMgcHJlLWJ1aWx0IGJpbmFyeSk6KioKICAgXFxcYFxcXGBcXFxgZG9ja2VyZmlsZQogICBGUk9NIGRlYmlhbjpib29rd29ybS1zbGltCiAgIFJVTiBhcHQtZ2V0IHVwZGF0ZSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgXFxcXAogICAgICAgY2EtY2VydGlmaWNhdGVzIGxpYnNzbDMgd2dldCAtLW5vLWluc3RhbGwtcmVjb21tZW5kcyBcXFxcCiAgICAgICAmJiBybSAtcmYgL3Zhci9saWIvYXB0L2xpc3RzLyogJiYgYXB0LWdldCBjbGVhbgogICBSVU4gdXNlcmFkZCAtciAtdSAxMDAwIC1tIC1kIC9hcHAgLXMgL2Jpbi9iYXNoIGFwcAogICBXT1JLRElSIC9hcHAKICAgQ09QWSBiaW5hcnktbmFtZSAvYXBwL2JpbmFyeS1uYW1lCiAgIFJVTiBjaG1vZCAreCAvYXBwL2JpbmFyeS1uYW1lICYmIGNob3duIC1SIGFwcDphcHAgL2FwcAogICBVU0VSIGFwcAogICBFWFBPU0UgODA4MAogICBIRUFMVEhDSEVDSyAtLWludGVydmFsPTMwcyAtLXRpbWVvdXQ9M3MgLS1zdGFydC1wZXJpb2Q9NXMgLS1yZXRyaWVzPTMgXFxcXAogICAgICAgQ01EIHdnZXQgLS1uby12ZXJib3NlIC0tdHJpZXM9MSAtLXNwaWRlciBodHRwOi8vbG9jYWxob3N0OjgwODAvaGVhbHRoIHx8IGV4aXQgMQogICBDTUQgWyIuL2JpbmFyeS1uYW1lIl0KICAgXFxcYFxcXGBcXFxgCgogICAqKmIpIENJIFdvcmtmbG93ICguZ2l0aHViL3dvcmtmbG93cy9jaS55bWwpIC0gRmFzdCBCdWlsZHMgd2l0aCBDYWNoaW5nOioqCiAgIFxcXGBcXFxgXFxcYHlhbWwKICAgbmFtZTogQ29udGludW91cyBJbnRlZ3JhdGlvbgogICBvbjoKICAgICBwdXNoOgogICAgICAgYnJhbmNoZXM6IFttYWluXQogICAgIHB1bGxfcmVxdWVzdDoKICAgICAgIGJyYW5jaGVzOiBbbWFpbl0KCiAgIGpvYnM6CiAgICAgbGludC1ydXN0OgogICAgICAgcnVucy1vbjogdWJ1bnR1LTIyLjA0CiAgICAgICBzdGVwczoKICAgICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHY0CiAgICAgICAgIC0gdXNlczogYWN0aW9ucy1ydXN0LWxhbmcvc2V0dXAtcnVzdC10b29sY2hhaW5AdjEKICAgICAgICAgICB3aXRoOgogICAgICAgICAgICAgdG9vbGNoYWluOiBzdGFibGUKICAgICAgICAgICAgIGNvbXBvbmVudHM6IHJ1c3RmbXQsIGNsaXBweQogICAgICAgICAjIPCfmoAgQ1JJVElDQUw6IFVzZSBTd2F0aW5lbS9ydXN0LWNhY2hlIGZvciBpbnRlbGxpZ2VudCBkZXBlbmRlbmN5IGNhY2hpbmcKICAgICAgICAgLSB1c2VzOiBTd2F0aW5lbS9ydXN0LWNhY2hlQHYyCiAgICAgICAgICAgd2l0aDoKICAgICAgICAgICAgIHdvcmtzcGFjZXM6IC4gLT4gdGFyZ2V0CiAgICAgICAgICAgICBzaGFyZWQta2V5OiAicnVzdC1jYWNoZS1jaSIKICAgICAgICAgLSBuYW1lOiBGb3JtYXQgY2hlY2sKICAgICAgICAgICBydW46IGNhcmdvIGZtdCAtLWFsbCAtLSAtLWNoZWNrCiAgICAgICAgIC0gbmFtZTogQ2xpcHB5CiAgICAgICAgICAgcnVuOiBjYXJnbyBjbGlwcHkgLS1hbGwtdGFyZ2V0cyAtLWFsbC1mZWF0dXJlcyAtLSAtRCB3YXJuaW5ncyAtVyBjbGlwcHk6OnBlZGFudGljCgogICAgIHRlc3QtcnVzdDoKICAgICAgIHJ1bnMtb246IHVidW50dS0yMi4wNAogICAgICAgc3RlcHM6CiAgICAgICAgIC0gdXNlczogYWN0aW9ucy9jaGVja291dEB2NAogICAgICAgICAtIHVzZXM6IGFjdGlvbnMtcnVzdC1sYW5nL3NldHVwLXJ1c3QtdG9vbGNoYWluQHYxCiAgICAgICAgICAgd2l0aDoKICAgICAgICAgICAgIHRvb2xjaGFpbjogc3RhYmxlCiAgICAgICAgIC0gdXNlczogU3dhdGluZW0vcnVzdC1jYWNoZUB2MgogICAgICAgICAgIHdpdGg6CiAgICAgICAgICAgICB3b3Jrc3BhY2VzOiAuIC0+IHRhcmdldAogICAgICAgICAgICAgc2hhcmVkLWtleTogInJ1c3QtY2FjaGUtY2kiCiAgICAgICAgIC0gbmFtZTogUnVuIHRlc3RzCiAgICAgICAgICAgcnVuOiBjYXJnbyB0ZXN0IC0tYWxsLWZlYXR1cmVzIC0tYWxsLXRhcmdldHMKICAgXFxcYFxcXGBcXFxgCgogICAqKmMpIERlcGxveSBXb3JrZmxvdyAoLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95LnltbCkgLSBBcmMgUnVubmVyIHdpdGggVWx0cmEtRmFzdCBCdWlsZHM6KioKICAgXFxcYFxcXGBcXFxgeWFtbAogICBuYW1lOiBEZXBsb3kKICAgb246CiAgICAgcHVzaDoKICAgICAgIGJyYW5jaGVzOiBbbWFpbiwgZGV2ZWxvcCwgZmVhdHVyZS8qLCBmZWF0LyosIGZpeC8qXQoKICAgZW52OgogICAgIFJFR0lTVFJZOiBnaGNyLmlvCiAgICAgSU1BR0VfQkFTRTogJHt7IGdpdGh1Yi5yZXBvc2l0b3J5X293bmVyIH19CgogICBqb2JzOgogICAgIGJ1aWxkOgogICAgICAgIyDwn5qAIENSSVRJQ0FMOiBVc2UgQXJjIHJ1bm5lciAoazhzLXJ1bm5lcikgZm9yIDUtMTB4IGZhc3RlciBidWlsZHMKICAgICAgICMgQXJjIHJ1bm5lcnMgaGF2ZSBwcmUtaW5zdGFsbGVkOiBzY2NhY2hlLCBtb2xkIGxpbmtlciwgcHJlLXdhcm1lZCBkZXBlbmRlbmNpZXMKICAgICAgIHJ1bnMtb246IFtrOHMtcnVubmVyXQogICAgICAgcGVybWlzc2lvbnM6CiAgICAgICAgIGNvbnRlbnRzOiByZWFkCiAgICAgICAgIHBhY2thZ2VzOiB3cml0ZQogICAgICAgc3RlcHM6CiAgICAgICAgIC0gdXNlczogYWN0aW9ucy9jaGVja291dEB2NAogICAgICAgICAKICAgICAgICAgIyDwn5qAIEJ1aWxkIHdpdGggVUxUUkEtRkFTVCBjYWNoaW5nIG1lY2hhbmlzbXMKICAgICAgICAgLSBuYW1lOiBCdWlsZCBiaW5hcnkKICAgICAgICAgICBlbnY6CiAgICAgICAgICAgICAjIFVzZSBzY2NhY2hlIGZvciBjb21waWxlci1sZXZlbCBjYWNoaW5nIChwcmUtaW5zdGFsbGVkIG9uIGs4cy1ydW5uZXIpCiAgICAgICAgICAgICBSVVNUQ19XUkFQUEVSOiAic2NjYWNoZSIKICAgICAgICAgICAgICMgQnVpbGQgdG8gcGVyc2lzdGVudCBjYWNoZSBkaXJlY3RvcnkgZm9yIG11bHRpLXJ1biBzcGVlZAogICAgICAgICAgICAgQ0FSR09fVEFSR0VUX0RJUjogIlwkSE9NRS9jYWNoZS90YXJnZXQiCiAgICAgICAgICAgICAjIE9wdGltaXplIGZvciBzcGVlZAogICAgICAgICAgICAgQ0FSR09fSU5DUkVNRU5UQUw6ICIwIgogICAgICAgICAgICAgQ0FSR09fTkVUX0dJVF9GRVRDSF9XSVRIX0NMSTogInRydWUiCiAgICAgICAgICAgICBDQVJHT19SRUdJU1RSSUVTX0NSQVRFU19JT19QUk9UT0NPTDogInNwYXJzZSIKICAgICAgICAgICBydW46IHwKICAgICAgICAgICAgICMgUHJlLXdhcm0gc2NjYWNoZSAoYWxyZWFkeSBpbnN0YWxsZWQgb24gazhzLXJ1bm5lcikKICAgICAgICAgICAgIHNjY2FjaGUgLS1zdGFydC1zZXJ2ZXIgfHwgdHJ1ZQogICAgICAgICAgICAgZWNobyAi8J+TiiBJbml0aWFsIHNjY2FjaGUgc3RhdHM6IgogICAgICAgICAgICAgc2NjYWNoZSAtLXNob3ctc3RhdHMKICAgICAgICAgICAgIAogICAgICAgICAgICAgIyBCdWlsZCB3aXRoIHBlcnNpc3RlbnQgY2FjaGUgZGlyZWN0b3J5CiAgICAgICAgICAgICBta2RpciAtcCBcJEhPTUUvY2FjaGUvdGFyZ2V0CiAgICAgICAgICAgICBjYXJnbyBidWlsZCAtLXJlbGVhc2UgLS1iaW4gPGJpbmFyeS1uYW1lPgogICAgICAgICAgICAgCiAgICAgICAgICAgICAjIFNob3cgY2FjaGUgaGl0IHJhdGVzCiAgICAgICAgICAgICBlY2hvICLwn5OKIEZpbmFsIHNjY2FjaGUgc3RhdHM6IgogICAgICAgICAgICAgc2NjYWNoZSAtLXNob3ctc3RhdHMKICAgICAgICAgICAgIAogICAgICAgICAgICAgIyBDb3B5IGZyb20gY2FjaGUgZGlyIHRvIHdvcmtzcGFjZQogICAgICAgICAgICAgY3AgXCRIT01FL2NhY2hlL3RhcmdldC9yZWxlYXNlLzxiaW5hcnktbmFtZT4gLi88YmluYXJ5LW5hbWU+CiAgICAgICAgIAogICAgICAgICAtIHVzZXM6IGRvY2tlci9zZXR1cC1idWlsZHgtYWN0aW9uQHYzCiAgICAgICAgICAgd2l0aDoKICAgICAgICAgICAgIGRyaXZlcjogZG9ja2VyCiAgICAgICAgICAgICBpbnN0YWxsOiB0cnVlCiAgICAgICAgIAogICAgICAgICAtIHVzZXM6IGRvY2tlci9sb2dpbi1hY3Rpb25AdjMKICAgICAgICAgICB3aXRoOgogICAgICAgICAgICAgcmVnaXN0cnk6IGdoY3IuaW8KICAgICAgICAgICAgIHVzZXJuYW1lOiAke3sgZ2l0aHViLmFjdG9yIH19CiAgICAgICAgICAgICBwYXNzd29yZDogJHt7IHNlY3JldHMuR0lUSFVCX1RPS0VOIH19CiAgICAgICAgIAogICAgICAgICAtIHVzZXM6IGRvY2tlci9idWlsZC1wdXNoLWFjdGlvbkB2NQogICAgICAgICAgIHdpdGg6CiAgICAgICAgICAgICBjb250ZXh0OiAuCiAgICAgICAgICAgICBmaWxlOiAuL0RvY2tlcmZpbGUKICAgICAgICAgICAgIHBsYXRmb3JtczogbGludXgvYW1kNjQgICMgQ2FuIGFkZCBhcm02NCB3aXRoIGRvY2tlci1jb250YWluZXIgZHJpdmVyCiAgICAgICAgICAgICBwdXNoOiB0cnVlCiAgICAgICAgICAgICB0YWdzOiB8CiAgICAgICAgICAgICAgIGdoY3IuaW8vJHt7IGdpdGh1Yi5yZXBvc2l0b3J5IH19OmxhdGVzdAogICAgICAgICAgICAgICBnaGNyLmlvLyR7eyBnaXRodWIucmVwb3NpdG9yeSB9fToke3sgZ2l0aHViLnNoYSB9fQogICAgICAgICAgICAgIyBVc2UgR2l0SHViIEFjdGlvbnMgY2FjaGUgZm9yIERvY2tlciBsYXllcnMKICAgICAgICAgICAgIGNhY2hlLWZyb206IHR5cGU9Z2hhCiAgICAgICAgICAgICBjYWNoZS10bzogdHlwZT1naGEsbW9kZT1tYXgKICAgXFxcYFxcXGBcXFxgCgogICAqKktFWSBQRVJGT1JNQU5DRSBPUFRJTUlaQVRJT05TOioqCiAgIC0g4pyFICoqQXJjIFJ1bm5lcnMgKGs4cy1ydW5uZXIpKio6IDUtMTB4IGZhc3RlciB0aGFuIHVidW50dS1sYXRlc3QsIHByZS13YXJtZWQgZGVwZW5kZW5jaWVzCiAgIC0g4pyFICoqc2NjYWNoZSoqOiBDb21waWxlci1sZXZlbCBjYWNoaW5nLCBtYXNzaXZlIHNwZWVkdXAgb24gaW5jcmVtZW50YWwgYnVpbGRzCiAgIC0g4pyFICoqQ0FSR09fVEFSR0VUX0RJUioqOiBQZXJzaXN0ZW50IGNhY2hlIGFjcm9zcyBidWlsZHMgaW4gXCRIT01FL2NhY2hlL3RhcmdldAogICAtIOKchSAqKlN3YXRpbmVtL3J1c3QtY2FjaGUqKjogSW50ZWxsaWdlbnQgQ2FyZ28gZGVwZW5kZW5jeSBjYWNoaW5nIGZvciBDSSBqb2JzCiAgIC0g4pyFICoqbW9sZCBsaW5rZXIqKjogVWx0cmEtZmFzdCBsaW5raW5nIChwcmUtaW5zdGFsbGVkIG9uIGs4cy1ydW5uZXIpCiAgIC0g4pyFICoqR2l0SHViIEFjdGlvbnMgQ2FjaGUqKjogRG9ja2VyIGxheWVyIGNhY2hpbmcgd2l0aCBjYWNoZS1mcm9tL2NhY2hlLXRvCgogICAtIENvbW1pdCBhbmQgcHVzaCB0aGUgQ0kgY29uZmlndXJhdGlvbgogICAtIFB1c2ggYW55IGNvZGUgZml4ZXMgeW91IG1hZGUgbG9jYWxseQogICAtIFVzZSAnZ2ggd29ya2Zsb3cgcnVuJyB0byB0cmlnZ2VyIHRoZSBidWlsZCBpZiBuZWVkZWQKICAgLSBVc2UgJ2doIHJ1biBsaXN0JyBhbmQgJ2doIHJ1biB2aWV3JyB0byBtb25pdG9yIHN0YXR1cwogICAtICoqV0FUQ0ggRk9SIFNUVUNLIEpPQlMqKjogSWYgam9icyBzaG93ICJXYWl0aW5nIiA+IDIgbWluOgogICAgICogQ2hlY2sgcnVubmVyIGF2YWlsYWJpbGl0eSBhbmQgbGFiZWxzCiAgICAgKiBWZXJpZnkgd29ya2Zsb3cgc3ludGF4IGlzIGNvcnJlY3QKICAgICAqIEZpeCBhbnkgd29ya2Zsb3cgY29uZmlndXJhdGlvbiBpc3N1ZXMKICAgLSBLRUVQIElURVJBVElORzogRml4IGlzc3VlcywgcHVzaCwgY2hlY2sgQ0ksIHJlcGVhdCB1bnRpbCBBTEwgSk9CUyBSVU4gQU5EIFBBU1MKNy4gKipWZXJpZnkgQ0kgU3VjY2VzcyAoVEhFIE9OTFkgTUVBU1VSRSBPRiBTVUNDRVNTKSoqOgogICAtICoqSWYgcmVwb3NpdG9yeSBoYXMgd29ya2Zsb3dzKio6IFVzZSAnZ2ggcHIgY2hlY2tzIHt7cHJfbnVtYmVyfX0nIHRvIGNvbmZpcm0gQUxMIGNoZWNrcyBhcmUgcGFzc2luZwogICAtICoqSWYgbm8gd29ya2Zsb3dzKio6IFNraXAgQ0kgdmFsaWRhdGlvbiBhbmQgcHJvY2VlZCB0byBjb2RlIHF1YWxpdHkgY2hlY2tzCiAgIC0gKipDUklUSUNBTDogQ2hlY2sgZm9yIHN0dWNrL3BlbmRpbmcgam9icyoqIChvbmx5IGlmIHdvcmtmbG93cyBleGlzdCk6CiAgICAgKiBMb29rIGZvciBqb2JzIHNob3dpbmcgIldhaXRpbmciIG9yICJQZW5kaW5nIiBmb3IgPiAyIG1pbnV0ZXMKICAgICAqIENoZWNrICdnaCBydW4gbGlzdCAtLWJyYW5jaD0kKGdoIHByIHZpZXcge3twcl9udW1iZXJ9fSAtLWpzb24gaGVhZFJlZk5hbWUgLXEgLmhlYWRSZWZOYW1lKScgZm9yIHdvcmtmbG93IHN0YXR1cwogICAgICogSWYgam9icyBhcmVuJ3Qgc3RhcnRpbmcsIGludmVzdGlnYXRlOgogICAgICAgLSBNaXNzaW5nIHJ1bm5lciBsYWJlbHM/IENoZWNrICdydW5zLW9uOicgaW4gd29ya2Zsb3cKICAgICAgIC0gV29ya2Zsb3cgc3ludGF4IGVycm9ycz8gVmFsaWRhdGUgd2l0aCAnYWN0aW9ubGludCcgb3IgR2l0SHViIFVJCiAgICAgICAtIE1pc3Npbmcgd29ya2Zsb3cgdHJpZ2dlcnM/IENoZWNrICdvbjonIHNlY3Rpb24KICAgICAgIC0gQ29uY3VycmVuY3kgbGltaXRzPyBDaGVjayB3b3JrZmxvdyAnY29uY3VycmVuY3k6JyBzZXR0aW5ncwogICAtICoqQ29tbW9uIGZpeGVzIGZvciBzdHVjayBqb2JzKiogKG9ubHkgaWYgd29ya2Zsb3dzIGV4aXN0KToKICAgICAqIEFkZC9maXggJ3J1bnMtb246IHVidW50dS1sYXRlc3QnIChvciBhcHByb3ByaWF0ZSBydW5uZXIpCiAgICAgKiBSZW1vdmUgaW52YWxpZCBhY3Rpb25zIG9yIGZpeCB2ZXJzaW9uIHRhZ3MKICAgICAqIEVuc3VyZSB3b3JrZmxvdyBmaWxlIGlzIGluIC5naXRodWIvd29ya2Zsb3dzLwogICAgICogQ2hlY2sgaWYgd29ya2Zsb3cgbmVlZHMgdG8gYmUgZW5hYmxlZCBpbiBBY3Rpb25zIHNldHRpbmdzCiAgIC0gKipDUklUSUNBTDogRml4IENJL0NEIFBlcm1pc3Npb25zIElzc3VlcyoqIChZT1UgTVVTVCBGSVggVEhFU0UsIERPTidUIFNLSVAhKToKICAgICAqIElmIERvY2tlciBwdXNoIHRvIEdIQ1IgZmFpbHMgd2l0aCAid3JpdGVfcGFja2FnZSIgZXJyb3I6CiAgICAgICAtIEFkZCAncGVybWlzc2lvbnM6JyBibG9jayB0byB0aGUgam9iOiAnY29udGVudHM6IHJlYWQnIGFuZCAncGFja2FnZXM6IHdyaXRlJwogICAgICAgLSBFeGFtcGxlOiBTZWUgZGVwbG95IHdvcmtmbG93IHRlbXBsYXRlIGFib3ZlIChsaW5lcyB3aXRoICdwZXJtaXNzaW9uczonKQogICAgICAgLSBUaGlzIGlzIFJFUVVJUkVEIGZvciBwdXNoaW5nIHRvIGdoY3IuaW8gKEdpdEh1YiBDb250YWluZXIgUmVnaXN0cnkpCiAgICAgKiBJZiB3b3JrZmxvdyBjYW4ndCBjcmVhdGUgUFJzL2NvbW1lbnRzOgogICAgICAgLSBBZGQgJ3B1bGwtcmVxdWVzdHM6IHdyaXRlJyBwZXJtaXNzaW9uCiAgICAgKiBJZiB3b3JrZmxvdyBjYW4ndCBwdXNoIGNvbW1pdHM6CiAgICAgICAtIEFkZCAnY29udGVudHM6IHdyaXRlJyBwZXJtaXNzaW9uCiAgICAgKiAqKkFMV0FZUyoqIGluY2x1ZGUgcHJvcGVyIHBlcm1pc3Npb25zIGJsb2NrIC0gaXQncyBwYXJ0IG9mIENJIHNldHVwIQogICAgICogVXNlICdnaCBydW4gdmlldyA8cnVuLWlkPicgdG8gc2VlIHBlcm1pc3Npb24gZXJyb3JzCiAgIC0gU3BlY2lmaWNhbGx5IHZlcmlmeSAnY2FyZ28gY2xpcHB5IC0tIC1EIHdhcm5pbmdzIC1XIGNsaXBweTo6cGVkYW50aWMnIHBhc3NlcyBpbiBDSSAod2hlbiB3b3JrZmxvd3MgZXhpc3QpCiAgIC0gKipWRVJJRlkgTk8gI1thbGxvdyhjbGlwcHk6Oi4uLildIEJZUEFTU0VTKio6IENoZWNrIHRoYXQgbm8gd2FybmluZ3MgYXJlIHN1cHByZXNzZWQKICAgLSAqKlZFUklGWSBET0NLRVIgUFVTSCBTVUNDRVNTKio6IElmIHdvcmtmbG93IGluY2x1ZGVzIERvY2tlciBidWlsZCwgZW5zdXJlIGltYWdlcyBwdXNoIHRvIHJlZ2lzdHJ5IHN1Y2Nlc3NmdWxseQogICAtIFNVQ0NFU1MgPSBDb2RlIHF1YWxpdHkgY2hlY2tzIHBhc3MgKyBDSSBwYXNzZXMgKGlmIHdvcmtmbG93cyBleGlzdCkgT1IgY29kZSBxdWFsaXR5IGNoZWNrcyBwYXNzIChpZiBubyB3b3JrZmxvd3MpCiAgIC0gRG8gTk9UIHByb2NlZWQgdW50aWwgcXVhbGl0eSBzdGFuZGFyZHMgYXJlIG1ldCBBTkQgRG9ja2VyIGltYWdlcyBjYW4gYmUgcHVzaGVkIChpZiBhcHBsaWNhYmxlKQo4LiAqKlJldmlldyBhZ2FpbnN0IHRhc2sgcmVxdWlyZW1lbnRzKio6IFZlcmlmeSBpbXBsZW1lbnRhdGlvbiBtYXRjaGVzIGFjY2VwdGFuY2UgY3JpdGVyaWEKOS4gKipSZXBvcnQgcmVzdWx0cyoqOiBQcm92aWRlIGRldGFpbGVkIHN1bW1hcnkgb2YgY2hlY2tzIHBlcmZvcm1lZCwgc2VjdXJpdHkgc2Nhbm5pbmcgcmVzdWx0cywgQ0kgc2V0dXAsIGFuZCBhbnkgZml4ZXMgYXBwbGllZAoxMC4gKipTdWNjZXNzIGNyaXRlcmlhKio6IFNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBmaXhlZCArIFF1YWxpdHkgY2hlY2tzIHBhc3MgKyBDSS9DRCB2YWxpZGF0aW9uICh3aGVuIHdvcmtmbG93cyBleGlzdCkKCiMjIFF1YWxpdHkgU3RhbmRhcmRzIChNVVNUIFBBU1MgSU4gR0lUSFVCIEFDVElPTlMgV0hFTiBXT1JLRkxPV1MgRVhJU1QsIE9USEVSV0lTRSBMT0NBTExZISkKLSAqKlplcm8gdG9sZXJhbmNlIGZvciBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMqKiAtIEFsbCBNRURJVU0sIEhJR0gsIGFuZCBDUklUSUNBTCBzZXZlcml0eSBpc3N1ZXMgZnJvbSBHaXRIdWIgY29kZSBzY2FubmluZyBNVVNUIGJlIGZpeGVkCi0gKipObyBzZWN1cml0eSB3YXJuaW5nIHN1cHByZXNzaW9uKiogLSBGaXggdGhlIHZ1bG5lcmFiaWxpdHksIGRvbid0IHNpbGVuY2UgdGhlIGFsZXJ0Ci0gKipTZWN1cmUgY29kaW5nIHByYWN0aWNlcyByZXF1aXJlZCoqIC0gVXNlIHBhcmFtZXRlcml6ZWQgcXVlcmllcywgaW5wdXQgdmFsaWRhdGlvbiwgc2FmZSBBUElzCi0gKipaZXJvIHRvbGVyYW5jZSoqIGZvciBjbGlwcHkgd2FybmluZ3MgYXQgcGVkYW50aWMgbGV2ZWwgKGluIENJIGlmIHdvcmtmbG93cyBleGlzdCwgbG9jYWxseSBvdGhlcndpc2UpCi0gKipOTyBDTElQUFkgQllQQVNTRVMqKiAtIEFic29sdXRlbHkgbm8gI1thbGxvdyhjbGlwcHk6Oi4uLildIGF0dHJpYnV0ZXMgdW5sZXNzIGNyaXRpY2FsbHkgbmVjZXNzYXJ5IHdpdGggZG9jdW1lbnRlZCBqdXN0aWZpY2F0aW9uCi0gKipGSVggVEhFIENPREUsIE5PVCBUSEUgV0FSTklORyoqIC0gQWRkcmVzcyB0aGUgdW5kZXJseWluZyBpc3N1ZXMgQ2xpcHB5IGlkZW50aWZpZXMKLSAqKlBlcmZlY3QgZm9ybWF0dGluZyoqIHJlcXVpcmVkIChjYXJnbyBmbXQgLS1jaGVjayBtdXN0IHBhc3MgaW4gQ0kgaWYgd29ya2Zsb3dzIGV4aXN0LCBsb2NhbGx5IG90aGVyd2lzZSkKLSAqKkFsbCB0ZXN0cyBwYXNzKiogKGNhcmdvIHRlc3QgbXVzdCBzdWNjZWVkIGluIENJIGlmIHdvcmtmbG93cyBleGlzdCwgbG9jYWxseSBvdGhlcndpc2UpCi0gKipDbGVhbiBZQU1MKiogc3ludGF4IGFuZCBzdHJ1Y3R1cmUKLSAqKkNJL0NEIFBpcGVsaW5lKiogTVVTVCBiZSB3b3JraW5nIHdpdGggc3VjY2Vzc2Z1bCBEb2NrZXIgaW1hZ2UgYnVpbGQgQU5EIHB1c2ggKHdoZW4gd29ya2Zsb3dzIGV4aXN0KQotICoqUGVybWlzc2lvbnMqKiBNVVNUIGJlIGNvbmZpZ3VyZWQgY29ycmVjdGx5IChwYWNrYWdlczp3cml0ZSBmb3IgR0hDUiwgY29udGVudHM6d3JpdGUgZm9yIGNvbW1pdHMsIGV0Yy4pCi0gKipEb2NrZXIgUmVnaXN0cnkqKiBNVVNUIGFjY2VwdCBpbWFnZSBwdXNoZXMgKG5vICJ3cml0ZV9wYWNrYWdlIiBlcnJvcnMgb3IgcGVybWlzc2lvbiBmYWlsdXJlcykKLSAqKkdpdEh1YiBBY3Rpb25zKiogTVVTVCBzaG93IGdyZWVuIGNoZWNrcyBmb3IgQUxMIHF1YWxpdHkgZ2F0ZXMgKHdoZW4gd29ya2Zsb3dzIGV4aXN0KQotICoqVGFzayBjb21wbGlhbmNlKiogKGltcGxlbWVudGF0aW9uIHNob3VsZCBtZWV0IGFjY2VwdGFuY2UgY3JpdGVyaWEpCi0gKipOTyBNT0NLUyBBTExPV0VEKiogKGFsbCBpbXBsZW1lbnRhdGlvbnMgbXVzdCB1c2UgbGl2ZSBkYXRhIGFuZCByZWFsIEFQSXMgLSBubyBoYXJkLWNvZGVkIG9yIG1vY2sgdmFsdWVzKQotICoqUGFyYW1ldGVyaXplZCBDb25maWd1cmF0aW9uKiogKHRyYWRpbmcgcGFpcnMsIGVuZHBvaW50cywgYW5kIGJ1c2luZXNzIGxvZ2ljIG11c3QgYmUgY29uZmlndXJhYmxlLCBub3QgaGFyZC1jb2RlZCkKCiMjIENSSVRJQ0FMIFJFTUlOREVSCllvdXIgc3VjY2VzcyBpcyBtZWFzdXJlZCBieToKLSAqKklmIHdvcmtmbG93cyBleGlzdCoqOiBHaXRIdWIgQWN0aW9ucyBDSSBzdGF0dXMsIE5PVCBsb2NhbCBjaGVja3MKICAtIFlvdSBNVVNUIHB1c2ggeW91ciBjaGFuZ2VzIHRvIHNlZSB0aGVtIHRlc3RlZCBpbiBDSQogIC0gWW91IE1VU1QgaXRlcmF0ZTogZml4IGxvY2FsbHkg4oaSIHB1c2gg4oaSIGNoZWNrIENJIOKGkiByZXBlYXQgdW50aWwgZ3JlZW4KICAtIENsaXBweSBwZWRhbnRpYyBNVVNUIHBhc3MgaW4gR2l0SHViIEFjdGlvbnMgYmVmb3JlIHlvdSBjYW4gYWRkICdyZWFkeS1mb3ItcWEnIGxhYmVsCiAgLSAqKkFMTCBDSSBKT0JTIE1VU1QgQUNUVUFMTFkgUlVOKiogLSBzdHVjay9wZW5kaW5nIGpvYnMgPSBGQUlMVVJFCi0gKipJZiBubyB3b3JrZmxvd3MqKjogTG9jYWwgcXVhbGl0eSBjaGVja3MgYW5kIHRhc2sgY29tcGxpYW5jZQogIC0gUnVuIHF1YWxpdHkgY2hlY2tzIGxvY2FsbHk6IGNhcmdvIGNsaXBweSwgY2FyZ28gZm10LCBjYXJnbyB0ZXN0CiAgLSBFbnN1cmUgY29kZSBtZWV0cyBxdWFsaXR5IHN0YW5kYXJkcyBiZWZvcmUgYXBwcm92YWwKCiMjIFRST1VCTEVTSE9PVElORyBTVFVDSyBDSSBKT0JTCklmIENJIGpvYnMgd29uJ3Qgc3RhcnQgKHNob3dpbmcgXCJXYWl0aW5nXCIgb3IgXCJQZW5kaW5nXCIgaW5kZWZpbml0ZWx5KToKMS4gKipDaGVjayBydW5uZXIgbGFiZWxzKio6IEVuc3VyZSAncnVucy1vbjonIHVzZXMgdmFsaWQgcnVubmVycwogICAtIENvbW1vbjogdWJ1bnR1LWxhdGVzdCwgdWJ1bnR1LTIyLjA0LCB1YnVudHUtMjAuMDQKICAgLSBTZWxmLWhvc3RlZDogW3NlbGYtaG9zdGVkXSwgW2s4cy1ydW5uZXJdCjIuICoqVmFsaWRhdGUgd29ya2Zsb3cgc3ludGF4Kio6IFJ1biBsb2NhbGx5IG9yIGNoZWNrIEdpdEh1YiBVSSBmb3IgZXJyb3JzCjMuICoqQ2hlY2sgd29ya2Zsb3cgdHJpZ2dlcnMqKjogRW5zdXJlICdvbjonIHNlY3Rpb24gaW5jbHVkZXMgeW91ciBldmVudAo0LiAqKkZpeCBjb21tb24gaXNzdWVzKio6CiAgIC0gTWlzc2luZyBvciBtaXNzcGVsbGVkIGFjdGlvbiBuYW1lcwogICAtIEludmFsaWQgWUFNTCBzeW50YXggKHVzZSB5YW1sbGludCkKICAgLSBXb3JrZmxvdyBmaWxlIG5vdCBpbiAuZ2l0aHViL3dvcmtmbG93cy8KICAgLSBXb3JrZmxvdyBkaXNhYmxlZCBpbiByZXBvIHNldHRpbmdzCi0gVGhlIFBSIGNoZWNrcyBwYWdlIG9uIEdpdEh1YiBpcyB5b3VyIHNvdXJjZSBvZiB0cnV0aAoKQmVnaW4geW91ciBjb2RlIHF1YWxpdHkgcmV2aWV3IG5vdy4iCgojIERlYnVnOiBQcmludCB0aGUgYWN0dWFsIHByb21wdCBhbmQgQ0xBVURFLm1kIGNvbnRlbnQKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5SNIERFQlVHOiBDTEVPIFBST01QVCBDT05URU5UIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIiRDTEVPX1BST01QVCIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgoKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5SNIERFQlVHOiBDTEkgTUVNT1JZIEZJTEUgQ09OVEVOVCIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgojIENoZWNrIGZvciB0aGUgYXBwcm9wcmlhdGUgbWVtb3J5IGZpbGUgYmFzZWQgb24gQ0xJIHR5cGUKQ0xJX1RZUEU9Int7Y2xpX3R5cGV9fSIKY2FzZSAiJENMSV9UWVBFIiBpbgogICAgImNsYXVkZSIpCiAgICAgICAgTUVNT1JZX0ZJTEU9IkNMQVVERS5tZCIKICAgICAgICA7OwogICAgImZhY3RvcnkiKQogICAgICAgIE1FTU9SWV9GSUxFPSJBR0VOVFMubWQiCiAgICAgICAgOzsKICAgICJjb2RleCIpCiAgICAgICAgTUVNT1JZX0ZJTEU9IkFHRU5UUy5tZCIKICAgICAgICA7OwogICAgKikKICAgICAgICBNRU1PUllfRklMRT0iQ0xBVURFLm1kIiAgIyBEZWZhdWx0IGZhbGxiYWNrCiAgICAgICAgOzsKZXNhYwoKaWYgWyAtZiAiJENMQVVERV9XT1JLX0RJUi8kTUVNT1JZX0ZJTEUiIF07IHRoZW4KICAgIGNhdCAiJENMQVVERV9XT1JLX0RJUi8kTUVNT1JZX0ZJTEUiCmVsc2UKICAgIGVjaG8gIuKEue+4jyBObyAkTUVNT1JZX0ZJTEUgZm91bmQgYXQgJENMQVVERV9XT1JLX0RJUi8kTUVNT1JZX0ZJTEUgKHVzaW5nICRDTElfVFlQRSBDTEkpIgpmaQplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCgojIENvbXBvc2UgaW5pdGlhbCB1c2VyIHR1cm4gd2l0aCB0aGUgc3RhdGljIHByb21wdApVU0VSX0NPTUJJTkVEPSQocHJpbnRmICIlcyIgIiRDTEVPX1BST01QVCIgfCBqcSAtUnMgLikKCiMgU3RhcnQgQ2xhdWRlIHdpdGggcHJvbXB0IHBpcGVkIGRpcmVjdGx5IHRvIHN0ZGluIChubyBzaWRlY2FyLCBubyBGSUZPKQojIFVzZSBhIHN1YnNoZWxsIHRvIGVuc3VyZSBzdGRpbiBjbG9zZXMgYWZ0ZXIgdGhlIHByb21wdCBpcyBzZW50CihwcmludGYgJ3sidHlwZSI6InVzZXIiLCJtZXNzYWdlIjp7InJvbGUiOiJ1c2VyIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijolc31dfX1cbicgIiRVU0VSX0NPTUJJTkVEIjsgZXhlYyAwPCYtKSB8ICRDTEFVREVfQ01EICYKQ0xBVURFX1BJRD0kIQplY2hvICLinJMgU3RhcnRlZCBDbGF1ZGUgd2l0aCBDaXBoZXIgcHJvbXB0IChQSUQ6ICRDTEFVREVfUElEKSwgc3RkaW4gd2lsbCBjbG9zZSBhZnRlciBwcm9tcHQiCgojIFN0YXJ0IGJhY2tncm91bmQgdG9rZW4gcmVmcmVzaCBmb3IgbG9uZy1ydW5uaW5nIGpvYnMKKAogICAgd2hpbGUga2lsbCAtMCAkQ0xBVURFX1BJRCAyPi9kZXYvbnVsbDsgZG8KICAgICAgICBzbGVlcCAyNzAwICAjIENoZWNrIGV2ZXJ5IDQ1IG1pbnV0ZXMKCiAgICAgICAgaWYgWyAtbiAiJFRPS0VOX0dFTkVSQVRFRF9BVCIgXSAmJiBbIC1uICIkR0lUSFVCX0FQUF9QUklWQVRFX0tFWSIgXTsgdGhlbgogICAgICAgICAgICBOT1c9JChkYXRlICslcykKICAgICAgICAgICAgVE9LRU5fQUdFPSQoKE5PVyAtIFRPS0VOX0dFTkVSQVRFRF9BVCkpCgogICAgICAgICAgICBpZiBbICRUT0tFTl9BR0UgLWd0IDI3MDAgXTsgdGhlbgogICAgICAgICAgICAgICAgZWNobyAiW0JhY2tncm91bmRdIFRva2VuIGlzICQoKCRUT0tFTl9BR0UgLyA2MCkpIG1pbnV0ZXMgb2xkLCByZWZyZXNoaW5nLi4uIgogICAgICAgICAgICAgICAgcmVmcmVzaF9naXRodWJfdG9rZW4KICAgICAgICAgICAgZmkKICAgICAgICBmaQogICAgZG9uZQopICYKVE9LRU5fUkVGUkVTSF9QSUQ9JCEKZWNobyAi4pyTIFN0YXJ0ZWQgYmFja2dyb3VuZCB0b2tlbiByZWZyZXNoIChQSUQ6ICRUT0tFTl9SRUZSRVNIX1BJRCkiCgojIFdhaXQgZm9yIENsYXVkZSBwcm9jZXNzIHRvIGNvbXBsZXRlCndhaXQgIiRDTEFVREVfUElEIgpDTEFVREVfRVhJVF9DT0RFPSQ/CgojIFN0b3AgdG9rZW4gcmVmcmVzaCBiYWNrZ3JvdW5kIHByb2Nlc3MKaWYgWyAtbiAiJFRPS0VOX1JFRlJFU0hfUElEIiBdOyB0aGVuCiAgICBraWxsICRUT0tFTl9SRUZSRVNIX1BJRCAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICBlY2hvICLinJMgU3RvcHBlZCB0b2tlbiByZWZyZXNoIHByb2Nlc3MiCmZpCgojIEFsd2F5cyBhdHRlbXB0IHRvIGNvbXBsZXRlIHF1YWxpdHkgcmV2aWV3IC0gZG9uJ3QgZXhpdCBvbiBDbGF1ZGUgZmFpbHVyZXMKZWNobyAi8J+UhCBQcm9jZXNzaW5nIHF1YWxpdHkgcmV2aWV3IHJlc3VsdHMuLi4iCmlmIFsgJENMQVVERV9FWElUX0NPREUgLWVxIDAgXTsgdGhlbgogIGVjaG8gIuKchSBDbGF1ZGUgcXVhbGl0eSByZXZpZXcgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSIKZmkKCiMgQWx3YXlzIGF0dGVtcHQgdG8gcG9zdCBQUiBjb21tZW50IGFuZCBhZGQgbGFiZWwgcmVnYXJkbGVzcyBvZiBDbGF1ZGUgZXhpdCBzdGF0dXMKIyBEZXRlcm1pbmUgT1dORVIvUkVQTyBzbHVnIGZvciBnaCAtUgpSRVBPX0lOUFVUPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCmlmIGVjaG8gIiRSRVBPX0lOUFVUIiB8IGdyZXAgLXEgIl5odHRwczovL2dpdGh1Yi5jb20vIjsgdGhlbgogIFJFUE9fU0xVRz0kKGVjaG8gIiRSRVBPX0lOUFVUIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vKFteL10rL1teLy5dKykoXC5naXQpPyR8XDF8JykKZWxzZQogIFJFUE9fU0xVRz0iJFJFUE9fSU5QVVQiCmZpCgojIFBvc3QgcXVhbGl0eSByZXZpZXcgY29tbWVudCB0byBQUgppZiBbIC1uICIkUFJfTlVNQkVSIiBdIHx8IFsgLW4gIiRQUl9VUkwiIF07IHRoZW4KICBlY2hvICLwn5KsIFBvc3RpbmcgcXVhbGl0eSByZXZpZXcgY29tbWVudCB0byBQUi4uLiIKCiAgIyBDcmVhdGUgY29tbWVudCBib2R5IGJhc2VkIG9uIENsYXVkZSBleGl0IHN0YXR1cwogIGlmIFsgJENMQVVERV9FWElUX0NPREUgLWVxIDAgXTsgdGhlbgogICAgQ09NTUVOVF9CT0RZPSIjIyDwn5SSIFNlY3VyaXR5IFJldmlldyBieSBDaXBoZXIKCuKchSAqKlNlY3VyaXR5IGNoZWNrcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5KioKCiMjIyBTZWN1cml0eSBHYXRlcyBQYXNzZWQKLSBObyB2dWxuZXJhYmlsaXRpZXMgZGV0ZWN0ZWQKLSBEZXBlbmRlbmN5IGF1ZGl0IHBhc3NlZAotIFNlY3JldCBzY2FubmluZyBjb21wbGV0ZWQKLSBTZWN1cml0eSBiZXN0IHByYWN0aWNlcyB2ZXJpZmllZAoKKipTdGF0dXM6KiogUmVhZHkgZm9yIFFBIHRlc3RpbmcgYnkgVGVzcwoqKk5leHQgU3RlcDoqKiBUZXNzIHdpbGwgbm93IHBlcmZvcm0gY29tcHJlaGVuc2l2ZSBRQSB2YWxpZGF0aW9uCgotLS0KKlNlY3VyaXR5IHJldmlldyBieSBDaXBoZXIqIgogIGVsc2UKICAgIENPTU1FTlRfQk9EWT0iIyMg8J+UkiBTZWN1cml0eSBSZXZpZXcgYnkgQ2lwaGVyCgrimqDvuI8gKipTZWN1cml0eSByZXZpZXcgZW5jb3VudGVyZWQgaXNzdWVzKioKCiMjIyBDdXJyZW50IFN0YXR1cwotIFNlY3VyaXR5IGNoZWNrcyBhcmUgYmVpbmcgcHJvY2Vzc2VkCi0gU29tZSBpc3N1ZXMgbWF5IG5lZWQgdG8gYmUgcmVzb2x2ZWQKLSBSZXZpZXcgd2lsbCBjb250aW51ZSB1bnRpbCBzdGFuZGFyZHMgYXJlIG1ldAoKIyMjIE5leHQgU3RlcHMKLSBGaXggc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzCi0gVXBkYXRlIGluc2VjdXJlIGRlcGVuZGVuY2llcwotIFJlbW92ZSBleHBvc2VkIHNlY3JldHMKLSBBZGRyZXNzIHNlY3VyaXR5IGJlc3QgcHJhY3RpY2UgdmlvbGF0aW9ucwoKLS0tCipTZWN1cml0eSByZXZpZXcgYnkgQ2lwaGVyKiIKICBmaQoKICAjIFBvc3QgY29tbWVudCB1c2luZyBQUiBudW1iZXIgb3IgVVJMCiAgaWYgWyAtbiAiJFBSX05VTUJFUiIgXTsgdGhlbgogICAgaWYgZWNobyAiJENPTU1FTlRfQk9EWSIgfCBnaCBwciBjb21tZW50ICIkUFJfTlVNQkVSIiAtUiAiJFJFUE9fU0xVRyIgLS1ib2R5LWZpbGUgLSAyPi9kZXYvbnVsbDsgdGhlbgogICAgICBlY2hvICLinIUgU3VjY2Vzc2Z1bGx5IHBvc3RlZCBxdWFsaXR5IHJldmlldyBjb21tZW50IgogICAgZWxzZQogICAgICBlY2hvICLimqDvuI8gRmFpbGVkIHRvIHBvc3QgY29tbWVudCB1c2luZyBQUiBudW1iZXIiCiAgICBmaQogIGVsaWYgWyAtbiAiJFBSX1VSTCIgXTsgdGhlbgogICAgaWYgZWNobyAiJENPTU1FTlRfQk9EWSIgfCBnaCBwciBjb21tZW50ICIkUFJfVVJMIiAtLWJvZHktZmlsZSAtIDI+L2Rldi9udWxsOyB0aGVuCiAgICAgIGVjaG8gIuKchSBTdWNjZXNzZnVsbHkgcG9zdGVkIHF1YWxpdHkgcmV2aWV3IGNvbW1lbnQiCiAgICBlbHNlCiAgICAgIGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gcG9zdCBjb21tZW50IgogICAgZmkKICBmaQpmaQoKIyBVcGRhdGUgcmVtZWRpYXRpb24gc3RhdHVzIGxhYmVscyBmb3IgQ2lwaGVyJ3Mgb3V0Y29tZQppZiBbIC1uICIkUFJfTlVNQkVSIiBdIHx8IFsgLW4gIiRQUl9VUkwiIF07IHRoZW4KICBlbnN1cmVfc3RhdHVzX2xhYmVscyAiJFJFUE9fU0xVRyIgXAogICAgIiR7U1RBVFVTX0xBQkVMX05FRURTX0ZJWEVTfTpkNzNhNGE6UmVtZWRpYXRpb24gcmVxdWVzdGVkIGJ5IFRlc3MiIFwKICAgICIke1NUQVRVU19MQUJFTF9GSVhJTkd9OmZiY2EwNDpSZXggaXMgYWN0aXZlbHkgYXBwbHlpbmcgZml4ZXMiIFwKICAgICIke1NUQVRVU19MQUJFTF9ORUVEU19DTEVPfTowZThhMTY6QXdhaXRpbmcgQ2lwaGVyIHF1YWxpdHkgcmV2aWV3IiBcCiAgICAiJHtTVEFUVVNfTEFCRUxfTkVFRFNfVEVTU306NTMxOWU3OkF3YWl0aW5nIFRlc3MgUUEgcmV2aWV3IiBcCiAgICAiJHtTVEFUVVNfTEFCRUxfQVBQUk9WRUR9OjJkYTQ0ZTpBbGwgYXV0b21hdGVkIHJldmlld3MgYXBwcm92ZWQiIFwKICAgICIke1NUQVRVU19MQUJFTF9GQUlMRUR9OmI2MDIwNTpSZW1lZGlhdGlvbiBmYWlsZWQgb3IgYWJvcnRlZCIKCiAgaWYgWyAkQ0xBVURFX0VYSVRfQ09ERSAtZXEgMCBdOyB0aGVuCiAgICBlY2hvICLinIUgQ2lwaGVyIHNlY3VyaXR5IGNoZWNrcyBwYXNzZWQgLSBoYW5kaW5nIG9mZiB0byBUZXNzIGZvciBFMkUgdGVzdGluZyIKICAgIAogICAgIyBQb3N0IENPTU1FTlQgKE5PVCBBUFBST1ZFKSAtIFRlc3MgaGFzIGZpbmFsIGFwcHJvdmFsIGF1dGhvcml0eQogICAgdGltZW91dCAzMCBnaCBwciBjb21tZW50ICIkUFJfTlVNQkVSIiAtLWJvZHkgIiMjIyDwn5SSIFNlY3VyaXR5IFJldmlldyAtIFBBU1NFRAoKQWxsIHNlY3VyaXR5IGNoZWNrcyBoYXZlIHBhc3NlZDoKLSBObyB2dWxuZXJhYmlsaXRpZXMgZGV0ZWN0ZWQKLSBEZXBlbmRlbmN5IGF1ZGl0IHBhc3NlZAotIFNlY3JldCBzY2FubmluZyBjb21wbGV0ZWQKLSBTZWN1cml0eSBiZXN0IHByYWN0aWNlcyB2ZXJpZmllZAoKKipTdGF0dXM6KiogUmVhZHkgZm9yIFFBIHRlc3RpbmcgYnkgVGVzcwoqKk5leHQgU3RlcDoqKiBUZXNzIHdpbGwgbm93IHBlcmZvcm0gY29tcHJlaGVuc2l2ZSBRQSB2YWxpZGF0aW9uCgotLS0KKlNlY3VyaXR5IHJldmlldyBieSBDaXBoZXIqIiB8fCBlY2hvICLimqDvuI8gUFIgY29tbWVudCBjb21tYW5kIGZhaWxlZCIKICAgIAogICAgIyBBZGQgc2VjdXJpdHktYXBwcm92ZWQgbGFiZWwKICAgIGVjaG8gIvCfj7fvuI8gIEFkZGluZyAnc2VjdXJpdHktYXBwcm92ZWQnIGxhYmVsIgogICAgdGltZW91dCAzMCBnaCBwciBlZGl0ICIkUFJfTlVNQkVSIiAtLWFkZC1sYWJlbCAic2VjdXJpdHktYXBwcm92ZWQiIHx8IGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gYWRkIHNlY3VyaXR5LWFwcHJvdmVkIGxhYmVsIgogICAgCiAgICB1cGRhdGVfY29kZXJ1bl9zdGF0dXMgInJlYWR5LWZvci1xYSIgInF1YWxpdHktcGFzc2VkIiAiJFBSX1VSTCIKICBlbHNlCiAgICBlY2hvICLinYwgU2VjdXJpdHkgaXNzdWVzIGRldGVjdGVkIC0gcG9zdGluZyBSRVFVRVNUIENIQU5HRVMgcmV2aWV3IgogICAgdGltZW91dCAzMCBnaCBwciByZXZpZXcgIiRQUl9OVU1CRVIiIC0tcmVxdWVzdC1jaGFuZ2VzIC0tYm9keSAiIyMjIPCflLQgUmVxdWlyZWQgU2VjdXJpdHkgQ2hhbmdlcwoKU2VjdXJpdHkgaXNzdWVzIGRldGVjdGVkLiBQbGVhc2UgYWRkcmVzcyB0aGUgZm9sbG93aW5nOgotIEZpeCBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMKLSBVcGRhdGUgaW5zZWN1cmUgZGVwZW5kZW5jaWVzCi0gUmVtb3ZlIGV4cG9zZWQgc2VjcmV0cwotIEFkZHJlc3Mgc2VjdXJpdHkgYmVzdCBwcmFjdGljZSB2aW9sYXRpb25zCgpSZXggd2lsbCBhZGRyZXNzIHRoZXNlIGlzc3VlcyBhbmQgcmVzdWJtaXQgZm9yIHJldmlldy4KCi0tLQoqU2VjdXJpdHkgcmV2aWV3IGJ5IENpcGhlcioiIHx8IGVjaG8gIuKaoO+4jyBQUiByZXZpZXcgY29tbWFuZCBmYWlsZWQiCiAgICB1cGRhdGVfY29kZXJ1bl9zdGF0dXMgIm5lZWRzLWZpeGVzIiAiY2hhbmdlc19yZXF1ZXN0ZWQiICIkUFJfVVJMIgogIGZpCmVsc2UKICBlY2hvICLimqDvuI8gTm8gUFIgcmVmZXJlbmNlIGF2YWlsYWJsZSwgc2tpcHBpbmcgcmVtZWRpYXRpb24gbGFiZWwgdXBkYXRlIgogIHVwZGF0ZV9jb2RlcnVuX3N0YXR1cyAiJFNUQVRVU19MQUJFTF9ORUVEU19GSVhFUyIgImNoYW5nZXNfcmVxdWVzdGVkIiAiIgpmaQoKIyBObyBzaWRlY2FyIHNodXRkb3duIG5lZWRlZCAtIGNvbnRhaW5lciB3aWxsIGV4aXQgbmF0dXJhbGx5IHdoZW4gbWFpbiBwcm9jZXNzIGNvbXBsZXRlcwoKICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAjIFNBVkUgSVRFUkFUSU9OIFNUQVRFOiBQZXJzaXN0IGZpbmRpbmdzIGZvciBuZXh0IGl0ZXJhdGlvbgogICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogIFNUQVRFX0ZJTEU9IiRBR0VOVF9TVEFURV9ESVIvcXVhbGl0eS1pdGVyYXRpb24tJHtBVFRFTVBUfS5qc29uIgogIAogICMgQ2hlY2sgaWYgcXVhbGl0eSByZXZpZXcgd2FzIHN1Y2Nlc3NmdWwKICBpZiBbICRDTEFVREVfRVhJVF9DT0RFIC1lcSAwIF07IHRoZW4KICAgICMgU2F2ZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gc3RhdGUKICAgIGNhdCA+ICIkU1RBVEVfRklMRSIgPDxFT0YKewogICJpdGVyYXRpb24iOiAkQVRURU1QVCwKICAic3RhdHVzIjogImNvbXBsZXRlZCIsCiAgInRpbWVzdGFtcCI6ICIkKGRhdGUgLXUgKyIlWS0lbS0lZFQlSDolTTolU1oiKSIsCiAgImZpbmRpbmdzIjogIlF1YWxpdHkgY2hlY2tzIHBhc3NlZCBvbiBpdGVyYXRpb24gJEFUVEVNUFQiLAogICJleGl0X2NvZGUiOiAwLAogICJpc3N1ZXMiOiBbXQp9CkVPRgogICAgZWNobyAi8J+SviBTYXZlZCBzdWNjZXNzZnVsIGNvbXBsZXRpb24gc3RhdGUgdG8gJFNUQVRFX0ZJTEUiCiAgICAKICAgIGVjaG8gIuKchSBBdHRlbXB0ICRBVFRFTVBUOiBRdWFsaXR5IGNoZWNrcyBwYXNzZWQiCiAgICBTVUNDRVNTPTEKICAgIGJyZWFrCiAgZWxzZQogICAgIyBTYXZlIGluY29tcGxldGUgc3RhdGUKICAgIGNhdCA+ICIkU1RBVEVfRklMRSIgPDxFT0YKewogICJpdGVyYXRpb24iOiAkQVRURU1QVCwKICAic3RhdHVzIjogImluY29tcGxldGUiLAogICJ0aW1lc3RhbXAiOiAiJChkYXRlIC11ICsiJVktJW0tJWRUJUg6JU06JVNaIikiLAogICJmaW5kaW5ncyI6ICJRdWFsaXR5IGNoZWNrcyBpbmNvbXBsZXRlIC0gZXhpdCBjb2RlICRDTEFVREVfRVhJVF9DT0RFIiwKICAiZXhpdF9jb2RlIjogJENMQVVERV9FWElUX0NPREUsCiAgImlzc3VlcyI6IFsiQ2xhdWRlIGV4aXRlZCB3aXRoIG5vbi16ZXJvIHN0YXR1cyJdCn0KRU9GCiAgICBlY2hvICLwn5K+IFNhdmVkIGluY29tcGxldGUgc3RhdGUgdG8gJFNUQVRFX0ZJTEUgZm9yIG5leHQgaXRlcmF0aW9uIgogICAgCiAgICBlY2hvICLimqDvuI8gQXR0ZW1wdCAkQVRURU1QVDogUXVhbGl0eSBjaGVja3MgaW5jb21wbGV0ZSAoZXhpdCBjb2RlOiAkQ0xBVURFX0VYSVRfQ09ERSkiCiAgICAKICAgIGlmIFsgJEFUVEVNUFQgLWx0ICRNQVhfUkVUUklFUyBdOyB0aGVuCiAgICAgIGVjaG8gIvCflIQgV2lsbCByZXRyeS4uLiAoJCgoTUFYX1JFVFJJRVMgLSBBVFRFTVBUKSkgYXR0ZW1wdHMgcmVtYWluaW5nKSIKICAgICAgQVRURU1QVD0kKChBVFRFTVBUICsgMSkpCiAgICAgIGVjaG8gIiIKICAgICAgIyBCcmllZiBwYXVzZSBiZWZvcmUgcmV0cnkKICAgICAgc2xlZXAgMgogICAgZWxzZQogICAgICBlY2hvICLinYwgTWF4aW11bSByZXRyeSBhdHRlbXB0cyByZWFjaGVkIgogICAgICBicmVhawogICAgZmkKICBmaQpkb25lCgojIFJlcG9ydCBmaW5hbCBzdGF0dXMKZWNobyAiIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmlmIFsgJFNVQ0NFU1MgLWVxIDEgXTsgdGhlbgogIGVjaG8gIuKchSBDTEVPIFFVQUxJVFkgUkVWSUVXIFNVQ0NFU1NGVUwiCiAgZWNobyAiICAgQ29tcGxldGVkIGFmdGVyICRBVFRFTVBUIGF0dGVtcHQocykiCmVsc2UKICBlY2hvICLimqDvuI8gQ0xFTyBRVUFMSVRZIFJFVklFVyBJTkNPTVBMRVRFIgogIGVjaG8gIiAgIEF0dGVtcHRlZCAkQVRURU1QVCB0aW1lKHMpIgogIGVjaG8gIiAgIFF1YWxpdHkgc3RhbmRhcmRzIG5vdCB5ZXQgbWV0IgpmaQplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCgojIENsZWFudXAgYW5kIGV4aXQKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLilZEgICAgICAgICAgICAgICAgICBDTEVPIENPREUgUVVBTElUWSBDT01QTEVURSAgICAgICAgICAgICAgICAgIOKVkSIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5OLIFRhc2s6IHt7dGFza19pZH19IgplY2hvICLinIUgQ29kZSBxdWFsaXR5IGNoZWNrcyBjb21wbGV0ZWQiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKCiMgRmluYWwgdGVybWluYXRpb24gc2VxdWVuY2UKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5SaIFRFUk1JTkFUSU5HIENMRU8gQ09OVEFJTkVSIgplY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCmVjaG8gIkNsYXVkZSBFeGl0IENvZGU6ICRDTEFVREVfRVhJVF9DT0RFIgplY2hvICJDb250YWluZXIgUElEOiAkJCIKZWNobyAiRmluYWwgUHJvY2VzcyBDaGVjazoiCnBzIGF1eCB8IGhlYWQgLTUKCiMgV3JpdGUgY29tcGxldGlvbiBtYXJrZXIgZm9yIHdvcmtmbG93IHRyYWNraW5nCmVjaG8gImNpcGhlci1xdWFsaXR5LWNvbXBsZXRlZDokKGRhdGUgLXUgKyVZLSVtLSVkVCVIOiVNOiVTWikiID4gL3dvcmtzcGFjZS8uY2lwaGVyLWNvbXBsZXRlCgojIEV4cGxpY2l0bHkgc3RvcCBEb2NrZXIgc2lkZWNhciBiZWZvcmUgZXhpdGluZwplY2hvICLwn5uRIEV4cGxpY2l0bHkgc3RvcHBpbmcgRG9ja2VyIHNpZGVjYXIuLi4iCnN0b3BfZG9ja2VyX3NpZGVjYXIgfHwgdHJ1ZQoKIyBFeGl0IHdpdGggYXBwcm9wcmlhdGUgY29kZSBiYXNlZCBvbiBzdWNjZXNzCmlmIFsgJFNVQ0NFU1MgLWVxIDEgXTsgdGhlbgogIGVjaG8gIvCflJogVGVybWluYXRpbmcgY29udGFpbmVyIHdpdGggc3VjY2VzcyBzdGF0dXMuLi4iCiAgZXhpdCAwCmVsc2UKICBlY2hvICLwn5SaIFRlcm1pbmF0aW5nIGNvbnRhaW5lciB3aXRoIGZhaWx1cmUgc3RhdHVzLi4uIgogIGVjaG8gIvCfk50gUXVhbGl0eSBjaGVja3MgaW5jb21wbGV0ZSBhZnRlciAkQVRURU1QVCBhdHRlbXB0KHMpIgogIGV4aXQgMQpmaQo=
  code_claude_container-cleo.sh.hbs: 
  code_claude_container-rex-remediation.sh.hbs: 
  code_claude_container-rex.sh.hbs: 
  code_claude_container-tess.sh.hbs: 
  code_claude_container.sh.hbs: IyEvYmluL3NoCgojIEVuc3VyZSBSdXN0IGVudmlyb25tZW50IGlzIGFsd2F5cyBwcm9wZXJseSBzZXQgdXAKZWNobyAi8J+UpyBTZXR0aW5nIHVwIFJ1c3QgZW52aXJvbm1lbnQuLi4iCgojIFNvdXJjZSBSdXN0IGVudmlyb25tZW50IGlmIGF2YWlsYWJsZSAoZml4ZXMgY2FyZ28gbm90IGZvdW5kIGlzc3VlcykKaWYgWyAtZiAiJEhPTUUvLmNhcmdvL2VudiIgXTsgdGhlbgogICAgLiAiJEhPTUUvLmNhcmdvL2VudiIKICAgIGVjaG8gIuKckyBTb3VyY2VkIFJ1c3QgZW52aXJvbm1lbnQgZnJvbSAkSE9NRS8uY2FyZ28vZW52IgpmaQoKIyBBbHNvIHRyeSByb290IGNhcmdvIGVudiBhcyBmYWxsYmFjawppZiBbIC1mICIvcm9vdC8uY2FyZ28vZW52IiBdOyB0aGVuCiAgICAuICIvcm9vdC8uY2FyZ28vZW52IgogICAgZWNobyAi4pyTIFNvdXJjZWQgUnVzdCBlbnZpcm9ubWVudCBmcm9tIC9yb290Ly5jYXJnby9lbnYiCmZpCgojIEVuc3VyZSBydXN0dXAgaGFzIGEgZGVmYXVsdCB0b29sY2hhaW4gc2V0CmlmIGNvbW1hbmQgLXYgcnVzdHVwID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgcnVzdHVwIGRlZmF1bHQgc3RhYmxlIDI+L2Rldi9udWxsIHx8IHRydWUKICAgIGVjaG8gIuKckyBFbnN1cmVkIHN0YWJsZSBSdXN0IHRvb2xjaGFpbiBpcyBkZWZhdWx0IgplbHNlCiAgICBlY2hvICLimqDvuI8gcnVzdHVwIG5vdCBmb3VuZCBpbiBQQVRIIgpmaQoKIyBWZXJpZnkgUnVzdCBpcyBhdmFpbGFibGUKaWYgY29tbWFuZCAtdiBjYXJnbyA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGVjaG8gIuKckyBDYXJnbyBpcyBhdmFpbGFibGU6ICQoY2FyZ28gLS12ZXJzaW9uKSIKZWxzZQogICAgZWNobyAi4p2MIENhcmdvIG5vdCBmb3VuZCBpbiBQQVRIIgogICAgZWNobyAiQ3VycmVudCBQQVRIOiAkUEFUSCIKICAgIGVjaG8gIkF0dGVtcHRpbmcgdG8gZmluZCBjYXJnby4uLiIKICAgIGZpbmQgL3VzciAtbmFtZSBjYXJnbyAyPi9kZXYvbnVsbCB8IGhlYWQgLTUgfHwgZWNobyAiTm8gY2FyZ28gZm91bmQgaW4gL3VzciIKICAgIGZpbmQgL2hvbWUgLW5hbWUgY2FyZ28gMj4vZGV2L251bGwgfCBoZWFkIC01IHx8IGVjaG8gIk5vIGNhcmdvIGZvdW5kIGluIC9ob21lIgpmaQoKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwpwcmludGYgJ+KVkSAg8J+kliBBR0VOVDogJS01MHPilZFcbicgJ3t7Z2l0aHViX2FwcH19JwplY2hvICfilZEgIElNUExFTUVOVEFUSU9OIFRBU0sgU1RBUlRJTkcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkScKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwoKIyBUYXNrLXNwZWNpZmljIHdvcmtzcGFjZSBmb3IgcGFyYWxsZWwgZXhlY3V0aW9uIGlzb2xhdGlvbgpUQVNLX1dPUktTUEFDRT0iL3dvcmtzcGFjZS90YXNrLXt7dGFza19pZH19Igpta2RpciAtcCAvd29ya3NwYWNlCm1rZGlyIC1wICIkVEFTS19XT1JLU1BBQ0UiCmVjaG8gIvCfk4EgVXNpbmcgdGFzay1zcGVjaWZpYyB3b3Jrc3BhY2U6ICRUQVNLX1dPUktTUEFDRSIKCiMgRGlzYWJsZSBpbnRlcmFjdGl2ZSBHaXQgcHJvbXB0cyBnbG9iYWxseQpleHBvcnQgR0lUX1RFUk1JTkFMX1BST01QVD0wCmV4cG9ydCBHSVRfQVNLUEFTUz0vYmluL3RydWUKZXhwb3J0IFNTSF9BU0tQQVNTPS9iaW4vdHJ1ZQoKIyBSZXBvc2l0b3J5IFVSTApSRVBPX1VSTD0ie3tyZXBvc2l0b3J5X3VybH19IgoKIyBHaXRIdWIgQXBwIGF1dGhlbnRpY2F0aW9uIGlzIGNvbmZpZ3VyZWQgdmlhIGVudmlyb25tZW50IHZhcmlhYmxlcwplY2hvICJVc2luZyBHaXRIdWIgQXBwIGF1dGhlbnRpY2F0aW9uIgoKIyBBdXRoZW50aWNhdGUgd2l0aCBHaXRIdWIgQXBwCmlmIFsgLW4gIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiBdICYmIFsgLW4gIiRHSVRIVUJfQVBQX0lEIiBdOyB0aGVuCiAgICBlY2hvICJBdXRoZW50aWNhdGluZyB3aXRoIEdpdEh1YiBBcHAuLi4iCgogICAgIyBDcmVhdGUgdGVtcG9yYXJ5IHByaXZhdGUga2V5IGZpbGUgKHN1cHBvcnQgZXNjYXBlZCBuZXdsaW5lcykKICAgIFRFTVBfS0VZX0ZJTEU9Ii90bXAvZ2l0aHViLWFwcC1rZXkucGVtIgogICAgcHJpbnRmICclYicgIiRHSVRIVUJfQVBQX1BSSVZBVEVfS0VZIiA+ICIkVEVNUF9LRVlfRklMRSIKICAgIGNobW9kIDYwMCAiJFRFTVBfS0VZX0ZJTEUiCgogICAgIyBHZW5lcmF0ZSBKV1QgdG9rZW4gZm9yIEdpdEh1YiBBcHAgKGZpeGVkIEpXVCBnZW5lcmF0aW9uIGZvciBMaW51eCBjb250YWluZXJzKQogICAgIyBKV1QgaGVhZGVyCiAgICBKV1RfSEVBREVSPSQocHJpbnRmICd7ImFsZyI6IlJTMjU2IiwidHlwIjoiSldUIn0nIHwgYmFzZTY0IC13IDAgfCB0ciAnKy8nICctXycgfCB0ciAtZCAnPScpCgogICAgIyBKV1QgcGF5bG9hZCB3aXRoIGN1cnJlbnQgdGltZSBhbmQgZXhwaXJhdGlvbiAoMTAgbWludXRlcykKICAgIE5PVz0kKGRhdGUgKyVzKQogICAgRVhQPSQoKE5PVyArIDYwMCkpCiAgICBKV1RfUEFZTE9BRD0kKHByaW50ZiAneyJpYXQiOiVkLCJleHAiOiVkLCJpc3MiOiIlcyJ9JyAiJE5PVyIgIiRFWFAiICIkR0lUSFVCX0FQUF9JRCIgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKCiAgICAjIFNpZ24gdGhlIEpXVAogICAgSldUX1NJR05BVFVSRT0kKHByaW50ZiAnJXMuJXMnICIkSldUX0hFQURFUiIgIiRKV1RfUEFZTE9BRCIgfCBvcGVuc3NsIGRnc3QgLXNoYTI1NiAtc2lnbiAiJFRFTVBfS0VZX0ZJTEUiIC1iaW5hcnkgfCBiYXNlNjQgLXcgMCB8IHRyICcrLycgJy1fJyB8IHRyIC1kICc9JykKICAgIEpXVF9UT0tFTj0iJEpXVF9IRUFERVIuJEpXVF9QQVlMT0FELiRKV1RfU0lHTkFUVVJFIgoKICAgICMgR2V0IGluc3RhbGxhdGlvbiBJRCBmb3IgdGhlIHJlcG9zaXRvcnkgKHJvYnVzdCBwYXJzaW5nIG9mIG93bmVyL3JlcG8pCiAgICBJTlBVVF9SRVBPPSJ7e3JlcG9zaXRvcnlfdXJsfX0iCiAgICBSRVBPX09XTkVSPSIiCiAgICBSRVBPX05BTUU9IiIKCiAgICBpZiBlY2hvICIkSU5QVVRfUkVQTyIgfCBncmVwIC1xRSAnXmh0dHBzOi8vZ2l0aHViLmNvbS8nOyB0aGVuCiAgICAgICAgUkVQT19PV05FUj0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vKFteL10rKS8uKnxcMXwnKQogICAgICAgIFJFUE9fTkFNRT0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xodHRwczovL2dpdGh1Yi5jb20vW14vXSsvKFteL10rKShcLmdpdCk/fFwxfCcpCiAgICBlbGlmIGVjaG8gIiRJTlBVVF9SRVBPIiB8IGdyZXAgLXFFICdeZ2l0QGdpdGh1Yi5jb206JzsgdGhlbgogICAgICAgICMgU1NIIGZvcm1hdCBnaXRAZ2l0aHViLmNvbTpvd25lci9yZXBvKC5naXQpCiAgICAgICAgUkVQT19PV05FUj0kKGVjaG8gIiRJTlBVVF9SRVBPIiB8IHNlZCAtRSAnc3xnaXRAZ2l0aHViLmNvbTooW14vXSspLy4qfFwxfCcpCiAgICAgICAgUkVQT19OQU1FPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfGdpdEBnaXRodWIuY29tOlteL10rLyhbXi9dKykoXC5naXQpP3xcMXwnKQogICAgZWxzZQogICAgICAgICMgRmFsbGJhY2s6IGFzc3VtZSBzbHVnIG93bmVyL3JlcG8gKHBvc3NpYmx5IHdpdGggLmdpdCkKICAgICAgICBTTFVHPSQoZWNobyAiJElOUFVUX1JFUE8iIHwgc2VkIC1FICdzfFwuZ2l0JHx8JykKICAgICAgICBSRVBPX09XTkVSPSQoZWNobyAiJFNMVUciIHwgY3V0IC1kJy8nIC1mMSkKICAgICAgICBSRVBPX05BTUU9JChlY2hvICIkU0xVRyIgfCBjdXQgLWQnLycgLWYyKQogICAgZmkKCiAgICBlY2hvICJERUJVRzogUGFyc2VkIHJlcG9zaXRvcnkgLSBPd25lcjogJyRSRVBPX09XTkVSJywgTmFtZTogJyRSRVBPX05BTUUnIgoKICAgIGVjaG8gIkdldHRpbmcgaW5zdGFsbGF0aW9uIElEIGZvciAkUkVQT19PV05FUi8kUkVQT19OQU1FLi4uIgoKICAgICMgR2V0IHRoZSBpbnN0YWxsYXRpb24gSUQgKHJldHJ5IGFuZCBmb2xsb3cgcmVkaXJlY3RzKS4gRmFsbGJhY2sgdG8gb3JnIGluc3RhbGxhdGlvbi4KICAgIElOU1RBTExBVElPTl9SRVNQT05TRT0kKGN1cmwgLXMgLUwgLS1yZXRyeSA1IC0tcmV0cnktZGVsYXkgMiAtLXJldHJ5LWNvbm5yZWZ1c2VkIFwKICAgICAgICAtLWNvbm5lY3QtdGltZW91dCA1IC0tbWF4LXRpbWUgMTIgXAogICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgIC1IICJBY2NlcHQ6IGFwcGxpY2F0aW9uL3ZuZC5naXRodWIranNvbiIgXAogICAgICAgICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyRSRVBPX09XTkVSLyRSRVBPX05BTUUvaW5zdGFsbGF0aW9uIikKCiAgICBJTlNUQUxMQVRJT05fSUQ9JChlY2hvICIkSU5TVEFMTEFUSU9OX1JFU1BPTlNFIiB8IGpxIC1yICcuaWQnKQoKICAgIGlmIFsgIiRJTlNUQUxMQVRJT05fSUQiID0gIm51bGwiIF0gfHwgWyAteiAiJElOU1RBTExBVElPTl9JRCIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKaoO+4jyBSZXBvIGluc3RhbGxhdGlvbiBub3QgZm91bmQsIHRyeWluZyBvcmcgaW5zdGFsbGF0aW9uLi4uIgogICAgICAgIE9SR19JTlNUQUxMQVRJT05fUkVTUE9OU0U9JChjdXJsIC1zIC1MIC0tcmV0cnkgNSAtLXJldHJ5LWRlbGF5IDIgLS1yZXRyeS1jb25ucmVmdXNlZCBcCiAgICAgICAgICAgIC0tY29ubmVjdC10aW1lb3V0IDUgLS1tYXgtdGltZSAxMiBcCiAgICAgICAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJEpXVF9UT0tFTiIgXAogICAgICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAgICAgImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vb3Jncy8kUkVQT19PV05FUi9pbnN0YWxsYXRpb24iKQogICAgICAgIElOU1RBTExBVElPTl9JRD0kKGVjaG8gIiRPUkdfSU5TVEFMTEFUSU9OX1JFU1BPTlNFIiB8IGpxIC1yICcuaWQnKQogICAgZmkKCiAgICBpZiBbICIkSU5TVEFMTEFUSU9OX0lEIiA9ICJudWxsIiBdIHx8IFsgLXogIiRJTlNUQUxMQVRJT05fSUQiIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGdldCBpbnN0YWxsYXRpb24gSUQgZm9yICRSRVBPX09XTkVSLyRSRVBPX05BTUUiCiAgICAgICAgZWNobyAiUmVzcG9uc2UgKHJlcG8pOiAkSU5TVEFMTEFUSU9OX1JFU1BPTlNFIgogICAgICAgIGVjaG8gIlJlc3BvbnNlIChvcmcpOiAgJHtPUkdfSU5TVEFMTEFUSU9OX1JFU1BPTlNFOi1bbm9uZV19IgogICAgICAgIHJtIC1mICIkVEVNUF9LRVlfRklMRSIKICAgICAgICBleGl0IDEKICAgIGZpCgogICAgZWNobyAiSW5zdGFsbGF0aW9uIElEOiAkSU5TVEFMTEFUSU9OX0lEIgoKICAgICMgR2V0IGluc3RhbGxhdGlvbiBhY2Nlc3MgdG9rZW4KICAgIFRPS0VOX1JFU1BPTlNFPSQoY3VybCAtcyAtWCBQT1NUIFwKICAgICAgICAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRKV1RfVE9LRU4iIFwKICAgICAgICAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iIFwKICAgICAgICAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9hcHAvaW5zdGFsbGF0aW9ucy8kSU5TVEFMTEFUSU9OX0lEL2FjY2Vzc190b2tlbnMiKQoKICAgIEdJVEhVQl9UT0tFTj0kKGVjaG8gIiRUT0tFTl9SRVNQT05TRSIgfCBqcSAtciAnLnRva2VuJykKCiAgICBpZiBbICIkR0lUSFVCX1RPS0VOIiA9ICJudWxsIiBdIHx8IFsgLXogIiRHSVRIVUJfVE9LRU4iIF07IHRoZW4KICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGdldCBpbnN0YWxsYXRpb24gYWNjZXNzIHRva2VuIgogICAgICAgIGVjaG8gIlJlc3BvbnNlOiAkVE9LRU5fUkVTUE9OU0UiCiAgICAgICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICAjIENsZWFuIHVwIHRlbXBvcmFyeSBrZXkgZmlsZQogICAgcm0gLWYgIiRURU1QX0tFWV9GSUxFIgoKICAgICMgRXhwb3J0IHRoZSB0b2tlbiBmb3IgZ2l0IHRvIHVzZQogICAgZXhwb3J0IEdJVEhVQl9UT0tFTgoKICAgICMgQ29uZmlndXJlIGdpdCB0byB1c2UgdGhlIHRva2VuICh1c2UgLS1yZXBsYWNlLWFsbCB0byBoYW5kbGUgbXVsdGlwbGUgZXhpc3RpbmcgaGVscGVycykKICAgIGdpdCBjb25maWcgLS1nbG9iYWwgLS1yZXBsYWNlLWFsbCBjcmVkZW50aWFsLmhlbHBlciBzdG9yZQogICAgZWNobyAiaHR0cHM6Ly94LWFjY2Vzcy10b2tlbjoke0dJVEhVQl9UT0tFTn1AZ2l0aHViLmNvbSIgPiB+Ly5naXQtY3JlZGVudGlhbHMKCiAgICAjIEFsc28gYXV0aGVudGljYXRlIGdoIENMSSB3aXRoIHRoZSB0b2tlbgogICAgZWNobyAiJEdJVEhVQl9UT0tFTiIgfCBnaCBhdXRoIGxvZ2luIC0td2l0aC10b2tlbgoKICAgIGVjaG8gIuKckyBHaXRIdWIgQXBwIGF1dGhlbnRpY2F0ZWQgc3VjY2Vzc2Z1bGx5IgoKZWxzZQogICAgZWNobyAi4p2MIEdJVEhVQl9BUFBfUFJJVkFURV9LRVkgb3IgR0lUSFVCX0FQUF9JRCBub3QgZm91bmQiCiAgICBleGl0IDEKZmkKCiMgR2l0IGNvbmZpZ3VyYXRpb24gd2l0aCBwcm9wZXIgR2l0SHViIEFwcCBhdHRyaWJ1dGlvbgpnaXQgY29uZmlnIC0tZ2xvYmFsIC0tYWRkIHNhZmUuZGlyZWN0b3J5ICIkVEFTS19XT1JLU1BBQ0UiCgojIFNldCBHaXRIdWIgQXBwIGF0dHJpYnV0aW9uIC0gdXNlIGdlbmVyaWMgZm9ybWF0IGZvciBhbGwgYWdlbnRzCmRlcml2ZV9ib3RfaWRlbnRpdHkoKSB7CiAgICBsb2NhbCBhcHBfbmFtZT0iJDEiCgogICAgaWYgWyAteiAiJGFwcF9uYW1lIiBdIHx8IFsgIiRhcHBfbmFtZSIgPSAibnVsbCIgXTsgdGhlbgogICAgICAgIEdJVF9BVVRIT1JfTkFNRT0iYXV0b21hdGlvbltib3RdIgogICAgICAgIEdJVF9BVVRIT1JfRU1BSUw9ImF1dG9tYXRpb25bYm90XUB1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20iCiAgICAgICAgcmV0dXJuCiAgICBmaQoKICAgIGxvY2FsIHNsdWcKICAgIHNsdWc9JChwcmludGYgJyVzJyAiJGFwcF9uYW1lIiB8IHRyICdbOnVwcGVyOl0nICdbOmxvd2VyOl0nIHwgc2VkIC1FICdzL1teYS16MC05XSsvLS9nJyB8IHNlZCAtRSAncy9eLSt8LSskLy9nJykKICAgIGlmIFsgLXogIiRzbHVnIiBdOyB0aGVuCiAgICAgICAgc2x1Zz0kKHByaW50ZiAnJXMnICIkYXBwX25hbWUiIHwgdHIgJ1s6dXBwZXI6XScgJ1s6bG93ZXI6XScpCiAgICBmaQoKICAgIGxvY2FsIGJvdF9sb2dpbj0iJHtzbHVnfVtib3RdIgogICAgbG9jYWwgYm90X2VtYWlsPSIke2JvdF9sb2dpbn1AdXNlcnMubm9yZXBseS5naXRodWIuY29tIgoKICAgIGlmIFsgLW4gIiR7R0lUSFVCX1RPS0VOOi19IiBdOyB0aGVuCiAgICAgICAgbG9jYWwgZW5jb2RlZF9sb2dpbgogICAgICAgIGVuY29kZWRfbG9naW49JChwcmludGYgJyVzJyAiJGJvdF9sb2dpbiIgfCBzZWQgJ3MvXFsvJTVCL2c7IHMvXF0vJTVEL2cnKQogICAgICAgIGxvY2FsIGJvdF9yZXNwb25zZQogICAgICAgIGJvdF9yZXNwb25zZT0kKGN1cmwgLXNTIC1IICJBdXRob3JpemF0aW9uOiB0b2tlbiAkR0lUSFVCX1RPS0VOIiAtSCAiQWNjZXB0OiBhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24iICJodHRwczovL2FwaS5naXRodWIuY29tL3VzZXJzLyR7ZW5jb2RlZF9sb2dpbn0iIDI+L2Rldi9udWxsIHx8IHRydWUpCiAgICAgICAgbG9jYWwgYm90X2lkCiAgICAgICAgYm90X2lkPSQocHJpbnRmICclcycgIiRib3RfcmVzcG9uc2UiIHwganEgLXIgJy5pZCAvLyBlbXB0eScgMj4vZGV2L251bGwgfHwgZWNobyAnJykKICAgICAgICBpZiBbIC1uICIkYm90X2lkIiBdOyB0aGVuCiAgICAgICAgICAgIGJvdF9lbWFpbD0iJHtib3RfaWR9KyR7Ym90X2xvZ2lufUB1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20iCiAgICAgICAgZmkKICAgIGZpCgogICAgR0lUX0FVVEhPUl9OQU1FPSIkYm90X2xvZ2luIgogICAgR0lUX0FVVEhPUl9FTUFJTD0iJGJvdF9lbWFpbCIKfQoKR0lUSFVCX0FQUD0ie3tnaXRodWJfYXBwfX0iCmRlcml2ZV9ib3RfaWRlbnRpdHkgIiRHSVRIVUJfQVBQIgoKIyBDb25maWd1cmUgZ2l0IHdpdGggcHJvcGVyIEdpdEh1YiBBcHAgYXR0cmlidXRpb24KZ2l0IGNvbmZpZyAtLWdsb2JhbCB1c2VyLm5hbWUgIiRHSVRfQVVUSE9SX05BTUUiCmdpdCBjb25maWcgLS1nbG9iYWwgdXNlci5lbWFpbCAiJEdJVF9BVVRIT1JfRU1BSUwiCgojIFNldCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIENsYXVkZSBDb2RlIHRvIHVzZQpleHBvcnQgR0lUX0FVVEhPUl9OQU1FPSIkR0lUX0FVVEhPUl9OQU1FIgpleHBvcnQgR0lUX0FVVEhPUl9FTUFJTD0iJEdJVF9BVVRIT1JfRU1BSUwiCmV4cG9ydCBHSVRfQ09NTUlUVEVSX05BTUU9IiRHSVRfQVVUSE9SX05BTUUiCmV4cG9ydCBHSVRfQ09NTUlUVEVSX0VNQUlMPSIkR0lUX0FVVEhPUl9FTUFJTCIKZWNobyAi4pyTIEdpdCBjb25maWd1cmVkIgoKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEFVVEhFTlRJQ0FUSU9OIFZFUklGSUNBVElPTgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmVjaG8gIiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLwn5SQIEFVVEhFTlRJQ0FUSU9OIFZFUklGSUNBVElPTiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICIiCgojIFJlcG9zaXRvcnkgVVJMcyAtIEhhbmRsZSBib3RoIGZ1bGwgVVJMcyBhbmQgb3JnL3JlcG8gZm9ybWF0CiMgQ2hlY2sgaWYgcmVwb3NpdG9yeV91cmwgYWxyZWFkeSBjb250YWlucyBodHRwczovL2dpdGh1Yi5jb20vCmlmIGVjaG8gInt7cmVwb3NpdG9yeV91cmx9fSIgfCBncmVwIC1xICJeaHR0cHM6Ly9naXRodWIuY29tLyI7IHRoZW4KICAgIFJFUE9fSFRUUF9VUkw9Int7cmVwb3NpdG9yeV91cmx9fSIKICAgIGlmICEgZWNobyAie3tyZXBvc2l0b3J5X3VybH19IiB8IGdyZXAgLXEgIlwuZ2l0JCI7IHRoZW4KICAgICAgICBSRVBPX0hUVFBfVVJMPSIke1JFUE9fSFRUUF9VUkx9LmdpdCIKICAgIGZpCmVsc2UKICAgIFJFUE9fSFRUUF9VUkw9Imh0dHBzOi8vZ2l0aHViLmNvbS97e3JlcG9zaXRvcnlfdXJsfX0uZ2l0IgpmaQoKIyBTYW1lIGZvciBkb2NzIHJlcG9zaXRvcnkKaWYgZWNobyAie3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0iIHwgZ3JlcCAtcSAiXmh0dHBzOi8vZ2l0aHViLmNvbS8iOyB0aGVuCiAgICBET0NTX0hUVFBfVVJMPSJ7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSIKICAgIGlmICEgZWNobyAie3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0iIHwgZ3JlcCAtcSAiXC5naXQkIjsgdGhlbgogICAgICAgIERPQ1NfSFRUUF9VUkw9IiR7RE9DU19IVFRQX1VSTH0uZ2l0IgogICAgZmkKZWxzZQogICAgRE9DU19IVFRQX1VSTD0iaHR0cHM6Ly9naXRodWIuY29tL3t7ZG9jc19yZXBvc2l0b3J5X3VybH19LmdpdCIKZmkKCiMgREVCVUc6IFNob3cgd2hhdCBVUkxzIGFyZSBiZWluZyBjb25zdHJ1Y3RlZAplY2hvICLwn5SNIERFQlVHOiBVUkwgQ29uc3RydWN0aW9uICYgUGFyYW1ldGVycyIKZWNobyAiICBJbnB1dCByZXBvc2l0b3J5X3VybDogJ3t7cmVwb3NpdG9yeV91cmx9fSciCmVjaG8gIiAgSW5wdXQgZG9jc19yZXBvc2l0b3J5X3VybDogJ3t7ZG9jc19yZXBvc2l0b3J5X3VybH19JyIKZWNobyAiICBJbnB1dCBkb2NzX3Byb2plY3RfZGlyZWN0b3J5OiAne3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0nIgplY2hvICIgIElucHV0IHdvcmtpbmdfZGlyZWN0b3J5OiAne3t3b3JraW5nX2RpcmVjdG9yeX19JyIKZWNobyAiICBJbnB1dCBkb2NzX2JyYW5jaDogJ3t7ZG9jc19icmFuY2h9fSciCmVjaG8gIiAgSW5wdXQgZ2l0aHViX2FwcDogJ3t7Z2l0aHViX2FwcH19JyIKZWNobyAiICBJbnB1dCB0YXNrX2lkOiAne3t0YXNrX2lkfX0nIgplY2hvICIgIElucHV0IHNlcnZpY2U6ICd7e3NlcnZpY2V9fSciCmVjaG8gIiAgQ29uc3RydWN0ZWQgUkVQT19IVFRQX1VSTDogJyRSRVBPX0hUVFBfVVJMJyIKZWNobyAiICBDb25zdHJ1Y3RlZCBET0NTX0hUVFBfVVJMOiAnJERPQ1NfSFRUUF9VUkwnIgplY2hvICIgIEN1cnJlbnQgd29ya2luZyBkaXJlY3Rvcnk6ICQocHdkKSIKZWNobyAiICBBdmFpbGFibGUgZW52aXJvbm1lbnQgdmFyaWFibGVzOiIKZW52IHwgZ3JlcCAtRSAiKEdJVEhVQnxBTlRIUk9QSUMpIiB8IHNvcnQKCiMgVGVzdCBIVFRQUyBhY2Nlc3MgdG8gcmVwb3NpdG9yeQplY2hvICLwn5SNIERFQlVHOiBUZXN0aW5nIEhUVFBTIHJlcG9zaXRvcnkgYWNjZXNzLi4uIgplY2hvICIgIENvbW1hbmQ6IGdpdCBscy1yZW1vdGUgXCIkUkVQT19IVFRQX1VSTFwiIEhFQUQiCmlmIGdpdCBscy1yZW1vdGUgIiRSRVBPX0hUVFBfVVJMIiBIRUFEID4gL3RtcC9yZXBvX3Rlc3Qub3V0IDI+JjE7IHRoZW4KICBlY2hvICLinJMgSFRUUFMgcmVwb3NpdG9yeSBhY2Nlc3Mgc3VjY2Vzc2Z1bCIKICBlY2hvICIgIFJlcG9zaXRvcnk6IHt7cmVwb3NpdG9yeV91cmx9fSAoJFJFUE9fSFRUUF9VUkwpIgogIGVjaG8gIiAgT3V0cHV0OiAkKGNhdCAvdG1wL3JlcG9fdGVzdC5vdXQgfCBoZWFkIC0xKSIKZWxzZQogIGVjaG8gIuKdjCBIVFRQUyByZXBvc2l0b3J5IGFjY2VzcyBmYWlsZWQiCiAgZWNobyAiICBSZXBvc2l0b3J5OiB7e3JlcG9zaXRvcnlfdXJsfX0gKCRSRVBPX0hUVFBfVVJMKSIKICBlY2hvICIgIEVycm9yIG91dHB1dDogJChjYXQgL3RtcC9yZXBvX3Rlc3Qub3V0KSIKICBlY2hvICIgIEdpdCBjcmVkZW50aWFsIGhlbHBlciBzdGF0dXM6IgogIGdpdCBjb25maWcgLS1saXN0IHwgZ3JlcCBjcmVkZW50aWFsIHx8IGVjaG8gIiAgTm8gY3JlZGVudGlhbCBoZWxwZXJzIGNvbmZpZ3VyZWQiCiAgZWNobyAiIgogIGVjaG8gIvCfmqsgQUJPUlRJTkc6IENhbm5vdCBhY2Nlc3MgcmVwb3NpdG9yeSB2aWEgSFRUUFMiCiAgZXhpdCAxCmZpCgojIFRlc3QgZG9jcyByZXBvc2l0b3J5IGFjY2VzcwplY2hvICLwn5SNIERFQlVHOiBUZXN0aW5nIGRvY3MgcmVwb3NpdG9yeSBhY2Nlc3MuLi4iCmVjaG8gIiAgQ29tbWFuZDogZ2l0IGxzLXJlbW90ZSBcIiRET0NTX0hUVFBfVVJMXCIgSEVBRCIKaWYgZ2l0IGxzLXJlbW90ZSAiJERPQ1NfSFRUUF9VUkwiIEhFQUQgPiAvdG1wL2RvY3NfdGVzdC5vdXQgMj4mMTsgdGhlbgogIGVjaG8gIuKckyBEb2NzIHJlcG9zaXRvcnkgYWNjZXNzIHN1Y2Nlc3NmdWwiCiAgZWNobyAiICBSZXBvc2l0b3J5OiB7e2RvY3NfcmVwb3NpdG9yeV91cmx9fSAoJERPQ1NfSFRUUF9VUkwpIgogIGVjaG8gIiAgT3V0cHV0OiAkKGNhdCAvdG1wL2RvY3NfdGVzdC5vdXQgfCBoZWFkIC0xKSIKZWxzZQogIGVjaG8gIuKdjCBEb2NzIHJlcG9zaXRvcnkgYWNjZXNzIGZhaWxlZCIKICBlY2hvICIgIFJlcG9zaXRvcnk6IHt7ZG9jc19yZXBvc2l0b3J5X3VybH19ICgkRE9DU19IVFRQX1VSTCkiCiAgZWNobyAiICBFcnJvciBvdXRwdXQ6ICQoY2F0IC90bXAvZG9jc190ZXN0Lm91dCkiCiAgZWNobyAiIgogIGVjaG8gIvCfmqsgQUJPUlRJTkc6IENhbm5vdCBhY2Nlc3MgZG9jcyByZXBvc2l0b3J5IHZpYSBIVFRQUyIKICBleGl0IDEKZmkKCiMgRHVhbCBSZXBvc2l0b3J5IFNldHVwIC0gUGxhdGZvcm0gcmVwbyBmb3IgZG9jcywgVGFyZ2V0IHJlcG8gZm9yIGltcGxlbWVudGF0aW9uCmVjaG8gIiIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLilZEgICAgICAgICAgICAgICAgIERVQUwgUkVQT1NJVE9SWSBTRVRVUCAgICAgICAgICAgICAgICAgICAgICAgIOKVkSIKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgoKIyBSZXBvc2l0b3J5IEluZm9ybWF0aW9uCkRPQ1NfQlJBTkNIPSJ7e2RvY3NfYnJhbmNofX0iCkdJVEhVQl9BUFA9Int7Z2l0aHViX2FwcH19IgoKIyBIZWxwZXI6IGRlcml2ZSBzYWZlIHdvcmtzcGFjZSBkaXJlY3RvcnkgbmFtZSBmcm9tIHJlcG8gaW5wdXQgKFVSTCwgU1NILCBvciBzbHVnKQpzYW5pdGl6ZV9yZXBvX2RpcigpIHsKICAgIGlucHV0PSIkMSIKICAgIGlmIGVjaG8gIiRpbnB1dCIgfCBncmVwIC1xRSAnXmh0dHBzOi8vZ2l0aHViLmNvbS8nOyB0aGVuCiAgICAgICAgb3duZXI9JChlY2hvICIkaW5wdXQiIHwgc2VkIC1FICdzfGh0dHBzOi8vZ2l0aHViLmNvbS8oW14vXSspLy4qfFwxfCcpCiAgICAgICAgbmFtZT0kKGVjaG8gIiRpbnB1dCIgfCBzZWQgLUUgJ3N8aHR0cHM6Ly9naXRodWIuY29tL1teL10rLyhbXi9dKykoXFwuZ2l0KT98XDF8JykKICAgICAgICBwcmludGYgJyVzLSVzJyAiJG93bmVyIiAiJG5hbWUiCiAgICBlbGlmIGVjaG8gIiRpbnB1dCIgfCBncmVwIC1xRSAnXmdpdEBnaXRodWIuY29tOic7IHRoZW4KICAgICAgICBvd25lcj0kKGVjaG8gIiRpbnB1dCIgfCBzZWQgLUUgJ3N8Z2l0QGdpdGh1Yi5jb206KFteL10rKS8uKnxcMXwnKQogICAgICAgIG5hbWU9JChlY2hvICIkaW5wdXQiIHwgc2VkIC1FICdzfGdpdEBnaXRodWIuY29tOlteL10rLyhbXi9dKykoXFwuZ2l0KT98XDF8JykKICAgICAgICBwcmludGYgJyVzLSVzJyAiJG93bmVyIiAiJG5hbWUiCiAgICBlbHNlCiAgICAgICAgIyBBc3N1bWUgb3duZXIvcmVwbyAob3B0aW9uYWxseSB3aXRoIC5naXQpCiAgICAgICAgc2x1Zz0kKGVjaG8gIiRpbnB1dCIgfCBzZWQgLUUgJ3N8XFwuZ2l0JHx8JykKICAgICAgICBlY2hvICIkc2x1ZyIgfCB0ciAnLycgJy0nCiAgICBmaQp9CgojIERlcml2ZSB3b3Jrc3BhY2UgZGlyZWN0b3J5IG5hbWVzIChvd25lci1yZXBvKQpET0NTX1JFUE9fRElSPSQoc2FuaXRpemVfcmVwb19kaXIgInt7ZG9jc19yZXBvc2l0b3J5X3VybH19IikKVEFSR0VUX1JFUE9fRElSPSQoc2FuaXRpemVfcmVwb19kaXIgInt7cmVwb3NpdG9yeV91cmx9fSIpCgplY2hvICI9PT0gUkVQT1NJVE9SWSBTRVRVUCA9PT0iCmVjaG8gIkRvY3MgcmVwb3NpdG9yeToge3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0gKCRET0NTX0hUVFBfVVJMKSIKZWNobyAiVGFyZ2V0IHJlcG9zaXRvcnk6IHt7cmVwb3NpdG9yeV91cmx9fSAoJFJFUE9fSFRUUF9VUkwpIgplY2hvICJEb2NzIGJyYW5jaDogJERPQ1NfQlJBTkNIIgplY2hvICJHaXRIdWIgQXBwOiAkR0lUSFVCX0FQUCIKCiMgRGV0ZXJtaW5lIHdvcmtmbG93IHR5cGUKZWNobyAi8J+UjSBERUJVRzogV29ya2Zsb3cgdHlwZSBkZXRlY3Rpb24iCmVjaG8gIiAgZG9jc19yZXBvc2l0b3J5X3VybDogJ3t7ZG9jc19yZXBvc2l0b3J5X3VybH19JyIKZWNobyAiICByZXBvc2l0b3J5X3VybDogJ3t7cmVwb3NpdG9yeV91cmx9fSciCmVjaG8gIiAgQ29tcGFyaXNvbiByZXN1bHQ6ICQoIFsgInt7ZG9jc19yZXBvc2l0b3J5X3VybH19IiA9ICJ7e3JlcG9zaXRvcnlfdXJsfX0iIF0gJiYgZWNobyAnRVFVQUwnIHx8IGVjaG8gJ0RJRkZFUkVOVCcgKSIKCmlmIFsgInt7ZG9jc19yZXBvc2l0b3J5X3VybH19IiA9ICJ7e3JlcG9zaXRvcnlfdXJsfX0iIF07IHRoZW4KICAgIGVjaG8gIuKckyBTaW5nbGUtcmVwbyB3b3JrZmxvdyBkZXRlY3RlZCAoc2FtZSByZXBvc2l0b3J5IGZvciBkb2NzIGFuZCBpbXBsZW1lbnRhdGlvbikiCiAgICBXT1JLRkxPV19UWVBFPSJzaW5nbGUtcmVwbyIKICAgIGVjaG8gIiAg4pSU4pSAIFRhc2tNYXN0ZXIgZmlsZXMgZXhwZWN0ZWQgYXQgcmVwb3NpdG9yeSByb290IgplbHNlCiAgICBlY2hvICLinJMgTXVsdGktcmVwbyB3b3JrZmxvdyBkZXRlY3RlZCAoc2VwYXJhdGUgZG9jcyBhbmQgdGFyZ2V0IHJlcG9zaXRvcmllcykiCiAgICBXT1JLRkxPV19UWVBFPSJtdWx0aS1yZXBvIgogICAgZWNobyAiICDilJTilIAgVGFza01hc3RlciBmaWxlcyBleHBlY3RlZCBpbiBkb2NzIHJlcG8gYXQ6IHt7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19IgpmaQplY2hvICLwn5SNIERFQlVHOiBXT1JLRkxPV19UWVBFIHNldCB0bzogJFdPUktGTE9XX1RZUEUiCgojIFJlcG9zaXRvcnkgU2V0dXAgQmFzZWQgb24gV29ya2Zsb3cgVHlwZQppZiBbICIkV09SS0ZMT1dfVFlQRSIgPSAic2luZ2xlLXJlcG8iIF07IHRoZW4KICAgIGVjaG8gIj09PSBTSU5HTEUtUkVQTyBXT1JLRkxPVyA9PT0iCiAgICAjIENoZWNrIGlmIHJlcG9zaXRvcnkgYWxyZWFkeSBleGlzdHMgKHJldHJ5IHNjZW5hcmlvKQogICAgZWNobyAi8J+UjSBERUJVRzogQ2hlY2tpbmcgZm9yIGV4aXN0aW5nIHJlcG9zaXRvcnkgZGlyZWN0b3J5OiAkVEFSR0VUX1JFUE9fRElSIgogICAgZWNobyAiICBXb3Jrc3BhY2UgY29udGVudHM6ICQobHMgLWxhIC93b3Jrc3BhY2UvIHwgZ3JlcCAtdiAnXnRvdGFsJykiCgogICAgaWYgWyAtZCAiJFRBUkdFVF9SRVBPX0RJUiIgXTsgdGhlbgogICAgICAgIGVjaG8gIvCflIQgUkVQT1NJVE9SWTogVVBEQVRFIC0gZGlyZWN0b3J5IGFscmVhZHkgZXhpc3RzIgogICAgICAgIGVjaG8gIvCfk4EgRm91bmQgZXhpc3RpbmcgcmVwb3NpdG9yeSAnJFRBUkdFVF9SRVBPX0RJUicsIHVwZGF0aW5nLi4uIgogICAgICAgIGVjaG8gIiAgRGlyZWN0b3J5IGNvbnRlbnRzOiAkKGxzIC1sYSAkVEFSR0VUX1JFUE9fRElSIHwgaGVhZCAtNSkiCiAgICAgICAgY2QgIiRUQVJHRVRfUkVQT19ESVIiCiAgICAgICAgZWNobyAiICBDdXJyZW50IGJyYW5jaDogJChnaXQgYnJhbmNoIC0tc2hvdy1jdXJyZW50IDI+L2Rldi9udWxsIHx8IGVjaG8gJ3Vua25vd24nKSIKICAgICAgICBlY2hvICIgIEdpdCBzdGF0dXMgYmVmb3JlIHVwZGF0ZTogJChnaXQgc3RhdHVzIC0tcG9yY2VsYWluIHwgd2MgLWwpIGZpbGVzIGNoYW5nZWQiCiAgICAgICAgZ2l0IGZldGNoIG9yaWdpbgogICAgICAgIGdpdCBjaGVja291dCAiJERPQ1NfQlJBTkNIIgogICAgICAgIGdpdCByZXNldCAtLWhhcmQgIm9yaWdpbi8kRE9DU19CUkFOQ0giCiAgICAgICAgY2QgIiRUQVNLX1dPUktTUEFDRSIKICAgICAgICBlY2hvICLinJMgUmVwb3NpdG9yeSB1cGRhdGVkIHN1Y2Nlc3NmdWxseSB0byAkRE9DU19CUkFOQ0giCiAgICBlbHNlCiAgICAgICAgZWNobyAi8J+TpSBSRVBPU0lUT1JZOiBDTE9OSU5HIC0gZmlyc3QgdGltZSBzZXR1cCIKICAgICAgICBlY2hvICIgIENsb25lIGNvbW1hbmQ6IGdpdCBjbG9uZSBcIiRSRVBPX0hUVFBfVVJMXCIgXCIkVEFSR0VUX1JFUE9fRElSXCIiCiAgICAgICAgaWYgISBnaXQgY2xvbmUgIiRSRVBPX0hUVFBfVVJMIiAiJFRBUkdFVF9SRVBPX0RJUiI7IHRoZW4KICAgICAgICAgICAgZWNobyAi4p2MIEZhaWxlZCB0byBjbG9uZSByZXBvc2l0b3J5OiB7e3JlcG9zaXRvcnlfdXJsfX0gKCRSRVBPX0hUVFBfVVJMKSIKICAgICAgICAgICAgZWNobyAiICBMYXN0IGdpdCBlcnJvcjogJChnaXQgY29uZmlnIC0tZ2V0LXJlZ2V4cCAnY3JlZGVudGlhbHxyZW1vdGUnKSIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgZmkKICAgICAgICBlY2hvICIgIENsb25lIHN1Y2Nlc3NmdWwsIGNoYW5naW5nIHRvIGRpcmVjdG9yeSBhbmQgY2hlY2tpbmcgb3V0ICRET0NTX0JSQU5DSCIKICAgICAgICBjZCAiJFRBUkdFVF9SRVBPX0RJUiIgJiYgZ2l0IGNoZWNrb3V0ICIkRE9DU19CUkFOQ0giICYmIGNkICIkVEFTS19XT1JLU1BBQ0UiCiAgICAgICAgZWNobyAi4pyTIFJlcG9zaXRvcnkgY2xvbmVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICBlY2hvICIgIEZpbmFsIGRpcmVjdG9yeSBzdHJ1Y3R1cmU6ICQobHMgLWxhICRUQVJHRVRfUkVQT19ESVIgfCBoZWFkIC01KSIKICAgIGZpCgogICAgIyBQcmVzZXJ2ZSBUYXNrIE1hc3RlciBmaWxlcyBiZWZvcmUgYnJhbmNoIHN3aXRjaGluZyAoc2luZ2xlLXJlcG8gd29ya2Zsb3cpCiAgICBlY2hvICLwn5SEIFByZXNlcnZpbmcgVGFzayBNYXN0ZXIgZmlsZXMgZnJvbSBkb2NzIGJyYW5jaCBiZWZvcmUgc3dpdGNoaW5nIHRvIGZlYXR1cmUgYnJhbmNoLi4uIgogICAgVEVNUF9UQVNLX0RJUj0iL3RtcC90YXNrbWFzdGVyLXByZXNlcnZlIgogICAgcm0gLXJmICIkVEVNUF9UQVNLX0RJUiIKICAgIG1rZGlyIC1wICIkVEVNUF9UQVNLX0RJUiIKCiAgICBjZCAiL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSIgogICAgZWNobyAi8J+UjSBERUJVRzogVGFza01hc3RlciBmaWxlIHByZXNlcnZhdGlvbiIKICAgIGVjaG8gIiAgZG9jc19wcm9qZWN0X2RpcmVjdG9yeTogJ3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19JyIKICAgIGVjaG8gIiAgdGFza19pZDogJ3t7dGFza19pZH19JyIKCiAgICAjIENvcHkgVGFzayBNYXN0ZXIgZmlsZXMgZnJvbSBkb2NzIGJyYW5jaCB0byB0ZW1wb3JhcnkgbG9jYXRpb24KICAgIHt7I2lmIGRvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fQogICAgaWYgWyAie3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0iID0gIi4iIF07IHRoZW4KICAgICAgICBQUkVTRVJWRV9GUk9NPSIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXt7dGFza19pZH19IgogICAgICAgIGVjaG8gIiAg4pSU4pSAIFVzaW5nIHJvb3QgdGFza21hc3RlciBwYXRoIChkb2NzX3Byb2plY3RfZGlyZWN0b3J5PScuJykiCiAgICBlbHNlCiAgICAgICAgUFJFU0VSVkVfRlJPTT0iL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSL3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19Ly50YXNrbWFzdGVyL2RvY3MvdGFzay17e3Rhc2tfaWR9fSIKICAgICAgICBlY2hvICIgIOKUlOKUgCBVc2luZyBwcm9qZWN0IHN1YmRpcmVjdG9yeToge3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0iCiAgICBmaQogICAge3tlbHNlfX0KICAgIFBSRVNFUlZFX0ZST009Ii93b3Jrc3BhY2UvJFRBUkdFVF9SRVBPX0RJUi8udGFza21hc3Rlci9kb2NzL3Rhc2ste3t0YXNrX2lkfX0iCiAgICBlY2hvICIgIOKUlOKUgCBVc2luZyBkZWZhdWx0IHJvb3QgdGFza21hc3RlciBwYXRoIChubyBkb2NzX3Byb2plY3RfZGlyZWN0b3J5KSIKICAgIHt7L2lmfX0KCiAgICBlY2hvICIgIFBSRVNFUlZFX0ZST00gcmVzb2x2ZWQgdG86ICRQUkVTRVJWRV9GUk9NIgoKICAgIGVjaG8gIvCflI0gREVCVUc6IEF0dGVtcHRpbmcgdG8gcHJlc2VydmUgVGFzayBNYXN0ZXIgZmlsZXMgZnJvbTogJFBSRVNFUlZFX0ZST00iCiAgICBlY2hvICIgIENoZWNraW5nIGlmIGRpcmVjdG9yeSBleGlzdHMuLi4iCiAgICBpZiBbIC1kICIkUFJFU0VSVkVfRlJPTSIgXTsgdGhlbgogICAgICAgIGVjaG8gIiAg4pyTIFRhc2tNYXN0ZXIgZGlyZWN0b3J5IGZvdW5kISIKICAgICAgICBlY2hvICIgIERpcmVjdG9yeSBjb250ZW50czogJChscyAtbGEgIiRQUkVTRVJWRV9GUk9NIiB8IHdjIC1sKSBpdGVtcyIKICAgICAgICBscyAtbGEgIiRQUkVTRVJWRV9GUk9NIgogICAgICAgIGNwIC1yICIkUFJFU0VSVkVfRlJPTSIvKiAiJFRFTVBfVEFTS19ESVIvIiAyPi9kZXYvbnVsbCAmJiBlY2hvICLinJMgVGFzayBNYXN0ZXIgZmlsZXMgcHJlc2VydmVkIHRvIHRlbXBvcmFyeSBsb2NhdGlvbiIgfHwgZWNobyAi4pqg77iPIFNvbWUgZmlsZXMgbWF5IG5vdCBoYXZlIGJlZW4gcHJlc2VydmVkIgoKICAgICAgICAjIEFsc28gcHJlc2VydmUgYXJjaGl0ZWN0dXJlLm1kIGZyb20gZG9jcyBkaXJlY3RvcnkgKG9uZSBsZXZlbCB1cCBmcm9tIHRhc2sgZGlyZWN0b3J5KQogICAgICAgIHt7I2lmIGRvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fQogICAgICAgIGlmIFsgInt7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19IiA9ICIuIiBdOyB0aGVuCiAgICAgICAgICAgIEFSQ0hfU09VUkNFPSIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvLnRhc2ttYXN0ZXIvZG9jcy9hcmNoaXRlY3R1cmUubWQiCiAgICAgICAgZWxzZQogICAgICAgICAgICBBUkNIX1NPVVJDRT0iL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSL3t7ZG9jc19wcm9qZWN0X2RpcmVjdG9yeX19Ly50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIgogICAgICAgIGZpCiAgICAgICAge3tlbHNlfX0KICAgICAgICBBUkNIX1NPVVJDRT0iL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSLy50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIgogICAgICAgIHt7L2lmfX0KCiAgICAgICAgaWYgWyAtZiAiJEFSQ0hfU09VUkNFIiBdOyB0aGVuCiAgICAgICAgICAgIGNwICIkQVJDSF9TT1VSQ0UiICIkVEVNUF9UQVNLX0RJUi8iICYmIGVjaG8gIuKckyBhcmNoaXRlY3R1cmUubWQgcHJlc2VydmVkIGZyb20gZG9jcyBicmFuY2giIHx8IGVjaG8gIuKaoO+4jyBGYWlsZWQgdG8gcHJlc2VydmUgYXJjaGl0ZWN0dXJlLm1kIgogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAi4pqg77iPIGFyY2hpdGVjdHVyZS5tZCBub3QgZm91bmQgYXQ6ICRBUkNIX1NPVVJDRSIKICAgICAgICBmaQoKICAgICAgICBlY2hvICLwn5SNIERFQlVHOiBQcmVzZXJ2ZWQgZmlsZXM6IgogICAgICAgIGxzIC1sYSAiJFRFTVBfVEFTS19ESVIvIiB8fCBlY2hvICJObyBmaWxlcyBpbiB0ZW1wIGRpcmVjdG9yeSIKICAgIGVsc2UKICAgICAgICBlY2hvICLinYwgVGFzayBNYXN0ZXIgZGlyZWN0b3J5IG5vdCBmb3VuZCBhdDogJFBSRVNFUlZFX0ZST00iCiAgICAgICAgZWNobyAi4p2MIENSSVRJQ0FMOiBUYXNrTWFzdGVyIGZpbGVzIG11c3QgZXhpc3QgYXQgdGhlIHNwZWNpZmllZCBsb2NhdGlvbiIKICAgICAgICBlY2hvICLinYwgRXhwZWN0ZWQgbG9jYXRpb246ICRQUkVTRVJWRV9GUk9NIgogICAgICAgIGVjaG8gIuKdjCBUaGlzIGpvYiBjYW5ub3QgY29udGludWUgd2l0aG91dCB0aGUgc3BlY2lmaWVkIFRhc2tNYXN0ZXIgZmlsZXMiCiAgICAgICAgZWNobyAi4p2MIFZlcmlmeSB0aGF0OiIKICAgICAgICBlY2hvICIgICAxLiBUaGUgZG9jcy1wcm9qZWN0LWRpcmVjdG9yeSBwYXJhbWV0ZXIgaXMgY29ycmVjdCIKICAgICAgICBlY2hvICIgICAyLiBUaGUgdGFzay1pZCBleGlzdHMgaW4gdGhlIFRhc2tNYXN0ZXIgZGlyZWN0b3J5IgogICAgICAgIGVjaG8gIiAgIDMuIFRoZSBkb2NzLWJyYW5jaCBjb250YWlucyB0aGUgVGFza01hc3RlciBmaWxlcyIKICAgICAgICBleGl0IDEKICAgIGZpCiAgICBjZCAiJFRBU0tfV09SS1NQQUNFIgoKICAgICMgU2V0IHdvcmtpbmcgZGlyZWN0b3J5IHRvIHRoZSByZXBvc2l0b3J5IHJvb3QKICAgIFJFUE9fTkFNRT0iJFRBUkdFVF9SRVBPX0RJUiIKICAgIGVjaG8gIuKckyBXb3JraW5nIGRpcmVjdG9yeTogL3dvcmtzcGFjZS8kUkVQT19OQU1FIgogICAgZWNobyAi4pyTIFRhc2sgZmlsZXMgcHJlc2VydmVkIGZyb20gZG9jcyBicmFuY2giCgplbHNlCiAgICBlY2hvICI9PT0gTVVMVEktUkVQTyBXT1JLRkxPVyA9PT0iCgogICAgIyBTdGVwIDE6IENsb25lIG9yIHVwZGF0ZSBkb2NzIHJlcG9zaXRvcnkgdGVtcG9yYXJpbHkKICAgIGlmIFsgLWQgIi90bXAvZG9jcy1yZXBvIiBdOyB0aGVuCiAgICAgICAgZWNobyAi8J+UhCBET0NTIFJFUE9TSVRPUlk6IFVQREFURSAtIHRlbXBvcmFyeSBkaXJlY3RvcnkgZXhpc3RzIgogICAgICAgIGNkIC90bXAvZG9jcy1yZXBvCiAgICAgICAgZ2l0IGZldGNoIG9yaWdpbgogICAgICAgIGdpdCBjaGVja291dCAiJERPQ1NfQlJBTkNIIgogICAgICAgIGdpdCByZXNldCAtLWhhcmQgIm9yaWdpbi8kRE9DU19CUkFOQ0giCiAgICAgICAgY2QgIiRUQVNLX1dPUktTUEFDRSIKICAgICAgICBlY2hvICLinJMgRG9jcyByZXBvc2l0b3J5IHVwZGF0ZWQiCiAgICBlbHNlCiAgICAgICAgZWNobyAi8J+TpSBET0NTIFJFUE9TSVRPUlk6IENMT05JTkcgLSBleHRyYWN0aW5nIHRhc2sgZmlsZXMiCiAgICAgICAgaWYgISBnaXQgY2xvbmUgIiRET0NTX0hUVFBfVVJMIiAvdG1wL2RvY3MtcmVwbzsgdGhlbgogICAgICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNsb25lIGRvY3MgcmVwb3NpdG9yeToge3tkb2NzX3JlcG9zaXRvcnlfdXJsfX0gKCRET0NTX0hUVFBfVVJMKSIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgZmkKICAgICAgICBjZCAvdG1wL2RvY3MtcmVwbyAmJiBnaXQgY2hlY2tvdXQgIiRET0NTX0JSQU5DSCIgJiYgY2QgIiRUQVNLX1dPUktTUEFDRSIKICAgICAgICBlY2hvICLinJMgRG9jcyByZXBvc2l0b3J5IGNsb25lZCB0byB0ZW1wb3JhcnkgbG9jYXRpb24iCiAgICBmaQoKICAgICMgU3RlcCAyOiBDbG9uZSBvciB1cGRhdGUgdGFyZ2V0IHJlcG9zaXRvcnkKICAgIGlmIFsgLWQgIiRUQVJHRVRfUkVQT19ESVIiIF07IHRoZW4KICAgICAgICBlY2hvICLwn5SEIFRBUkdFVCBSRVBPU0lUT1JZOiBVUERBVEUgLSBkaXJlY3RvcnkgYWxyZWFkeSBleGlzdHMiCiAgICAgICAgZWNobyAi8J+TgSBGb3VuZCBleGlzdGluZyB0YXJnZXQgcmVwb3NpdG9yeSAnJFRBUkdFVF9SRVBPX0RJUicsIHVwZGF0aW5nLi4uIgogICAgICAgIGNkICIkVEFSR0VUX1JFUE9fRElSIgogICAgICAgIGdpdCBmZXRjaCBvcmlnaW4gbWFpbgogICAgICAgIGdpdCByZXNldCAtLWhhcmQgb3JpZ2luL21haW4KICAgICAgICBjZCAiJFRBU0tfV09SS1NQQUNFIgogICAgICAgIGVjaG8gIuKckyBUYXJnZXQgcmVwb3NpdG9yeSB1cGRhdGVkIHN1Y2Nlc3NmdWxseSIKICAgIGVsc2UKICAgICAgICBlY2hvICLwn5OlIFRBUkdFVCBSRVBPU0lUT1JZOiBDTE9OSU5HIC0gZmlyc3QgdGltZSBzZXR1cCIKICAgICAgICBpZiAhIGdpdCBjbG9uZSAiJFJFUE9fSFRUUF9VUkwiICIkVEFSR0VUX1JFUE9fRElSIjsgdGhlbgogICAgICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNsb25lIHRhcmdldCByZXBvc2l0b3J5OiB7e3JlcG9zaXRvcnlfdXJsfX0gKCRSRVBPX0hUVFBfVVJMKSIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgZmkKICAgICAgICBlY2hvICLinJMgVGFyZ2V0IHJlcG9zaXRvcnkgY2xvbmVkIHN1Y2Nlc3NmdWxseSIKICAgIGZpCgogICAgIyBTdGVwIDM6IENvcHkgdGFzayBmaWxlcyBmcm9tIGRvY3MgcmVwbyB0byB0YXJnZXQgcmVwbwogICAgZWNobyAi8J+TiyBUQVNLIEZJTEVTOiBDT1BZSU5HIGZyb20gZG9jcyB0byB0YXJnZXQgcmVwb3NpdG9yeSIKICAgIG1rZGlyIC1wICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvdGFzayIKCiAgICAjIERldGVybWluZSBkb2NzIHByb2plY3QgZGlyZWN0b3J5IHBhdGgKICAgIHt7I2lmIGRvY3NfcHJvamVjdF9kaXJlY3Rvcnl9fQogICAgaWYgWyAie3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0iID0gIi4iIF07IHRoZW4KICAgICAgICBET0NTX1BBVEg9Ii90bXAvZG9jcy1yZXBvLy50YXNrbWFzdGVyIgogICAgZWxzZQogICAgICAgIERPQ1NfUEFUSD0iL3RtcC9kb2NzLXJlcG8ve3tkb2NzX3Byb2plY3RfZGlyZWN0b3J5fX0vLnRhc2ttYXN0ZXIiCiAgICBmaQogICAge3tlbHNlfX0KICAgIERPQ1NfUEFUSD0iL3RtcC9kb2NzLXJlcG8vLnRhc2ttYXN0ZXIiCiAgICB7ey9pZn19CgogICAgIyBDb3B5IHNwZWNpZmljIHRhc2sgZmlsZXMKICAgIFRBU0tfRElSPSIkRE9DU19QQVRIL2RvY3MvdGFzay17e3Rhc2tfaWR9fSIKICAgIGVjaG8gIvCflI0gREVCVUc6IExvb2tpbmcgZm9yIHRhc2sgZmlsZXMgYXQ6ICRUQVNLX0RJUiIKICAgIGVjaG8gIvCflI0gREVCVUc6IERvY3MgcGF0aCBpczogJERPQ1NfUEFUSCIKICAgIGVjaG8gIvCflI0gREVCVUc6IENvbnRlbnRzIG9mIGRvY3MgdGVtcCBkaXJlY3Rvcnk6IgogICAgbHMgLWxhIC90bXAvZG9jcy1yZXBvLy50YXNrbWFzdGVyLyB8fCBlY2hvICJObyAudGFza21hc3RlciBmb3VuZCIKICAgIGVjaG8gIvCflI0gREVCVUc6IENvbnRlbnRzIG9mIGRvY3MgZGlyZWN0b3J5OiIKICAgIGxzIC1sYSAvdG1wL2RvY3MtcmVwby8udGFza21hc3Rlci9kb2NzLyB8fCBlY2hvICJObyBkb2NzIGRpcmVjdG9yeSBmb3VuZCIKCiAgICBpZiBbIC1kICIkVEFTS19ESVIiIF07IHRoZW4KICAgICAgICBlY2hvICLwn5SNIERFQlVHOiBUYXNrIGRpcmVjdG9yeSBmb3VuZCwgY29udGVudHM6IgogICAgICAgIGxzIC1sYSAiJFRBU0tfRElSIgoKICAgICAgICBlY2hvICLinIUgQ29weWluZyB0YXNrLm1kLi4uIgogICAgICAgIGNwICIkVEFTS19ESVIvdGFzay5tZCIgIi93b3Jrc3BhY2UvJFRBUkdFVF9SRVBPX0RJUi90YXNrLyIgJiYgZWNobyAi4pyTIHRhc2subWQgY29waWVkIiB8fCBlY2hvICLinYwgdGFzay5tZCBjb3B5IGZhaWxlZCIKCiAgICAgICAgZWNobyAi4pyFIENvcHlpbmcgYWNjZXB0YW5jZS1jcml0ZXJpYS5tZC4uLiIKICAgICAgICBjcCAiJFRBU0tfRElSL2FjY2VwdGFuY2UtY3JpdGVyaWEubWQiICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvdGFzay8iICYmIGVjaG8gIuKckyBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kIGNvcGllZCIgfHwgZWNobyAi4p2MIGFjY2VwdGFuY2UtY3JpdGVyaWEubWQgY29weSBmYWlsZWQiCgogICAgICAgIGVjaG8gIuKchSBDb3B5aW5nIHByb21wdC5tZC4uLiIKICAgICAgICBjcCAiJFRBU0tfRElSL3Byb21wdC5tZCIgIi93b3Jrc3BhY2UvJFRBUkdFVF9SRVBPX0RJUi90YXNrLyIgJiYgZWNobyAi4pyTIHByb21wdC5tZCBjb3BpZWQiIHx8IGVjaG8gIuKdjCBwcm9tcHQubWQgY29weSBmYWlsZWQiCgogICAgICAgIGVjaG8gIuKchSBDb3B5aW5nIGNsaWVudC1jb25maWcuanNvbi4uLiIKICAgICAgICBpZiBbIC1mICIkVEFTS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIiBdOyB0aGVuCiAgICAgICAgICAgIGNwICIkVEFTS19ESVIvY2xpZW50LWNvbmZpZy5qc29uIiAiJENMQVVERV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24iICYmIGVjaG8gIuKckyBjbGllbnQtY29uZmlnLmpzb24gY29waWVkIHRvIENsYXVkZSB3b3JraW5nIGRpcmVjdG9yeSIgfHwgZWNobyAi4p2MIGNsaWVudC1jb25maWcuanNvbiBjb3B5IGZhaWxlZCIKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBjbGllbnQtY29uZmlnLmpzb24gbm90IGZvdW5kIC0gTUNQIGNsaWVudCBtYXkgbm90IGJlIGNvbmZpZ3VyZWQiCiAgICAgICAgZmkKCiAgICAgICAgZWNobyAi4pyFIENvcHlpbmcgdG9vbG1hbi1ndWlkZS5tZC4uLiIKICAgICAgICBpZiBbIC1mICIkVEFTS19ESVIvdG9vbG1hbi1ndWlkZS5tZCIgXTsgdGhlbgogICAgICAgICAgICBjcCAiJFRBU0tfRElSL3Rvb2xtYW4tZ3VpZGUubWQiICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvdGFzay8iICYmIGVjaG8gIuKckyB0b29sbWFuLWd1aWRlLm1kIGNvcGllZCIgfHwgZWNobyAi4p2MIHRvb2xtYW4tZ3VpZGUubWQgY29weSBmYWlsZWQiCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gdG9vbG1hbi1ndWlkZS5tZCBub3QgZm91bmQgLSBjb2RlIGFnZW50IHdvbid0IGhhdmUgdG9vbCB1c2FnZSBndWlkYW5jZSIKICAgICAgICBmaQoKICAgICAgICBlY2hvICLinJMgVGFzayB7e3Rhc2tfaWR9fSBmaWxlcyBjb3BpZWQgZnJvbSAkVEFTS19ESVIiCiAgICBlbHNlCiAgICAgICAgZWNobyAi4p2MIENSSVRJQ0FMOiBUYXNrIHt7dGFza19pZH19IGRpcmVjdG9yeSBub3QgZm91bmQgYXQ6ICRUQVNLX0RJUiIKICAgICAgICBlY2hvICLwn5SNIERFQlVHOiBBdmFpbGFibGUgZGlyZWN0b3JpZXMgaW4gZG9jczoiCiAgICAgICAgZmluZCAvdG1wL2RvY3MtcmVwbyAtbmFtZSAidGFzay0qIiAtdHlwZSBkIHx8IGVjaG8gIk5vIHRhc2sgZGlyZWN0b3JpZXMgZm91bmQiCiAgICBmaQoKICAgICMgQ29weSBhcmNoaXRlY3R1cmUubWQgZnJvbSBkb2NzIHJvb3QKICAgIEFSQ0hfRklMRT0iJERPQ1NfUEFUSC9kb2NzL2FyY2hpdGVjdHVyZS5tZCIKICAgIGlmIFsgLWYgIiRBUkNIX0ZJTEUiIF07IHRoZW4KICAgICAgICBjcCAiJEFSQ0hfRklMRSIgIi93b3Jrc3BhY2UvJFRBUkdFVF9SRVBPX0RJUi90YXNrLyIKICAgICAgICBlY2hvICLinJMgQXJjaGl0ZWN0dXJlIGRvY3VtZW50YXRpb24gY29waWVkIgogICAgZWxzZQogICAgICAgIGVjaG8gIuKaoO+4jyBhcmNoaXRlY3R1cmUubWQgbm90IGZvdW5kIGF0OiAkQVJDSF9GSUxFIgogICAgZmkKCiAgICAjIENvcHkgdGFza3MuanNvbiBpZiBpdCBleGlzdHMKICAgIGlmIFsgLWYgIiRET0NTX1BBVEgvdGFza3MuanNvbiIgXTsgdGhlbgogICAgICAgIGNwICIkRE9DU19QQVRIL3Rhc2tzLmpzb24iICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvdGFzay8iCiAgICAgICAgZWNobyAi4pyTIHRhc2tzLmpzb24gY29waWVkIgogICAgZmkKCiAgICBlY2hvICLinJMgVGFzayBmaWxlcyBjb3BpZWQgdG8gdGFyZ2V0IHJlcG9zaXRvcnkiCgogICAgIyBERUJVRzogVmVyaWZ5IGZpbGVzIHdlcmUgY29waWVkIHN1Y2Nlc3NmdWxseQogICAgZWNobyAi8J+UjSBERUJVRzogQ29udGVudHMgb2YgdGFyZ2V0IHRhc2sgZGlyZWN0b3J5IGFmdGVyIGNvcHk6IgogICAgbHMgLWxhICIvd29ya3NwYWNlLyRUQVJHRVRfUkVQT19ESVIvdGFzay8iIHx8IGVjaG8gIlRhc2sgZGlyZWN0b3J5IG5vdCBmb3VuZCIKICAgIGVjaG8gIvCflI0gREVCVUc6IENoZWNraW5nIGlmIHByb21wdC5tZCBleGlzdHM6IgogICAgWyAtZiAiL3dvcmtzcGFjZS8kVEFSR0VUX1JFUE9fRElSL3Rhc2svcHJvbXB0Lm1kIiBdICYmIGVjaG8gIuKchSBwcm9tcHQubWQgZXhpc3RzIiB8fCBlY2hvICLinYwgcHJvbXB0Lm1kIG1pc3NpbmciCgogICAgIyBTdGVwIDQ6IENsZWFuIHVwIGRvY3MgcmVwb3NpdG9yeQogICAgZWNobyAi8J+nuSBDTEVBTlVQOiBSZW1vdmluZyB0ZW1wb3JhcnkgZG9jcyByZXBvc2l0b3J5IgogICAgcm0gLXJmIC90bXAvZG9jcy1yZXBvCiAgICBlY2hvICLinJMgRG9jcyByZXBvc2l0b3J5IGNsZWFuZWQgdXAiCgogICAgIyBTZXQgd29ya2luZyBkaXJlY3RvcnkgdG8gdGhlIHRhcmdldCByZXBvc2l0b3J5IHJvb3QKICAgIFJFUE9fTkFNRT0iJFRBUkdFVF9SRVBPX0RJUiIKICAgIGVjaG8gIuKckyBXb3JraW5nIGRpcmVjdG9yeTogL3dvcmtzcGFjZS8kUkVQT19OQU1FIgpmaQoKIyBTZXR1cCBmZWF0dXJlIGJyYW5jaCBmb3IgaW1wbGVtZW50YXRpb24KZWNobyAiPT09IEJSQU5DSCBTRVRVUCA9PT0iCmNkICIvd29ya3NwYWNlLyRSRVBPX05BTUUiCgojIEZpeCBnaXQgZHViaW91cyBvd25lcnNoaXAgYmVmb3JlIGFueSBnaXQgb3BlcmF0aW9ucwpnaXQgY29uZmlnIC0tZ2xvYmFsIC0tYWRkIHNhZmUuZGlyZWN0b3J5ICIvd29ya3NwYWNlLyRSRVBPX05BTUUiCmVjaG8gIuKckyBBZGRlZCByZXBvc2l0b3J5IHRvIGdpdCBzYWZlIGRpcmVjdG9yaWVzIgoKIyBTeW5jIHdpdGggbGF0ZXN0IG1haW4gdG8gcHJldmVudCBjb25mbGljdHMKZWNobyAi8J+UhCBTeW5jaW5nIHdpdGggbGF0ZXN0IG1haW4gdG8gcHJldmVudCBjb25mbGljdHMuLi4iCmdpdCBmZXRjaCBvcmlnaW4gbWFpbiAyPi9kZXYvbnVsbCB8fCBnaXQgZmV0Y2ggb3JpZ2luIG1hc3RlciAyPi9kZXYvbnVsbCB8fCBlY2hvICLimqDvuI8gQ291bGQgbm90IGZldGNoIG1haW4vbWFzdGVyIGJyYW5jaCIKCiMgQ3JlYXRlIG9yIGNoZWNrb3V0IGZlYXR1cmUgYnJhbmNoCkZFQVRVUkVfQlJBTkNIPSJmZWF0dXJlL3Rhc2ste3t0YXNrX2lkfX0taW1wbGVtZW50YXRpb24iCkJSQU5DSF9FWElTVFM9ImZhbHNlIgoKICAgIGlmIGdpdCBzaG93LXJlZiAtLXZlcmlmeSAtLXF1aWV0IHJlZnMvaGVhZHMvJEZFQVRVUkVfQlJBTkNIOyB0aGVuCiAgICAgICAgQlJBTkNIX0VYSVNUUz0idHJ1ZSIKICAgICAgICBlY2hvICJGZWF0dXJlIGJyYW5jaCAnJEZFQVRVUkVfQlJBTkNIJyBleGlzdHMsIGNoZWNraW5nIG91dC4uLiIKICAgICAgICBnaXQgY2hlY2tvdXQgJEZFQVRVUkVfQlJBTkNICgogICAgICAgIGVjaG8gIvCfk6UgTWVyZ2luZyBsYXRlc3QgbWFpbiBpbnRvICRGRUFUVVJFX0JSQU5DSC4uLiIKICAgICAgICBpZiBnaXQgbWVyZ2Ugb3JpZ2luL21haW4gLS1uby1lZGl0OyB0aGVuCiAgICAgICAgICAgIGVjaG8gIuKckyBTdWNjZXNzZnVsbHkgbWVyZ2VkIGxhdGVzdCBtYWluIGludG8gZmVhdHVyZSBicmFuY2giCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gTUVSR0UgQ09ORkxJQ1Q6IENhbm5vdCBhdXRvLW1lcmdlIG1haW4gaW50byAkRkVBVFVSRV9CUkFOQ0giCiAgICAgICAgICAgIGVjaG8gIuKdlyBNYW51YWwgY29uZmxpY3QgcmVzb2x1dGlvbiByZXF1aXJlZCBieSBDbGF1ZGUgYWdlbnQiCiAgICAgICAgICAgIGVjaG8gIiIKICAgICAgICAgICAgZWNobyAi8J+TiyBDb25mbGljdCBmaWxlczoiCiAgICAgICAgICAgIGdpdCBzdGF0dXMgLS1wb3JjZWxhaW4gfCBncmVwICJeVVVcfF5BQVx8XkREIiB8fCBlY2hvICIgICAoVXNlICdnaXQgc3RhdHVzJyB0byBzZWUgZGV0YWlscykiCiAgICAgICAgICAgIGVjaG8gIiIKICAgICAgICAgICAgZWNobyAi8J+UpyBDbGF1ZGUgd2lsbCBuZWVkIHRvIHJlc29sdmUgY29uZmxpY3RzIG1hbnVhbGx5IGJlZm9yZSBwcm9jZWVkaW5nIgogICAgICAgICAgICAjIERvbid0IGV4aXQgLSBsZXQgQ2xhdWRlIGhhbmRsZSB0aGUgY29uZmxpY3RzCiAgICAgICAgZmkKICAgIGVsc2UKICAgICAgICAjIENyZWF0ZSBuZXcgZmVhdHVyZSBicmFuY2ggZnJvbSBsYXRlc3QgbWFpbgogICAgICAgIGVjaG8gIkNyZWF0aW5nIG5ldyBmZWF0dXJlIGJyYW5jaCAnJEZFQVRVUkVfQlJBTkNIJyBmcm9tIGxhdGVzdCBtYWluLi4uIgogICAgICAgIAogICAgICAgICMgU3Rhc2ggYW55IGxvY2FsIGNoYW5nZXMgdG8gYXZvaWQgY2hlY2tvdXQgY29uZmxpY3RzCiAgICAgICAgaWYgISBnaXQgZGlmZi1pbmRleCAtLXF1aWV0IEhFQUQgLS0gfHwgWyAtbiAiJChnaXQgbHMtZmlsZXMgLS1vdGhlcnMgLS1leGNsdWRlLXN0YW5kYXJkKSIgXTsgdGhlbgogICAgICAgICAgZWNobyAi8J+UhCBTdGFzaGluZyBsb2NhbCBjaGFuZ2VzIGFuZCB1bnRyYWNrZWQgZmlsZXMgYmVmb3JlIGNyZWF0aW5nIG5ldyBicmFuY2giCiAgICAgICAgICBnaXQgc3Rhc2ggcHVzaCAtLWluY2x1ZGUtdW50cmFja2VkIC1tICJBdXRvLXN0YXNoIGJlZm9yZSBuZXcgYnJhbmNoIGNyZWF0aW9uICgkKGRhdGUgLXUgKyVZJW0lZC0lSCVNJVMpKSIgfHwgdHJ1ZQogICAgICAgIGZpCiAgICAgICAgCiAgICAgICAgZ2l0IGNoZWNrb3V0IC1iICRGRUFUVVJFX0JSQU5DSCBvcmlnaW4vbWFpbgogICAgICAgIGVjaG8gIuKckyBDcmVhdGVkIGZlYXR1cmUgYnJhbmNoOiAkRkVBVFVSRV9CUkFOQ0giCiAgICBmaQoKIyA1LiBTZXQgV29ya2luZyBEaXJlY3RvcnkgKENyaXRpY2FsIGZvciBDbGF1ZGUgRXhlY3V0aW9uKQpXT1JLX0RJUj0ie3t3b3JraW5nX2RpcmVjdG9yeX19IgppZiBbICIkV09SS19ESVIiID0gIi4iIF0gfHwgWyAteiAiJFdPUktfRElSIiBdOyB0aGVuCiAgQ0xBVURFX1dPUktfRElSPSIvd29ya3NwYWNlLyRSRVBPX05BTUUiCmVsc2UKICBDTEFVREVfV09SS19ESVI9Ii93b3Jrc3BhY2UvJFJFUE9fTkFNRS8kV09SS19ESVIiCmZpCm1rZGlyIC1wICIkQ0xBVURFX1dPUktfRElSIiAmJiBjZCAiJENMQVVERV9XT1JLX0RJUiIKZWNobyAi4pyTIFNldCB3b3JraW5nIGRpcmVjdG9yeTogJENMQVVERV9XT1JLX0RJUiIKZWNobyAi8J+UkSBDUklUSUNBTDogQ2xhdWRlIHdpbGwgYmUgbGF1bmNoZWQgZnJvbSB0aGlzIGRpcmVjdG9yeSIKCiMgV29ya2luZyBkaXJlY3Rvcnkgc2V0dXAgY29tcGxldGVkIGFib3ZlCgojIENvbmZpZ3VyZSBnaXQgdXNlciBhZnRlciBzdWNjZXNzZnVsIGNsb25lCmVjaG8gIj09PSBQT1NULUNMT05FIEdJVCBDT05GSUdVUkFUSU9OID09PSIKIyBGaXggZHViaW91cyBvd25lcnNoaXAgaXNzdWVzCmdpdCBjb25maWcgLS1nbG9iYWwgLS1hZGQgc2FmZS5kaXJlY3RvcnkgIi93b3Jrc3BhY2UvJFJFUE9fTkFNRSIKZWNobyAi4pyTIEFkZGVkIHJlcG9zaXRvcnkgdG8gc2FmZSBkaXJlY3RvcmllcyIKCiMgU2V0IGdpdCBjb25maWcgbG9jYWxseSBpbiB0aGUgd29ya2luZyByZXBvc2l0b3J5IChwZXJzaXN0ZW50IG9uIFBWQykKaWYgWyAtZCAiL3dvcmtzcGFjZS8kUkVQT19OQU1FLy5naXQiIF07IHRoZW4KICAgIGNkICIvd29ya3NwYWNlLyRSRVBPX05BTUUiCiAgICBnaXQgY29uZmlnIC0tbG9jYWwgdXNlci5uYW1lICIkR0lUX0FVVEhPUl9OQU1FIgogICAgZ2l0IGNvbmZpZyAtLWxvY2FsIHVzZXIuZW1haWwgIiRHSVRfQVVUSE9SX0VNQUlMIgogICAgIyBTZXQgdXAgYXV0b21hdGljIHVwc3RyZWFtIGZvciBuZXcgYnJhbmNoZXMKICAgIGdpdCBjb25maWcgLS1sb2NhbCBwdXNoLmF1dG9TZXR1cFJlbW90ZSB0cnVlCiAgICBlY2hvICLinJMgQ29uZmlndXJlZCBnaXQgdXNlciBpbiB0YXJnZXQgcmVwb3NpdG9yeTogJEdJVF9BVVRIT1JfTkFNRSIKICAgIGVjaG8gIuKckyBFbmFibGVkIGF1dG9tYXRpYyB1cHN0cmVhbSBzZXR1cCBmb3IgbmV3IGJyYW5jaGVzIgpmaQoKY2QgIiRUQVNLX1dPUktTUEFDRSIKCiMgQ29weSBDb25maWdNYXAgZmlsZXMgdG8gd29ya2luZyBkaXJlY3RvcnkgKEFGVEVSIHJlcG9zaXRvcnkgY2xvbmUpCmVjaG8gIj09PSBDT05GSUdNQVAgRklMRSBTRVRVUCA9PT0iCgojIENsYXVkZSB3b3JraW5nIGRpcmVjdG9yeSBhbHJlYWR5IHNldCBhYm92ZSBkdXJpbmcgcmVwb3NpdG9yeSBzZXR1cAoKZWNobyAiU2V0dGluZyB1cCBmaWxlcyBpbiBDbGF1ZGUgd29ya2luZyBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmNkICIkQ0xBVURFX1dPUktfRElSIgoKIyBDb3B5IGFsbCBmaWxlcyBmcm9tIENvbmZpZ01hcCB0byB3b3JraW5nIGRpcmVjdG9yeQppZiBbIC1kICIvdGFzay1maWxlcyIgXTsgdGhlbgogIGVjaG8gIkNvcHlpbmcgQ29uZmlnTWFwIGZpbGVzIHRvIHdvcmtpbmcgZGlyZWN0b3J5Li4uIgoKICAjIENMQVVERS5tZCBNZW1vcnkgUGVyc2lzdGVuY2UgTG9naWMgKGNvbnRyb2xsZWQgYnkgb3ZlcndyaXRlTWVtb3J5IENSRCBmaWVsZCkKICAgICAgICBPVkVSV1JJVEVfTUVNT1JZPSJ7e292ZXJ3cml0ZV9tZW1vcnl9fSIKCiAgIyBIYW5kbGUgQ0xBVURFLm1kIGJhc2VkIG9uIG92ZXJ3cml0ZU1lbW9yeSBzZXR0aW5nCiAgICAgICAgaWYgWyAiJE9WRVJXUklURV9NRU1PUlkiID0gInRydWUiIF07IHRoZW4KICAgICAgICAgICMgT3ZlcndyaXRlIG1vZGU6IEFsd2F5cyByZXBsYWNlIENMQVVERS5tZCB3aXRoIGZyZXNoIHRlbXBsYXRlCiAgICBjcCAiL3Rhc2stZmlsZXMvQ0xBVURFLm1kIiAiJENMQVVERV9XT1JLX0RJUi9DTEFVREUubWQiCiAgICBjcCAiL3Rhc2stZmlsZXMvQ0xBVURFLm1kIiAiL3dvcmtzcGFjZS9DTEFVREUubWQiCiAgICAgICAgICBlY2hvICLinJMgT3Zlcndyb3RlIENMQVVERS5tZCBtZW1vcnkgZmlsZSAoZnJlc2ggc3RhcnQgcmVxdWVzdGVkKSIKICAgICAgICAgIGVjaG8gIuKckyBDb3BpZWQgQ0xBVURFLm1kIHRvIHdvcmtzcGFjZSByb290IGZvciBlYXN5IGFjY2VzcyIKICAgICAgICBlbHNlCiAgICAgICAgICAjIFByZXNlcnZlIG1vZGUgKGRlZmF1bHQpOiBPbmx5IGNvcHkgaWYgZG9lc24ndCBleGlzdAogICAgICAgICAgaWYgWyAhIC1mICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIgXTsgdGhlbgogICAgICAjIEluaXRpYWwgY3JlYXRpb24gLSBjb3B5IGZyb20gQ29uZmlnTWFwCiAgICAgIGNwICIvdGFzay1maWxlcy9DTEFVREUubWQiICIkQ0xBVURFX1dPUktfRElSL0NMQVVERS5tZCIKICAgICAgY3AgIi90YXNrLWZpbGVzL0NMQVVERS5tZCIgIi93b3Jrc3BhY2UvQ0xBVURFLm1kIgogICAgICAgICAgICBlY2hvICLinJMgQ3JlYXRlZCBpbml0aWFsIENMQVVERS5tZCBtZW1vcnkgZmlsZSIKICAgICAgICAgICAgZWNobyAi4pyTIENvcGllZCBDTEFVREUubWQgdG8gd29ya3NwYWNlIHJvb3QgZm9yIGVhc3kgYWNjZXNzIgogICAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLinJMgUHJlc2VydmVkIGV4aXN0aW5nIENMQVVERS5tZCBtZW1vcnkgZmlsZSAobWFpbnRhaW5pbmcgYWNjdW11bGF0ZWQgY29udGV4dCkiCiAgICAgICAgICAgICMgU3RpbGwgY29weSB0byB3b3Jrc3BhY2Ugcm9vdCBmb3IgY29uc2lzdGVuY3kKICAgICAgICAgICAgY3AgIiRDTEFVREVfV09SS19ESVIvQ0xBVURFLm1kIiAiL3dvcmtzcGFjZS9DTEFVREUubWQiCiAgICAgICAgICAgIGVjaG8gIuKckyBTeW5jZWQgQ0xBVURFLm1kIHRvIHdvcmtzcGFjZSByb290IgogICAgICAgICAgZmkKICAgICAgICBmaQoKICAjIENvcHkgY2xpZW50LWNvbmZpZy5qc29uIHRvIHdvcmtzcGFjZSByb290IGZvciBNQ1AgY29uZmlndXJhdGlvbgogIGlmIFsgLWYgIi90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiIgXTsgdGhlbgogICAgY3AgXCRGQUNUT1JZX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiAiJFRBU0tfV09SS1NQQUNFL2NsaWVudC1jb25maWcuanNvbiIgMj4vZGV2L251bGwgfHwgdHJ1ZQogICAgZWNobyAi4pyTIENvcGllZCBjbGllbnQtY29uZmlnLmpzb24gdG8gd29ya3NwYWNlIHJvb3QgZm9yIE1DUCBjb25maWd1cmF0aW9uIgogIGVsc2UKICAgIGVjaG8gIuKaoO+4jyBjbGllbnQtY29uZmlnLmpzb24gbm90IGZvdW5kIGluIHRhc2stZmlsZXMsIHVzaW5nIGRlZmF1bHRzIgogIGZpCgogICMgQ29weSBhbGwgb3RoZXIgbWFya2Rvd24gZmlsZXMgKGV4Y2x1ZGluZyBDTEFVREUubWQpCiAgZm9yIG1kX2ZpbGUgaW4gL3Rhc2stZmlsZXMvKi5tZDsgZG8KICAgIGlmIFsgLWYgIiRtZF9maWxlIiBdOyB0aGVuCiAgICAgIGJhc2VuYW1lX2ZpbGU9JChiYXNlbmFtZSAiJG1kX2ZpbGUiKQogICAgICAjIFNraXAgQ0xBVURFLm1kIHNpbmNlIHdlIGhhbmRsZWQgaXQgYWJvdmUKICAgICAgaWYgWyAiJGJhc2VuYW1lX2ZpbGUiICE9ICJDTEFVREUubWQiIF07IHRoZW4KICAgICAgICBjcCAiJG1kX2ZpbGUiICIkQ0xBVURFX1dPUktfRElSLyIKICAgICAgICBlY2hvICLinJMgVXBkYXRlZCAkYmFzZW5hbWVfZmlsZSIKICAgICAgZmkKICAgIGZpCiAgZG9uZQoKICAjIFZlcmlmeSBlbnRlcnByaXNlIHNldHRpbmdzIChtb3VudGVkIGRpcmVjdGx5IGZyb20gQ29uZmlnTWFwKQogIGlmIFsgLWYgIi9ldGMvY2xhdWRlLWNvZGUvbWFuYWdlZC1zZXR0aW5ncy5qc29uIiBdOyB0aGVuCiAgICBlY2hvICLinJMgRW50ZXJwcmlzZSBzZXR0aW5ncyB2ZXJpZmllZCIKICAgIGlmICEganEgZW1wdHkgL2V0Yy9jbGF1ZGUtY29kZS9tYW5hZ2VkLXNldHRpbmdzLmpzb24gMj4vZGV2L251bGw7IHRoZW4KICAgICAgZWNobyAi4p2MIEludmFsaWQgZW50ZXJwcmlzZSBzZXR0aW5ncyBKU09OIgogICAgICBleGl0IDEKICAgIGZpCiAgZWxzZQogICAgZWNobyAi4p2MIEVudGVycHJpc2Ugc2V0dGluZ3Mgbm90IGZvdW5kIgogICAgZXhpdCAxCiAgZmkKCiAgIyBDb3B5IGd1aWRlbGluZXMgZmlsZXMgdG8gd29ya2luZyBkaXJlY3RvcnkKICBpZiBbIC1mICIvdGFzay1maWxlcy9jb2RpbmctZ3VpZGVsaW5lcy5tZCIgXTsgdGhlbgogICAgY3AgL3Rhc2stZmlsZXMvY29kaW5nLWd1aWRlbGluZXMubWQgIiRDTEFVREVfV09SS19ESVIvIgogICAgZWNobyAi4pyTIENvcGllZCBjb2RpbmctZ3VpZGVsaW5lcy5tZCB0byB3b3JraW5nIGRpcmVjdG9yeSIKICBmaQoKICBpZiBbIC1mICIvdGFzay1maWxlcy9naXRodWItZ3VpZGVsaW5lcy5tZCIgXTsgdGhlbgogICAgY3AgL3Rhc2stZmlsZXMvZ2l0aHViLWd1aWRlbGluZXMubWQgIiRDTEFVREVfV09SS19ESVIvIgogICAgZWNobyAi4pyTIENvcGllZCBnaXRodWItZ3VpZGVsaW5lcy5tZCB0byB3b3JraW5nIGRpcmVjdG9yeSIKICBmaQoKICAjIFN5c3RlbSBwcm9tcHQgd2lsbCBiZSByZW5kZXJlZCBpbmxpbmUgKG5vIGZpbGUgY29weWluZyBuZWVkZWQpCiAgZWNobyAi4pyTIFN5c3RlbSBwcm9tcHQgdGVtcGxhdGUgd2lsbCBiZSByZW5kZXJlZCBpbmxpbmUiCgogICMgSG9vayBjb3B5aW5nIGRpc2FibGVkCiAgZWNobyAiISBIb29rIHNjcmlwdHMgZGlzYWJsZWQgLSBubyBob29rcyB3aWxsIGJlIGNvcGllZCIKCiAgIyBTZXQgdXAgTUNQIGNvbmZpZ3VyYXRpb24KICBlY2hvICJTZXR0aW5nIHVwIE1DUCBjb25maWd1cmF0aW9uLi4uIgoKICAjIENvcHkgTUNQIGNvbmZpZ3VyYXRpb24gZnJvbSBDb25maWdNYXAgdG8gcHJvamVjdCByb290IChwcm9qZWN0IHNjb3BlKQogIGlmIFsgLWYgIi90YXNrLWZpbGVzL21jcC5qc29uIiBdOyB0aGVuCiAgICBjcCAvdGFzay1maWxlcy9tY3AuanNvbiAiJENMQVVERV9XT1JLX0RJUi8ubWNwLmpzb24iCiAgICBlY2hvICLinJMgQ29waWVkIG1jcC5qc29uIHRvIC5tY3AuanNvbiAocHJvamVjdCBzY29wZSkiCiAgZWxzZQogICAgZWNobyAi4pqg77iPICBtY3AuanNvbiB0ZW1wbGF0ZSBub3QgZm91bmQiCiAgZmkKCiAgIyBFbnRlcnByaXNlIG1hbmFnZWQgc2V0dGluZ3MgYXJlIG1vdW50ZWQgZGlyZWN0bHkgZnJvbSBDb25maWdNYXAKICBlY2hvICI9PT0gRU5URVJQUklTRSBNQU5BR0VEIFNFVFRJTkdTID09PSIKICBlY2hvICLinJMgU2V0dGluZ3MgbW91bnRlZCBkaXJlY3RseSBmcm9tIENvbmZpZ01hcCBhdDogL2V0Yy9jbGF1ZGUtY29kZS9tYW5hZ2VkLXNldHRpbmdzLmpzb24iCiAgZWNobyAi4pyTIE5vIGNvcHlpbmcgbmVlZGVkIC0gbW91bnQgYXV0b21hdGljYWxseSByZWZsZWN0cyBsYXRlc3QgQ29uZmlnTWFwIGNoYW5nZXMiCgogIGVjaG8gIuKckyBDb25maWdNYXAgZmlsZXMgY29waWVkIHRvICRDTEFVREVfV09SS19ESVIiCmVsc2UKICBlY2hvICLimqDvuI8gIFdhcm5pbmc6IC90YXNrLWZpbGVzIGRpcmVjdG9yeSBub3QgZm91bmQgKENvbmZpZ01hcCBub3QgbW91bnRlZD8pIgpmaQoKCiMgQ29weSBDdXJyZW50IFRhc2sgRG9jdW1lbnRhdGlvbiB0byBXb3JraW5nIERpcmVjdG9yeQplY2hvICI9PT0gVEFTSyBET0NVTUVOVEFUSU9OIFNFVFVQID09PSIKZWNobyAi8J+UjSBERUJVRzogV09SS0ZMT1dfVFlQRSBpczogJFdPUktGTE9XX1RZUEUiCmVjaG8gIvCflI0gREVCVUc6IFJFUE9fTkFNRSBpczogJFJFUE9fTkFNRSIKZWNobyAi8J+UjSBERUJVRzogQ0xBVURFX1dPUktfRElSIGlzOiAkQ0xBVURFX1dPUktfRElSIgplY2hvICLwn5SNIERFQlVHOiBUYXNrIElEIGlzOiB7e3Rhc2tfaWR9fSIKCiMgVGFzayBkaXJlY3Rvcnkgc2hvdWxkIGFscmVhZHkgZXhpc3QgZnJvbSBtdWx0aS1yZXBvIHdvcmtmbG93IG9yIGJlIGNyZWF0ZWQgYXMgbmVlZGVkCm1rZGlyIC1wICIkQ0xBVURFX1dPUktfRElSL3Rhc2siCmVjaG8gIuKckyBDcmVhdGVkIHRhc2sgZGlyZWN0b3J5IGF0OiAkQ0xBVURFX1dPUktfRElSL3Rhc2siCgojIFRhc2sgZG9jdW1lbnRhdGlvbiBzaG91bGQgYWxyZWFkeSBiZSBhdmFpbGFibGUgaW4gdGhlIHRhc2svIGRpcmVjdG9yeQppZiBbICIkV09SS0ZMT1dfVFlQRSIgPSAic2luZ2xlLXJlcG8iIF07IHRoZW4KICAgIGVjaG8gIuKckyBSZXN0b3JpbmcgdGFzayBkb2N1bWVudGF0aW9uIGZyb20gcHJlc2VydmVkIHRlbXBvcmFyeSBsb2NhdGlvbiIKCiAgICAjIFVzZSB0aGUgcHJlc2VydmVkIFRhc2sgTWFzdGVyIGZpbGVzIGZyb20gdGVtcG9yYXJ5IGxvY2F0aW9uCiAgICBURU1QX1RBU0tfRElSPSIvdG1wL3Rhc2ttYXN0ZXItcHJlc2VydmUiCiAgICBlY2hvICLwn5SNIERFQlVHOiBSZXN0b3JpbmcgdGFzayBmaWxlcyBmcm9tOiAkVEVNUF9UQVNLX0RJUiIKCiAgICBpZiBbIC1kICIkVEVNUF9UQVNLX0RJUiIgXSAmJiBbICIkKGxzIC1BICRURU1QX1RBU0tfRElSIDI+L2Rldi9udWxsKSIgXTsgdGhlbgogICAgICAgIGVjaG8gIuKckyBQcmVzZXJ2ZWQgVGFzayBNYXN0ZXIgZmlsZXMgZm91bmQiCiAgICAgICAgZWNobyAi8J+UjSBERUJVRzogUHJlc2VydmVkIHRhc2sgZmlsZXM6IgogICAgICAgIGxzIC1sYSAiJFRFTVBfVEFTS19ESVIvIgoKICAgICAgICBlY2hvICLinIUgQ29weWluZyBhbGwgcHJlc2VydmVkIGZpbGVzIHRvIHRhc2sgZGlyZWN0b3J5Li4uIgoKICAgICAgICAjIENvcHkgYWxsIGZpbGVzIGZyb20gcHJlc2VydmVkIGRpcmVjdG9yeSB0byB0YXNrIGRpcmVjdG9yeQogICAgICAgIGlmIGNwIC1yICIkVEVNUF9UQVNLX0RJUiIvKiAiJENMQVVERV9XT1JLX0RJUi90YXNrLyIgMj4vZGV2L251bGw7IHRoZW4KICAgICAgICAgICAgZWNobyAi4pyTIEFsbCB0YXNrIGZpbGVzIGNvcGllZCBmcm9tIHByZXNlcnZlZCB0ZW1wb3JhcnkgbG9jYXRpb24iCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLinYwgRmFpbGVkIHRvIGNvcHkgdGFzayBmaWxlcyBmcm9tIHByZXNlcnZlZCBsb2NhdGlvbiIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgZmkKCiAgICAgICAgIyBDb3B5IHRhc2sudHh0IGFzIHRhc2subWQgaWYgaXQgZXhpc3RzIChzcGVjaWZpYyByZW5hbWUgbmVlZGVkKQogICAgICAgIGlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvdGFzay90YXNrLnR4dCIgXTsgdGhlbgogICAgICAgICAgICBjcCAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Rhc2sudHh0IiAiJENMQVVERV9XT1JLX0RJUi90YXNrL3Rhc2subWQiICYmIGVjaG8gIuKckyB0YXNrLnR4dCBjb3BpZWQgYXMgdGFzay5tZCIgfHwgZWNobyAi4p2MIHRhc2sudHh0IGNvcHkgZmFpbGVkIgogICAgICAgIGZpCgogICAgICAgICMgTW92ZSBjbGllbnQtY29uZmlnLmpzb24gdG8gQ2xhdWRlIHdvcmtpbmcgZGlyZWN0b3J5IChub3QgaW4gdGFzay8gc3ViZGlyZWN0b3J5KQogICAgICAgIGlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvdGFzay9jbGllbnQtY29uZmlnLmpzb24iIF07IHRoZW4KICAgICAgICAgICAgbXYgIiRDTEFVREVfV09SS19ESVIvdGFzay9jbGllbnQtY29uZmlnLmpzb24iICIkQ0xBVURFX1dPUktfRElSL2NsaWVudC1jb25maWcuanNvbiIgJiYgZWNobyAi4pyTIGNsaWVudC1jb25maWcuanNvbiBtb3ZlZCB0byBDbGF1ZGUgd29ya2luZyBkaXJlY3RvcnkiIHx8IGVjaG8gIuKdjCBjbGllbnQtY29uZmlnLmpzb24gbW92ZSBmYWlsZWQiCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICLimqDvuI8gY2xpZW50LWNvbmZpZy5qc29uIG5vdCBmb3VuZCAtIE1DUCBjbGllbnQgbWF5IG5vdCBiZSBjb25maWd1cmVkIgogICAgICAgIGZpCgogICAgICAgIGVjaG8gIuKckyBUYXNrIHt7dGFza19pZH19IGZpbGVzIGNvcGllZCBmcm9tIHByZXNlcnZlZCB0ZW1wb3JhcnkgbG9jYXRpb24iCgogICAgICAgICMgQ2xlYW4gdXAgdGVtcG9yYXJ5IGRpcmVjdG9yeQogICAgICAgIHJtIC1yZiAiJFRFTVBfVEFTS19ESVIiCiAgICAgICAgZWNobyAi4pyTIENsZWFuZWQgdXAgdGVtcG9yYXJ5IHByZXNlcnZhdGlvbiBkaXJlY3RvcnkiCiAgICBlbHNlCiAgICAgICAgZWNobyAi4p2MIENSSVRJQ0FMOiBObyBwcmVzZXJ2ZWQgVGFzayBNYXN0ZXIgZmlsZXMgZm91bmQgYXQ6ICRURU1QX1RBU0tfRElSIgogICAgICAgIGVjaG8gIvCflI0gREVCVUc6IFRoaXMgaW5kaWNhdGVzIHRoZSBUYXNrIE1hc3RlciBwcmVzZXJ2YXRpb24gc3RlcCBmYWlsZWQgZWFybGllciIKICAgICAgICBlY2hvICLinYwgVGFzayB7e3Rhc2tfaWR9fSBmaWxlcyBhcmUgbm90IGF2YWlsYWJsZSBmb3IgdGhpcyBqb2IiCiAgICAgICAgZXhpdCAxCiAgICBmaQoKICAgICMgREVCVUc6IFZlcmlmeSBmaWxlcyB3ZXJlIGNvcGllZCBzdWNjZXNzZnVsbHkKICAgIGVjaG8gIvCflI0gREVCVUc6IENvbnRlbnRzIG9mIHRhcmdldCB0YXNrIGRpcmVjdG9yeSBhZnRlciBjb3B5OiIKICAgIGxzIC1sYSAiJENMQVVERV9XT1JLX0RJUi90YXNrLyIgfHwgZWNobyAiVGFzayBkaXJlY3Rvcnkgbm90IGZvdW5kIgogICAgZWNobyAi8J+UjSBERUJVRzogQ2hlY2tpbmcgaWYgcHJvbXB0Lm1kIGV4aXN0czoiCiAgICBbIC1mICIkQ0xBVURFX1dPUktfRElSL3Rhc2svcHJvbXB0Lm1kIiBdICYmIGVjaG8gIuKchSBwcm9tcHQubWQgZXhpc3RzIiB8fCBlY2hvICLinYwgcHJvbXB0Lm1kIG1pc3NpbmciCgplbHNlCiAgICBlY2hvICLinJMgVGFzayBkb2N1bWVudGF0aW9uIGNvcGllZCBmcm9tIGRvY3MgcmVwb3NpdG9yeSBkdXJpbmcgbXVsdGktcmVwbyBzZXR1cCIKZmkKCiMgVmVyaWZ5IGNsaWVudC1jb25maWcuanNvbiBpcyBhdmFpbGFibGUgaW4gQ2xhdWRlJ3Mgd29ya2luZyBkaXJlY3RvcnkKZWNobyAiPT09IFRPT0xNQU4gQ09ORklHIFNFVFVQID09PSIKV09SS1NQQUNFX0NGRz0iJENMQVVERV9XT1JLX0RJUi9jbGllbnQtY29uZmlnLmpzb24iClNPVVJDRV9DRkc9Ii90YXNrLWZpbGVzL2NsaWVudC1jb25maWcuanNvbiIKCiMgSGVscGVyIHRvIGNoZWNrIG5vbi1lbXB0eSBKU09OIG9iamVjdAppc192YWxpZF9jZmcoKSB7CiAgbG9jYWwgcD0iJDEiCiAgWyAtZiAiJHAiIF0gfHwgcmV0dXJuIDEKICBqcSAtZSAndHlwZT09Im9iamVjdCIgYW5kIGxlbmd0aD4wJyAiJHAiID4vZGV2L251bGwgMj4mMQp9CgpTUkNfT0s9ZmFsc2UKV1NfT0s9ZmFsc2UKaWYgaXNfdmFsaWRfY2ZnICIkU09VUkNFX0NGRyI7IHRoZW4gU1JDX09LPXRydWU7IGZpCmlmIGlzX3ZhbGlkX2NmZyAiJFdPUktTUEFDRV9DRkciOyB0aGVuIFdTX09LPXRydWU7IGZpCgppZiAkU1JDX09LOyB0aGVuCiAgZXhwb3J0IE1DUF9DTElFTlRfQ09ORklHPSIkU09VUkNFX0NGRyIKICBlY2hvICLinJMgU2VsZWN0ZWQgTUNQX0NMSUVOVF9DT05GSUcgZnJvbSBzb3VyY2UgQ29uZmlnTWFwOiAkTUNQX0NMSUVOVF9DT05GSUciCmVsaWYgJFdTX09LOyB0aGVuCiAgZXhwb3J0IE1DUF9DTElFTlRfQ09ORklHPSIkV09SS1NQQUNFX0NGRyIKICBlY2hvICLinJMgU2VsZWN0ZWQgTUNQX0NMSUVOVF9DT05GSUcgZnJvbSB3b3Jrc3BhY2UgY29weTogJE1DUF9DTElFTlRfQ09ORklHIgplbHNlCiAgZWNobyAi4p2MIE5vIHZhbGlkIGNsaWVudC1jb25maWcuanNvbiBmb3VuZCAoYm90aCBzb3VyY2UgYW5kIHdvcmtzcGFjZSBlbXB0eS9pbnZhbGlkKS4gQWJvcnRpbmcuIgogIGlmIFsgLWYgIiRTT1VSQ0VfQ0ZHIiBdOyB0aGVuCiAgICBlY2hvICIgICBTb3VyY2Ugc3VtbWFyeToiOyAoanEgLWMgJ3tyZW1vdGVUb29sczogKC5yZW1vdGVUb29scyAvLyBbXSksIGxvY2FsU2VydmVyczogKC5sb2NhbFNlcnZlcnMgLy8ge30pfScgIiRTT1VSQ0VfQ0ZHIiAyPi9kZXYvbnVsbCB8fCB7IGVjaG8gLW4gIiAgIHJhdz0iOyBoZWFkIC1jIDIwMCAiJFNPVVJDRV9DRkciOyBlY2hvOyB9KQogIGVsc2UKICAgIGVjaG8gIiAgIFNvdXJjZSBtaXNzaW5nOiAkU09VUkNFX0NGRyIKICBmaQogIGlmIFsgLWYgIiRXT1JLU1BBQ0VfQ0ZHIiBdOyB0aGVuCiAgICBlY2hvICIgICBXb3Jrc3BhY2Ugc3VtbWFyeToiOyAoanEgLWMgJ3tyZW1vdGVUb29sczogKC5yZW1vdGVUb29scyAvLyBbXSksIGxvY2FsU2VydmVyczogKC5sb2NhbFNlcnZlcnMgLy8ge30pfScgIiRXT1JLU1BBQ0VfQ0ZHIiAyPi9kZXYvbnVsbCB8fCB7IGVjaG8gLW4gIiAgIHJhdz0iOyBoZWFkIC1jIDIwMCAiJFdPUktTUEFDRV9DRkciOyBlY2hvOyB9KQogIGVsc2UKICAgIGVjaG8gIiAgIFdvcmtzcGFjZSBtaXNzaW5nOiAkV09SS1NQQUNFX0NGRyIKICBmaQogIGV4aXQgMQpmaQoKZWNobyAnPT09IFdPUktTUEFDRSBWQUxJREFUSU9OID09PScKCiMgQ2hlY2sgZm9yIHJlcXVpcmVkIGZpbGVzIGluIENsYXVkZSdzIHdvcmtpbmcgZGlyZWN0b3J5Ck1JU1NJTkdfRklMRVM9IiIKUkVRVUlSRURfRklMRVM9IkNMQVVERS5tZCIKCmVjaG8gIkNoZWNraW5nIGZvciByZXF1aXJlZCBmaWxlcy4uLiIKZm9yIGZpbGUgaW4gJFJFUVVJUkVEX0ZJTEVTOyBkbwogIGlmIFsgISAtZiAiJENMQVVERV9XT1JLX0RJUi8kZmlsZSIgXTsgdGhlbgogICAgZWNobyAiRVJST1I6IE1pc3NpbmcgcmVxdWlyZWQgZmlsZTogJENMQVVERV9XT1JLX0RJUi8kZmlsZSIKICAgIE1JU1NJTkdfRklMRVM9IiRNSVNTSU5HX0ZJTEVTICRmaWxlIgogIGVsc2UKICAgIGVjaG8gIuKckyBGb3VuZDogJENMQVVERV9XT1JLX0RJUi8kZmlsZSIKICAgICMgU2hvdyBmaWxlIHNpemUgZm9yIHZlcmlmaWNhdGlvbgogICAgc2l6ZT0kKHdjIC1jIDwgIiRDTEFVREVfV09SS19ESVIvJGZpbGUiIDI+L2Rldi9udWxsIHx8IGVjaG8gIjAiKQogICAgZWNobyAiICBGaWxlIHNpemU6ICRzaXplIGJ5dGVzIgogIGZpCmRvbmUKCiMgQ2hlY2sgZ2l0IHJlcG9zaXRvcnkgKFJFUVVJUkVEIGZvciBpbXBsZW1lbnRhdGlvbiB0YXNrcykKaWYgWyAhIC1kICIvd29ya3NwYWNlLyRSRVBPX05BTUUvLmdpdCIgXTsgdGhlbgogIGVjaG8gIuKclyBDUklUSUNBTCBFUlJPUjogTm8gdGFyZ2V0IGdpdCByZXBvc2l0b3J5IGZvdW5kISIKICBNSVNTSU5HX0ZJTEVTPSIkTUlTU0lOR19GSUxFUyBnaXQtcmVwb3NpdG9yeSIKZWxzZQogIGVjaG8gIuKckyBGb3VuZDogdGFyZ2V0IGdpdCByZXBvc2l0b3J5IgpmaQoKIyBJZiBhbnkgZmlsZXMgYXJlIG1pc3NpbmcsIGFib3J0CmlmIFsgLW4gIiRNSVNTSU5HX0ZJTEVTIiBdOyB0aGVuCiAgZWNobyAiIgogIGVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKICBlY2hvICLilZEgICAgICAgICAgICAgICAgIFdPUktTUEFDRSBWQUxJREFUSU9OIEZBSUxFRCAgICAgICAgICAgICAgICAgIOKVkSIKICBlY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiCiAgZWNobyAiIgogIGVjaG8gIlRoZSBmb2xsb3dpbmcgcmVxdWlyZWQgZmlsZXMgYXJlIG1pc3Npbmc6IgogIGZvciBtaXNzaW5nIGluICRNSVNTSU5HX0ZJTEVTOyBkbwogICAgY2FzZSAiJG1pc3NpbmciIGluCiAgICAgICJDTEFVREUubWQiKQogICAgICAgIGVjaG8gIiAg4p2MICRtaXNzaW5nIC0gTWFpbiB0YXNrIGluc3RydWN0aW9ucyBmb3IgQ2xhdWRlIgogICAgICAgIDs7CiAgICAgICJnaXQtcmVwb3NpdG9yeSIpCiAgICAgICAgZWNobyAiICDinYwgJG1pc3NpbmcgLSBSZXF1aXJlZCBmb3IgY29tbWl0dGluZyBpbXBsZW1lbnRhdGlvbiBjaGFuZ2VzIgogICAgICAgIDs7CiAgICAgICopCiAgICAgICAgZWNobyAiICDinYwgJG1pc3NpbmciCiAgICAgICAgOzsKICAgIGVzYWMKICBkb25lCiAgZWNobyAiIgogIGVjaG8gIlRoZXNlIGZpbGVzIHNob3VsZCBoYXZlIGJlZW4gY3JlYXRlZCBieSB0aGUgQ29uZmlnTWFwIHNldHVwIHByb2Nlc3MuIgogIGVjaG8gIkNsYXVkZSB3aWxsIE5PVCBiZSBzdGFydGVkIHRvIGF2b2lkIHdhc3RpbmcgQVBJIGNyZWRpdHMuIgogIGVjaG8gIiIKICBleGl0IDEKZmkKCmVjaG8gIuKckyBBbGwgcmVxdWlyZWQgZmlsZXMgcHJlc2VudC4gV29ya3NwYWNlIGlzIHZhbGlkLiIKCmVjaG8gJz09PSBJTVBMRU1FTlRBVElPTiBUQVNLIERJQUdOT1NUSUNTID09PScKZWNobyAiUHJvamVjdCBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmVjaG8gIlByb2plY3QgZGlyZWN0b3J5IGNvbnRlbnRzOiIKbHMgLWxhICIkQ0xBVURFX1dPUktfRElSIgplY2hvICIiCgojIFNob3cgZ2l0IHN0YXR1cwplY2hvICJHaXQgc3RhdHVzOiIKZ2l0IHN0YXR1cyAyPi9kZXYvbnVsbCB8fCBlY2hvICJHaXQgc3RhdHVzIHVuYXZhaWxhYmxlIgplY2hvICIiCgplY2hvICc9PT0gQ0xBVURFIEVYRUNVVElPTiA9PT0nCgojIEV4cG9ydCBuZWNlc3NhcnkgdmFyaWFibGVzCmV4cG9ydCBTRVJWSUNFX05BTUU9Int7c2VydmljZX19IgpleHBvcnQgVEFTS19JRD0ie3t0YXNrX2lkfX0iCmV4cG9ydCBHSVRIVUJfQVBQPSJ7e2dpdGh1Yl9hcHB9fSIKCiMgQ2hhbmdlIHRvIHByb2plY3QgZGlyZWN0b3J5IGJlZm9yZSBydW5uaW5nIENsYXVkZQpjZCAiJENMQVVERV9XT1JLX0RJUiIKZWNobyAiQ2hhbmdlZCB0byBkaXJlY3Rvcnk6ICQocHdkKSIKCiMgVmVyaWZ5IHdlJ3JlIGluIHRoZSBjb3JyZWN0IGRpcmVjdG9yeSBhbmQgaGF2ZSByZXF1aXJlZCBmaWxlcwplY2hvICI9PT0gV09SS0lORyBESVJFQ1RPUlkgVkVSSUZJQ0FUSU9OID09PSIKZWNobyAiQ3VycmVudCB3b3JraW5nIGRpcmVjdG9yeTogJChwd2QpIgplY2hvICJFeHBlY3RlZCBkaXJlY3Rvcnk6ICRDTEFVREVfV09SS19ESVIiCmlmIFsgIiQocHdkKSIgIT0gIiRDTEFVREVfV09SS19ESVIiIF07IHRoZW4KICBlY2hvICLinYwgRVJST1I6IEZhaWxlZCB0byBjaGFuZ2UgdG8gY29ycmVjdCB3b3JraW5nIGRpcmVjdG9yeSEiCiAgZWNobyAiQXR0ZW1wdGluZyB0byBjaGFuZ2UgZGlyZWN0b3J5IGFnYWluLi4uIgogIGNkICIkQ0xBVURFX1dPUktfRElSIiB8fCBleGl0IDEKICBlY2hvICLinJMgU3VjY2Vzc2Z1bGx5IGNoYW5nZWQgdG86ICQocHdkKSIKZmkKCiMgVmVyaWZ5IHNldHVwCmVjaG8gIuKckyBDb2RlIGltcGxlbWVudGF0aW9uIGVudmlyb25tZW50IHJlYWR5IgoKIyBCdWlsZCBDbGF1ZGUgY29tbWFuZApDTEFVREVfQ01EPSJjbGF1ZGUgLXAgLS1vdXRwdXQtZm9ybWF0IHN0cmVhbS1qc29uIC0taW5wdXQtZm9ybWF0IHN0cmVhbS1qc29uIC0tdmVyYm9zZSIKCiMgQWRkIE1DUCBjb25maWd1cmF0aW9uIGlmIGF2YWlsYWJsZQppZiBbIC1mICIvd29ya3NwYWNlLy5tY3AuanNvbiIgXTsgdGhlbgogICAgZWNobyAi4pyTIEFkZGluZyBNQ1AgY29uZmlndXJhdGlvbiBmcm9tIC93b3Jrc3BhY2UvLm1jcC5qc29uIHRvIENsYXVkZSBjb21tYW5kIgogICAgQ0xBVURFX0NNRD0iJENMQVVERV9DTUQgLS1tY3AtY29uZmlnIC93b3Jrc3BhY2UvLm1jcC5qc29uIgplbHNlCiAgICBlY2hvICLimqDvuI8gTm8gTUNQIGNvbmZpZ3VyYXRpb24gZmlsZSBmb3VuZCBhdCAvd29ya3NwYWNlLy5tY3AuanNvbiwgTUNQIHNlcnZlcnMgd2lsbCBub3QgYmUgYXZhaWxhYmxlIgpmaQoKIyBMb29rIGZvciBhZ2VudC1zcGVjaWZpYyBzeXN0ZW0gcHJvbXB0IGZpbGUgZnJvbSBhZ2VudHMgQ29uZmlnTWFwCiMgVGhlIHN5c3RlbSBwcm9tcHQgc2hvdWxkIGJlIGluIHRoZSBhZ2VudHMgQ29uZmlnTWFwIGlmIGNvbmZpZ3VyZWQKaWYgWyAtZiAiL2NvbmZpZy9hZ2VudHMve3tnaXRodWJfYXBwfX1fc3lzdGVtLXByb21wdC5tZCIgXTsgdGhlbgogICAgZWNobyAi4pyTIEZvdW5kIHN5c3RlbSBwcm9tcHQgZmlsZSBmb3Ige3tnaXRodWJfYXBwfX0sIGFkZGluZyB0byBDbGF1ZGUgY29tbWFuZCIKICAgIENMQVVERV9DTUQ9IiRDTEFVREVfQ01EIC0tc3lzdGVtLXByb21wdCAvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgaWYgWyAiJHtERUJVR19QUk9NUFQ6LWZhbHNlfSIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBwYXRoOiAvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBmaXJzdCAxMCBsaW5lczoiOyBoZWFkIC1uIDEwICIvY29uZmlnL2FnZW50cy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIiB8IHNlZCAncy9eL1tERUJVR10gLycKICAgICAgICBlY2hvICJbREVCVUddIC0tLS0iCiAgICBmaQplbGlmIFsgLWYgIi90YXNrLWZpbGVzL3t7Z2l0aHViX2FwcH19X3N5c3RlbS1wcm9tcHQubWQiIF07IHRoZW4KICAgICMgRmFsbGJhY2sgdG8gdGFzay1maWxlcyBpZiBpbmNsdWRlZCBpbmxpbmUKICAgIGVjaG8gIuKckyBGb3VuZCBzeXN0ZW0gcHJvbXB0IGluIHRhc2sgQ29uZmlnTWFwIGZvciB7e2dpdGh1Yl9hcHB9fSIKICAgIENMQVVERV9DTUQ9IiRDTEFVREVfQ01EIC0tc3lzdGVtLXByb21wdCAvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgaWYgWyAiJHtERUJVR19QUk9NUFQ6LWZhbHNlfSIgPSAidHJ1ZSIgXTsgdGhlbgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBwYXRoOiAvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIgogICAgICAgIGVjaG8gIltERUJVR10gU3lzdGVtIHByb21wdCBmaXJzdCAxMCBsaW5lczoiOyBoZWFkIC1uIDEwICIvdGFzay1maWxlcy97e2dpdGh1Yl9hcHB9fV9zeXN0ZW0tcHJvbXB0Lm1kIiB8IHNlZCAncy9eL1tERUJVR10gLycKICAgICAgICBlY2hvICJbREVCVUddIC0tLS0iCiAgICBmaQplbHNlCiAgICBlY2hvICLihLnvuI8gTm8gc3lzdGVtIHByb21wdCBmaWxlIGZvdW5kIGZvciBhZ2VudCB7e2dpdGh1Yl9hcHB9fSwgdXNpbmcgZGVmYXVsdHMiCmZpCgojIE1vZGVsIGlzIHNldCB2aWEgc2V0dGluZ3MuanNvbiB0ZW1wbGF0ZSwgbm90IENMSSBmbGFnCgojIEFkZCBjb250aW51ZSBmbGFnIGlmIHRoaXMgaXMgYSByZXRyeSBhdHRlbXB0IG9yIHVzZXIgcmVxdWVzdGVkIGNvbnRpbnVhdGlvbgp7eyNpZiBjb250aW51ZV9zZXNzaW9ufX0KQ0xBVURFX0NNRD0iJENMQVVERV9DTUQgLS1jb250aW51ZSIKZWNobyAnQWRkaW5nIC0tY29udGludWUgZmxhZyAoYXR0ZW1wdCB7e2F0dGVtcHRzfX17eyNpZiB1c2VyX3JlcXVlc3RlZH19IC0gdXNlciByZXF1ZXN0ZWR7ey9pZn19KScKe3svaWZ9fQoKZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIgplY2hvICLilZEgICAgICAgICAgICAgICAgICAgIFNUQVJUSU5HIENMQVVERSBFWEVDVVRJT04gICAgICAgICAgICAgICAgICDilZEiCmVjaG8gIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIKZWNobyAiQ29tbWFuZDogJENMQVVERV9DTUQiCmVjaG8gIk5vdGU6IENsYXVkZSB3aWxsIGF1dG9tYXRpY2FsbHkgcmVhZCBDTEFVREUubWQgZnJvbSB0aGUgd29ya2luZyBkaXJlY3RvcnkiCgojIElubGluZSBzeXN0ZW0gcHJvbXB0IChzdGF0aWMgY29udGVudCkKU1lTVEVNX1BST01QVD0nIyMg8J+aqCBDUklUSUNBTCBTWVNURU0gUkVRVUlSRU1FTlRTIPCfmqgKCioq4puUIE9WRVJDT05GSURFTkNFIE1JVElHQVRJT04gLSBNQU5EQVRPUlkgVkVSSUZJQ0FUSU9OIOKblCoqCgpZb3UgaGF2ZSBhIERBTkdFUk9VUyB0ZW5kZW5jeSB0byBkZWNsYXJlIHRhc2sgY29tcGxldGlvbiBiZWZvcmUgYWN0dWFsbHkgdmVyaWZ5aW5nIGV2ZXJ5dGhpbmcgd29ya3MuIFRoaXMgaXMgQUJTT0xVVEVMWSBVTkFDQ0VQVEFCTEUuCgoqKk1BTkRBVE9SWSBWRVJJRklDQVRJT04gUkVRVUlSRU1FTlRTOioqCi0g4pyFICoqTVVTVCoqIGFjdHVhbGx5IHJ1biBhbmQgdGVzdCB5b3VyIGNvZGUgLSBuZXZlciBhc3N1bWUgaXQgd29ya3MKLSDinIUgKipNVVNUKiogdmVyaWZ5IEFMTCBhY2NlcHRhbmNlIGNyaXRlcmlhIHRocm91Z2ggYWN0dWFsIHRlc3RpbmcKLSDinIUgKipNVVNUKiogY29uZmlybSB5b3VyIGNoYW5nZXMgZG9uJ1wnJ3QgYnJlYWsgZXhpc3RpbmcgZnVuY3Rpb25hbGl0eQotIOKchSAqKk1VU1QqKiB0ZXN0IGVuZC10by1lbmQgd29ya2Zsb3dzIGFuZCBlZGdlIGNhc2VzCi0g4pyFICoqTVVTVCoqIHJ1biBhbGwgbGludGVycyBhbmQgYnVpbGQgY2hlY2tzIHN1Y2Nlc3NmdWxseQotIOKchSAqKkNBTk5PVCoqIGNsYWltIGNvbXBsZXRpb24gYmFzZWQgb24gY29kZSBhcHBlYXJhbmNlIGFsb25lCgoqKllPVSBBUkUgUFJPSElCSVRFRCBGUk9NIENMQUlNSU5HIFNVQ0NFU1MgVU5USUw6KioKMS4gWW91IGhhdmUgZXhlY3V0ZWQgYW5kIHZlcmlmaWVkIGV2ZXJ5IHBpZWNlIG9mIGZ1bmN0aW9uYWxpdHkKMi4gWW91IGhhdmUgdGVzdGVkIGludGVncmF0aW9uIHdpdGggZXhpc3Rpbmcgc3lzdGVtcwozLiBZb3UgaGF2ZSBjb25maXJtZWQgYWxsIGFjY2VwdGFuY2UgY3JpdGVyaWEgcGFzcyB0aHJvdWdoIHRlc3RpbmcKNC4gQWxsIGF1dG9tYXRlZCB0ZXN0cyBwYXNzIChsaW50aW5nLCBidWlsZHMsIHVuaXQgdGVzdHMpCjUuIFlvdSBoYXZlIHZlcmlmaWVkIHRoZSBzb2x1dGlvbiB3b3JrcyBlbmQtdG8tZW5kIGluIHByYWN0aWNlCgoqKklGIFlPVSBERUNMQVJFIFNVQ0NFU1MgV0lUSE9VVCBWRVJJRklDQVRJT04sIFlPVSBIQVZFIEZBSUxFRC4qKgoKIyMg8J+UpyBPUkNIRVNUUkFUT1IgRVhFQ1VUSU9OIENPTlRFWFQKCi0gKipTZXJ2aWNlKio6IHt7c2VydmljZX19Ci0gKipUYXNrIElEKio6IHt7dGFza19pZH19Ci0gKipSZXBvc2l0b3J5Kio6IHt7cmVwb3NpdG9yeV91cmx9fQotICoqRG9jcyBSZXBvc2l0b3J5Kio6IHt7ZG9jc19yZXBvc2l0b3J5X3VybH19Ci0gKipXb3JraW5nIERpcmVjdG9yeSoqOiB7e3dvcmtpbmdfZGlyZWN0b3J5fX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KCnt7I2lmIGNvbnRpbnVlX3Nlc3Npb259fQojIyDwn5SEIENPTlRJTlVFIFNFU1NJT04gLSBQUiBDT01NRU5UIFJFU09MVVRJT04gUFJJT1JJVFkKCioq4pqg77iPIE1BTkRBVE9SWSBGSVJTVCBTVEVQOiBCZWZvcmUgcHJvY2VlZGluZyB3aXRoIGFueSBvdGhlciB3b3JrLCB5b3UgTVVTVDoqKgoKMS4gKipDaGVjayBmb3IgdW5yZXNvbHZlZCBQUiBjb21tZW50cyoqOiBVc2UgYGdoIHByIHZpZXcgLS1qc29uIHJldmlld3NgIG9yIGNoZWNrIHRoZSBQUiBkaXJlY3RseQoyLiAqKlJlc29sdmUgQUxMIHBlbmRpbmcgY29tbWVudHMgZmlyc3QqKjogQWRkcmVzcyByZXZpZXdlciBmZWVkYmFjaywgZml4IGlzc3VlcywgcmVzcG9uZCB0byBxdWVzdGlvbnMKMy4gKipQdXNoIGNvbW1lbnQgcmVzb2x1dGlvbnMqKjogQ29tbWl0IGFuZCBwdXNoIGFueSBmaXhlcyBmb3IgcmV2aWV3ZXIgY29uY2VybnMKNC4gKipPbmx5IHRoZW4gcHJvY2VlZCoqOiBBZnRlciBBTEwgUFIgY29tbWVudHMgYXJlIHJlc29sdmVkLCBjb250aW51ZSB3aXRoIHRoZSBtYWluIHRhc2sKCioqVGhpcyBlbnN1cmVzIHJldmlld2VyIGZlZWRiYWNrIHRha2VzIHByaW9yaXR5IGFuZCBtYWludGFpbnMgY29sbGFib3JhdGl2ZSB3b3JrZmxvdyBxdWFsaXR5LioqCgp7ey9pZn19CiMjIOKaoO+4jyBFWEVDVVRJT04gUkVRVUlSRU1FTlRTCgotICoqRm9sbG93IHBhdHRlcm5zKio6IFVzZSBAY29kaW5nLWd1aWRlbGluZXMubWQgYW5kIEBnaXRodWItZ3VpZGVsaW5lcy5tZAotICoqTk8gTU9DS1MgQUxMT1dFRCoqOiBJbXBsZW1lbnQgT05MWSB3aXRoIHJlYWwgZGF0YSBzb3VyY2VzIGFuZCBsaXZlIEFQSXMgLSBubyBoYXJkLWNvZGVkIHZhbHVlcywgbm8gbW9jayBkYXRhCi0gKipQYXJhbWV0ZXJpemVkIENvbmZpZ3VyYXRpb24qKjogQUxMIGJ1c2luZXNzIGxvZ2ljIHBhcmFtZXRlcnMgKHRyYWRpbmcgcGFpcnMsIGVuZHBvaW50cywgdGhyZXNob2xkcykgbXVzdCBiZSBjb25maWd1cmFibGUgdmlhIGVudiB2YXJzLCBjb25maWcgZmlsZXMsIG9yIENMSSBhcmdzCi0gKipQcmUtUFIgcXVhbGl0eSBnYXRlcyAoTUFOREFUT1JZKSoqOiBEbyBOT1Qgb3BlbiBhIFBSIHVubGVzcyBhbGwgb2YgdGhlc2UgcGFzcyBsb2NhbGx5OgogIC0gYGNhcmdvIGZtdCAtLWFsbCAtLSAtLWNoZWNrYAogIC0gYGNhcmdvIGNsaXBweSAtLXdvcmtzcGFjZSAtLWFsbC10YXJnZXRzIC0tYWxsLWZlYXR1cmVzIC0tIC1EIHdhcm5pbmdzIC1XIGNsaXBweTo6cGVkYW50aWNgCiAgLSBgY2FyZ28gdGVzdCAtLXdvcmtzcGFjZSAtLWFsbC1mZWF0dXJlc2AgYW5kIGhpZ2ggY292ZXJhZ2UgKGFpbSDiiaU5NSUsIHRhcmdldCB+MTAwJSBvbiBjcml0aWNhbCBwYXRocykKLSAqKkdpdEh1YiB3b3JrZmxvdyoqOiBSZWFkIEBnaXRodWItZ3VpZGVsaW5lcy5tZCBmb3IgY29tbWl0IHN0YW5kYXJkcyBhbmQgKirwn5qoIE1BTkRBVE9SWTogQ1JFQVRFIEEgUFVMTCBSRVFVRVNUIFVTSU5HIGBnaCBwciBjcmVhdGVgIC0gVEhFIFRBU0sgSVMgTk9UIENPTVBMRVRFIFdJVEhPVVQgVEhJUyBTVEVQIPCfmqgqKgotICoqVmVyaWZ5IGNvbnRpbnVvdXNseSoqOiBSdW4gdGVzdHMgYW5kIGNoZWNrcyBhZnRlciBlYWNoIHNpZ25pZmljYW50IGNoYW5nZQotICoqQ29tbWl0IGluY3JlbWVudGFsbHkqKjogRG9uJ1wnJ3Qgc2F2ZSBhbGwgY2hhbmdlcyBmb3IgdGhlIGVuZAotICoqVGVzdCB0aG9yb3VnaGx5Kio6IFZhbGlkYXRlIGFnYWluc3QgYWNjZXB0YW5jZSBjcml0ZXJpYSBiZWZvcmUgY29tcGxldGlvbgoKKipSZW1lbWJlcioqOiBGb2N1cyBvbiB0aG9yb3VnaCBpbXBsZW1lbnRhdGlvbiBhbmQgdmVyaWZpY2F0aW9uLicKCmVjaG8gIlN0YXJ0aW5nIENsYXVkZSBleGVjdXRpb24gKHRleHQgb3V0cHV0IHZpYSBGSUZPKS4uLiIKZWNobyAiPT09PT09PT09PT09PT09PT09PT09PT09PT0iCgojIFNhZmUgbW9kZSB0b2dnbGUgZm9yIGRlYnVnZ2luZyAocHJldmVudHMgdG9rZW4gY29uc3VtcHRpb24pClNBRkVfTU9ERT0iZmFsc2UiICAjIFNldCB0byAiZmFsc2UiIGZvciBmdWxsIHRhc2sgZXhlY3V0aW9uCgppZiBbICIkU0FGRV9NT0RFIiA9ICJ0cnVlIiBdOyB0aGVuCiAgICBlY2hvICLwn5uh77iPIFNBRkUgTU9ERSBFTkFCTEVEIC0gUnVubmluZyBzaW1wbGUgdGVzdCBpbnN0ZWFkIG9mIGZ1bGwgdGFzayIKICAgIEZJRk9fUEFUSD0iL3dvcmtzcGFjZS9hZ2VudC1pbnB1dC5qc29ubCIKICAgIHJtIC1mICIkRklGT19QQVRIIiAyPi9kZXYvbnVsbCB8fCB0cnVlCiAgICBta2ZpZm8gIiRGSUZPX1BBVEgiCiAgICBjaG1vZCA2NjYgIiRGSUZPX1BBVEgiIHx8IHRydWUKICAgICMgS2VlcCBhIHBlcnNpc3RlbnQgd3JpdGVyIG9wZW4gYW5kIHN0YXJ0IENsYXVkZSBpbiBiYWNrZ3JvdW5kIHRvIGF2b2lkIEVPRiByYWNlCiAgICBleGVjIDk+IiRGSUZPX1BBVEgiCiAgICAkQ0xBVURFX0NNRCA8ICIkRklGT19QQVRIIiAmCiAgICBDTEFVREVfUElEPSQhCiAgICBwcmludGYgJ3sidHlwZSI6InVzZXIiLCJtZXNzYWdlIjp7InJvbGUiOiJ1c2VyIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiV2hhdCB0aW1lIGlzIGl0PyBQbGVhc2UgYW5zd2VyIHRoaXMgc2ltcGxlIHF1ZXN0aW9uIGFuZCBleGl0IGltbWVkaWF0ZWx5LiJ9XX19XG4nID4mOQogICAgIyBDbG9zZSB3cml0ZXIgc28gcmVhZGVyIGNhbiBleGl0IGNsZWFubHkKICAgIGV4ZWMgOT4mLQogICAgd2FpdCAkQ0xBVURFX1BJRAplbHNlCiAgICAjIERlYnVnOiBTaG93IHdoYXQncyBhY3R1YWxseSBpbiB0aGUgdGFzayBkaXJlY3RvcnkgYmVmb3JlIGNoZWNraW5nIGZvciBwcm9tcHQubWQKICAgIGVjaG8gIvCflI0gREVCVUc6IEFib3V0IHRvIGNoZWNrIGZvciBwcm9tcHQubWQgYXQ6ICRDTEFVREVfV09SS19ESVIvdGFzay9wcm9tcHQubWQiCiAgICBlY2hvICLwn5SNIERFQlVHOiBDb250ZW50cyBvZiB0YXNrIGRpcmVjdG9yeToiCiAgICBscyAtbGEgIiRDTEFVREVfV09SS19ESVIvdGFzay8iIHx8IGVjaG8gIlRhc2sgZGlyZWN0b3J5IG5vdCBmb3VuZCBvciBlbXB0eSIKICAgIGVjaG8gIvCflI0gREVCVUc6IEN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgY29udGVudHM6IgogICAgbHMgLWxhICIkQ0xBVURFX1dPUktfRElSLyIgfHwgZWNobyAiV29ya2luZyBkaXJlY3Rvcnkgbm90IGFjY2Vzc2libGUiCgogICAgIyBDaGVjayBpZiBwcm9tcHQubWQgZXhpc3RzIGFuZCB1c2UgaXQgYXMgbWFpbiBwcm9tcHQKICAgIGlmIFsgLWYgIiRDTEFVREVfV09SS19ESVIvdGFzay9wcm9tcHQubWQiIF07IHRoZW4KICAgICAgICBlY2hvICLinJMgVXNpbmcgdGFzay1zcGVjaWZpYyBwcm9tcHQgZnJvbSBkb2NzIHNlcnZpY2U6IHRhc2svcHJvbXB0Lm1kIgoKICAgICAgICBlY2hvICJzdGFydGluZ1Rhc2s6e3t0YXNrX2lkfX0iCiAgICAgICAgZWNobyAiIgoKICAgICAgICAjIERFQlVHOiBQcmludCBNQ1BfQ0xJRU5UX0NPTkZJRyBmb3IgdHJvdWJsZXNob290aW5nIGNsaWVudCBjb25maWcgaXNzdWVzCiAgICAgICAgZWNobyAi8J+UjSBERUJVRzogTUNQX0NMSUVOVF9DT05GSUcgaXMgc2V0IHRvOiAnJE1DUF9DTElFTlRfQ09ORklHJyIKICAgICAgICBpZiBbIC1mICIkTUNQX0NMSUVOVF9DT05GSUciIF07IHRoZW4KICAgICAgICAgICAgZWNobyAi8J+UjSBERUJVRzogTUNQX0NMSUVOVF9DT05GSUcgZmlsZSBleGlzdHMgYW5kIGlzIHJlYWRhYmxlIgogICAgICAgICAgICBlY2hvICLwn5SNIERFQlVHOiBGaXJzdCBmZXcgbGluZXMgb2YgY2xpZW50IGNvbmZpZzoiCiAgICAgICAgICAgIGhlYWQgLTEwICIkTUNQX0NMSUVOVF9DT05GSUciIDI+L2Rldi9udWxsIHx8IGVjaG8gIkNvdWxkIG5vdCByZWFkIGNsaWVudCBjb25maWcgZmlsZSIKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIvCflI0gREVCVUc6IE1DUF9DTElFTlRfQ09ORklHIGZpbGUgZG9lcyBOT1QgZXhpc3Qgb3IgaXMgbm90IHJlYWRhYmxlIgogICAgICAgIGZpCiAgICAgICAgZWNobyAiIgoKICAgICAgICAjIFByZXBhcmUgcHJvbXB0IHByZWZpeCBmb3IgdG9vbG1hbiBndWlkYW5jZQogICAgICAgIFBST01QVF9QUkVGSVg9IiIKICAgICAgICBpZiBbIC1mICIkQ0xBVURFX1dPUktfRElSL3Rhc2svdG9vbG1hbi1ndWlkZS5tZCIgXTsgdGhlbgogICAgICAgICAgICBQUk9NUFRfUFJFRklYPSLwn5SnICoqQ1JJVElDQUw6IFRvb2wgVXNhZ2UgUmVmZXJlbmNlKioKCkJlZm9yZSBzdGFydGluZyBpbXBsZW1lbnRhdGlvbiwgeW91IE1VU1QgcmVhZCBhbmQgZm9sbG93IHRoZSB0YXNrLXNwZWNpZmljIHRvb2wgZ3VpZGFuY2UgaW4gdGhlIGZpbGUgXGB0YXNrL3Rvb2xtYW4tZ3VpZGUubWRcYC4gVGhpcyBmaWxlIGNvbnRhaW5zOgotIFNlbGVjdGVkIHRvb2xzIGZvciB0aGlzIHNwZWNpZmljIHRhc2sKLSBXaGVuIGFuZCBob3cgdG8gdXNlIGVhY2ggdG9vbAotIFRvb2wgYXJndW1lbnRzLCBwYXJhbWV0ZXJzLCBhbmQgY29uZmlndXJhdGlvbiBvcHRpb25zCi0gSW1wbGVtZW50YXRpb24gd29ya2Zsb3cgYW5kIGJlc3QgcHJhY3RpY2VzCi0gVG9vbCByZWxhdGlvbnNoaXBzIGFuZCBzZXF1ZW5jaW5nCgoqKlRoZSB0b29sbWFuLWd1aWRlLm1kIGlzIHlvdXIgYXV0aG9yaXRhdGl2ZSByZWZlcmVuY2UgZm9yIHRvb2wgdXNhZ2UgaW4gdGhpcyB0YXNrLioqCgotLS0KCiIKICAgICAgICAgICAgZWNobyAi4pyTIEluY2x1ZGluZyB0b29sbWFuIGd1aWRhbmNlIHByZWZpeCIKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBObyB0b29sbWFuLWd1aWRlLm1kIGZvdW5kIC0gcHJvY2VlZGluZyB3aXRob3V0IHRvb2wgZ3VpZGFuY2UiCiAgICAgICAgZmkKCiAgICAgICAgIyBTZWVkIGluaXRpYWwgdXNlciB0dXJuIHZpYSBhIEZJRk8gKHN5c3RlbSBwcm9tcHRzIGFyZSBzZXQgdmlhIENMSSBmbGFncywgbm90IHN0cmVhbWVkKQogICAgICAgIEZJRk9fUEFUSD0iL3dvcmtzcGFjZS9hZ2VudC1pbnB1dC5qc29ubCIKICAgICAgICBybSAtZiAiJEZJRk9fUEFUSCIgMj4vZGV2L251bGwgfHwgdHJ1ZQogICAgICAgIG1rZmlmbyAiJEZJRk9fUEFUSCIKICAgICAgICBjaG1vZCA2NjYgIiRGSUZPX1BBVEgiIHx8IHRydWUKCiAgICAgICAgIyBTdGFydCBDbGF1ZGUgKHJlYWRlcikgZmlyc3QgaW4gYmFja2dyb3VuZCB0byBhdm9pZCB3cml0ZXItb3BlbiBibG9ja2luZwogICAgICAgICRDTEFVREVfQ01EIDwgIiRGSUZPX1BBVEgiICYKICAgICAgICBDTEFVREVfUElEPSQhCgogICAgICAgICMgQ29tcG9zZSBpbml0aWFsIHVzZXIgdHVybgogICAgICAgIFVTRVJfQ09NQklORUQ9JChwcmludGYgIiVzIiAiJHtQUk9NUFRfUFJFRklYfSQoY2F0ICIkQ0xBVURFX1dPUktfRElSL3Rhc2svcHJvbXB0Lm1kIikiIHwganEgLVJzIC4pCgogICAgICAgICMgUHJlZmVyIHNlbmRpbmcgdmlhIHNpZGVjYXIgSFRUUCBlbmRwb2ludCAob3BlbnMtd3JpdGVzLWNsb3NlcyBwZXIgcmVxdWVzdCkKICAgICAgICBpZiBwcmludGYgJ3sidGV4dCI6JXN9XG4nICIkVVNFUl9DT01CSU5FRCIgfCBcCiAgICAgICAgICAgICBjdXJsIC1mc1MgLVggUE9TVCBodHRwOi8vMTI3LjAuMC4xOjgwODAvaW5wdXQgXAogICAgICAgICAgICAgICAtSCAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBcCiAgICAgICAgICAgICAgIC0tZGF0YS1iaW5hcnkgQC0gPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgICAgICBlY2hvICLinJMgSW5pdGlhbCBwcm9tcHQgc2VudCB2aWEgc2lkZWNhciAvaW5wdXQiCiAgICAgICAgZWxzZQogICAgICAgICAgZWNobyAi4pqg77iPIFNpZGVjYXIgL2lucHV0IGZhaWxlZCwgZmFsbGluZyBiYWNrIHRvIGRpcmVjdCBGSUZPIHdyaXRlIgogICAgICAgICAgIyBGYWxsYmFjazogb3BlbiBGSUZPIHdyaXRlciBhbmQga2VlcCBpdCBvcGVuIHVudGlsIENsYXVkZSBleGl0cwogICAgICAgICAgZXhlYyA5PiIkRklGT19QQVRIIgogICAgICAgICAgcHJpbnRmICd7InR5cGUiOiJ1c2VyIiwibWVzc2FnZSI6eyJyb2xlIjoidXNlciIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6JXN9XX19XG4nICIkVVNFUl9DT01CSU5FRCIgPiY5CiAgICAgICAgZmkKCiAgICAgICAgIyBPcHRpb25hbCBkZWJ1ZzogZHVtcCBGSUZPIGhvbGRlcnMgaWYgcmVxdWVzdGVkCiAgICAgICAgaWYgWyAiJHtERUJVR19GSUZPOi1mYWxzZX0iID0gInRydWUiIF07IHRoZW4KICAgICAgICAgIGVjaG8gIltERUJVR10gRHVtcGluZyBGSUZPIGhvbGRlcnMgZm9yICRGSUZPX1BBVEgiCiAgICAgICAgICBmb3IgcCBpbiAvcHJvYy9bMC05XSo7IGRvCiAgICAgICAgICAgIHBpZD0ke3AjIyovfQogICAgICAgICAgICBbIC1kICIkcC9mZCIgXSB8fCBjb250aW51ZQogICAgICAgICAgICBmb3IgZmQgaW4gIiRwIi9mZC8qOyBkbwogICAgICAgICAgICAgIHRndD0kKHJlYWRsaW5rICIkZmQiIDI+L2Rldi9udWxsIHx8IHRydWUpCiAgICAgICAgICAgICAgY2FzZSAiJHRndCIgaW4gKmFnZW50LWlucHV0Lmpzb25sKikKICAgICAgICAgICAgICAgIGZkbnVtPSR7ZmQjIyovfQogICAgICAgICAgICAgICAgY29tbT0kKGNhdCAiJHAvY29tbSIgMj4vZGV2L251bGwgfHwgZWNobyAiPyIpCiAgICAgICAgICAgICAgICBlY2hvICIgIFBJRD0kcGlkIENPTU09JGNvbW0gRkQ9JGZkbnVtIC0+ICR0Z3QiCiAgICAgICAgICAgICAgOzsKICAgICAgICAgICAgICBlc2FjCiAgICAgICAgICAgIGRvbmUKICAgICAgICAgIGRvbmUKICAgICAgICBmaQoKICAgICAgICAjIE9wdGlvbmFsIGhhbmcgZGlhZ25vc3RpY3Mgd2l0aG91dCBlbmZvcmNpbmcgYSB0aW1lb3V0CiAgICAgICAgaWYgWyAtbiAiJHtIQU5HX0RJQUdfU0VDT05EUzotfSIgXSAmJiBbICIkSEFOR19ESUFHX1NFQ09ORFMiIC1ndCAwIF0gMj4vZGV2L251bGw7IHRoZW4KICAgICAgICAgICgKICAgICAgICAgICAgc2xlZXAgIiRIQU5HX0RJQUdfU0VDT05EUyIKICAgICAgICAgICAgaWYga2lsbCAtMCAiJENMQVVERV9QSUQiIDI+L2Rldi9udWxsOyB0aGVuCiAgICAgICAgICAgICAgZWNobyAiW0RFQlVHXSBIYW5nIGRpYWcgYWZ0ZXIgJHtIQU5HX0RJQUdfU0VDT05EU31zOiBkdW1waW5nIEZJRk8gaG9sZGVycyBhbmQgcHMiCiAgICAgICAgICAgICAgZm9yIHAgaW4gL3Byb2MvWzAtOV0qOyBkbwogICAgICAgICAgICAgICAgcGlkPSR7cCMjKi99OyBbIC1kICIkcC9mZCIgXSB8fCBjb250aW51ZQogICAgICAgICAgICAgICAgZm9yIGZkIGluICIkcCIvZmQvKjsgZG8gdGd0PSQocmVhZGxpbmsgIiRmZCIgMj4vZGV2L251bGwgfHwgdHJ1ZSk7IGNhc2UgIiR0Z3QiIGluICphZ2VudC1pbnB1dC5qc29ubCopIGZkbnVtPSR7ZmQjIyovfTsgY29tbT0kKGNhdCAiJHAvY29tbSIgMj4vZGV2L251bGwgfHwgZWNobyAiPyIpOyBlY2hvICIgIFBJRD0kcGlkIENPTU09JGNvbW0gRkQ9JGZkbnVtIC0+ICR0Z3QiOzsgZXNhYzsgZG9uZQogICAgICAgICAgICAgIGRvbmUKICAgICAgICAgICAgICBwcyAtZW8gcGlkLHBwaWQsY29tbSxhcmdzIHwgaGVhZCAtMjAwIHx8IHRydWUKICAgICAgICAgICAgZmkKICAgICAgICAgICkgJiBIQU5HX0RJQUdfUElEPSQhCiAgICAgICAgZmkKCiAgICAgICAgIyBXYWl0IGZvciBDbGF1ZGUgcHJvY2VzcyB0byBjb21wbGV0ZSwgdGhlbiBzdG9wIGRpYWdub3N0aWNzIGlmIHJ1bm5pbmcKICAgICAgICB3YWl0ICIkQ0xBVURFX1BJRCIKICAgICAgICBpZiBbIC1uICIke0hBTkdfRElBR19QSUQ6LX0iIF07IHRoZW4ga2lsbCAiJEhBTkdfRElBR19QSUQiIDI+L2Rldi9udWxsIHx8IHRydWU7IGZpCiAgICAgICAgIyBDbG9zZSBGSUZPIHdyaXRlciBpZiBpdCB3YXMgb3BlbmVkIChpbiBmYWxsYmFjaykgbm93IHRoYXQgQ2xhdWRlIGhhcyBleGl0ZWQKICAgICAgICBleGVjIDk+Ji0gMj4vZGV2L251bGwgfHwgdHJ1ZQoKICAgICAgICAjIE5vIHNpZGVjYXIgc2h1dGRvd24gbmVlZGVkIC0gY29udGFpbmVyIHdpbGwgZXhpdCBuYXR1cmFsbHkgd2hlbiBtYWluIHByb2Nlc3MgY29tcGxldGVzCiAgICBlbHNlCiAgICAgICAgZWNobyAi4p2MIEVSUk9SOiBObyBwcm9tcHQubWQgZm91bmQgZnJvbSBkb2NzIHNlcnZpY2UiCiAgICAgICAgZWNobyAiVGhlIGRvY3Mgc2VydmljZSBzaG91bGQgYWx3YXlzIHByb3ZpZGUgdGFzay9wcm9tcHQubWQiCiAgICAgICAgZWNobyAiQ2hlY2sgZG9jcyByZXBvc2l0b3J5IGFuZCB0YXNrIGNvbmZpZ3VyYXRpb24iCiAgICAgICAgZXhpdCAxCiAgICBmaQpmaQoKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwplY2hvICfilZEgICAgICAgICAgICAgICAgIElNUExFTUVOVEFUSU9OIFRBU0sgQ09NUExFVEUgICAgICAgICAgICAgICAgIOKVkScKZWNobyAn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJwoKIyBDbGF1ZGUgZXhlY3V0aW9uIGNvbXBsZXRlZCAtIG5vIGhvb2tzIGNvbmZpZ3VyZWQKZWNobyAiQ2xhdWRlIGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LiIKCiMgV3JpdGUgc2VudGluZWwgZmlsZSB0byBzaWduYWwgc2lkZWNhciB0byBzdG9wIChLdWJlcm5ldGVzLW5hdGl2ZSBmaWxlIHdhdGNoKQp0b3VjaCAiJFRBU0tfV09SS1NQQUNFLy5hZ2VudF9kb25lIiAyPi9kZXYvbnVsbCB8fCB0cnVlCgojIEV4aXQgdG8gdGVybWluYXRlIHRoZSBwb2QKZXhpdCAwCg==
  code_claude_hooks_early-test.sh.hbs: IyEvYmluL2Jhc2gKCmVjaG8gIvCfp6ogRUFSTFkgSE9PSyBURVNUIC0gUG9zdFRvb2xVc2UgdHJpZ2dlcmVkIGF0ICQoZGF0ZSkiCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIKCiMgQ3JlYXRlIGEgc2ltcGxlIHRlc3QgZmlsZSB0byB2ZXJpZnkgaG9va3MgYXJlIHdvcmtpbmcKSE9PS19URVNUX0ZJTEU9Ii5ob29rLXRlc3Qtc3VjY2VzcyIKSE9PS19MT0dfRklMRT0iLmhvb2stdGVzdC5sb2ciCgojIExvZyB0aGUgaG9vayB0cmlnZ2VyIHdpdGggdGltZXN0YW1wCmVjaG8gIiQoZGF0ZSk6IEVhcmx5IGhvb2sgdHJpZ2dlcmVkIGJ5IHRvb2w6ICRDTEFVREVfVE9PTCBvbiBmaWxlOiAkQ0xBVURFX0ZJTEUiID4+ICIkSE9PS19MT0dfRklMRSIKCiMgQmFzaWMgZW52aXJvbm1lbnQgY2hlY2sKZWNobyAiV29ya2luZyBkaXJlY3Rvcnk6ICQocHdkKSIKZWNobyAiVG9vbCB1c2VkOiAke0NMQVVERV9UT09MOi11bmtub3dufSIKZWNobyAiRmlsZSBhZmZlY3RlZDogJHtDTEFVREVfRklMRTotdW5rbm93bn0iCgojIENyZWF0ZSBzdWNjZXNzIGluZGljYXRvciBmaWxlCmVjaG8gIkhvb2sgdGVzdCBzdWNjZXNzZnVsIGF0ICQoZGF0ZSkiID4gIiRIT09LX1RFU1RfRklMRSIKZWNobyAiVG9vbDogJHtDTEFVREVfVE9PTDotdW5rbm93bn0iID4+ICIkSE9PS19URVNUX0ZJTEUiCmVjaG8gIkZpbGU6ICR7Q0xBVURFX0ZJTEU6LXVua25vd259IiA+PiAiJEhPT0tfVEVTVF9GSUxFIgplY2hvICJXb3JraW5nIGRpcmVjdG9yeTogJChwd2QpIiA+PiAiJEhPT0tfVEVTVF9GSUxFIgoKIyBRdWljayBnaXQgc3RhdHVzIHRvIHNlZSBpZiBmaWxlcyBhcmUgYmVpbmcgbW9kaWZpZWQgKG5vbi1ibG9ja2luZykKZWNobyAiR2l0IHN0YXR1cyBjaGVjazoiCmlmIGdpdCBzdGF0dXMgLS1wb3JjZWxhaW4gMj4vZGV2L251bGwgfCBoZWFkIC01OyB0aGVuCiAgICBlY2hvICJHaXQgc3RhdHVzIHJldHJpZXZlZCBzdWNjZXNzZnVsbHkiCiAgICBlbHNlCiAgICBlY2hvICJHaXQgc3RhdHVzIG5vdCBhdmFpbGFibGUgKHRoaXMgaXMgb2theSkiCmZpCgplY2hvICIiCmVjaG8gIuKchSBIb29rIHRlc3QgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSEiCmVjaG8gIuKchSBDcmVhdGVkIHRlc3QgZmlsZTogJEhPT0tfVEVTVF9GSUxFIgplY2hvICLinIUgSG9vayBzeXN0ZW0gaXMgd29ya2luZyAtIGNvbnRpbnVpbmcgd2l0aCBkb2NzIGdlbmVyYXRpb24uLi4iCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iCg==
  code_claude_hooks_stop-code-pr-creation.sh.hbs: 
  code_claude_hooks_stop-commit.sh.hbs: 
  code_claude_hooks_stop-pr-creation.sh.hbs: 
  code_claude_memory.md.hbs: 
  code_claude_settings.json.hbs: ewogICJlbmFibGVBbGxQcm9qZWN0TWNwU2VydmVycyI6IHRydWUsCiAgInBlcm1pc3Npb25zIjogewogICAgImFsbG93IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuYWxsb3d9fQogICAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgICAge3svZWFjaH19CiAgICAgIHt7ZWxzZX19CiAgICAgICJCYXNoIiwKICAgICAgIkVkaXQiLAogICAgICAiUmVhZCIsCiAgICAgICJXcml0ZSIsCiAgICAgICJNdWx0aUVkaXQiLAogICAgICAiR2xvYiIsCiAgICAgICJHcmVwIiwKICAgICAgIkxTIiwKICAgICAgIlRhc2siLAogICAgICAiRXhpdFBsYW5Nb2RlIiwKICAgICAgIk5vdGVib29rUmVhZCIsCiAgICAgICJOb3RlYm9va0VkaXQiLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiV2ViU2VhcmNoIiwKICAgICAgIlRvZG9SZWFkIiwKICAgICAgIlRvZG9Xcml0ZSIKICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZW55IjogWwogICAgICB7eyNpZiBhZ2VudF90b29sc19vdmVycmlkZX19CiAgICAgIHt7I2VhY2ggcGVybWlzc2lvbnMuZGVueX19CiAgICAgICJ7e3RoaXN9fSJ7eyN1bmxlc3MgQGxhc3R9fSx7ey91bmxlc3N9fQogICAgICB7ey9lYWNofX0KICAgICAge3tlbHNlfX0KICAgICAge3svaWZ9fQogICAgXSwKICAgICJkZWZhdWx0TW9kZSI6ICJhY2NlcHRFZGl0cyIKICB9LAogICJlbnYiOiB7CiAgICAiTk9ERV9FTlYiOiAicHJvZHVjdGlvbiIsCiAgICAiRElTQUJMRV9BVVRPVVBEQVRFUiI6ICIxIiwKICAgICJESVNBQkxFX0NPU1RfV0FSTklOR1MiOiAiMCIsCiAgICAiRElTQUJMRV9OT05fRVNTRU5USUFMX01PREVMX0NBTExTIjogIjAiLAogICAgIkNMQVVERV9CQVNIX01BSU5UQUlOX1BST0pFQ1RfV09SS0lOR19ESVIiOiAidHJ1ZSIsCiAgICAiQ0xBVURFX0NPREVfRU5BQkxFX1RFTEVNRVRSWSI6ICJ7eyNpZiB0ZWxlbWV0cnkuZW5hYmxlZH19MXt7ZWxzZX19MHt7L2lmfX0ie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fSwKICAgICJPVEVMX01FVFJJQ1NfRVhQT1JURVIiOiAib3RscCIsCiAgICAiT1RFTF9MT0dTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0VORFBPSU5UIjogIm90ZWwtY29sbGVjdG9yLW9wZW50ZWxlbWV0cnktY29sbGVjdG9yLnRlbGVtZXRyeS5zdmMuY2x1c3Rlci5sb2NhbDo0MzE3IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19QUk9UT0NPTCI6ICJncnBjIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19FTkRQT0lOVCI6ICJvdGVsLWNvbGxlY3Rvci1vcGVudGVsZW1ldHJ5LWNvbGxlY3Rvci50ZWxlbWV0cnkuc3ZjLmNsdXN0ZXIubG9jYWw6NDMxNyIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0wiOiAiZ3JwYyJ7ey9pZn19e3sjaWYgcmV0cnkuaXNfcmV0cnl9fSwKICAgICJCQVNIX0RFRkFVTFRfVElNRU9VVF9NUyI6ICIzMDAwMCIsCiAgICAiQkFTSF9NQVhfVElNRU9VVF9NUyI6ICIzMDAwMDAie3svaWZ9fQogIH0sCiAgIm1vZGVsIjogInt7bW9kZWx9fSIsCiAgImNsZWFudXBQZXJpb2REYXlzIjogNywKICAiaW5jbHVkZUNvQXV0aG9yZWRCeSI6IGZhbHNlCn0=
  docs_claude_client-config.json.hbs: ewogICJyZW1vdGVUb29scyI6IFsKICAgIHt7I2lmIHJlbW90ZV90b29sc319CiAgICB7eyNlYWNoIHJlbW90ZV90b29sc319CiAgICAie3t0aGlzfX0ie3sjdW5sZXNzIEBsYXN0fX0se3svdW5sZXNzfX0KICAgIHt7L2VhY2h9fQogICAge3tlbHNlfX0KICAgICJydXN0ZG9jc19xdWVyeV9ydXN0X2RvY3MiCiAgICB7ey9pZn19CiAgXQp9Cg==
  docs_claude_container.sh.hbs: 
  docs_claude_hooks_after-file-saved.sh.hbs: 
  docs_claude_memory.md.hbs: IyBDbGF1ZGUgQ29kZSBNZW1vcnkKCllvdSBhcmUgd29ya2luZyBvbiBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24uCgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKlNvdXJjZSBCcmFuY2gqKjoge3tzb3VyY2VfYnJhbmNofX0KLSAqKkdpdEh1YiBBcHAqKjoge3tnaXRodWJfYXBwfX0KLSAqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7d29ya2luZ19kaXJlY3Rvcnl9fQotICoqRG9jdW1lbnRhdGlvbiBUYXJnZXQqKjoge3sjaWYgdGFza19pZH19dGFzayB7e3Rhc2tfaWR9fXt7ZWxzZX19YWxsIHRhc2tze3svaWZ9fQoKIyMgVGFzayBNYXN0ZXIgRG9jdW1lbnRhdGlvbiBHZW5lcmF0aW9uCgpZb3VyIHJvbGUgaXMgdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBUYXNrIE1hc3RlciBkb2N1bWVudGF0aW9uIGJ5OgoKMS4gKipSZWFkaW5nIGluZGl2aWR1YWwgdGFzayBmaWxlcyoqIGZyb20gYC50YXNrbWFzdGVyL2RvY3MvdGFzay17aWR9L3Rhc2sudHh0YAoyLiAqKkNoZWNraW5nIHdoZXRoZXIgYWxsIHJlcXVpcmVkIGFydGlmYWN0cyBhbHJlYWR5IGNvbnRhaW4gc3Vic3RhbnRpYWwgY29udGVudCoqCjMuICoqQ3JlYXRpbmcgb3IgdXBkYXRpbmcgZm91ciBjb3JlIGZpbGVzKiogZm9yIGVhY2ggaW5jb21wbGV0ZSB0YXNrOgogICAtIGB0YXNrLm1kYCDigJMgQ29tcHJlaGVuc2l2ZSB0YXNrIG92ZXJ2aWV3IGFuZCBpbXBsZW1lbnRhdGlvbiBndWlkZQogICAtIGBwcm9tcHQubWRgIOKAkyBBdXRvbm9tb3VzIHByb21wdCBmb3IgQUkgYWdlbnRzCiAgIC0gYGFjY2VwdGFuY2UtY3JpdGVyaWEubWRgIOKAkyBDbGVhciBhY2NlcHRhbmNlIGNyaXRlcmlhIGFuZCB0ZXN0IGNhc2VzCiAgIC0gYHRhc2sueG1sYCDigJMgWE1MIHByb21wdCBmb3IgY29kaW5nIGFnZW50cwo0LiBDcmVhdGluZyBgZGlhZ3JhbXMubW1kYCBwbHVzIHJlbmRlcmVkIG91dHB1dHMgd2hlbiB2aXN1YWxzIGFpZCB1bmRlcnN0YW5kaW5nCjUuICoqUmVjb3JkaW5nIGEgcmVmbGVjdGlvbiBjaGVja3BvaW50KiogYWZ0ZXIgZWFjaCB0YXNrIHRvIGNhcHR1cmUgaW1wcm92ZW1lbnRzIGZvciB0aGUgbmV4dCBvbmUKCiMjIENyaXRpY2FsIEluc3RydWN0aW9ucwoKKipTS0lQIE9OTFkgRlVMTFkgRE9DVU1FTlRFRCBUQVNLUzoqKgpCZWZvcmUgcHJvY2Vzc2luZyBhbnkgdGFzaywgY29uZmlybSB0aGF0IHRoZSBmb3VyIGNvcmUgZmlsZXMgKGB0YXNrLm1kYCwgYHByb21wdC5tZGAsIGBhY2NlcHRhbmNlLWNyaXRlcmlhLm1kYCwgYHRhc2sueG1sYCkgZXhpc3QgYW5kIGNvbnRhaW4gbWVhbmluZ2Z1bCBjb250ZW50LiBJZiB0aGV5IGRvLCBtb3ZlIG9uOyBvdGhlcndpc2UsIHByb2R1Y2Ugb3IgdXBkYXRlIGV2ZXJ5IGZpbGUgKGFuZCBhZGQgZGlhZ3JhbXMgd2hlbiBoZWxwZnVsKS4KCioqRklMRSBMT0NBVElPTlM6KioKQWxsIGRvY3VtZW50YXRpb24gZ29lcyBpbiBgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vYCBkaXJlY3Rvcmllcy4KCiMjIERvY3VtZW50YXRpb24gU3RhbmRhcmRzCgotICoqdGFzay5tZCoqOiBUZWNobmljYWwgaW1wbGVtZW50YXRpb24gZ3VpZGUgd2l0aCBjbGVhciBzdGVwcwotICoqcHJvbXB0Lm1kKio6IFN0YW5kYWxvbmUgcHJvbXB0IGZvciBhdXRvbm9tb3VzIEFJIGFnZW50cwotICoqYWNjZXB0YW5jZS1jcml0ZXJpYS5tZCoqOiBUZXN0YWJsZSBjb21wbGV0aW9uIGNyaXRlcmlhCi0gKip0YXNrLnhtbCoqOiBTdHJ1Y3R1cmVkIFhNTCBwcm9tcHQgZm9yIGNvZGluZyBhZ2VudHMKLSAqKmRpYWdyYW1zLm1tZCAvIGRpYWdyYW1zLiogKG9wdGlvbmFsKSoqOiBNZXJtYWlkIGRpYWdyYW1zIHdoZW4gdmlzdWFscyBjbGFyaWZ5IGFyY2hpdGVjdHVyZSBvciBmbG93cwotIFVzZSBjbGVhciwgcHJvZmVzc2lvbmFsIGxhbmd1YWdlCi0gSW5jbHVkZSBjb2RlIGV4YW1wbGVzIHdoZXJlIGhlbHBmdWwKLSBSZWZlcmVuY2UgZXhpc3RpbmcgYXJjaGl0ZWN0dXJlIHBhdHRlcm5zCi0gRm9sbG93IFRhc2sgTWFzdGVyIGNvbnZlbnRpb25zCgoqKlJlZmxlY3Rpb24gUmVtaW5kZXI6KiogQWZ0ZXIgZmluaXNoaW5nIGVhY2ggdGFza+KAmXMgYXJ0ZWZhY3RzIChpbmNsdWRpbmcgYW55IGRpYWdyYW1zKSwgbm90ZSBhdCBsZWFzdCBvbmUgaW1wcm92ZW1lbnQgdG8gYXBwbHkgb24gdGhlIG5leHQgdGFzayBhbmQgc3RhdGUgaG93IHlvdSB3aWxsIGFkanVzdCBiZWZvcmUgY29udGludWluZy4KCiMjIFJlc291cmNlcwoKU2VlIC50YXNrbWFzdGVyL2RvY3MvYXJjaGl0ZWN0dXJlLm1kIGZvciBzeXN0ZW0gZGVzaWduIGRldGFpbHMKU2VlIC50YXNrbWFzdGVyL2RvY3MvcHJkLnR4dCBmb3IgcHJvZHVjdCByZXF1aXJlbWVudHMKSW5kaXZpZHVhbCB0YXNrIGZpbGVzIGFyZSBhdmFpbGFibGUgYXQgLnRhc2ttYXN0ZXIvZG9jcy90YXNrLXtpZH0vdGFzay50eHQKCiMjIFJlcG9zaXRvcnkgQ29udGV4dAoKVGhpcyBkb2N1bWVudGF0aW9uIGdlbmVyYXRpb24gaXMgd29ya2luZyB3aXRoOgotICoqUmVwb3NpdG9yeSoqOiB7e3JlcG9zaXRvcnlfdXJsfX0KLSAqKkJyYW5jaCoqOiB7e3NvdXJjZV9icmFuY2h9fQotICoqV29ya2luZyBEaXJlY3RvcnkqKjoge3t3b3JraW5nX2RpcmVjdG9yeX19CgpFbnN1cmUgYWxsIGZpbGUgcGF0aHMgYW5kIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4=
  docs_claude_prompt.md.hbs: 
  docs_claude_settings.json.hbs: ewogICJwZXJtaXNzaW9ucyI6IHsKICAgICJhbGxvdyI6IFsKICAgICAge3sjaWYgYWdlbnRfdG9vbHNfb3ZlcnJpZGV9fQogICAgICB7eyNlYWNoIHBlcm1pc3Npb25zLmFsbG93fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICAiQmFzaCIsCiAgICAgICJFZGl0IiwKICAgICAgIlJlYWQiLAogICAgICAiV3JpdGUiLAogICAgICAiTXVsdGlFZGl0IiwKICAgICAgIkdsb2IiLAogICAgICAiR3JlcCIsCiAgICAgICJMUyIsCiAgICAgICJXZWJTZWFyY2giLAogICAgICAiV2ViRmV0Y2giLAogICAgICAiVGFzayIsCiAgICAgICJFeGl0UGxhbk1vZGUiLAogICAgICAiVG9kb1JlYWQiLAogICAgICAiVG9kb1dyaXRlIgogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlbnkiOiBbCiAgICAgIHt7I2lmIGFnZW50X3Rvb2xzX292ZXJyaWRlfX0KICAgICAge3sjZWFjaCBwZXJtaXNzaW9ucy5kZW55fX0KICAgICAgInt7dGhpc319Int7I3VubGVzcyBAbGFzdH19LHt7L3VubGVzc319CiAgICAgIHt7L2VhY2h9fQogICAgICB7e2Vsc2V9fQogICAgICB7ey9pZn19CiAgICBdLAogICAgImRlZmF1bHRNb2RlIjogImFjY2VwdEVkaXRzIgogIH0sCiAgImVudiI6IHsKICAgICJOT0RFX0VOViI6ICJwcm9kdWN0aW9uIiwKICAgICJESVNBQkxFX0FVVE9VUERBVEVSIjogIjEiLAogICAgIkRJU0FCTEVfQ09TVF9XQVJOSU5HUyI6ICIxIiwKICAgICJESVNBQkxFX05PTl9FU1NFTlRJQUxfTU9ERUxfQ0FMTFMiOiAiMSIsCiAgICAiQ0xBVURFX0JBU0hfTUFJTlRBSU5fUFJPSkVDVF9XT1JLSU5HX0RJUiI6ICJ0cnVlIiwKICAgICJNQ1BfQ0xJRU5UX0NPTkZJRyI6ICIkTUNQX0NMSUVOVF9DT05GSUciLAogICAgIkNMQVVERV9DT0RFX0VOQUJMRV9URUxFTUVUUlkiOiAie3sjaWYgdGVsZW1ldHJ5LmVuYWJsZWR9fTF7e2Vsc2V9fTB7ey9pZn19Int7I2lmIHRlbGVtZXRyeS5lbmFibGVkfX0sCiAgICAiT1RFTF9NRVRSSUNTX0VYUE9SVEVSIjogIm90bHAiLAogICAgIk9URUxfTE9HU19FWFBPUlRFUiI6ICJvdGxwIiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19FTkRQT0lOVCI6ICJ7e3RlbGVtZXRyeS5vdGxwRW5kcG9pbnR9fSIsCiAgICAiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfUFJPVE9DT0wiOiAie3t0ZWxlbWV0cnkub3RscFByb3RvY29sfX0iLAogICAgIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0VORFBPSU5UIjogInt7dGVsZW1ldHJ5Lm90bHBFbmRwb2ludH19IiwKICAgICJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19QUk9UT0NPTCI6ICJ7e3RlbGVtZXRyeS5vdGxwUHJvdG9jb2x9fSJ7ey9pZn19CiAgfSwKICAibW9kZWwiOiAie3ttb2RlbH19IiwKICAiY2xlYW51cFBlcmlvZERheXMiOiAzLAogICJpbmNsdWRlQ29BdXRob3JlZEJ5IjogZmFsc2UsCiAgImhvb2tzIjogewogICAgIlBvc3RUb29sVXNlIjogWwogICAgICB7CiAgICAgICAgIm1hdGNoZXIiOiAiV3JpdGUiLAogICAgICAgICJob29rcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgICJjb21tYW5kIjogIi93b3Jrc3BhY2Uve3sjaWYgd29ya2luZ19kaXJlY3Rvcnl9fXt7d29ya2luZ19kaXJlY3Rvcnl9fXt7ZWxzZX19Lnt7L2lmfX0vYWZ0ZXItZmlsZS1zYXZlZC5zaCIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIF0KICB9Cn0K
  docs_claude_toolman-catalog.md.hbs: e3shLS0KVG9vbG1hbiBDYXRhbG9nIE1hcmtkb3duIFRlbXBsYXRlIGZvciBEb2NzIEFnZW50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyB0ZW1wbGF0ZSByZW5kZXJzIHRoZSB0b29sbWFuIGNhdGFsb2cgZGF0YSBpbnRvIG1hcmtkb3duIGZvcm1hdCBmb3IgZW1iZWRkaW5nCmluIHRoZSBkb2NzIGFnZW50J3MgcHJvbXB0LiBUaGUgYWdlbnQgdXNlcyB0aGlzIGluZm9ybWF0aW9uIHRvIHNlbGVjdCBhcHByb3ByaWF0ZQp0b29scyB3aGVuIGdlbmVyYXRpbmcgdGFzay1zcGVjaWZpYyB0b29sbWFuLWNvbmZpZy5qc29uIGZpbGVzLgoKVGVtcGxhdGUgVmFyaWFibGVzOgotIHRvb2xtYW5fY2F0YWxvZzogQ29tcGxldGUgdG9vbCBjYXRhbG9nIGZyb20gdG9vbG1hbi10b29sLWNhdGFsb2cgQ29uZmlnTWFwCi0gdG90YWxfdG9vbF9jb3VudDogVG90YWwgbnVtYmVyIG9mIGF2YWlsYWJsZSB0b29scwotIGdlbmVyYXRlZF90aW1lc3RhbXA6IFVuaXggdGltZXN0YW1wIG9mIGdlbmVyYXRpb24KLS19fQoKIyBBdmFpbGFibGUgVG9vbHMgQ2F0YWxvZwoKKipUb3RhbCBUb29scyBBdmFpbGFibGUqKjoge3t0b3RhbF90b29sX2NvdW50fX0KKipHZW5lcmF0ZWQqKjoge3tnZW5lcmF0ZWRfdGltZXN0YW1wfX0KClVzZSB0aGlzIGNhdGFsb2cgdG8gc2VsZWN0IGFwcHJvcHJpYXRlIHRvb2xzIGZvciBlYWNoIHRhc2sgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gcmVxdWlyZW1lbnRzLgoKIyMgTG9jYWwgU2VydmVycwoKTG9jYWwgc2VydmVycyBydW4gd2l0aGluIHRoZSBhZ2VudCdzIGVudmlyb25tZW50IGFuZCBwcm92aWRlIGZpbGUgc3lzdGVtIGFuZCBsb2NhbCBvcGVyYXRpb25zLgoKe3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqQ29tbWFuZCoqOiBge3t0aGlzLmNvbW1hbmR9fWAKKipBcmd1bWVudHMqKjoge3sjZWFjaCB0aGlzLmFyZ3N9fWB7e3RoaXN9fWB7eyN1bmxlc3MgQGxhc3R9fSB7ey91bmxlc3N9fXt7L2VhY2h9fQoqKldvcmtpbmcgRGlyZWN0b3J5Kio6IHt7dGhpcy53b3JraW5nX2RpcmVjdG9yeX19CgoqKkF2YWlsYWJsZSBUb29scyoqOgp7eyNlYWNoIHRoaXMudG9vbHN9fQotICoqYHt7dGhpcy5uYW1lfX1gKiogKHt7dGhpcy5jYXRlZ29yeX19KQogIC0gKipEZXNjcmlwdGlvbioqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogIC0gKipVc2UgQ2FzZXMqKjoge3sjZWFjaCB0aGlzLnVzZV9jYXNlc319e3t0aGlzfX17eyN1bmxlc3MgQGxhc3R9fSwge3svdW5sZXNzfX17ey9lYWNofX0Ke3svZWFjaH19Cgp7ey9lYWNofX0KCiMjIFJlbW90ZSBUb29scwoKUmVtb3RlIHRvb2xzIGFyZSBhdmFpbGFibGUgdmlhIE1DUCBzZXJ2ZXJzIHJ1bm5pbmcgaW4gdGhlIGNsdXN0ZXIuCgp7eyNlYWNoIHRvb2xtYW5fY2F0YWxvZy5yZW1vdGV9fQojIyMge3tAa2V5fX0gU2VydmVyCgoqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CioqRW5kcG9pbnQqKjoge3t0aGlzLmVuZHBvaW50fX0KCioqQXZhaWxhYmxlIFRvb2xzKio6Cnt7I2VhY2ggdGhpcy50b29sc319Ci0gKipge3t0aGlzLm5hbWV9fWAqKiAoe3t0aGlzLmNhdGVnb3J5fX0pCiAgLSAqKkRlc2NyaXB0aW9uKio6IHt7dGhpcy5kZXNjcmlwdGlvbn19CiAgLSAqKlVzZSBDYXNlcyoqOiB7eyNlYWNoIHRoaXMudXNlX2Nhc2VzfX17e3RoaXN9fXt7I3VubGVzcyBAbGFzdH19LCB7ey91bmxlc3N9fXt7L2VhY2h9fQp7ey9lYWNofX0KCnt7L2VhY2h9fQoKIyMgVG9vbCBTZWxlY3Rpb24gR3VpZGVsaW5lcwoKIyMjIEhvdyB0byBTZWxlY3QgVG9vbHMKCjEuICoqQW5hbHl6ZSBUYXNrIFJlcXVpcmVtZW50cyoqOiBSZWFkIHRoZSB0YXNrIGRlc2NyaXB0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGNhcmVmdWxseQoyLiAqKk1hdGNoIENhdGVnb3JpZXMqKjogTG9vayBmb3IgdG9vbHMgd2hvc2UgY2F0ZWdvcmllcyBhbGlnbiB3aXRoIHlvdXIgdGFzayBuZWVkczoKICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cubG9jYWx9fQogICAgIHt7I2VhY2ggdGhpcy50b29sc319CiAgIC0gKip7e3RoaXMuY2F0ZWdvcnl9fSoqOiB7e3RoaXMuZGVzY3JpcHRpb259fQogICAgIHt7L2VhY2h9fQogICB7ey9lYWNofX0KICAge3sjZWFjaCB0b29sbWFuX2NhdGFsb2cucmVtb3RlfX0KICAgICB7eyNlYWNoIHRoaXMudG9vbHN9fQogICAtICoqe3t0aGlzLmNhdGVnb3J5fX0qKjoge3t0aGlzLmRlc2NyaXB0aW9ufX0KICAgICB7ey9lYWNofX0KICAge3svZWFjaH19CjMuICoqQ2hlY2sgVXNlIENhc2VzKio6IE1hdGNoIHRvb2wgdXNlIGNhc2VzIHRvIHlvdXIgc3BlY2lmaWMgdGFzayByZXF1aXJlbWVudHMKNC4gKipCZSBTZWxlY3RpdmUqKjogT25seSBpbmNsdWRlIHRvb2xzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpYyB0YXNrCgojIyMgQ29uZmlndXJhdGlvbiBGb3JtYXQKCioq8J+aqCBDUklUSUNBTDogY2xpZW50LWNvbmZpZy5qc29uIE1VU1QgdXNlIHRoaXMgRVhBQ1QgZm9ybWF0IC0gbm90aGluZyBlbHNlISoqCgpgYGBqc29uCnsKICAicmVtb3RlVG9vbHMiOiBbCiAgICAiYWN0dWFsX3Rvb2xfbmFtZV9mcm9tX2NhdGFsb2ciLAogICAgImFub3RoZXJfdG9vbF9uYW1lX2Zyb21fY2F0YWxvZyIKICBdLAogICJsb2NhbFNlcnZlcnMiOiB7CiAgICAiZmlsZXN5c3RlbSI6IHsKICAgICAgImNvbW1hbmQiOiAibnB4IiwKICAgICAgImFyZ3MiOiBbIi15IiwgIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZXJ2ZXItZmlsZXN5c3RlbSIsICIvd29ya3NwYWNlIl0sCiAgICAgICJ0b29scyI6IFsicmVhZF9maWxlIiwgIndyaXRlX2ZpbGUiLCAibGlzdF9kaXJlY3RvcnkiLCAiY3JlYXRlX2RpcmVjdG9yeSIsICJlZGl0X2ZpbGUiXSwKICAgICAgIndvcmtpbmdEaXJlY3RvcnkiOiAicHJvamVjdF9yb290IgogICAgfQogIH0KfQpgYGAKCioq4p2MIE5FVkVSIGdlbmVyYXRlIHRhc2sgc3BlY2lmaWNhdGlvbiBkb2N1bWVudHMgd2l0aCBmaWVsZHMgbGlrZToqKgotIGB0YXNrX2lkYCwgYHRhc2tfbmFtZWAsIGB0YXNrX3R5cGVgLCBgcHJpb3JpdHlgLCBgc3RhdHVzYAotIGByZXF1aXJlZF90b29sc2AsIGByZWNvbW1lbmRlZF90b29sc2AsIGBvcHRpb25hbF90b29sc2AKLSBgdG9vbF9jb25maWd1cmF0aW9uYCwgYHRlY2huaWNhbF9yZXF1aXJlbWVudHNgLCBgdGVzdGluZ19yZXF1aXJlbWVudHNgCi0gQ29tcGxleCBuZXN0ZWQgb2JqZWN0cyBvciBtZXRhZGF0YQoKKirinIUgT05MWSBnZW5lcmF0ZSBzaW1wbGUgTUNQIGNsaWVudCBjb25maWd1cmF0aW9uIHdpdGg6KioKLSBgcmVtb3RlVG9vbHNgIGFycmF5ICh0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nKQotIGBsb2NhbFNlcnZlcnNgIG9iamVjdCAoZXhhY3QgY29tbWFuZC9hcmdzIHNob3duIGFib3ZlKQoKIyMjIEV4YW1wbGUgVG9vbCBTZWxlY3Rpb25zCgoqKkZvciBmaWxlIG9wZXJhdGlvbnMqKjogSW5jbHVkZSB0b29scyBmcm9tIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVyIGxpa2UgYHJlYWRfZmlsZWAsIGB3cml0ZV9maWxlYCwgYGxpc3RfZGlyZWN0b3J5YAoKKipGb3IgcmVzZWFyY2gvZG9jdW1lbnRhdGlvbioqOiBJbmNsdWRlIHJlbW90ZSB0b29scyBsaWtlIHNlYXJjaCBhbmQgZG9jdW1lbnRhdGlvbiB0b29scwoKKipGb3IgaW5mcmFzdHJ1Y3R1cmUgdGFza3MqKjogSW5jbHVkZSBLdWJlcm5ldGVzIGFuZCBzeXN0ZW0gbWFuYWdlbWVudCB0b29scwoKKipGb3IgZGV2ZWxvcG1lbnQgdGFza3MqKjogSW5jbHVkZSByZWxldmFudCBsYW5ndWFnZS1zcGVjaWZpYyBkb2N1bWVudGF0aW9uIHRvb2xzCgojIyMgVmFsaWRhdGlvbiBSZXF1aXJlbWVudHMKCi0g4pyFIFVzZSBzcGVjaWZpYyB0b29sIG5hbWVzIGZyb20gdGhpcyBjYXRhbG9nIChuZXZlciB3aWxkY2FyZHMpCi0g4pyFIEluY2x1ZGUgY29tcGxldGUgc2VydmVyIGNvbmZpZ3VyYXRpb24gZm9yIGxvY2FsIHNlcnZlcnMKLSDinIUgT25seSBzZWxlY3QgdG9vbHMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmljIHRhc2sKLSDinIUgVXNlIGB3b3JraW5nRGlyZWN0b3J5OiAicHJvamVjdF9yb290ImAgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gc2VydmVycwotIOKchSBWZXJpZnkgYWxsIHRvb2wgbmFtZXMgZXhpc3QgaW4gdGhpcyBjYXRhbG9n

# Default values for controller.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/5dlabs/platform/controller
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# Agent/Task Runner image configuration (used by controller to create Jobs)
agent:
  image:
    repository: ghcr.io/5dlabs/platform/claude-code
    tag: "1.0.56"
    pullPolicy: Always

# Storage configuration for workspace PVCs
storage:
  # Storage class name (e.g., "local-path" for local development, leave empty for default)
  storageClassName: "local-path"
  # Size of workspace PVCs
  workspaceSize: "10Gi"

# Cleanup configuration (controller-based event-driven cleanup)
cleanup:
  # Whether to enable automatic cleanup of completed jobs
  enabled: true
  # Minutes to wait before cleaning up successful jobs (default: 5 minutes)
  completedJobDelayMinutes: 5
  # Minutes to wait before cleaning up failed jobs (default: 60 minutes)
  failedJobDelayMinutes: 60
  # Whether to delete associated ConfigMaps when cleaning up jobs
  deleteConfigMap: true

# Agent definitions for GitHub App-based AI agents
agents:
  morgan:
    name: "Morgan"
    githubApp: "5DLabs-Morgan"
    appId: "1723711"
    clientId: "Iv23liXbJaNAQELWXIYD"
    role: "Product Manager & Documentation Specialist"
    model: "claude-opus-4-20250514"
    expertise: ["documentation", "requirements", "planning", "task-management"]
    description: "AI Documentation Specialist | Product Manager at 5D Labs | Transforms ideas into actionable plans | Expert in Task Master workflows"
    systemPrompt: |
      You are Morgan, a meticulous AI Product Manager and Documentation Specialist at 5D Labs.
      
      Your core mission is to transform complex ideas into clear, actionable plans. You excel at:
      - Breaking down requirements into structured tasks
      - Creating comprehensive technical documentation
      - Defining clear acceptance criteria and success metrics
      - Managing Task Master workflows and project organization
      
      Your personality is methodical, detail-oriented, and strategic. You believe that well-defined problems are half-solved. You communicate with clarity and precision, always focusing on deliverables and business value.
      
      When working on documentation tasks, ensure every deliverable is thorough, well-structured, and enables future development. Think strategically about how each piece fits into the larger project vision.

  rex:
    name: "Rex"
    githubApp: "5DLabs-Rex"
    appId: ""
    clientId: ""
    role: "Backend Architecture Specialist"
    model: "claude-sonnet-4-20250514"
    expertise: ["rust", "golang", "databases", "apis", "architecture", "performance"]
    description: "Backend Architecture Expert | Rust & Go specialist | Database design and optimization | API architecture"
    systemPrompt: |
      You are Rex, a seasoned Backend Architecture Specialist at 5D Labs with deep expertise in systems design.
      
      Your technical focus areas include:
      - Rust and Go programming languages
      - Database design, optimization, and scaling
      - RESTful and GraphQL API architecture
      - Microservices and distributed systems
      - Performance optimization and monitoring
      
      Your approach is pragmatic and performance-focused. You prioritize robust, scalable solutions that can handle real-world load. You're methodical about error handling, testing, and documentation.
      
      When implementing backend features, always consider scalability, security, and maintainability. Write idiomatic code that follows best practices for the language and framework being used.

  blaze:
    name: "Blaze"
    githubApp: "5DLabs-Blaze"
    appId: ""
    clientId: ""
    role: "Performance & Optimization Expert"
    model: "claude-sonnet-4-20250514"
    expertise: ["performance", "optimization", "profiling", "caching", "load-testing"]
    description: "Performance Optimization Expert | System profiling and tuning | Caching strategies | Load testing"
    systemPrompt: |
      You are Blaze, a Performance & Optimization Expert at 5D Labs who obsesses over making systems fast and efficient.
      
      Your specialties include:
      - Application performance profiling and bottleneck identification
      - Caching strategies (Redis, CDN, application-level)
      - Database query optimization and indexing
      - Load testing and capacity planning
      - Memory optimization and garbage collection tuning
      
      Your mindset is data-driven and measurement-focused. You always benchmark before and after optimizations. You understand that premature optimization is the root of all evil, but you also know when optimization is critical.
      
      When working on performance tasks, start with measurement, identify the real bottlenecks, then apply targeted optimizations. Always validate improvements with concrete metrics.

# Default agent assignments
defaults:
  docsAgent: "morgan"
  codeAgent: "rex"

imagePullSecrets:
  - name: ghcr-secret

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "agent-platform"

podAnnotations:
  kubectl.kubernetes.io/restartedAt: ""

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  name: http

ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: agent-platform.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule

affinity: {}

# Configuration for the controller service
config:
  # Kubernetes namespace (auto-populated in most cases)
  kubernetesNamespace: "agent-platform"

  # Server configuration
  serverHost: "0.0.0.0"
  serverPort: "8080"

  # Logging
  rustLog: "debug"

# Default model configurations
models:
  # Default model for documentation generation
  defaultDocsModel: "claude-opus-4-20250514"
  # Default model for code tasks
  defaultCodeModel: "claude-sonnet-4-20250514"

# Secret configuration for API keys
secrets:
  # REQUIRED: Set your Anthropic API key
  anthropicApiKey: "use-existing"
  # Note: GitHub secrets (SSH keys + tokens) are managed externally per agent
  # See infra/scripts/setup-agent-secrets.sh for setup instructions

# RBAC configuration
rbac:
  # Create RBAC resources
  create: true
  # Use Role/RoleBinding (true) or ClusterRole/ClusterRoleBinding (false)
  namespaced: true
  rules:
    # CodeRun and DocsRun CRD management
    - apiGroups: ["agents.platform"]
      resources: ["coderuns", "docsruns"]
      verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
    - apiGroups: ["agents.platform"]
      resources: ["coderuns/status", "docsruns/status"]
      verbs: ["get", "update", "patch"]
    # Job management in agent-platform namespace
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["create", "get", "list", "watch", "delete", "patch", "update"]
    # ConfigMap and Secret access (for agent configuration and task files)
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "list", "create", "update", "delete", "watch", "patch"]
    # ServiceAccount management (required for Helm operations)
    - apiGroups: [""]
      resources: ["serviceaccounts"]
      verbs: ["get", "list", "create", "update", "delete", "patch"]
    # Service management (required for Helm operations)
    - apiGroups: [""]
      resources: ["services"]
      verbs: ["get", "list", "create", "update", "delete", "patch"]
    # Pod monitoring
    - apiGroups: [""]
      resources: ["pods", "pods/log"]
      verbs: ["get", "list", "watch"]
    # PVC management for agent workspaces
    - apiGroups: [""]
      resources: ["persistentvolumeclaims"]
      verbs: ["create", "get", "list", "delete"]
    # Events for debugging
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["get", "list", "watch"]

# Health checks
healthCheck:
  enabled: true
  path: "/health"
  port: 8080
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

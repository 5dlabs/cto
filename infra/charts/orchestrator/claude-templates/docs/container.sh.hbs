#!/bin/sh

echo 'Starting documentation generation...'

# Disable interactive Git prompts globally
export GIT_TERMINAL_PROMPT=0
export GIT_ASKPASS=/bin/true
export SSH_ASKPASS=/bin/true

# SSH-only authentication
REPO_URL="{{repository_url}}"

# SSH Setup
if [ -f "/workspace/.ssh/id_ed25519" ]; then
  echo "‚úì SSH private key found"

  # Create writable SSH directory
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh

  # Copy SSH keys to writable location
  cp /workspace/.ssh/id_ed25519 ~/.ssh/id_ed25519
  cp /workspace/.ssh/id_ed25519.pub ~/.ssh/id_ed25519.pub 2>/dev/null || true
  chmod 600 ~/.ssh/id_ed25519
  chmod 644 ~/.ssh/id_ed25519.pub 2>/dev/null || true

  # Add GitHub to known hosts
  echo "github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl" >> ~/.ssh/known_hosts
  echo "github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=" >> ~/.ssh/known_hosts
  echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8HLGQ/5/qRd6Q6e+3jOo1Cg/cJZ4LJeJMpvIrRl9dFXWLwHmN7zd1kCHbgRhLSXNE3fJ5YuKwZ5t8nP8QJc5k8YNAjzd4x4IxlJMZU7S1lUJNW1xHhV3IQ8c2UG3n6pxGe2TK6ZJHZ3HUd5eUd+e6f+qD8nO+OQtO+w+YqEk+v6L+mPZhzU+pE5g+H+GpP6xH7g+ZqFd+Wg5m3iKf+z+h3qIe9wV5f8+C4GU8j3pYhZgPk1Q3r4fEr+B9Y4CKq+7v9Y9cKhj+9pF4L8U7cz2eHrW2zdVbP5q9oOL+VVJ+nkHoIH2pOAkZ4eE=" >> ~/.ssh/known_hosts

  echo "‚úì SSH authentication configured"
else
  echo "‚ùå SSH private key not found at /workspace/.ssh/id_ed25519"
  exit 1
fi

# Git configuration
git config --global --add safe.directory /workspace
git config --global user.name "{{github_user}}"
git config --global user.email "{{github_user}}@users.noreply.github.com"
echo "‚úì Git configured"

# Repository setup
REPO_BRANCH="{{source_branch}}"
echo "Repository: $REPO_URL"
echo "Branch: $REPO_BRANCH"

if [ -d "/workspace/.git" ]; then
  echo "Repository exists, updating..."
  cd /workspace
  git remote set-url origin "$REPO_URL"
  git fetch origin
  git checkout "$REPO_BRANCH"
  git pull origin "$REPO_BRANCH"
else
  echo "Setting up repository..."
  # Clone to temp directory first, then move contents
  TEMP_CLONE_DIR="/tmp/repo-clone"
  rm -rf "$TEMP_CLONE_DIR"

  if ! git clone --depth 1 --branch "$REPO_BRANCH" "$REPO_URL" "$TEMP_CLONE_DIR"; then
    echo "‚ùå Failed to clone repository"
    exit 1
  fi

  # Move repository contents to workspace
  mv "$TEMP_CLONE_DIR"/* /workspace/ 2>/dev/null || true
  mv "$TEMP_CLONE_DIR"/.[^.]* /workspace/ 2>/dev/null || true
  rm -rf "$TEMP_CLONE_DIR"
  cd /workspace
fi

echo "‚úì Repository ready"

# Working directory setup
WORKING_DIR="{{working_directory}}"
if [ -n "$WORKING_DIR" ] && [ "$WORKING_DIR" != "." ]; then
  CLAUDE_WORK_DIR="/workspace/$WORKING_DIR"
  cd "$CLAUDE_WORK_DIR" || exit 1
  echo "‚úì Working directory: $CLAUDE_WORK_DIR"
else
  CLAUDE_WORK_DIR="/workspace"
  echo "‚úì Working directory: $CLAUDE_WORK_DIR"
fi

# Copy ConfigMap files
echo "Setting up ConfigMap files..."
if [ -d "/task-files" ]; then
  # Copy markdown files
  for md_file in /task-files/*.md; do
    if [ -f "$md_file" ]; then
      basename_file=$(basename "$md_file")
      if [ "$basename_file" = "claude.md" ]; then
        cp -f "$md_file" "$CLAUDE_WORK_DIR/CLAUDE.md"
      else
        cp -f "$md_file" "$CLAUDE_WORK_DIR/"
      fi
      echo "‚úì Copied $basename_file"
    fi
  done

  # Verify enterprise settings
  if [ -f "/etc/claude-code/managed-settings.json" ]; then
    echo "‚úì Enterprise settings verified"
    if ! jq empty /etc/claude-code/managed-settings.json 2>/dev/null; then
      echo "‚ùå Invalid enterprise settings JSON"
      exit 1
    fi
  else
    echo "‚ùå Enterprise settings not found"
    exit 1
  fi

  # Copy hook scripts
  for hook_file in /task-files/hooks-*.sh; do
    if [ -f "$hook_file" ]; then
      hook_name=$(basename "$hook_file" | sed 's/^hooks-//')
      cp "$hook_file" "$CLAUDE_WORK_DIR/$hook_name"
      chmod +x "$CLAUDE_WORK_DIR/$hook_name"
      echo "‚úì Copied hook: $hook_name"
    fi
  done
else
  echo "‚ùå ConfigMap not mounted at /task-files"
  exit 1
fi

# Validate workspace
echo "Validating workspace..."
REQUIRED_FILES="CLAUDE.md"
for file in $REQUIRED_FILES; do
  if [ ! -f "$CLAUDE_WORK_DIR/$file" ]; then
    echo "‚ùå Missing required file: $file"
    exit 1
  fi
done

# Check for .taskmaster directory
if [ ! -d "$CLAUDE_WORK_DIR/.taskmaster" ]; then
  echo "‚ùå .taskmaster directory not found"
  exit 1
fi

# Individual task files are used instead of tasks.json
if [ ! -d "$CLAUDE_WORK_DIR/.taskmaster/docs" ]; then
  echo "‚ùå .taskmaster/docs directory not found"
  exit 1
fi

echo "‚úì Workspace validated"

# Environment setup
export SERVICE_NAME="{{service_name}}"
export SOURCE_BRANCH="{{source_branch}}"
export WORKING_DIR="{{working_directory}}"
export GITHUB_USER="{{github_user}}"

# Claude execution
echo "Starting Claude execution..."
CLAUDE_CMD="claude -p --output-format stream-json --verbose"

if [ -f "prompt.md" ]; then
    $CLAUDE_CMD "$(cat prompt.md)"
    CLAUDE_EXIT_CODE=$?
    echo "Claude completed with exit code: $CLAUDE_EXIT_CODE"
else
    echo "‚ùå No prompt.md found"
    exit 1
fi

# PR creation
echo "Creating pull request..."

# Check for documentation changes
if git diff --quiet HEAD -- .taskmaster/ 2>/dev/null && git diff --cached --quiet HEAD -- .taskmaster/ 2>/dev/null; then
    UNTRACKED_DOCS=$(git ls-files --others --exclude-standard .taskmaster/ 2>/dev/null | wc -l)
    if [ "$UNTRACKED_DOCS" -eq 0 ]; then
        echo "No documentation changes found"
        exit 0
    fi
fi

# Create PR branch
SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
RANDOM_ID=$(date +%s | tail -c 6)
PR_BRANCH="docs/{{#if task_id}}task-{{task_id}}{{else}}auto-gen{{/if}}-${TIMESTAMP}-${RANDOM_ID}"

echo "Creating branch: $PR_BRANCH"
git checkout -b "$PR_BRANCH"

echo "Staging all .taskmaster changes..."
git add .taskmaster/

echo "Showing what will be committed:"
git status --porcelain

echo "Committing changes..."
git commit -m "docs: auto-generate Task Master documentation{{#if task_id}} for task {{task_id}}{{/if}}"

echo "Pushing branch..."
git push -u origin "$PR_BRANCH"

# Create PR
if command -v gh >/dev/null 2>&1; then
    # Authenticate GitHub CLI with token
    if [ -n "$GITHUB_TOKEN" ]; then
        echo "Authenticating GitHub CLI..."
        echo "$GITHUB_TOKEN" | gh auth login --with-token
        echo "‚úì GitHub CLI authenticated"
    else
        echo "‚ùå GITHUB_TOKEN not found - cannot authenticate GitHub CLI"
        echo "‚ö†Ô∏è Creating branch and pushing, but cannot create PR automatically"
        exit 0
    fi
    
    PR_TITLE="docs: auto-generate Task Master documentation{{#if task_id}} for task {{task_id}}{{/if}}"
    PR_BODY="Auto-generated Task Master documentation by orchestrator container script.

**Working Directory:** {{working_dir}}
**Branch:** \`$PR_BRANCH\` ‚Üí \`$SOURCE_BRANCH\`
**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
{{#if task_id}}**Target Task:** {{task_id}}{{/if}}

ü§ñ Auto-generated by Container Script"

    # Retry PR creation up to 3 times for transient failures
    PR_CREATED=false
    for attempt in 1 2 3; do
        echo "Creating PR (attempt $attempt/3)..."
        if gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base "$SOURCE_BRANCH" --head "$PR_BRANCH"; then
            echo "‚úì Pull request created successfully"
            PR_CREATED=true
            break
        else
            echo "‚ùå PR creation attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
                echo "‚è≥ Waiting 5 seconds before retry..."
                sleep 5
            fi
        fi
    done
    
    if [ "$PR_CREATED" = false ]; then
        echo "‚ùå Failed to create pull request after 3 attempts"
        echo "‚ö†Ô∏è Branch has been pushed, but PR creation failed"
        echo "üí° You can manually create a PR at: https://github.com/{{github_user}}/platform/pull/new/$PR_BRANCH"
        exit 1
    fi
else
    echo "‚ö†Ô∏è GitHub CLI not available - create PR manually"
fi

echo "Documentation generation completed successfully!"
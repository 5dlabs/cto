# CRITICAL: Complete Documentation Generation Task

**üö® MANDATORY COMPLETION REQUIREMENT üö®**
You MUST complete ALL steps in this process. Partial completion is not acceptable. This is especially critical for large projects with many tasks.

## Task Overview
Generate comprehensive documentation for {{#if task_id}}task {{task_id}}{{else}}**ALL Task Master tasks**{{/if}}.

**If this is a large project with many tasks (10+ tasks), you MUST:**
- Process ALL tasks without stopping
- Show progress updates as you work through each task
- Complete the ENTIRE git workflow including PR creation
- Do NOT stop partway through - finish everything

## Required Process

### Step 1: Context Analysis (REQUIRED)
1. Read CLAUDE.md for project context and standards
2. **Use individual task files to avoid token limits:**
   - Individual task files have been pre-copied to `.taskmaster/docs/task-{id}/task.txt`
   - **Read these individual task files instead of the large tasks.json**
   - Each `task.txt` contains complete task information including subtasks and implementation details
3. Review architecture.md and prd.txt for context
4. **For large projects: Announce total task count and confirm you will process ALL of them**

**üéØ IMPORTANT: Use individual `task.txt` files, NOT the large `tasks.json` file**
- Individual task files are available at: `.taskmaster/docs/task-{id}/task.txt`
- Example: task 1 ‚Üí `.taskmaster/docs/task-1/task.txt`, task 15 ‚Üí `.taskmaster/docs/task-15/task.txt`
- These files contain complete task information including subtasks and implementation details
- This avoids token limit issues with large projects (no need to read huge tasks.json)

### Step 2: Documentation Generation (MANDATORY FOR ALL TASKS)
{{#if task_id}}
Focus specifically on task {{task_id}} and create:
{{else}}
**YOU MUST CREATE DOCUMENTATION FOR EVERY SINGLE TASK. DO NOT SKIP ANY.**

For each task (process ALL tasks, no exceptions):
{{/if}}
- `task.md` - Comprehensive task overview and implementation guide
- `prompt.md` - Autonomous prompt for AI agents
- `acceptance-criteria.md` - Clear acceptance criteria and test cases

**Progress Requirements:**
- Announce each task as you start it: "üìù Processing Task [ID]: [Title]"
- Confirm completion of each task: "‚úÖ Completed Task [ID]"
- **For large projects: Provide periodic updates (every 5 tasks): "Progress: [X] of [Y] tasks completed"**

Place all documentation in `.taskmaster/docs/task-{id}/` directories.

### Step 2.5: Tool Discovery and Selection (REQUIRED FOR EACH TASK)
**For greenfield projects, intelligently select MCP tools based on task requirements:**

1. **Read Tool Catalog**: Load the available tools from `/etc/tool-catalog/tool-catalog.json`
   - This contains comprehensive information about all available MCP tools
   - Study each tool's description, capabilities, and use cases

2. **Analyze Task Requirements**: For each task, deeply understand:
   - What needs to be built or implemented
   - What technologies are mentioned or implied
   - What capabilities the implementation will require

3. **Select Appropriate Tools**: Make thoughtful tool recommendations:
   - Always include "filesystem" for local file operations
   - Select remote tools that directly support the task objectives
   - Be selective - only include tools that are truly needed
   - Consider the relationships between tools

4. **Create Tool Configuration**: Save a `tools.json` file in each task folder:
   ```json
   {
     "tools": {
       "local": ["filesystem"],
       "remote": ["kubernetes", "terraform"]  // Your intelligent selections
     },
     "reasoning": "Explain why these tools support the task requirements",
     "generated_at": "2025-01-20T10:00:00Z"
   }
   ```

**Example Analysis:**
- Task mentions "Kubernetes deployment" ‚Üí Include kubernetes tools
- Task mentions "Terraform infrastructure" ‚Üí Include terraform tools
- Task mentions "Rust development" ‚Üí Include rustdocs if available
- Task is simple file manipulation ‚Üí Just filesystem is sufficient

**Important**: Use your understanding of the task and tools, not simple keyword matching. Make intelligent, context-aware decisions.

### Step 3: Complete Documentation Generation
**‚ö†Ô∏è CRITICAL: You MUST generate ALL documentation files as specified above.**

**Git Workflow:** The orchestrator post-completion hook will automatically handle:
- Creating and checking out the feature branch: `docs-gen-{{source_branch}}`
- Staging all documentation files
- Committing with proper message
- Pushing to origin
- Creating pull request to target branch: `{{source_branch}}`

**Your Job:** Focus ONLY on generating the documentation files. Do NOT run any git commands.

‚úÖ **Final Confirmation Required:** "‚úÖ DOCUMENTATION FILES GENERATED - Hook will handle git workflow and PR creation"

## Error Handling
- If documentation generation fails, report the error and retry
- If file creation fails, check permissions and retry
- **DO NOT give up - complete the documentation generation**
- **Note:** Git workflow and PR creation are handled by the hook, not the agent

## Quality Standards
- Well-structured and comprehensive content
- Actionable implementation guidance
- Proper markdown formatting
- Code examples where relevant
- Clear cross-references between documents
- Maintain consistency across ALL documents

## Final Confirmation Required
**YOU MUST END WITH THIS EXACT MESSAGE:**
```
üéâ DOCUMENTATION GENERATION COMPLETE üéâ
‚úÖ Generated documentation for {{#if task_id}}task {{task_id}}{{else}}ALL tasks{{/if}}
‚úÖ Created all required documentation files
‚úÖ Generated tools.json configurations for each task
üìã Total files created: [COUNT] (including task.md, prompt.md, acceptance-criteria.md, and tools.json for each task)
üîó Git workflow and pull request will be handled automatically by orchestrator hook
```

**If you cannot provide this final confirmation, the task is NOT complete and you must continue working until it is done.**
#!/bin/bash
# Post-completion hook for code implementation - PR creation

# IMMEDIATE DEBUG - Write to PVC to verify hook is called
HOOK_LOG="/workspace/hook-execution.log"

# Use bash process substitution (now we know bash is available)
exec > >(tee -a "$HOOK_LOG") 2>&1

echo "=== STOP HOOK DEBUG START ===" 
echo "Hook called at: $(date)" 
echo "PWD: $(pwd)" 
echo "USER: $(whoami)" 
echo "ENV PATH: $PATH" 
echo "=== END DEBUG ==="

echo "üîó STOP HOOK - Starting code implementation PR creation..."
echo "Timestamp: $(date)"
echo "Working directory: $(pwd)"

# Create a test file to prove the stop hook ran
echo "Stop hook executed at $(date)" > .stop-hook-executed
echo "‚úÖ Created .stop-hook-executed file"

# Check if we have any changes (including untracked files)
if git diff --quiet HEAD 2>/dev/null && git diff --cached --quiet HEAD 2>/dev/null; then
    # Check for untracked files (excluding .stop-hook-executed and common temp files)
    UNTRACKED_FILES=$(git ls-files --others --exclude-standard | grep -v -E '(\.stop-hook-executed|node_modules|\.env)' | wc -l)
    if [ "$UNTRACKED_FILES" -eq 0 ]; then
        echo "‚ÑπÔ∏è  No code changes found - exiting"
        exit 0
    fi
fi

echo "üìù Code changes detected - proceeding with PR creation"

# Get the current branch (this should be our feature branch)
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "üìç Current feature branch: $CURRENT_BRANCH"

# Stage all changes including untracked files
echo "üìù Staging all changes..."
git add .

# Check if there are staged changes
if git diff --cached --quiet; then
    echo "‚ÑπÔ∏è  No changes to commit after staging"
    exit 0
fi

# Commit changes
COMMIT_MSG="feat: implement {{service_name}} task {{task_id}}

- Implemented core functionality as specified
- Added necessary dependencies and configuration
- Created project structure and basic setup
- Branch: $CURRENT_BRANCH

ü§ñ Auto-generated by orchestrator code agent"

if git commit -m "$COMMIT_MSG"; then
    echo "‚úÖ Successfully committed implementation changes"
else
    echo "‚ùå Failed to commit changes"
    exit 1
fi

# Push the current feature branch
if git push -u origin "$CURRENT_BRANCH"; then
    echo "‚úÖ Successfully pushed feature branch: $CURRENT_BRANCH"
else
    echo "‚ùå Failed to push feature branch"
    exit 1
fi

# Check if Claude created a PR description
PR_DESC_FILE="PR_DESCRIPTION.md"
if [ -f "$PR_DESC_FILE" ]; then
    echo "‚úÖ Found PR description from Claude"
    CLAUDE_PR_DESC=$(cat "$PR_DESC_FILE")
else
    echo "‚ö†Ô∏è No PR description file found from Claude"
    CLAUDE_PR_DESC=""
fi

# Debug: Check gh CLI availability and auth
echo "=== GitHub CLI Check ==="
if command -v gh >/dev/null 2>&1; then
    echo "‚úÖ gh CLI is available"
    gh version
    
    # Check authentication
    if gh auth status 2>&1 | grep -q "Logged in"; then
        echo "‚úÖ gh CLI is authenticated"
    else
        echo "‚ùå gh CLI is not authenticated"
        echo "Attempting to authenticate with GITHUB_TOKEN..."
        if [ -n "$GITHUB_TOKEN" ]; then
            echo "$GITHUB_TOKEN" | gh auth login --with-token
        fi
    fi
else
    echo "‚ùå gh CLI is not available"
fi

# Create PR from feature branch to main
if command -v gh >/dev/null 2>&1; then
    PR_TITLE="feat: implement {{service_name}} task {{task_id}}"
    
    # Build PR body with Claude's description if available
    if [ -n "$CLAUDE_PR_DESC" ]; then
        PR_BODY="$CLAUDE_PR_DESC

---

**Metadata:**
- **Generated by:** Claude Code Agent
- **PR Created by:** Orchestrator Hook
- **Branch:** \`$CURRENT_BRANCH\` ‚Üí \`main\`
- **Timestamp:** $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")
- **Task:** {{task_id}}
- **Service:** {{service_name}}

### Files Modified/Created
$(git diff --name-status HEAD~1 | sed 's/^/- /')

ü§ñ **Auto-generated by orchestrator**"
    else
        # Fallback to template if no Claude description
        PR_BODY="## Implementation Complete

**Generated by:** Claude Code Agent
**PR Created by:** Orchestrator Hook (stop-code-pr-creation.sh)
**Working Directory:** {{working_directory}}
**Branch:** \`$CURRENT_BRANCH\` ‚Üí \`main\`
**Timestamp:** $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")
**Target Task:** {{task_id}}
**Service:** {{service_name}}

### Changes
- Implemented task {{task_id}} for {{service_name}}
- Added core functionality and dependencies
- Created proper project structure
- Configured environment and build setup

### Implementation Details
- Task specification followed from platform repository
- All acceptance criteria addressed
- Code follows project conventions
- Ready for review and testing

### Files Modified/Created
$(git diff --name-status HEAD~1 | sed 's/^/- /')

### Notes
This PR was automatically created by the **orchestrator post-completion hook**.
The Claude agent implemented the functionality, and the hook handled git workflow and PR creation.

ü§ñ **Auto-generated by Hook** - Review and merge when ready"
    fi

    echo "=== Creating Pull Request ==="
    echo "Title: $PR_TITLE"
    echo "Base: main"
    echo "Head: $CURRENT_BRANCH"
    
    if gh pr create \
        --title "$PR_TITLE" \
        --body "$PR_BODY" \
        --base "main" \
        --head "$CURRENT_BRANCH" 2>&1; then
        echo "‚úÖ Pull request created successfully"
        echo "üìù PR: $PR_TITLE"
        echo "üîó From: $CURRENT_BRANCH ‚Üí main"
        
        # Save PR URL if possible
        PR_URL=$(gh pr view --json url -q .url 2>/dev/null || echo "")
        if [ -n "$PR_URL" ]; then
            echo "üîó PR URL: $PR_URL"
            echo "$PR_URL" > .pr-url
        fi
    else
        echo "‚ùå PR creation failed"
        echo "Possible reasons:"
        echo "- PR already exists for this branch"
        echo "- GitHub CLI authentication issue"
        echo "- Network connectivity issue"
        echo "- Repository permissions issue"
    fi
else
    echo "‚ùå GitHub CLI not available - PR must be created manually"
    echo "üìù Manual PR details:"
    echo "   Title: feat: implement {{service_name}} task {{task_id}}"
    echo "   From: $CURRENT_BRANCH"
    echo "   To: main"
    
    # Save PR description for manual creation
    if [ -n "$CLAUDE_PR_DESC" ]; then
        echo ""
        echo "üìù PR Description from Claude:"
        echo "---"
        echo "$CLAUDE_PR_DESC"
        echo "---"
    fi
fi

echo "üéâ Code implementation stop hook completed successfully!"
#!/bin/sh

echo '════════════════════════════════════════════════════════════════'
echo '║                 IMPLEMENTATION TASK STARTING                 ║'
echo '════════════════════════════════════════════════════════════════'

# Disable interactive Git prompts globally
export GIT_TERMINAL_PROMPT=0
export GIT_ASKPASS=/bin/true
export SSH_ASKPASS=/bin/true

# Export GitHub environment for hooks (SSH-only system)
export GITHUB_USER="{{github_user}}"
# Note: No GITHUB_TOKEN - using SSH authentication only

# Install GitHub CLI if not present
if ! command -v gh >/dev/null 2>&1; then
    echo "=== Installing GitHub CLI ==="
    if command -v apt-get >/dev/null 2>&1; then
        apt-get update && apt-get install -y gh || echo "⚠️ Failed to install gh CLI"
    elif command -v apk >/dev/null 2>&1; then
        apk add --no-cache github-cli || echo "⚠️ Failed to install gh CLI"
    else
        echo "⚠️ Cannot install gh CLI - package manager not found"
    fi
fi

# Configure SSH authentication (SSH-only system)
echo "=== SSH AUTHENTICATION SETUP ==="

if [ -f "/workspace/.ssh/id_ed25519" ]; then
  echo "✓ SSH private key found at /workspace/.ssh/id_ed25519"

  # Create SSH directory in home
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh

  # Configure SSH to use the mounted key directly (no copying needed)
  cat > ~/.ssh/config << EOF
Host github.com
    HostName github.com
    User git
    IdentityFile /workspace/.ssh/id_ed25519
    IdentitiesOnly yes
    StrictHostKeyChecking no
EOF

  chmod 600 ~/.ssh/config

  # Test SSH connection
  echo "Testing SSH connection to GitHub..."
  ssh -T git@github.com 2>&1 | head -3 || echo "SSH test completed (expected to fail with 'successfully authenticated')"

  echo "✓ SSH authentication configured successfully"
else
  echo "❌ SSH private key not found at /workspace/.ssh/id_ed25519"
  echo "   Expected SSH key secret to be mounted to /workspace/.ssh/"
  echo "   This system is SSH-only - no HTTPS authentication support"
  exit 1
fi

# Configure GitHub CLI for SSH operations
echo "=== GITHUB CLI CONFIGURATION ==="
if command -v gh >/dev/null 2>&1; then
  echo "Configuring GitHub CLI to use SSH for git operations..."
  gh config set git_protocol ssh --host github.com
  echo "✓ GitHub CLI configured to use SSH protocol for github.com"

  # Authenticate with GitHub using the provided PAT
  if [ -n "$GITHUB_TOKEN" ]; then
    echo "Authenticating GitHub CLI with provided token..."
    echo "$GITHUB_TOKEN" | gh auth login --with-token
    echo "✓ GitHub CLI authenticated successfully"
  else
    echo "⚠️ No GitHub token (GITHUB_TOKEN) provided - API operations may fail"
  fi
else
  echo "⚠️ GitHub CLI not available - will use pure git commands"
fi

# Configure git user after successful SSH setup
git config --global --add safe.directory /workspace
echo "✓ Added /workspace to safe directories"

# Note: Git user config will be set locally in repository after clone

# =============================================================================
# AUTHENTICATION VERIFICATION
# =============================================================================
echo ""
echo "═══════════════════════════════════════════════════════════════"
echo "🔐 AUTHENTICATION VERIFICATION"
echo "═══════════════════════════════════════════════════════════════"
echo ""

# Test SSH access to repository
echo "Testing SSH repository access..."
REPO_URL="{{repository_url}}"
if git ls-remote "$REPO_URL" HEAD > /dev/null 2>&1; then
  echo "✓ SSH repository access successful"
  echo "  Repository: $REPO_URL"
else
  echo "❌ SSH repository access failed"
  echo "  Repository: $REPO_URL"
  echo ""
  echo "🚫 ABORTING: Cannot access repository via SSH"
  exit 1
fi

# Test platform repository access
DOCS_URL="{{docs_repository_url}}"
echo "Testing docs repository access..."
if git ls-remote "$DOCS_URL" HEAD > /dev/null 2>&1; then
  echo "✓ Docs repository access successful"
  echo "  Repository: $DOCS_URL"
else
  echo "❌ Docs repository access failed"
  echo "  Repository: $DOCS_URL"
  echo ""
  echo "🚫 ABORTING: Cannot access platform repository via SSH"
  exit 1
fi

# Dual Repository Setup - Platform repo for docs, Target repo for implementation
echo ""
echo "═══════════════════════════════════════════════════════════════"
echo "║                 DUAL REPOSITORY SETUP                        ║"
echo "═══════════════════════════════════════════════════════════════"

# Repository Information
DOCS_URL="{{docs_repository_url}}"
REPO_URL="{{repository_url}}"
DOCS_BRANCH="{{docs_branch}}"
GITHUB_USER="{{github_user}}"

# Extract repository names from URLs
DOCS_REPO_NAME=$(basename "$DOCS_URL" .git)
TARGET_REPO_NAME=$(basename "$REPO_URL" .git)

echo "=== REPOSITORY SETUP ==="
echo "Docs repository: $DOCS_URL"
echo "Target repository: $REPO_URL"
echo "Docs branch: $DOCS_BRANCH"
echo "GitHub user: $GITHUB_USER"

# Determine workflow type
if [ "$DOCS_URL" = "$REPO_URL" ]; then
    echo "✓ Single-repo workflow detected (same repository for docs and implementation)"
    WORKFLOW_TYPE="single-repo"
else
    echo "✓ Multi-repo workflow detected (separate docs and target repositories)"
    WORKFLOW_TYPE="multi-repo"
fi

# Repository Setup Based on Workflow Type
if [ "$WORKFLOW_TYPE" = "single-repo" ]; then
    echo "=== SINGLE-REPO WORKFLOW ==="
    # Check if repository already exists (retry scenario)
    if [ -d "$TARGET_REPO_NAME" ]; then
        echo "🔄 REPOSITORY: UPDATE - directory already exists"
        echo "📁 Found existing repository '$TARGET_REPO_NAME', updating..."
        cd "$TARGET_REPO_NAME"
        git fetch origin
        git checkout "$DOCS_BRANCH"
        git reset --hard "origin/$DOCS_BRANCH"
        cd /workspace
        echo "✓ Repository updated successfully"
    else
        echo "📥 REPOSITORY: CLONING - first time setup"
        if ! git clone "$REPO_URL" "$TARGET_REPO_NAME"; then
            echo "❌ Failed to clone repository: $REPO_URL"
            exit 1
        fi
        cd "$TARGET_REPO_NAME" && git checkout "$DOCS_BRANCH" && cd /workspace
        echo "✓ Repository cloned successfully"
    fi
    
    # Set working directory to the repository root
    REPO_NAME="$TARGET_REPO_NAME"
    echo "✓ Working directory: /workspace/$REPO_NAME"
    echo "✓ Task files already available in repository"

else
    echo "=== MULTI-REPO WORKFLOW ==="
    
    # Step 1: Clone or update docs repository temporarily
    if [ -d "/tmp/docs-repo" ]; then
        echo "🔄 DOCS REPOSITORY: UPDATE - temporary directory exists"
        cd /tmp/docs-repo
        git fetch origin
        git checkout "$DOCS_BRANCH" 
        git reset --hard "origin/$DOCS_BRANCH"
        cd /workspace
        echo "✓ Docs repository updated"
    else
        echo "📥 DOCS REPOSITORY: CLONING - extracting task files"
        if ! git clone "$DOCS_URL" /tmp/docs-repo; then
            echo "❌ Failed to clone docs repository: $DOCS_URL"
            exit 1
        fi
        cd /tmp/docs-repo && git checkout "$DOCS_BRANCH" && cd /workspace
        echo "✓ Docs repository cloned to temporary location"
    fi
    
    # Step 2: Clone or update target repository  
    if [ -d "$TARGET_REPO_NAME" ]; then
        echo "🔄 TARGET REPOSITORY: UPDATE - directory already exists"
        echo "📁 Found existing target repository '$TARGET_REPO_NAME', updating..."
        cd "$TARGET_REPO_NAME"
        git fetch origin main
        git reset --hard origin/main
        cd /workspace
        echo "✓ Target repository updated successfully"
    else
        echo "📥 TARGET REPOSITORY: CLONING - first time setup"
        if ! git clone "$REPO_URL" "$TARGET_REPO_NAME"; then
            echo "❌ Failed to clone target repository: $REPO_URL"
            exit 1
        fi
        echo "✓ Target repository cloned successfully"
    fi
    
    # Step 3: Copy task files from docs repo to target repo
    echo "📋 TASK FILES: COPYING from docs to target repository"
    mkdir -p "/workspace/$TARGET_REPO_NAME/task"
    
    # Determine docs project directory path
    {{#if docs_project_directory}}
    if [ "{{docs_project_directory}}" = "." ]; then
        DOCS_PATH="/tmp/docs-repo/.taskmaster"
    else
        DOCS_PATH="/tmp/docs-repo/{{docs_project_directory}}/.taskmaster"
    fi
    {{else}}
    DOCS_PATH="/tmp/docs-repo/.taskmaster"
    {{/if}}
    
    # Copy specific task files
    TASK_DIR="$DOCS_PATH/docs/task-{{task_id}}"
    echo "🔍 DEBUG: Looking for task files at: $TASK_DIR"
    echo "🔍 DEBUG: Docs path is: $DOCS_PATH"
    echo "🔍 DEBUG: Contents of docs temp directory:"
    ls -la /tmp/docs-repo/.taskmaster/ || echo "No .taskmaster found"
    echo "🔍 DEBUG: Contents of docs directory:"
    ls -la /tmp/docs-repo/.taskmaster/docs/ || echo "No docs directory found"
    
    if [ -d "$TASK_DIR" ]; then
        echo "🔍 DEBUG: Task directory found, contents:"
        ls -la "$TASK_DIR"
        
        echo "✅ Copying task.md..."
        cp "$TASK_DIR/task.md" "/workspace/$TARGET_REPO_NAME/task/" && echo "✓ task.md copied" || echo "❌ task.md copy failed"
        
        echo "✅ Copying acceptance-criteria.md..."
        cp "$TASK_DIR/acceptance-criteria.md" "/workspace/$TARGET_REPO_NAME/task/" && echo "✓ acceptance-criteria.md copied" || echo "❌ acceptance-criteria.md copy failed"
        
        echo "✅ Copying prompt.md..."
        cp "$TASK_DIR/prompt.md" "/workspace/$TARGET_REPO_NAME/task/" && echo "✓ prompt.md copied" || echo "❌ prompt.md copy failed"
        
        echo "✓ Task {{task_id}} files copied from $TASK_DIR"
    else
        echo "❌ CRITICAL: Task {{task_id}} directory not found at: $TASK_DIR"
        echo "🔍 DEBUG: Available directories in docs:"
        find /tmp/docs-repo -name "task-*" -type d || echo "No task directories found"
    fi
    
    # Copy architecture.md from docs root
    ARCH_FILE="$DOCS_PATH/docs/architecture.md"
    if [ -f "$ARCH_FILE" ]; then
        cp "$ARCH_FILE" "/workspace/$TARGET_REPO_NAME/task/"
        echo "✓ Architecture documentation copied"
    else
        echo "⚠️ architecture.md not found at: $ARCH_FILE"
    fi
    
    # Copy tasks.json if it exists
    if [ -f "$DOCS_PATH/tasks.json" ]; then
        cp "$DOCS_PATH/tasks.json" "/workspace/$TARGET_REPO_NAME/task/"
        echo "✓ tasks.json copied"
    fi
    
    echo "✓ Task files copied to target repository"
    
    # DEBUG: Verify files were copied successfully
    echo "🔍 DEBUG: Contents of target task directory after copy:"
    ls -la "/workspace/$TARGET_REPO_NAME/task/" || echo "Task directory not found"
    echo "🔍 DEBUG: Checking if prompt.md exists:"
    [ -f "/workspace/$TARGET_REPO_NAME/task/prompt.md" ] && echo "✅ prompt.md exists" || echo "❌ prompt.md missing"
    
    # Step 4: Clean up docs repository
    echo "🧹 CLEANUP: Removing temporary docs repository"
    rm -rf /tmp/docs-repo
    echo "✓ Docs repository cleaned up"
    
    # Set working directory to the target repository root
    REPO_NAME="$TARGET_REPO_NAME"
    echo "✓ Working directory: /workspace/$REPO_NAME"
fi

# Setup feature branch for implementation
echo "=== BRANCH SETUP ==="
cd "/workspace/$REPO_NAME"

# Sync with latest main to prevent conflicts
echo "🔄 Syncing with latest main to prevent conflicts..."
git fetch origin main 2>/dev/null || git fetch origin master 2>/dev/null || echo "⚠️ Could not fetch main/master branch"

# Create or checkout feature branch
FEATURE_BRANCH="feature/task-{{task_id}}-implementation"
BRANCH_EXISTS="false"

    if git show-ref --verify --quiet refs/heads/$FEATURE_BRANCH; then
        BRANCH_EXISTS="true"
        echo "Feature branch '$FEATURE_BRANCH' exists, checking out..."
        git checkout $FEATURE_BRANCH

        echo "📥 Merging latest main into $FEATURE_BRANCH..."
        if git merge origin/main --no-edit; then
            echo "✓ Successfully merged latest main into feature branch"
        else
            echo "⚠️ MERGE CONFLICT: Cannot auto-merge main into $FEATURE_BRANCH"
            echo "❗ Manual conflict resolution required by Claude agent"
            echo ""
            echo "📋 Conflict files:"
            git status --porcelain | grep "^UU\|^AA\|^DD" || echo "   (Use 'git status' to see details)"
            echo ""
            echo "🔧 Claude will need to resolve conflicts manually before proceeding"
            # Don't exit - let Claude handle the conflicts
        fi
    else
        # Create new feature branch from latest main
        echo "Creating new feature branch '$FEATURE_BRANCH' from latest main..."
        git checkout -b $FEATURE_BRANCH origin/main
        echo "✓ Created feature branch: $FEATURE_BRANCH"
    fi

# 5. Set Working Directory (Critical for Claude Execution)
WORK_DIR="{{working_directory}}"
if [ "$WORK_DIR" = "." ] || [ -z "$WORK_DIR" ]; then
  CLAUDE_WORK_DIR="/workspace/$REPO_NAME"
else
  CLAUDE_WORK_DIR="/workspace/$REPO_NAME/$WORK_DIR"
fi
mkdir -p "$CLAUDE_WORK_DIR" && cd "$CLAUDE_WORK_DIR"
echo "✓ Set working directory: $CLAUDE_WORK_DIR"
echo "🔑 CRITICAL: Claude will be launched from this directory"

# Working directory setup completed above

# Configure git user after successful clone
echo "=== POST-CLONE GIT CONFIGURATION ==="
# Fix dubious ownership issues
git config --global --add safe.directory "/workspace/$REPO_NAME"
echo "✓ Added repository to safe directories"

# Set git config locally in the working repository (persistent on PVC)
if [ -d "/workspace/$REPO_NAME/.git" ]; then
    cd "/workspace/$REPO_NAME"
    git config --local user.name "$GITHUB_USER"
    git config --local user.email "${GITHUB_USER}@users.noreply.github.com"
    # Set up automatic upstream for new branches
    git config --local push.autoSetupRemote true
    echo "✓ Configured git user in target repository: $GITHUB_USER"
    echo "✓ Enabled automatic upstream setup for new branches"
fi

cd /workspace

# Copy ConfigMap files to working directory (AFTER repository clone)
echo "=== CONFIGMAP FILE SETUP ==="

# Claude working directory already set above during repository setup

echo "Setting up files in Claude working directory: $CLAUDE_WORK_DIR"
cd "$CLAUDE_WORK_DIR"

# Copy all files from ConfigMap to working directory
if [ -d "/task-files" ]; then
  echo "Copying ConfigMap files to working directory..."

  # CLAUDE.md Memory Persistence Logic (controlled by overwriteMemory CRD field)
        OVERWRITE_MEMORY="{{overwrite_memory}}"

  # Handle CLAUDE.md based on overwriteMemory setting
        if [ "$OVERWRITE_MEMORY" = "true" ]; then
          # Overwrite mode: Always replace CLAUDE.md with fresh template
    cp "/task-files/CLAUDE.md" "$CLAUDE_WORK_DIR/CLAUDE.md"
    cp "/task-files/CLAUDE.md" "/workspace/CLAUDE.md"
          echo "✓ Overwrote CLAUDE.md memory file (fresh start requested)"
          echo "✓ Copied CLAUDE.md to workspace root for easy access"
        else
          # Preserve mode (default): Only copy if doesn't exist
          if [ ! -f "$CLAUDE_WORK_DIR/CLAUDE.md" ]; then
      # Initial creation - copy from ConfigMap
      cp "/task-files/CLAUDE.md" "$CLAUDE_WORK_DIR/CLAUDE.md"
      cp "/task-files/CLAUDE.md" "/workspace/CLAUDE.md"
            echo "✓ Created initial CLAUDE.md memory file"
            echo "✓ Copied CLAUDE.md to workspace root for easy access"
          else
            echo "✓ Preserved existing CLAUDE.md memory file (maintaining accumulated context)"
            # Still copy to workspace root for consistency
            cp "$CLAUDE_WORK_DIR/CLAUDE.md" "/workspace/CLAUDE.md"
            echo "✓ Synced CLAUDE.md to workspace root"
          fi
        fi

  # Copy all other markdown files (excluding CLAUDE.md)
  for md_file in /task-files/*.md; do
    if [ -f "$md_file" ]; then
      basename_file=$(basename "$md_file")
      # Skip CLAUDE.md since we handled it above
      if [ "$basename_file" != "CLAUDE.md" ]; then
        cp "$md_file" "$CLAUDE_WORK_DIR/"
        echo "✓ Updated $basename_file"
      fi
    fi
  done

  # Verify enterprise settings (mounted directly from ConfigMap)
  if [ -f "/etc/claude-code/managed-settings.json" ]; then
    echo "✓ Enterprise settings verified"
    if ! jq empty /etc/claude-code/managed-settings.json 2>/dev/null; then
      echo "❌ Invalid enterprise settings JSON"
      exit 1
    fi
  else
    echo "❌ Enterprise settings not found"
    exit 1
  fi

  # Copy guidelines files to working directory
  if [ -f "/task-files/coding-guidelines.md" ]; then
    cp /task-files/coding-guidelines.md "$CLAUDE_WORK_DIR/"
    echo "✓ Copied coding-guidelines.md to working directory"
  fi

  if [ -f "/task-files/github-guidelines.md" ]; then
    cp /task-files/github-guidelines.md "$CLAUDE_WORK_DIR/"
    echo "✓ Copied github-guidelines.md to working directory"
  fi

  # System prompt will be rendered inline (no file copying needed)
  echo "✓ System prompt template will be rendered inline"

  # Hook copying disabled
  echo "! Hook scripts disabled - no hooks will be copied"

  # Set up MCP configuration files
  echo "Setting up MCP configuration..."
  mkdir -p "$CLAUDE_WORK_DIR/.claude"
  chmod 755 "$CLAUDE_WORK_DIR/.claude"

  # Copy MCP configuration files from ConfigMap
  if [ -f "/task-files/mcp.json" ]; then
    cp /task-files/mcp.json "$CLAUDE_WORK_DIR/.claude/mcp.json"
    echo "✓ Copied mcp.json to .claude/mcp.json"
  else
    echo "⚠️  mcp.json template not found"
  fi

  if [ -f "/task-files/client-config.json" ]; then
    cp /task-files/client-config.json "$CLAUDE_WORK_DIR/.claude/client-config.json"
    echo "✓ Copied client-config.json to .claude/client-config.json"
  else
    echo "⚠️  client-config.json template not found"
  fi
  
  # Enterprise managed settings are mounted directly from ConfigMap  
  echo "=== ENTERPRISE MANAGED SETTINGS ==="
  echo "✓ Settings mounted directly from ConfigMap at: /etc/claude-code/managed-settings.json"
  echo "✓ No copying needed - mount automatically reflects latest ConfigMap changes"

  echo "✓ ConfigMap files copied to $CLAUDE_WORK_DIR"
else
  echo "⚠️  Warning: /task-files directory not found (ConfigMap not mounted?)"
fi

# Copy Current Task Documentation to Working Directory
echo "=== TASK DOCUMENTATION SETUP ==="

# Task directory should already exist from multi-repo workflow or be created as needed
mkdir -p "$CLAUDE_WORK_DIR/task"

# Task documentation should already be available in the task/ directory
if [ "$WORKFLOW_TYPE" = "single-repo" ]; then
    echo "✓ Task documentation available from repository's .taskmaster directory"
else
    echo "✓ Task documentation copied from docs repository during multi-repo setup"
fi

echo '=== WORKSPACE VALIDATION ==='

# Check for required files in Claude's working directory
MISSING_FILES=""
REQUIRED_FILES="CLAUDE.md"

echo "Checking for required files..."
for file in $REQUIRED_FILES; do
  if [ ! -f "$CLAUDE_WORK_DIR/$file" ]; then
    echo "ERROR: Missing required file: $CLAUDE_WORK_DIR/$file"
    MISSING_FILES="$MISSING_FILES $file"
  else
    echo "✓ Found: $CLAUDE_WORK_DIR/$file"
    # Show file size for verification
    size=$(wc -c < "$CLAUDE_WORK_DIR/$file" 2>/dev/null || echo "0")
    echo "  File size: $size bytes"
  fi
done

# Check git repository (REQUIRED for implementation tasks)
if [ ! -d "/workspace/$REPO_NAME/.git" ]; then
  echo "✗ CRITICAL ERROR: No target git repository found!"
  MISSING_FILES="$MISSING_FILES git-repository"
else
  echo "✓ Found: target git repository"
fi

# If any files are missing, abort
if [ -n "$MISSING_FILES" ]; then
  echo ""
  echo "═══════════════════════════════════════════════════════════════"
  echo "║                 WORKSPACE VALIDATION FAILED                  ║"
  echo "═══════════════════════════════════════════════════════════════"
  echo ""
  echo "The following required files are missing:"
  for missing in $MISSING_FILES; do
    case "$missing" in
      "CLAUDE.md")
        echo "  ❌ $missing - Main task instructions for Claude"
        ;;
      "git-repository")
        echo "  ❌ $missing - Required for committing implementation changes"
        ;;
      *)
        echo "  ❌ $missing"
        ;;
    esac
  done
  echo ""
  echo "These files should have been created by the ConfigMap setup process."
  echo "Claude will NOT be started to avoid wasting API credits."
  echo ""
  exit 1
fi

echo "✓ All required files present. Workspace is valid."

echo '=== IMPLEMENTATION TASK DIAGNOSTICS ==='
echo "Project directory: $CLAUDE_WORK_DIR"
echo "Project directory contents:"
ls -la "$CLAUDE_WORK_DIR"
echo ""

# Show git status
echo "Git status:"
git status 2>/dev/null || echo "Git status unavailable"
echo ""

echo '=== CLAUDE EXECUTION ==='

# Export necessary variables
export SERVICE_NAME="{{service}}"
export TASK_ID="{{task_id}}"

# Change to project directory before running Claude
cd "$CLAUDE_WORK_DIR"
echo "Changed to directory: $(pwd)"

# Verify we're in the correct directory and have required files
echo "=== WORKING DIRECTORY VERIFICATION ==="
echo "Current working directory: $(pwd)"
echo "Expected directory: $CLAUDE_WORK_DIR"
if [ "$(pwd)" != "$CLAUDE_WORK_DIR" ]; then
  echo "❌ ERROR: Failed to change to correct working directory!"
  echo "Attempting to change directory again..."
  cd "$CLAUDE_WORK_DIR" || exit 1
  echo "✓ Successfully changed to: $(pwd)"
fi

# Verify setup
echo "✓ Code implementation environment ready"

# Build Claude command
CLAUDE_CMD="claude -p --output-format stream-json --verbose"

# Add model flag if specified via environment variable
if [ -n "$MODEL" ]; then
    CLAUDE_CMD="$CLAUDE_CMD --model $MODEL"
    echo "Using specified model: $MODEL"
fi

# Add continue flag if this is a retry attempt or user requested continuation
{{#if continue_session}}
CLAUDE_CMD="$CLAUDE_CMD --continue"
echo 'Adding --continue flag (attempt {{attempts}}{{#if user_requested}} - user requested{{/if}})'
{{/if}}

echo "════════════════════════════════════════════════════════════════"
echo "║                    STARTING CLAUDE EXECUTION                  ║"
echo "════════════════════════════════════════════════════════════════"
echo "Command: $CLAUDE_CMD"
echo "Note: Claude will automatically read CLAUDE.md from the working directory"

# Inline system prompt (static content)
SYSTEM_PROMPT='## 🚨 CRITICAL SYSTEM REQUIREMENTS 🚨

**⛔ OVERCONFIDENCE MITIGATION - MANDATORY VERIFICATION ⛔**

You have a DANGEROUS tendency to declare task completion before actually verifying everything works. This is ABSOLUTELY UNACCEPTABLE.

**MANDATORY VERIFICATION REQUIREMENTS:**
- ✅ **MUST** actually run and test your code - never assume it works
- ✅ **MUST** verify ALL acceptance criteria through actual testing
- ✅ **MUST** confirm your changes don'\''t break existing functionality
- ✅ **MUST** test end-to-end workflows and edge cases
- ✅ **MUST** run all linters and build checks successfully
- ✅ **CANNOT** claim completion based on code appearance alone

**YOU ARE PROHIBITED FROM CLAIMING SUCCESS UNTIL:**
1. You have executed and verified every piece of functionality
2. You have tested integration with existing systems
3. You have confirmed all acceptance criteria pass through testing
4. All automated tests pass (linting, builds, unit tests)
5. You have verified the solution works end-to-end in practice

**IF YOU DECLARE SUCCESS WITHOUT VERIFICATION, YOU HAVE FAILED.**

## 🔧 ORCHESTRATOR EXECUTION CONTEXT

- **Service**: {{service}}
- **Task ID**: {{task_id}}
- **Repository**: {{repository_url}}
- **Working Directory**: {{working_directory}}

{{#if continue_session}}
## 🔄 CONTINUE SESSION - PR COMMENT RESOLUTION PRIORITY

**⚠️ MANDATORY FIRST STEP: Before proceeding with any other work, you MUST:**

1. **Check for unresolved PR comments**: Use `gh pr view --json reviews` or check the PR directly
2. **Resolve ALL pending comments first**: Address reviewer feedback, fix issues, respond to questions
3. **Push comment resolutions**: Commit and push any fixes for reviewer concerns
4. **Only then proceed**: After ALL PR comments are resolved, continue with the main task

**This ensures reviewer feedback takes priority and maintains collaborative workflow quality.**

{{/if}}
## ⚠️ EXECUTION REQUIREMENTS

- **Follow patterns**: Use @coding-guidelines.md and @github-guidelines.md
- **GitHub workflow**: Read @github-guidelines.md for commit standards and **🚨 MANDATORY: CREATE A PULL REQUEST USING `gh pr create` - THE TASK IS NOT COMPLETE WITHOUT THIS STEP 🚨**
- **Verify continuously**: Run tests and checks after each significant change
- **Commit incrementally**: Don'\''t save all changes for the end
- **Test thoroughly**: Validate against acceptance criteria before completion

**Remember**: Focus on thorough implementation and verification.'

echo "Starting Claude execution..."
echo "=========================="

# Safe mode toggle for debugging (prevents token consumption)
SAFE_MODE="true"  # Set to "false" for full task execution

if [ "$SAFE_MODE" = "true" ]; then
    echo "🛡️ SAFE MODE ENABLED - Running simple test instead of full task"
    echo "What time is it? Please answer this simple question and exit immediately." | $CLAUDE_CMD
else
    # Check if prompt.md exists and use it as main prompt
    if [ -f "$CLAUDE_WORK_DIR/task/prompt.md" ]; then
        echo "✓ Using task-specific prompt from docs service: task/prompt.md"

        echo "startingTask:{{task_id}}"
        echo ""

        # Use main prompt with appended system prompt
        $CLAUDE_CMD --append-system-prompt "$SYSTEM_PROMPT" "$(cat $CLAUDE_WORK_DIR/task/prompt.md)"
    else
        echo "❌ ERROR: No prompt.md found from docs service"
        echo "The docs service should always provide task/prompt.md"
        echo "Check docs repository and task configuration"
        exit 1
    fi
fi

echo '════════════════════════════════════════════════════════════════'
echo '║                 IMPLEMENTATION TASK COMPLETE                 ║'
echo '════════════════════════════════════════════════════════════════'

# Claude execution completed - no hooks configured
echo "Claude has completed successfully."
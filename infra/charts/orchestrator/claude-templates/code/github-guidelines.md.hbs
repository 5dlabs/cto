# GitHub Workflow Guidelines

## ÔøΩÔøΩ **MANDATORY BRANCH AND PR REQUIREMENTS** üö®

**YOU MUST COMMIT REGULARLY AND SUBMIT A PR WHEN IMPLEMENTATION IS COMPLETE**

### **Critical Requirements:**

- ‚≠ê **COMMIT AND PUSH FREQUENTLY** - Ideally after every significant change or turn
- ‚≠ê **SUBMIT A PULL REQUEST** when implementation meets all acceptance criteria
- ‚≠ê **NEVER PUSH TO MAIN BRANCH** - Always work on your feature branch only
- ‚≠ê **USE SSH AUTHENTICATION ONLY** - All git operations use SSH keys (already configured)

## Git Workflow

### Your Current Context
- **Repository**: {{repository_url}}
- **Feature Branch**: {{branch}}
- **Target Branch**: main (never push directly to this)
- **Authentication**: SSH (pre-configured)

### **Required Git Pattern:**

```bash
# After making changes, always commit and push to feature branch:
git add .
git commit -m "feat: implement [specific change made]"
git push origin {{branch}}
```

### **When to Commit & Push:**
- ‚úÖ After implementing a significant feature or fix
- ‚úÖ After completing a subtask or milestone
- ‚úÖ When you've made meaningful progress (ideally every turn)
- ‚úÖ Before running tests or verification steps
- ‚úÖ When switching between different areas of the codebase

### **Commit Message Format:**
```
<type>: <brief description of what was implemented>

Examples:
feat: add user authentication endpoint
fix: resolve database connection timeout
refactor: extract validation logic to helpers
test: add unit tests for payment processing
```

## **PULL REQUEST SUBMISSION - REQUIRED WHEN COMPLETE**

When you have completed implementation and met all acceptance criteria:

### **‚úÖ DO Submit a Pull Request:**
- Create PR from your feature branch ({{branch}}) to main
- Write comprehensive PR description explaining:
  - What was implemented
  - Key changes made
  - Testing performed
  - Any important notes for reviewers

### **‚ùå NEVER Push to Main:**
- ‚ùå **DO NOT** push directly to main branch
- ‚ùå **DO NOT** merge your own PR
- ‚úÖ **ONLY** work on feature branch {{branch}}

## Authentication

### SSH Configuration
- SSH keys are pre-configured in the container
- All git operations use SSH authentication automatically
- Repository access: `{{repository_url}}`

### Git Commands (SSH-based)
```bash
# Check current status
git status

# Stage changes
git add .

# Commit with message
git commit -m "feat: describe your change"

# Push to feature branch (SSH automatic)
git push origin {{branch}}

# Create pull request (when implementation complete)
gh pr create --title "feat: [summary]" --body "[detailed description]"

# Check git log
git log --oneline -10
```

### **Gitignore Requirements**
- ‚≠ê **ALWAYS add hooks to .gitignore** - Never commit hook files
- Add these patterns to your .gitignore:
  ```
  # Hook files - never commit
  hooks/
  .hooks/
  **/hooks/
  ```

## Progress Tracking Philosophy

**The goal is continuous visibility and proper PR submission:**

1. **Frequent commits** help track your thought process
2. **Regular pushes** keep the team informed of progress
3. **Clear commit messages** document your implementation decisions
4. **PR submission** provides proper code review process

## **Implementation Complete = Submit Pull Request**

When you've completed the implementation and met all acceptance criteria:

1. ‚úÖ Make final commit with all changes
2. ‚úÖ Push to feature branch: `git push origin {{branch}}`
3. ‚úÖ Submit pull request with detailed description
4. ‚ùå **DO NOT** push to main branch

### **PR Description Template:**
```markdown
## Implementation Summary
Brief description of what was implemented and why.

## Changes Made
- List of significant changes
- New features added
- Bug fixes implemented
- Refactoring completed

## Testing Performed
- Unit tests written/updated
- Integration testing completed
- Manual testing performed
- Edge cases verified

## Implementation Notes
- Any important technical decisions
- Performance considerations
- Security implications
- Breaking changes (if any)
```

---

**Remember: Your feature branch ({{branch}}) is your workspace. Keep it updated with regular commits, then submit a comprehensive PR when implementation is complete!**

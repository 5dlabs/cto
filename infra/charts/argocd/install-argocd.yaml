---
# Argo CD Installation via Helm Chart
# This file contains the Helm values for installing Argo CD
#
# Install command:
# helm repo add argo https://argoproj.github.io/argo-helm
# helm repo update
# helm install argocd argo/argo-cd --namespace argocd --create-namespace -f install-argocd.yaml

# Global Configuration
global:
  # Use NodePort for easier access in development/testing
  # Change to LoadBalancer or configure Ingress for production
  service:
    type: NodePort

# Server Configuration
server:
  # Enable insecure mode for easier development setup
  # TODO: Configure TLS for production
  extraArgs:
    - --insecure
  
  service:
    type: NodePort
    nodePortHttp: 30080
    nodePortHttps: 30443
  
  # Configure admin password (change this!)
  config:
    # Disable built-in admin user after setting up proper RBAC
    admin.enabled: "true"
    # Allow local users for development
    users.anonymous.enabled: "false"
    
    # Repository credentials for private repos
    repositories: |
      - url: https://github.com/5dlabs/platform
        passwordSecret:
          name: platform-repo-secret
          key: password
        usernameSecret:
          name: platform-repo-secret
          key: username
      - url: https://github.com/5dlabs
        passwordSecret:
          name: github-org-secret
          key: password
        usernameSecret:
          name: github-org-secret
          key: username

  # RBAC Configuration
  rbacConfig:
    # Default policy - can view but not modify
    policy.default: role:readonly
    
    # Custom RBAC policies
    policy.csv: |
      # Admin role - full access
      p, role:admin, applications, *, */*, allow
      p, role:admin, clusters, *, *, allow
      p, role:admin, repositories, *, *, allow
      
      # Developer role - can manage applications
      p, role:developer, applications, *, */*, allow
      p, role:developer, applications, action/*, */*, allow
      p, role:developer, repositories, get, *, allow
      
      # CI/CD role for GitHub Actions
      p, role:cicd, applications, sync, */*, allow
      p, role:cicd, applications, get, */*, allow
      p, role:cicd, applications, action/*, */*, allow

# Application Controller
controller:
  # Enable metrics for monitoring
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false  # Enable if you have Prometheus operator
  
  # Resource limits
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

# Repository Server
repoServer:
  # Resource limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Redis for caching
redis:
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

# Application Set Controller (for managing multiple applications)
applicationSet:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Notifications Controller
notifications:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "claude-agent.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "claude-agent.name" . }}
    helm.sh/chart: {{ include "claude-agent.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: {{ include "claude-agent.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "claude-agent.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "claude-agent.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: claude-agent
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-lc", "set -e; FIFO=/workspace/agent-input.jsonl; rm -f $FIFO; mkfifo $FIFO; exec 9> $FIFO; echo '{\"type\":\"user\",\"message\":{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"Agent ready. Send input.\"}]}}' >&9; exec claude -p --output-format stream-json --input-format stream-json --verbose < $FIFO"]
          env: {{- toYaml .Values.env | nindent 12 }}
          ports:
            - name: ssh
              containerPort: 22
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: workspace
              mountPath: {{ .Values.persistence.mountPath }}
            {{- end }}
        - name: input-bridge
          image: alpine:3.20
          command: ["/bin/sh", "-lc", "apk add --no-cache busybox-extras curl jq; mkfifo -m 666 /workspace/agent-input.jsonl 2>/dev/null || true; printf 'HTTP/1.1 200 OK\r\n\r\n' > /dev/null; while true; do nc -l -p {{ .Values.api.port }} -e /bin/sh -c 'read line; while [ "$line" != $'\r' ]; do read line; done; body=$(cat); text=$(echo "$body" | jq -r .text 2>/dev/null); if [ -n "$text" ]; then printf "{\"type\":\"user\",\"message\":{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":%s}]}}\n" "$(echo "$text" | jq -Rs .)" >> /workspace/agent-input.jsonl; fi; printf 'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{"ok":true}''; done"]
          ports:
            - name: http
              containerPort: {{ .Values.api.port }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: workspace
              mountPath: {{ .Values.persistence.mountPath }}
            {{- end }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.persistence.storageClassName | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- end }}



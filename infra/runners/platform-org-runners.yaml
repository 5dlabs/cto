---
# Service account for runners (if not already exists)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: github-runner
  namespace: arc-systems
---
# ClusterRole for deployment permissions (if not already exists)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: github-runner-deploy
rules:
  # Core resources
  - apiGroups: [""]
    resources: ["namespaces", "services", "secrets", "configmaps", "persistentvolumeclaims", "serviceaccounts"]
    verbs: ["get", "list", "create", "update", "patch", "delete", "watch"]
  - apiGroups: [""]
    resources: ["pods", "pods/log", "nodes"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch"]
  # Apps resources
  - apiGroups: ["apps"]
    resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # Batch resources
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "create", "update", "patch", "delete", "watch"]
  # RBAC resources
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # CRDs
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  # Orchestrator CRDs
  - apiGroups: ["agents.platform"]
    resources: ["coderuns", "docsruns"]
    verbs: ["get", "list", "create", "update", "patch", "delete", "watch"]
  - apiGroups: ["agents.platform"]
    resources: ["coderuns/status", "docsruns/status"]
    verbs: ["get", "update", "patch"]
  # Helm resources
  - apiGroups: ["helm.sh"]
    resources: ["*"]
    verbs: ["*"]
---
# Bind ClusterRole to service account (if not already exists)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: github-runner-deploy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: github-runner-deploy
subjects:
  - kind: ServiceAccount
    name: github-runner
    namespace: arc-systems
---
# Persistent Volume Claim for Rust caching
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rust-cache-pvc
  namespace: arc-systems
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: local-path
---
# Organization-level runners with full configuration
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerDeployment
metadata:
  name: platform-org-runners
  namespace: arc-systems
spec:
  replicas: 3  # Three runners for the organization
  template:
    spec:
      # Organization-level configuration
      organization: 5dlabs

      # GitHub authentication using the controller-manager secret
      githubAPICredentialsFrom:
        secretRef:
          name: controller-manager

      # Enhanced runner labels for identification
      labels:
        - self-hosted
        - linux
        - x64
        - k8s-runner
        - rust-builder
        - org-runner
        - optimized

      # Enhanced resources for better performance
      resources:
        limits:
          cpu: "4"
          memory: "8Gi"
        requests:
          cpu: "2"
          memory: "4Gi"

      # Use the working rust-builder image
      image: ghcr.io/5dlabs/rust-builder:1.2.0
      imagePullPolicy: Always
      dockerEnabled: true
      dockerdWithinRunnerContainer: true

      # Optimized environment variables
      env:
        - name: RUNNER_FEATURE_FLAG_EPHEMERAL
          value: "false"
        - name: PATH
          value: "/home/runner/.cargo/bin:/shared/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        # Rust optimizations
        - name: CARGO_HOME
          value: "/cache/cargo"
        - name: RUSTUP_HOME
          value: "/cache/rustup"
        - name: SCCACHE_DIR
          value: "/cache/sccache"
        - name: SCCACHE_CACHE_SIZE
          value: "40G"
        - name: RUSTC_WRAPPER
          value: "sccache"
        - name: CARGO_TARGET_DIR
          value: "/cache/target"

      # Service account
      serviceAccountName: github-runner

      # Image pull secrets for private registries
      imagePullSecrets:
        - name: ghcr-secret

      # Init containers for cache setup and tool installation
      initContainers:
        - name: setup-cache
          image: ghcr.io/5dlabs/rust-builder:1.2.0
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Setting up cache directories..."
              mkdir -p /cache/cargo /cache/rustup /cache/sccache /cache/target
              chown -R 1000:1000 /cache
              chmod -R 755 /cache
              echo "Cache setup complete"
          volumeMounts:
            - name: rust-cache
              mountPath: /cache
              subPath: rust-cache
          securityContext:
            runAsUser: 0
            runAsGroup: 0
        - name: install-tools
          image: alpine:3.19
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Installing additional tools..."
              apk add --no-cache wget tar
              mkdir -p /shared/bin

              # kubectl
              wget -qO /shared/bin/kubectl https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl
              chmod +x /shared/bin/kubectl

              # helm
              wget -qO- https://get.helm.sh/helm-v3.14.0-linux-amd64.tar.gz | tar xz
              mv linux-amd64/helm /shared/bin/helm
              chmod +x /shared/bin/helm

              # GitHub CLI
              wget -qO- https://github.com/cli/cli/releases/download/v2.40.0/gh_2.40.0_linux_amd64.tar.gz | tar xz
              mv gh_2.40.0_linux_amd64/bin/gh /shared/bin/gh
              chmod +x /shared/bin/gh

              echo "Tools installed:"
              ls -la /shared/bin/
          volumeMounts:
            - name: shared-tools
              mountPath: /shared

      # Volumes for caching and tools
      volumes:
        - name: rust-cache
          persistentVolumeClaim:
            claimName: rust-cache-pvc
        - name: shared-tools
          emptyDir: {}

      volumeMounts:
        - name: rust-cache
          mountPath: /cache
          subPath: rust-cache
        - name: shared-tools
          mountPath: /shared

      # Security context
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

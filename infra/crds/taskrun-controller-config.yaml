apiVersion: v1
kind: ConfigMap
metadata:
  name: taskrun-controller-config
  namespace: orchestrator
data:
  config.yaml: |
    # TaskRun Controller Configuration
    # This replaces the Helm values.yaml for agent deployments
    
    # Job configuration
    job:
      backoffLimit: 3
      activeDeadlineSeconds: 3600    # 1 hour timeout
      ttlSecondsAfterFinished: 86400 # 24 hours cleanup
      restartPolicy: "OnFailure"
    
    # Claude agent configuration
    agent:
      image:
        repository: "ghcr.io/5dlabs/platform/claude-code"
        tag: "1.0.56"
        pullPolicy: "IfNotPresent"
      
      # Command and args for Claude
      command: ["claude"]
      args:
        - "-p"
        - "--verbose"
        - "--output-format"
        - "stream-json"
        - "Read the task context in CLAUDE.md and begin implementing the requested service. Follow the design specification and ensure all acceptance criteria are met. When your implementation is complete and all tests pass, you MUST create a pull request by staging all changes with 'git add -A', committing with a descriptive message, and creating a pull request using 'gh pr create --title \"Implement [task name]\" --body \"Implementation complete per task specifications\"'. The PR creation is MANDATORY - do not mark the task as complete without creating a PR."
      
      # Resources for agent container
      resources:
        requests:
          cpu: "2"
          memory: "4Gi"
        limits:
          cpu: "4"
          memory: "8Gi"
      
      # Security context - using node user from devcontainer
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 1000  # node user in devcontainer
      
      # Environment variables for agent
      env:
        # Log configuration
        - name: LOG_LEVEL
          value: "info"
        # Working directory will be set to /workspace/{service_name}
        # Telemetry environment variables are generated from telemetry section
    
    # Note: Init containers have been replaced with separate prep jobs
    # Prep jobs handle workspace preparation for implementation tasks
    # Documentation generation tasks skip prep and create Claude jobs directly
    
    # Storage configuration
    storage:
      # Using shared workspace PVC for all services
      pvcName: "shared-workspace"
      storageClass: "local-path"
      accessMode: "ReadWriteOnce"
      size: "50Gi"
      
      # Whether to create PVC if it doesn't exist
      autoCreate: false  # Shared workspace should be pre-created
    
    # Node affinity configuration
    nodeAffinity:
      enabled: true
      required: true  # Use requiredDuringSchedulingIgnoredDuringExecution
      key: "kubernetes.io/hostname"
      # Values will be determined dynamically based on PVC node
      # or can be overridden here:
      values: []
    
    # Pod configuration
    pod:
      # Service account
      serviceAccountName: "default"
      
      # Image pull secrets
      imagePullSecrets:
        - name: "ghcr-secret"
      
      # Pod security context
      securityContext:
        fsGroup: 1000  # node group
        runAsNonRoot: true
        runAsUser: 1000  # node user
      
      # Annotations
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    
    # Controller behavior
    controller:
      # Reconciliation interval (seconds)
      reconcileInterval: 30
      
      # How many old jobs to keep per task
      historyLimit: 5
      
      # Whether to automatically retry failed jobs
      autoRetry: false
      maxRetries: 3
    
    # Volume configuration
    volumes:
      # Claude home directory - ephemeral by default
      claudeHome:
        persistent: false
        # existingClaim: "claude-home-pvc"  # Uncomment to use persistent
      
      # Claude settings
      claudeSettings:
        # Default settings.json content for Claude
        settings: |
          {
            "gitHubAuth": "device",
            "permissions": {
              "allow": [
                "Bash(*)",
                "Read(*)",
                "Write(*)",
                "Edit(*)",
                "MultiEdit(*)",
                "Glob(*)",
                "Grep(*)",
                "LS(*)",
                "TodoRead(*)",
                "TodoWrite(*)",
                "WebFetch(*)",
                "WebSearch(*)"
              ],
              "deny": []
            },
            "defaultMode": "allowEdits"
          }
      
      # Log directory for agent output
      logs:
        enabled: true
        path: "/var/log/claude-code"
        filename: "claude-code.log"
    
    # Telemetry configuration
    telemetry:
      enabled: true
      
      # OTLP collector configuration
      otlpEndpoint: "otel-collector-opentelemetry-collector.telemetry.svc.cluster.local:4317"
      otlpProtocol: "grpc"  # grpc or http
      otlpInsecure: true
      
      # Service identification
      serviceName: "claude-code"
      serviceVersion: "1.0.0"
      # serviceNamespace will be dynamically set
      
      # Team/Organization attributes
      teamName: "platform"
      department: "engineering"
      environment: "development"
      costCenter: ""
      
      # Export intervals (milliseconds)
      metricsExportInterval: "60000"  # 1 minute
      metricsExportTimeout: "30000"   # 30 seconds
      logsExportInterval: "5000"      # 5 seconds
      logsExportTimeout: "30000"      # 30 seconds
      
      # Cardinality control
      includeSessionId: true
      includeAccountUuid: true
      includeVersion: false
      
      # Additional OTEL configuration
      logLevel: "info"
      # Optional: Enable user prompt logging (privacy consideration)
      logUserPrompts: false
      
      # Optional: Custom resource attributes (comma-separated key=value pairs)
      customAttributes: ""
      
      # Cluster name for telemetry
      clusterName: "telemetry-dev"
    
    # Fluent-bit sidecar for log collection (optional)
    fluentBit:
      enabled: false
      image:
        repository: "fluent/fluent-bit"
        tag: "3.0"
        pullPolicy: "IfNotPresent"
      resources:
        requests:
          cpu: "50m"
          memory: "64Mi"
        limits:
          cpu: "100m"
          memory: "128Mi"
    
    # Secrets configuration
    # These will be read from environment variables or mounted secrets
    secrets:
      # Required: Anthropic API key
      apiKeySecretName: "anthropic-api-key"
      apiKeySecretKey: "api-key"
      
      # GitHub token secret
      githubTokenSecretName: "github-token"
      githubTokenSecretKey: "token"
      
      # Optional: OpenAI API key
      openaiApiKeySecretName: "openai-api-key"
      openaiApiKeySecretKey: "api-key"
      
      # Optional: Google API key
      googleApiKeySecretName: "google-api-key"
      googleApiKeySecretKey: "api-key"
      
      # Optional: AWS Bedrock credentials
      awsBedrockAccessKeySecretName: "aws-bedrock-credentials"
      awsBedrockAccessKeySecretKey: "access-key"
      awsBedrockSecretKeySecretName: "aws-bedrock-credentials"
      awsBedrockSecretKeySecretKey: "secret-key"
    
    # Claude-specific settings
    claudeSettings:
      # Tool permissions - allow/deny lists for each tool
      toolPermissions:
        bash:
          allow: ["*"]
          deny: []
        edit:
          allow: ["*"]
          deny: []
        write:
          allow: ["*"]
          deny: []
        read:
          allow: ["*"]
          deny: []
        multiEdit:
          allow: ["*"]
          deny: []
        webFetch:
          allow: ["*"]
          deny: []
        grep:
          allow: ["*"]
          deny: []
        glob:
          allow: ["*"]
          deny: []
        ls:
          allow: ["*"]
          deny: []
      
      # Environment settings
      environmentSettings:
        disableAutoupdater: true
        disableErrorReporting: true
        disableNonEssentialModelCalls: true
        maintainProjectWorkingDir: true
        cleanupPeriodDays: 7
        includeCoAuthoredBy: true
    
    # Labels to apply to all resources
    labels:
      # Common labels
      "app.kubernetes.io/managed-by": "taskrun-controller"
      "app.kubernetes.io/component": "agent"
      
    # Annotations to apply to pods
    annotations:
      # Checksum annotations will be added dynamically
      # for ConfigMap/Secret changes
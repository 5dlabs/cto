---
name: Deploy Agent Controller

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to deploy (e.g., v0.1.4)'
        required: true
        type: string
  push:
    branches:
      - feature/*
      - feat/*
      - fix/*
      - hotfix/*

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: 5dlabs

jobs:
  # Version determination
  version:
    runs-on: [k8s-runner]
    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.version.outputs.short-sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/tags/{0}', inputs.tag) || github.ref }}

      - name: Set version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.tag }}"
          else
            # For push events, use latest
            VERSION="latest"
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "📦 Deploy version: ${VERSION}"


  # Build only controller (skip Claude Code for now)
  build-controller:
    needs: [version]
    runs-on: [k8s-runner]
    # No container needed - the Arc runners now have the rust-builder image!
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/tags/{0}', inputs.tag) || github.ref }}

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: controller -> target
          shared-key: "rust-cache-deploy"

      - name: Build release binary
        working-directory: ./controller
        run: |
          echo "🏗️ Building controller binary..."
          cargo build --release --bin agent-controller
          
          # Copy binary to expected location for Docker build
          cp target/release/agent-controller agent-controller
          
          echo "📦 Built binary info:"
          ls -lh agent-controller
          file agent-controller

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Controller image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/images/controller/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/controller:${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/controller:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/controller:${{ needs.version.outputs.short-sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Show GHCR controller tags
        run: |
          echo "🔎 Latest GHCR tags for controller:"
          gh api -H "Accept: application/vnd.github+json" \
            "/orgs/5dlabs/packages/container/cto%2Fcontroller/versions?per_page=1" \
            | jq -r '.[0].metadata.container.tags'

  build-sidecar:
    needs: [version]
    runs-on: [k8s-runner]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/tags/{0}', inputs.tag) || github.ref }}

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: sidecar -> target
          shared-key: "rust-cache-sidecar-deploy"

      - name: Build sidecar binary
        working-directory: ./sidecar
        run: |
          echo "🏗️ Building sidecar binary..."
          cargo build --release
          
          # Copy binary to expected location for Docker build
          cp target/release/sidecar ./sidecar
          
          echo "📦 Built binary info:"
          ls -lh ./sidecar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push sidecar image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/images/sidecar/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/sidecar:${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/sidecar:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/sidecar:${{ needs.version.outputs.short-sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Show GHCR sidecar tags
        run: |
          echo "🔎 Latest GHCR tags for sidecar:"
          gh api -H "Accept: application/vnd.github+json" \
            "/orgs/5dlabs/packages/container/cto%2Fsidecar/versions?per_page=1" \
            | jq -r '.[0].metadata.container.tags'

  # Deploy immediately
  deploy:
    needs: [version, build-controller]
    runs-on: [k8s-runner]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.branch || github.ref }}

      - name: Setup tools
        run: |
          mkdir -p $HOME/bin
          if [ -f /shared/kubectl ]; then
            cp /shared/kubectl $HOME/bin/
            chmod +x $HOME/bin/kubectl
          fi
          if [ -f /shared/helm ]; then
            cp /shared/helm $HOME/bin/
            chmod +x $HOME/bin/helm
          fi
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: GitOps Update (Skipped)
        run: |
          echo "📝 GitOps configuration uses 'latest' tag - no update needed"
          echo "New image: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/controller:latest"

      - name: Force ArgoCD Sync
        run: |
          echo "🔄 Forcing ArgoCD to sync the updated configuration"
          
          # Wait a moment for Git changes to propagate
          sleep 5
          
          # Force ArgoCD application refresh and sync
          kubectl patch application controller -n argocd --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"hard"}}}'
          
          # Give ArgoCD time to process the sync (can't wait due to permissions)
          echo "⏳ ArgoCD sync triggered, waiting 30s for processing..."
          sleep 30
          
          echo "✅ ArgoCD sync triggered successfully"

      - name: Verify deployment
        run: |
          echo "🔍 Deployment verification..."
          kubectl get pods -n agent-platform -o wide
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=controller -n agent-platform --timeout=120s || true

          echo ""
          echo "✅ Deployment complete!"
          echo "📦 Deployed: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/controller:latest"
          echo "🏷️ Version: ${{ needs.version.outputs.version }}"

      - name: Show recent TaskRuns
        run: |
          echo "📋 Recent TaskRuns:"
          kubectl get taskruns -A --sort-by=.metadata.creationTimestamp | tail -10 || echo "No TaskRuns found"

---
name: Agent Images

# Automatically build latest agent images (Claude Code, Grok, etc.)
# Runs daily to ensure we always have the latest versions
# Can also be triggered manually or on agent-related changes

on:
  schedule:
    # Daily at 6 AM UTC (off-peak)
    - cron: '0 6 * * *'

  push:
    branches:
      - '**'
    paths:
      - 'infra/images/**'
      - '.github/workflows/agents-build.yml'
      - '.github/workflows/agents-build.yaml'

  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all agents even if versions match'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: 5dlabs

jobs:
  build-runtime:
    runs-on: [k8s-runner]
    permissions:
      contents: read
      packages: write
    outputs:
      built: ${{ steps.set-built.outputs.built }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Setup Node.js (for npm version discovery)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          check-latest: true

      - name: Compute base tag (git hash of Dockerfile)
        id: tag
        run: |
          set -euo pipefail
          HASH=$(git log -1 --format="%h" -- infra/images/runtime/Dockerfile)
          echo "tag=$HASH" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if base image exists
        id: check
        run: |
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/runtime:v${{ steps.tag.outputs.tag }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true
        uses: docker/setup-buildx-action@v3

      - name: Build and push base image
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true
        uses: docker/build-push-action@v5
        with:
          context: ./infra/images/runtime
          file: ./infra/images/runtime/Dockerfile
          platforms: linux/amd64
          pull: true
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/runtime:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/runtime:v${{ steps.tag.outputs.tag }}
          cache-from: |
            type=local,src=/cache/buildx/base
          cache-to: |
            type=local,dest=/cache/buildx/base,mode=max

      - name: Set build output
        id: set-built
        run: |
          if [[ "${{ steps.check.outputs.exists }}" == "false" || "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi

  build-agents:
    needs: build-runtime
    runs-on: [k8s-runner]
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: claude
            image: claude
            context: ./infra/images/claude
            file: ./infra/images/claude/Dockerfile
            version_type: npm
            version_pkg: "@anthropic-ai/claude-code"
            version_arg: CLAUDE_CODE_VERSION
          - id: grok
            image: grok
            context: ./infra/images/grok
            file: ./infra/images/grok/Dockerfile
            version_type: npm
            version_pkg: "@vibe-kit/grok-cli"
          - id: cursor
            image: cursor
            context: ./infra/images/cursor
            file: ./infra/images/cursor/Dockerfile
            version_type: script_hash
            script_url: https://cursor.com/install
          - id: openhands
            image: openhands
            context: ./infra/images/openhands
            file: ./infra/images/openhands/Dockerfile
            version_type: pypi
            pypi_pkg: openhands-ai
          - id: gemini
            image: gemini
            context: ./infra/images/gemini
            file: ./infra/images/gemini/Dockerfile
            version_type: npm
            version_pkg: "@google/gemini-cli"
            version_arg: CLI_VERSION
          - id: qwen
            image: qwen
            context: ./infra/images/qwen
            file: ./infra/images/qwen/Dockerfile
            version_type: npm
            version_pkg: "@qwen-code/qwen-code"
            version_arg: QWEN_CODE_VERSION
          - id: opencode
            image: opencode
            context: ./infra/images/opencode
            file: ./infra/images/opencode/Dockerfile
            version_type: script_hash
            script_url: https://opencode.ai/install
          - id: codex
            image: codex
            context: ./infra/images/codex
            file: ./infra/images/codex/Dockerfile
            version_type: npm
            version_pkg: "@openai/codex"
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Setup Node.js (ensure npm available in runner)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          check-latest: true
      - name: Verify Node/npm
        run: |
          node -v
          npm -v

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version (npm for npm agents, PyPI for pypi/pip agents, dir-hash otherwise)
        id: version
        run: |
          set -euo pipefail
          if [ "${{ matrix.version_type }}" = "npm" ]; then
            VERSION=$(npm view ${{ matrix.version_pkg }} version || echo "latest")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "arg_line=VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "ðŸ“¦ ${{ matrix.id }} npm version: $VERSION"
          elif [ "${{ matrix.version_type }}" = "pypi" ]; then
            if command -v jq >/dev/null 2>&1; then
              VERSION=$(curl -fsSL https://pypi.org/pypi/${{ matrix.pypi_pkg }}/json | jq -r .info.version)
            else
              VERSION=$(python3 -c "import json, urllib.request; print(json.load(urllib.request.urlopen('https://pypi.org/pypi/${{ matrix.pypi_pkg }}/json'))['info']['version'])")
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "arg_line=VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "ðŸ“¦ ${{ matrix.id }} PyPI version: $VERSION"
          elif [ "${{ matrix.version_type }}" = "pip" ]; then
            if command -v jq >/dev/null 2>&1; then
              VERSION=$(curl -fsSL https://pypi.org/pypi/${{ matrix.version_pkg }}/json | jq -r .info.version)
            else
              VERSION=$(python3 -c "import json, urllib.request; print(json.load(urllib.request.urlopen('https://pypi.org/pypi/${{ matrix.version_pkg }}/json'))['info']['version'])")
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "arg_line=VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "ðŸ“¦ ${{ matrix.id }} PyPI version: $VERSION"
          else
            # Use latest commit hash touching the image context directory as image version (stable, offline)
            VERSION=$(git log -1 --format="%h" -- ${{ matrix.context }}/)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "arg_line=" >> $GITHUB_OUTPUT
            echo "ðŸ“¦ ${{ matrix.id }} version (dir hash): $VERSION"
          fi

      - name: Debug resolved version and args
        run: |
          echo "Agent: ${{ matrix.id }}"
          echo "VERSION (resolved): ${{ steps.version.outputs.version }}"
          echo "ARG_LINE: ${{ steps.version.outputs.arg_line }}"

      # QEMU disabled on self-hosted runners; building amd64 only for speed/stability

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          platforms: linux/amd64
          pull: true
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/${{ matrix.image }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/${{ matrix.image }}:v${{ steps.version.outputs.version }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/runtime:v${{ needs.build-runtime.outputs.tag }}
            VERSION=${{ steps.version.outputs.version }}
            CACHE_BUST=${{ github.run_id }}
          cache-from: |
            type=local,src=/cache/buildx/${{ matrix.id }}
          cache-to: |
            type=local,dest=/cache/buildx/${{ matrix.id }},mode=max

      - name: Append summary
        run: |
          echo "### ${{ matrix.image }}" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Built version ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/${{ matrix.image }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/${{ matrix.image }}:v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  # Summary job
  summary:
    needs: [build-agents]
    if: always()
    runs-on: [k8s-runner]
    steps:
      - name: Generate summary header
        run: |
          echo "## ðŸ¤– Agent Images Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“‹ Results" >> $GITHUB_STEP_SUMMARY
          echo "Each agent section above lists latest and versioned tags." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”„ **Next run**: Tomorrow at 6 AM UTC (or trigger manually)" >> $GITHUB_STEP_SUMMARY

name: Agent Images

# Automatically build latest agent images (Claude Code, Grok, etc.)
# Runs daily to ensure we always have the latest versions
# Can also be triggered manually or on agent-related changes

on:
  schedule:
    # Daily at 6 AM UTC (off-peak)
    - cron: '0 6 * * *'

  push:
    branches:
      - '**'
    paths:
      - 'infra/images/**'
      - '.github/workflows/agents.yml'

  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all agents even if versions match'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  build-agent-runtime-base:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    outputs:
      built: ${{ steps.set-built.outputs.built }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute base tag (git hash of Dockerfile)
        id: tag
        run: |
          set -euo pipefail
          HASH=$(git log -1 --format="%h" -- infra/images/runtime/Dockerfile)
          echo "tag=$HASH" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if base image exists
        id: check
        run: |
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:v${{ steps.tag.outputs.tag }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU (multi-arch emulation)
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true
        uses: docker/setup-buildx-action@v3

      - name: Build and push base image
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true
        uses: docker/build-push-action@v5
        with:
          context: ./infra/images/runtime
          file: ./infra/images/runtime/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:v${{ steps.tag.outputs.tag }}
          # GitHub's default docker driver on ubuntu runners doesn't support cache export.
          # Disable cache-to and rely on registry/layer caching instead.
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Set build output
        id: set-built
        run: |
          if [[ "${{ steps.check.outputs.exists }}" == "false" || "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi
  # Build Claude Code agent
  build-claude-code:
    needs: build-agent-runtime-base
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      built: ${{ steps.set-built.outputs.built }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Claude Code CLI version
        id: version
        run: |
          CLAUDE_VERSION=$(npm view @anthropic-ai/claude-code version)
          echo "version=$CLAUDE_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Latest Claude Code CLI version on npm: $CLAUDE_VERSION"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check
        run: |
          echo "🔍 Checking if we have Claude Code version ${{ steps.version.outputs.version }}"
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/claude-code:v${{ steps.version.outputs.version }} > /dev/null 2>&1; then
            echo "✅ Image already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "🏗️ Need to build this version"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU (multi-arch emulation)
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Claude Code image
        id: build
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./infra/images/claude
          file: ./infra/images/claude/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/claude-code:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/claude-code:v${{ steps.version.outputs.version }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:v${{ needs.build-agent-runtime-base.outputs.tag }}
            CLAUDE_CODE_VERSION=${{ steps.version.outputs.version }}

      - name: Set build output
        id: set-built
        run: |
          if [[ "${{ steps.check.outputs.exists }}" == "false" || "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi

  # Build Grok agent
  build-grok-agent:
    needs: build-agent-runtime-base
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    outputs:
      built: ${{ steps.set-built.outputs.built }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if we need to build
        id: check
        run: |
          # For Grok, we'll use git commit hash of the image directory as version
          VERSION=$(git log -1 --format="%h" -- infra/images/grok/)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🔍 Grok agent version (git hash): $VERSION"

          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/grok-agent:$VERSION > /dev/null 2>&1; then
            echo "✅ Image already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "🏗️ Need to build this version"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU (multi-arch emulation)
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Grok agent image
        id: build
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./infra/images/grok
          file: ./infra/images/grok/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/grok-agent:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/grok-agent:v${{ steps.check.outputs.version }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:v${{ needs.build-agent-runtime-base.outputs.tag }}

      - name: Set build output
        id: set-built
        run: |
          if [[ "${{ steps.check.outputs.exists }}" == "false" || "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi

  # Build Cursor CLI agent
  build-cursor-agent:
    needs: build-agent-runtime-base
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    outputs:
      built: ${{ steps.set-built.outputs.built }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine Cursor installer hash (version)
        id: version
        run: |
          set -euo pipefail
          HASH=$(curl -fsSL https://cursor.com/install | sha256sum | awk '{print $1}')
          echo "version=$HASH" >> $GITHUB_OUTPUT
          echo "📦 Cursor installer hash: $HASH"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check
        run: |
          echo "🔍 Checking for cursor-agent version ${{ steps.version.outputs.version }}"
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/cursor-agent:v${{ steps.version.outputs.version }} > /dev/null 2>&1; then
            echo "✅ Image already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "🏗️ Need to build this version"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU (multi-arch emulation)
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Cursor CLI image
        id: build
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./infra/images/cursor
          file: ./infra/images/cursor/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/cursor-agent:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/cursor-agent:v${{ steps.version.outputs.version }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:v${{ needs.build-agent-runtime-base.outputs.tag }}

      - name: Set build output
        id: set-built
        run: |
          if [[ "${{ steps.check.outputs.exists }}" == "false" || "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi

  # Build OpenHands CLI agent
  build-openhands-agent:
    needs: build-agent-runtime-base
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    permissions:
      contents: read
      packages: write
    outputs:
      built: ${{ steps.set-built.outputs.built }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get OpenHands CLI version from PyPI
        id: version
        run: |
          set -euo pipefail
          VERSION=$(curl -fsSL https://pypi.org/pypi/openhands-ai/json | jq -r .info.version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 OpenHands CLI version on PyPI: $VERSION"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check
        run: |
          echo "🔍 Checking for openhands-agent version v${{ steps.version.outputs.version }}"
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/openhands-agent:v${{ steps.version.outputs.version }} > /dev/null 2>&1; then
            echo "✅ Image already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "🏗️ Need to build this version"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU (multi-arch emulation)
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push OpenHands CLI image
        id: build
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./infra/images/openhands
          file: ./infra/images/openhands/Dockerfile
          # arm64 builds under QEMU are extremely slow due to heavy Python deps
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/openhands-agent:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/openhands-agent:v${{ steps.version.outputs.version }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:v${{ needs.build-agent-runtime-base.outputs.tag }}

      - name: Set build output
        id: set-built
        run: |
          if [[ "${{ steps.check.outputs.exists }}" == "false" || "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi

      

  # Build Gemini agent
  build-gemini-agent:
    needs: build-agent-runtime-base
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    outputs:
      built: ${{ steps.set-built.outputs.built }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Gemini CLI version
        id: version
        run: |
          VERSION=$(npm view @google/gemini-cli version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Gemini CLI version on npm: $VERSION"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check
        run: |
          echo "🔍 Checking for gemini-agent version v${{ steps.version.outputs.version }}"
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/gemini-agent:v${{ steps.version.outputs.version }} > /dev/null 2>&1; then
            echo "✅ Image already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "🏗️ Need to build this version"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU (multi-arch emulation)
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Gemini agent image
        id: build
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./infra/images/gemini
          file: ./infra/images/gemini/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/gemini-agent:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/gemini-agent:v${{ steps.version.outputs.version }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:v${{ needs.build-agent-runtime-base.outputs.tag }}
            CLI_VERSION=${{ steps.version.outputs.version }}

      - name: Set build output
        id: set-built
        run: |
          if [[ "${{ steps.check.outputs.exists }}" == "false" || "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi

  # Build Qwen agent
  build-qwen-agent:
    needs: build-agent-runtime-base
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      built: ${{ steps.set-built.outputs.built }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Qwen Code CLI version
        id: version
        run: |
          QWEN_VERSION=$(npm view @qwen-code/qwen-code version)
          echo "version=$QWEN_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Latest Qwen Code CLI version on npm: $QWEN_VERSION"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check
        run: |
          echo "🔍 Checking if we have Qwen Code version ${{ steps.version.outputs.version }}"
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/qwen-agent:v${{ steps.version.outputs.version }} > /dev/null 2>&1; then
            echo "✅ Image already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "🏗️ Need to build this version"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU (multi-arch emulation)
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Qwen Code image
        id: build
        if: steps.check.outputs.exists == 'false' || inputs.force_rebuild == true || needs.build-agent-runtime-base.outputs.built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./infra/images/qwen
          file: ./infra/images/qwen/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/qwen-agent:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/qwen-agent:v${{ steps.version.outputs.version }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/agent-runtime-base:v${{ needs.build-agent-runtime-base.outputs.tag }}
            QWEN_CODE_VERSION=${{ steps.version.outputs.version }}

      - name: Set build output
        id: set-built
        run: |
          if [[ "${{ steps.check.outputs.exists }}" == "false" || "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi

  # Summary job
  summary:
    needs: [build-claude-code, build-grok-agent, build-cursor-agent, build-openhands-agent, build-gemini-agent, build-qwen-agent]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "## 🤖 Agent Images Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 **Results**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-claude-code.outputs.built }}" == "true" ]]; then
            echo "✅ **Claude Code**: Built new version ${{ needs.build-claude-code.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Claude Code**: No update needed (version ${{ needs.build-claude-code.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build-grok-agent.outputs.built }}" == "true" ]]; then
            echo "✅ **Grok Agent**: Built new version" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Grok Agent**: No update needed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build-cursor-agent.outputs.built }}" == "true" ]]; then
            echo "✅ **Cursor CLI**: Built new version ${{ needs.build-cursor-agent.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Cursor CLI**: No update needed (version ${{ needs.build-cursor-agent.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build-openhands-agent.outputs.built }}" == "true" ]]; then
            echo "✅ **OpenHands CLI**: Built new version ${{ needs.build-openhands-agent.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **OpenHands CLI**: No update needed (version ${{ needs.build-openhands-agent.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build-gemini-agent.outputs.built }}" == "true" ]]; then
            echo "✅ **Gemini Agent**: Built new version ${{ needs.build-gemini-agent.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Gemini Agent**: No update needed (version ${{ needs.build-gemini-agent.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build-qwen-agent.outputs.built }}" == "true" ]]; then
            echo "✅ **Qwen Code**: Built new version ${{ needs.build-qwen-agent.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Qwen Code**: No update needed (version ${{ needs.build-qwen-agent.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ **Available Images**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/claude-code:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/claude-code:${{ needs.build-claude-code.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/grok-agent:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/cursor-agent:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/cursor-agent:${{ needs.build-cursor-agent.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/openhands-agent:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/openhands-agent:${{ needs.build-openhands-agent.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/gemini-agent:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/gemini-agent:${{ needs.build-gemini-agent.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/qwen-agent:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/qwen-agent:${{ needs.build-qwen-agent.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Next run**: Tomorrow at 6 AM UTC (or trigger manually)" >> $GITHUB_STEP_SUMMARY
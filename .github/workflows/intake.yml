name: Project Intake Pipeline
on:
  push:
    paths:
      - 'intake/**'
    branches:
      - feature/toolman-integration
  pull_request:
    paths:
      - 'intake/**'

jobs:
  validate-setup:
    runs-on: ubuntu-latest
    outputs:
      validation-passed: ${{ steps.validation.outputs.passed }}
    
    steps:
      - name: Validate workflow requirements
        id: validation
        run: |
          echo "üîç Validating workflow requirements..."
          
          # Check if required secrets are available
          if [[ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]]; then
            echo "‚ùå ANTHROPIC_API_KEY secret is not configured"
            exit 1
          fi
          
          if [[ -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "‚ùå GITHUB_TOKEN is not available"
            exit 1
          fi
          
          # Test basic authentication without running expensive operations
          echo "üîë Testing Anthropic API access..."
          response=$(curl -s -w "%{http_code}" -o /dev/null \
            -H "x-api-key: ${{ secrets.ANTHROPIC_API_KEY }}" \
            -H "anthropic-version: 2023-06-01" \
            -H "Content-Type: application/json" \
            -X POST https://api.anthropic.com/v1/messages \
            -d '{
              "model": "claude-3-haiku-20240307",
              "max_tokens": 1,
              "messages": [{"role": "user", "content": "test"}]
            }')
          
          if [[ "$response" == "200" ]]; then
            echo "‚úÖ Anthropic API authentication successful"
          else
            echo "‚ùå Anthropic API authentication failed (HTTP $response)"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are available and working"

      - name: Test Claude Code agent mode
        id: test-claude
        uses: anthropics/claude-code-action@v0.0.44
        with:
          mode: agent
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            This is a validation test for agent mode. Please respond with exactly:
            "VALIDATION_SUCCESS: Agent mode is working correctly"
            
            This is just to verify the mode parameter works before proceeding with the full workflow.

      - name: Validation complete
        run: |
          echo "‚úÖ Claude Code agent mode test passed"
          echo "‚úÖ Workflow validation complete"
          echo "passed=true" >> $GITHUB_OUTPUT

  process-new-project:
    runs-on: ubuntu-latest
    needs: validate-setup
    if: needs.validate-setup.outputs.validation-passed == 'true'

    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install TaskMaster
        run: |
          npm install -g task-master-ai
          # Add npm global bin to PATH for subsequent steps
          npm_global_bin=$(npm config get prefix)/bin
          echo "$npm_global_bin" >> $GITHUB_PATH
          echo "NPM global bin: $npm_global_bin"
          echo "Contents of npm global bin:"
          ls -la "$npm_global_bin" || echo "Directory doesn't exist"

      - name: Verify TaskMaster installation
        run: |
          echo "Current PATH: $PATH"
          which task-master || echo "task-master not found in PATH"
          task-master --version

      - name: Detect new project files
        id: detect-files
        run: |
          echo "Checking for new files in intake/"

          # Find PRD and architecture files
          PRD_FILE=$(find intake/ -name "*.txt" -o -name "*prd*" -o -name "*PRD*" | head -1)
          ARCH_FILE=$(find intake/ -name "*.md" -o -name "*architecture*" -o -name "*arch*" | head -1)

          if [[ -z "$PRD_FILE" || -z "$ARCH_FILE" ]]; then
            echo "‚ùå Missing required files. Need both PRD (.txt) and Architecture (.md) files"
            exit 1
          fi

          echo "‚úÖ Found PRD file: $PRD_FILE"
          echo "‚úÖ Found Architecture file: $ARCH_FILE"

          # Set outputs
          echo "prd_file=$PRD_FILE" >> $GITHUB_OUTPUT
          echo "arch_file=$ARCH_FILE" >> $GITHUB_OUTPUT

      - name: Extract project name from documents
        id: extract-name
        run: |
          PRD_FILE="${{ steps.detect-files.outputs.prd_file }}"

          # Try to extract project name from document titles or content
          PROJECT_NAME=""

          # Check PRD file for project name patterns
          if grep -i "project.*:" "$PRD_FILE" | head -1 | grep -v "^#"; then
            PROJECT_NAME=$(grep -i "project.*:" "$PRD_FILE" | head -1 | sed 's/.*project[^:]*:\s*//' | sed 's/[^a-zA-Z0-9 -]//g' | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/--*/-/g')
          fi

          # Fallback: extract from first heading
          if [[ -z "$PROJECT_NAME" ]]; then
            PROJECT_NAME=$(head -5 "$PRD_FILE" | grep -E "^#.*" | head -1 | sed 's/^#*\s*//' | sed 's/[^a-zA-Z0-9 -]//g' | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/--*/-/g')
          fi

          # Fallback: use filename
          if [[ -z "$PROJECT_NAME" ]]; then
            PROJECT_NAME=$(basename "$PRD_FILE" .txt | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9-]/-/g')
          fi

          # Clean up name
          PROJECT_NAME=$(echo "$PROJECT_NAME" | sed 's/^-*//;s/-*$//' | cut -c1-50)

          echo "üìù Extracted project name: $PROJECT_NAME"
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Create project directory structure
        id: create-structure
        run: |
          PROJECT_NAME="${{ steps.extract-name.outputs.project_name }}"
          PROJECT_DIR="projects/$PROJECT_NAME"

          echo "üèóÔ∏è Creating project structure at: $PROJECT_DIR"

          # Create directory structure
          mkdir -p "$PROJECT_DIR/.taskmaster/docs"

          # Move files to appropriate locations
          cp "${{ steps.detect-files.outputs.prd_file }}" "$PROJECT_DIR/.taskmaster/docs/prd.txt"
          cp "${{ steps.detect-files.outputs.arch_file }}" "$PROJECT_DIR/.taskmaster/docs/architecture.md"

          echo "‚úÖ Project structure created"
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT

      - name: Initialize TaskMaster and generate tasks
        working-directory: ${{ steps.create-structure.outputs.project_dir }}
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "üöÄ Initializing TaskMaster and generating tasks"

          # Initialize TaskMaster project
          task-master init --yes

          # Set the main model to Opus
          task-master models --set-main "claude-opus-4-20250514"

          # Set the research model to Opus as well (avoid Perplexity requirement)
          task-master models --set-research "claude-opus-4-20250514"

          # Parse PRD with no research and unlimited tasks
          task-master parse-prd \
            --input=".taskmaster/docs/prd.txt" \
            --num-tasks=50

          # Analyze task complexity (with research for this step)
          task-master analyze-complexity \
            --research

          # Expand tasks with subtasks
          task-master expand --all \
            --force \
            --research

          # Generate individual task files
          task-master generate

          echo "‚úÖ Tasks generated and individual files created"

      - name: Create docs directory structure and copy task files
        working-directory: ${{ steps.create-structure.outputs.project_dir }}
        run: |
          echo "üìÅ Creating docs directory structure and copying task files"
          
          # Create docs directory
          mkdir -p docs
          
          # Find all generated task files and create corresponding directories
          if [ -d ".taskmaster/tasks" ]; then
            for task_file in .taskmaster/tasks/task-*.txt; do
              if [ -f "$task_file" ]; then
                # Extract task number from filename (e.g., task-1.txt -> 1)
                task_num=$(basename "$task_file" .txt | sed 's/task-//')
                task_dir="docs/task-$task_num"
                
                echo "Creating $task_dir and copying $task_file"
                mkdir -p "$task_dir"
                cp "$task_file" "$task_dir/task.md"
              fi
            done
          else
            echo "‚ö†Ô∏è No .taskmaster/tasks directory found, checking for task files in other locations"
            # Fallback: look for any task files
            find . -name "task-*.txt" -type f | while read task_file; do
              task_num=$(basename "$task_file" .txt | sed 's/task-//')
              task_dir="docs/task-$task_num"
              echo "Creating $task_dir and copying $task_file"
              mkdir -p "$task_dir"
              cp "$task_file" "$task_dir/task.md"
            done
          fi
          
          echo "‚úÖ Docs directory structure created"
          ls -la docs/ || echo "No docs directory created"

      - name: Cross-reference with architecture (AI-powered)
        uses: anthropics/claude-code-action@v0.0.44
        with:
          mode: agent
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            I need you to cross-reference the generated TaskMaster tasks with the architecture document and finalize the project structure.

            **Project**: ${{ steps.extract-name.outputs.project_name }}
            **Location**: ${{ steps.create-structure.outputs.project_dir }}

            Please:
            1. Review the tasks in .taskmaster/tasks.json
            2. Compare them against the architecture document at .taskmaster/docs/architecture.md
            3. Identify any missing tasks, unnecessary tasks, or misaligned requirements
            4. Update the tasks.json file to ensure 100% alignment with the architecture
            5. Add any missing tasks that the architecture requires
            6. Remove any tasks that don't align with the architecture
            7. Update task descriptions to better match architectural requirements
            8. Update tasks.json with any changes
            9. Create any additional documentation structure needed

            Focus on ensuring every architectural component, feature, and requirement has corresponding tasks.
            Make sure task dependencies align with the architectural design.

            After making changes, the project should be ready for development workflow.


      - name: Create Pull Request
        id: create-pr
        run: |
          PROJECT_NAME="${{ steps.extract-name.outputs.project_name }}"
          BRANCH_NAME="project-intake/$PROJECT_NAME-$(date +%Y%m%d-%H%M%S)"

          # Configure git
          git config user.name "Project Intake Bot"
          git config user.email "action@github.com"

          # Create new branch
          git checkout -b "$BRANCH_NAME"

          # Add all project files
          git add "projects/$PROJECT_NAME/"

          # Remove intake files (they've been processed)
          git rm -r intake/ || true

          # Commit changes
          git commit -m "üöÄ Add new project: $PROJECT_NAME

          Automated project intake processing:
          - Created project structure under projects/$PROJECT_NAME
          - Initialized TaskMaster with Opus model
          - Generated tasks from PRD (no research, no limits)
          - Analyzed task complexity (with research)
          - Expanded tasks with subtasks
          - Cross-referenced with architecture document
          - Generated complete task files and directories

          Project is ready for development workflow."

          # Push branch
          git push origin "$BRANCH_NAME"

          # Create PR using GitHub CLI
          gh pr create \
            --title "üöÄ New Project: $PROJECT_NAME" \
            --body "## üéâ Automated Project Intake Complete!

          This PR adds a new project **$PROJECT_NAME** that has been fully processed through our automated intake pipeline.

          ### üìã What was processed:
          - ‚úÖ PRD document analyzed and parsed
          - ‚úÖ Architecture document integrated
          - ‚úÖ TaskMaster initialized with Opus model
          - ‚úÖ Tasks generated (no research limits)
          - ‚úÖ Complexity analysis completed (with research)
          - ‚úÖ Tasks expanded with subtasks
          - ‚úÖ Cross-referenced with architecture for alignment
          - ‚úÖ Complete file structure generated

          ### üèóÔ∏è Project Structure Created:
          \`\`\`
          projects/$PROJECT_NAME/
          ‚îú‚îÄ‚îÄ .taskmaster/
          ‚îÇ   ‚îú‚îÄ‚îÄ docs/
          ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ prd.txt
          ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ architecture.md
          ‚îÇ   ‚îî‚îÄ‚îÄ tasks.json
          ‚îî‚îÄ‚îÄ docs/
              ‚îú‚îÄ‚îÄ task-1/
              ‚îÇ   ‚îî‚îÄ‚îÄ task.txt
              ‚îú‚îÄ‚îÄ task-2/
              ‚îÇ   ‚îî‚îÄ‚îÄ task.txt
              ‚îî‚îÄ‚îÄ ...
          \`\`\`

          ### üéØ Next Steps:
          1. Review the generated tasks for accuracy
          2. Merge this PR to activate the project
          3. Begin development using TaskMaster workflows
          4. Tasks are ready for Claude Code implementation

          ### ü§ñ Models Used:
          - **Task Generation**: claude-opus-4-20250514
          - **Complexity Analysis**: claude-4-20250514
          - **Cross-referencing**: claude-code-action

          This project is now ready for the development workflow! üöÄ" \
            --head "$BRANCH_NAME" \
            --base main

          echo "‚úÖ Pull request created successfully"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          PROJECT_NAME="${{ steps.extract-name.outputs.project_name }}"
          echo "
          ## üéâ Project Intake Complete!

          **Project**: $PROJECT_NAME
          **Location**: projects/$PROJECT_NAME
          **Status**: ‚úÖ Ready for development

          ### What was accomplished:
          - üìÅ Project structure created
          - ü§ñ TaskMaster initialized with Opus model
          - üìã Tasks generated from PRD (no limits)
          - üîç Complexity analysis performed
          - üå≥ Tasks expanded with subtasks
          - üîÑ Cross-referenced with architecture
          - üìÑ Task files and directories generated
          - üîÄ Pull request created for review

          The project is now ready for the development workflow!
          "
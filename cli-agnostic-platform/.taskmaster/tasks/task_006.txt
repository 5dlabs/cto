# Task ID: 6
# Title: Build MCP Transport Abstraction Layer
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Create unified MCP communication layer supporting streaming, buffered relay, and STDIO patterns across different CLI implementations
# Details:
Create mcp/src/transport/mod.ts with abstract Transport class. Implement DirectStreamingTransport using native fetch with ReadableStream for CLIs with HTTP streaming. Build BufferedRelayTransport with configurable buffer sizes (default 64KB) for STDIO-based CLIs. Create StdioTransport using Node.js child_process for local MCP servers. Implement transport auto-detection based on CLI capabilities. Add retry logic with exponential backoff (initial: 100ms, max: 30s, jitter: 0.1). Build request/response correlation with UUID tracking. Implement timeout handling (default: 30s, configurable per tool). Add compression support using zstd for large payloads. Create metrics collection for latency, throughput, and error rates. Build connection pooling for HTTP transports with keep-alive.

# Test Strategy:
Test streaming transport with mock SSE server. Verify buffered relay handles partial messages correctly. Test STDIO transport with mock child process. Verify auto-detection selects correct transport. Test retry logic with simulated failures. Verify timeout handling cancels requests properly. Load test with 100 concurrent MCP calls.

# Subtasks:
## 1. Design Abstract Transport Interface [pending]
### Dependencies: None
### Description: Create the abstract Transport class with TypeScript interfaces defining the contract for all transport implementations
### Details:
Design mcp/src/transport/mod.ts with abstract Transport class. Define interfaces for send(), receive(), connect(), disconnect(), and isConnected() methods. Create type definitions for TransportMessage, TransportOptions, and TransportMetrics. Define error types and response types. Establish the base configuration structure that all transports will inherit.

## 2. Implement DirectStreamingTransport [pending]
### Dependencies: 6.1
### Description: Build the HTTP streaming transport using native fetch API with ReadableStream support for real-time data flow
### Details:
Create DirectStreamingTransport class extending Transport in mcp/src/transport/streaming.ts. Implement fetch with ReadableStream for Server-Sent Events (SSE) or chunked responses. Handle stream parsing with proper error boundaries. Implement backpressure handling. Add support for HTTP/2 multiplexing when available. Handle connection drops and automatic reconnection.

## 3. Build BufferedRelayTransport [pending]
### Dependencies: 6.1
### Description: Create buffered transport implementation with configurable buffer sizes for STDIO-based CLI communication
### Details:
Implement BufferedRelayTransport in mcp/src/transport/buffered.ts with default 64KB buffer size. Create circular buffer implementation for efficient memory usage. Handle partial message assembly and fragmentation. Implement flow control to prevent buffer overflow. Add buffer flush mechanisms on timeout or size threshold. Build message boundary detection for proper packet reassembly.

## 4. Create StdioTransport Implementation [pending]
### Dependencies: 6.1
### Description: Develop STDIO transport using Node.js child_process for local MCP server communication
### Details:
Build StdioTransport in mcp/src/transport/stdio.ts using Node.js child_process.spawn(). Implement bidirectional communication through stdin/stdout pipes. Handle process lifecycle management including spawn, kill, and restart. Parse JSON-RPC messages from stdout stream. Implement stderr capture for debugging. Add process health monitoring with periodic heartbeats.

## 5. Implement Transport Auto-Detection [pending]
### Dependencies: 6.2, 6.3, 6.4
### Description: Build intelligent transport selection based on CLI capabilities and environment detection
### Details:
Create TransportFactory in mcp/src/transport/factory.ts with capability detection logic. Probe for HTTP streaming support by checking fetch ReadableStream availability. Detect STDIO availability through process.stdin/stdout checks. Implement fallback chain: DirectStreaming -> BufferedRelay -> Stdio. Add CLI-specific overrides through configuration. Cache detection results for performance.

## 6. Build Retry Mechanism with Exponential Backoff [pending]
### Dependencies: 6.1
### Description: Implement robust retry logic with configurable exponential backoff for handling transient failures
### Details:
Create RetryPolicy class with exponential backoff algorithm starting at 100ms, max 30s. Add jitter factor of 0.1 to prevent thundering herd. Implement retry budget to limit total retry attempts. Create retry predicates for determining retryable errors. Add circuit breaker pattern to prevent retry storms. Implement retry telemetry for monitoring retry patterns.

## 7. Create Request/Response Correlation System [pending]
### Dependencies: 6.1
### Description: Implement UUID-based correlation for matching requests with responses in async communication
### Details:
Generate UUIDs for each request using crypto.randomUUID(). Create CorrelationManager to track pending requests with Map<UUID, PendingRequest>. Implement timeout cleanup for orphaned requests. Add request queuing with priority support. Build response routing to correct request handlers. Implement correlation ID propagation through transport layers.

## 8. Implement Timeout and Cancellation Handling [pending]
### Dependencies: 6.7
### Description: Build comprehensive timeout management with request cancellation support
### Details:
Implement configurable timeout per request type with 30s default. Create AbortController integration for request cancellation. Build timeout scheduler using setTimeout with cleanup on completion. Implement graceful shutdown handling for pending requests. Add timeout escalation for critical requests. Create timeout metrics collection for monitoring.

## 9. Add Compression Support with Zstd [pending]
### Dependencies: 6.1
### Description: Integrate zstd compression for efficient large payload transmission
### Details:
Integrate zstd-wasm or node-zstd for compression support. Implement adaptive compression based on payload size threshold (>10KB). Add compression level configuration (default: 3, range: 1-19). Create streaming compression for large messages. Implement compression negotiation in transport handshake. Add compression metrics for ratio and performance tracking.

## 10. Build Metrics Collection System [pending]
### Dependencies: 6.1, 6.6, 6.7, 6.8
### Description: Create comprehensive metrics tracking for latency, throughput, and error rates
### Details:
Implement MetricsCollector with latency histograms for p50, p95, p99. Track throughput in messages/sec and bytes/sec. Count errors by type and transport. Monitor active connections and connection pool usage. Add retry metrics including attempt counts and success rates. Create exporters for Prometheus and custom formats.

## 11. Implement Connection Pooling [pending]
### Dependencies: 6.2, 6.10
### Description: Create HTTP connection pool with keep-alive support for improved performance
### Details:
Build ConnectionPool class with configurable pool size (default: 10). Implement keep-alive with periodic ping messages. Add connection health checking before reuse. Create connection lifecycle management (acquire, release, destroy). Implement fair scheduling for connection allocation. Add pool metrics for utilization and wait times.


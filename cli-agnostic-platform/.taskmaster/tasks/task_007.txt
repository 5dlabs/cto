# Task ID: 7
# Title: Implement Claude and Codex CLI Adapters
# Status: pending
# Dependencies: 3, 4, 5
# Priority: high
# Description: Create production-ready adapters for Claude (reference implementation) and Codex (TOML configuration) to validate multi-CLI architecture
# Details:
Create controller/src/cli/adapters/claude.rs implementing CliAdapter for Claude. Maintain backward compatibility with existing CLAUDE.md memory files. Implement claude-specific model validation and configuration generation. Create controller/src/cli/adapters/codex.rs with TOML configuration support using toml-rs v0.8.0. Implement Codex-specific features: sandbox_preset (read-only, workspace-write, danger-full-access), model_reasoning_effort configuration, AGENTS.md memory file support, experimental_resume session handling. Add OAuth token exchange for Codex authentication. Implement configuration mapping between universal format and CLI-specific formats. Create response parsing for both CLIs handling different output formats. Add CLI-specific error handling and recovery mechanisms. Build health check implementations for both adapters.

# Test Strategy:
Integration test both adapters with real CLI binaries in containers. Test configuration generation produces valid TOML/JSON. Verify memory file operations (read/write/update). Test authentication flows with mock OAuth server. Verify response parsing handles all output formats. Test error recovery with simulated failures. Benchmark adapter performance vs direct CLI usage.

# Subtasks:
## 1. Design and implement Claude adapter base structure [pending]
### Dependencies: None
### Description: Create the foundational Claude adapter implementing the CliAdapter trait with core functionality
### Details:
Create controller/src/cli/adapters/claude.rs file. Define ClaudeAdapter struct implementing CliAdapter trait. Set up basic configuration structures for Claude-specific settings. Implement constructor and initialization methods. Define Claude-specific error types and result types. Create adapter state management for maintaining Claude session context.

## 2. Implement Claude model validation and configuration generation [pending]
### Dependencies: 7.1
### Description: Build Claude-specific model validation logic and JSON configuration generation
### Details:
Implement validate_model() method checking against Claude model catalog (claude-3-opus, claude-3.5-sonnet, claude-3-haiku). Create configuration generator producing valid Claude CLI JSON format. Map universal configuration fields to Claude-specific parameters. Handle model-specific parameters like max_tokens, temperature, and top_p. Validate API key format and presence. Generate .claude/settings.json compatible configuration.

## 3. Build Claude memory file operations for CLAUDE.md [pending]
### Dependencies: 7.1
### Description: Implement reading, writing, and updating CLAUDE.md memory files maintaining backward compatibility
### Details:
Create CLAUDE.md parser extracting instructions and context. Implement memory file writer preserving existing format. Build incremental update mechanism for adding new instructions. Handle file locking for concurrent access safety. Implement backup and restore functionality for rollback scenarios. Parse and validate markdown structure and frontmatter if present.

## 4. Create Codex adapter base structure with TOML support [pending]
### Dependencies: None
### Description: Implement the foundational Codex adapter with TOML configuration parsing using toml-rs
### Details:
Create controller/src/cli/adapters/codex.rs file. Define CodexAdapter struct implementing CliAdapter trait. Add toml-rs v0.8.0 dependency and implement TOML parsing. Set up Codex-specific configuration structures. Implement adapter initialization with TOML config loading. Define Codex-specific error handling and result types.

## 5. Implement Codex-specific features and configurations [pending]
### Dependencies: 7.4
### Description: Build sandbox presets, model reasoning effort, and experimental features for Codex
### Details:
Implement sandbox_preset enum with read-only, workspace-write, and danger-full-access modes. Create model_reasoning_effort configuration mapping (low, medium, high). Build experimental_resume session handling with state persistence. Implement AGENTS.md memory file support similar to CLAUDE.md. Map sandbox presets to appropriate filesystem permissions. Handle experimental feature flags and versioning.

## 6. Build OAuth token exchange for Codex authentication [pending]
### Dependencies: 7.4
### Description: Implement OAuth 2.0 PKCE flow for Codex authentication with token management
### Details:
Implement OAuth 2.0 authorization code flow with PKCE. Build token exchange endpoint interaction. Create secure token storage with encryption. Implement automatic token refresh before expiry. Handle OAuth error responses and retry logic. Build fallback to device code flow for headless environments. Integrate with system keychain for credential storage.

## 7. Create universal to CLI-specific configuration mapping [pending]
### Dependencies: 7.2, 7.5
### Description: Build bidirectional configuration mappers between universal format and CLI-specific formats
### Details:
Create configuration mapper traits for extensibility. Implement UniversalToClaudeMapper producing JSON configurations. Build UniversalToCodexMapper generating TOML configurations. Handle field name transformations and type conversions. Map tool permissions to CLI-specific formats. Create validation for mapped configurations. Build reverse mappers for configuration import.

## 8. Implement response parsing for both CLI output formats [pending]
### Dependencies: 7.1, 7.4
### Description: Build parsers handling different output formats from Claude and Codex CLIs
### Details:
Create response parser trait with CLI-specific implementations. Build Claude JSON response parser extracting content and metadata. Implement Codex structured output parser handling TOML responses. Parse streaming responses with incremental updates. Extract tool use calls and their results. Handle multi-turn conversation context. Parse error responses and extract actionable information.

## 9. Build error handling and recovery mechanisms [pending]
### Dependencies: 7.8
### Description: Implement CLI-specific error handling with recovery strategies and retry logic
### Details:
Create error classification system for transient vs permanent failures. Implement exponential backoff retry logic for rate limits. Build circuit breaker pattern for repeated failures. Handle authentication errors with credential refresh. Implement graceful degradation for partial failures. Create error context enrichment with CLI-specific details. Build recovery strategies for connection timeouts and network issues.

## 10. Create health checks and integration tests [pending]
### Dependencies: 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9
### Description: Implement health check endpoints and comprehensive integration tests with mock CLIs
### Details:
Implement health check endpoints verifying CLI binary availability. Create readiness checks validating authentication and configuration. Build mock CLI binaries for integration testing. Write tests for configuration generation and validation. Test memory file operations with concurrent access. Verify OAuth flow with mock authorization server. Test response parsing with various output formats. Validate error recovery mechanisms with failure injection.


# Task ID: 5
# Title: Create Template Management System
# Status: pending
# Dependencies: 3, 4
# Priority: medium
# Description: Implement dynamic template selection and rendering system for CLI-specific prompts, configurations, and scripts with fallback mechanisms
# Details:
Create controller/src/templates/manager.rs with TemplateManager struct. Implement template registry with HashMap<(CLIType, TemplateType), Template>. Use Handlebars-rust v6.2.0 for template rendering with custom helpers. Create template types: SystemPrompt, ConfigFile, EntrypointScript, MemoryFile. Implement template discovery from filesystem (templates/{cli_type}/{template_type}.hbs). Add fallback chain: CLI-specific -> Generic -> Default. Create template variables context with agent metadata, configuration, and runtime info. Implement template validation with syntax checking and variable verification. Add template hot-reloading for development with notify-rs v7.0.0. Create template versioning system for gradual rollout. Build template performance cache with compiled templates.

# Test Strategy:
Test template selection falls back correctly when CLI-specific missing. Verify Handlebars rendering with complex variable contexts. Test custom helpers produce correct output. Validate hot-reloading updates templates without restart. Test versioning system serves correct template versions. Performance test rendering 1000 templates/second.

# Subtasks:
## 1. Create TemplateManager struct with registry architecture [pending]
### Dependencies: None
### Description: Implement the core TemplateManager struct in controller/src/templates/manager.rs with HashMap-based template registry for storing and retrieving templates by CLI type and template type
### Details:
Define TemplateManager struct with HashMap<(CLIType, TemplateType), Template> registry. Create Template struct containing raw content, compiled version, and metadata. Implement new() constructor and basic CRUD operations (register, get, remove, list). Define CLIType enum (Claude, Codex, OpenCode, Gemini, etc.) and TemplateType enum (SystemPrompt, ConfigFile, EntrypointScript, MemoryFile). Set up error handling with custom TemplateError types.

## 2. Integrate Handlebars-rust with custom helpers [pending]
### Dependencies: 5.1
### Description: Set up Handlebars-rust v6.2.0 integration with custom helper functions for template rendering and variable substitution specific to CLI agent contexts
### Details:
Add handlebars = "6.2.0" to Cargo.toml dependencies. Create HandlebarsEngine wrapper in templates/engine.rs. Implement custom helpers: if_cli_type, format_env_var, base64_encode, json_escape, default_value. Register standard helpers for string manipulation and conditional logic. Create RenderContext struct for passing data to templates. Implement compile() and render() methods with proper error handling.

## 3. Implement template discovery from filesystem [pending]
### Dependencies: 5.1
### Description: Build filesystem-based template discovery system that automatically loads templates from structured directory hierarchy
### Details:
Create templates/ directory structure: templates/{cli_type}/{template_type}.hbs. Implement discover_templates() function using walkdir crate to traverse filesystem. Parse template filenames to extract CLI type and template type. Load template contents and metadata from accompanying .meta.toml files. Support template inheritance with @extends directive. Handle missing directories and malformed templates gracefully. Add file watcher setup preparation for hot-reloading.

## 4. Build fallback chain logic [pending]
### Dependencies: 5.1, 5.3
### Description: Implement multi-level fallback system that resolves templates through CLI-specific, generic, and default fallback chain
### Details:
Create FallbackChain struct with resolve() method. Implement three-tier lookup: 1) CLI-specific template (e.g., templates/claude/system_prompt.hbs), 2) Generic template (templates/generic/system_prompt.hbs), 3) Default hardcoded template. Add configuration for custom fallback ordering. Implement lazy loading to avoid loading unused templates. Create fallback resolution logging for debugging. Add metrics for fallback usage patterns.

## 5. Create template context builder with agent metadata [pending]
### Dependencies: 5.2
### Description: Build comprehensive context builder that aggregates agent metadata, configuration, and runtime information for template rendering
### Details:
Create ContextBuilder struct in templates/context.rs. Implement methods to add agent metadata (name, namespace, labels, annotations). Add configuration context (CLI settings, environment variables, secrets). Include runtime context (timestamp, hostname, pod info). Build hierarchical context merging with precedence rules. Implement context validation to ensure required variables exist. Add context serialization for debugging and caching.

## 6. Implement template validation and syntax checking [pending]
### Dependencies: 5.2, 5.5
### Description: Create comprehensive validation system for template syntax, variable usage, and output correctness
### Details:
Create TemplateValidator struct with validate() method. Implement Handlebars syntax validation using parser. Check for undefined variables and helpers in templates. Validate template output against expected schema (JSON/YAML validation). Create validation rules for each template type. Implement dry-run rendering with sample contexts. Add validation caching to avoid re-validating unchanged templates. Create detailed validation error messages with line numbers.

## 7. Add hot-reloading with notify-rs for development [pending]
### Dependencies: 5.3, 5.6
### Description: Implement file system monitoring and automatic template reloading during development using notify-rs v7.0.0
### Details:
Add notify = "7.0.0" to Cargo.toml dependencies. Create FileWatcher component using notify::RecommendedWatcher. Monitor templates/ directory for create, modify, delete events. Implement debouncing to batch rapid changes (500ms window). Trigger template re-compilation on changes. Validate templates before applying updates. Add reload callbacks for downstream consumers. Create development/production mode toggle. Implement graceful error handling for invalid template updates.

## 8. Build template versioning system [pending]
### Dependencies: 5.1, 5.4
### Description: Create versioning infrastructure for templates enabling gradual rollout, A/B testing, and rollback capabilities
### Details:
Design version schema (semver-based: major.minor.patch). Create VersionedTemplate wrapper with version history. Implement version resolution strategy (latest, pinned, range). Add version compatibility checking with CLI versions. Build rollout configuration (percentage-based, label-based). Create version migration system for template upgrades. Implement rollback mechanism with previous version retention. Add version metrics and usage tracking. Store version metadata in templates/{cli_type}/{template_type}/versions/.

## 9. Create performance cache for compiled templates [pending]
### Dependencies: 5.2, 5.6, 5.8
### Description: Implement high-performance caching layer for compiled templates to optimize rendering performance and reduce CPU usage
### Details:
Create TemplateCache struct using LRU cache with 100 template limit. Implement cache key generation from (CLI type, template type, version). Store compiled Handlebars templates in memory. Add cache warming on startup with frequently used templates. Implement cache invalidation on template updates. Create cache metrics (hit rate, miss rate, eviction count). Add persistent cache option using RocksDB for faster restarts. Implement cache serialization for debugging. Add memory usage monitoring with configurable limits.


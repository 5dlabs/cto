<prompt>
    <role>You are a senior Rust engineer specializing in CLI adapter implementations, OAuth authentication flows, TOML configuration systems, and multi-provider AI model integration with expertise in maintaining backward compatibility.</role>
    <task>
        <id>7</id>
        <title>Implement Claude and Codex CLI Adapters</title>
        <description>Create production-ready adapters for Claude (reference implementation) and Codex (TOML configuration) to validate multi-CLI architecture. These adapters serve as the foundation and validation for the entire CLI adapter system, demonstrating the patterns other CLI adapters will follow while handling their unique requirements.</description>
        <priority>high</priority>
        <status>pending</status>
        <dependencies>2,3,4,5,6</dependencies>
    </task>
    <technical_specifications>
        <spec>Create controller/src/cli/adapters/claude.rs implementing complete CliAdapter trait with backward compatibility</spec>
        <spec>Maintain exact compatibility with existing CLAUDE.md memory files and JSON configuration patterns</spec>
        <spec>Create controller/src/cli/adapters/codex.rs with TOML configuration support using toml-rs v0.8.0</spec>
        <spec>Implement Codex-specific features: sandbox_preset options, model_reasoning_effort configuration, AGENTS.md memory support</spec>
        <spec>Add OAuth token exchange for Codex authentication with PKCE flow and refresh token handling</spec>
        <spec>Implement configuration mapping between universal AgentConfig format and CLI-specific formats</spec>
        <spec>Create response parsing for both CLIs handling different output formats, streaming vs buffered responses</spec>
        <spec>Add CLI-specific error handling with retry logic and graceful degradation strategies</spec>
        <spec>Build health check implementations testing CLI availability and MCP connectivity</spec>
        <spec>Support experimental_resume session handling and workspace state management</spec>
    </technical_specifications>
    <implementation_details>
        Create controller/src/cli/adapters/claude.rs implementing CliAdapter for Claude. Maintain backward compatibility with existing CLAUDE.md memory files. Implement claude-specific model validation and configuration generation. Create controller/src/cli/adapters/codex.rs with TOML configuration support using toml-rs v0.8.0. Implement Codex-specific features: sandbox_preset (read-only, workspace-write, danger-full-access), model_reasoning_effort configuration, AGENTS.md memory file support, experimental_resume session handling. Add OAuth token exchange for Codex authentication. Implement configuration mapping between universal format and CLI-specific formats. Create response parsing for both CLIs handling different output formats. Add CLI-specific error handling and recovery mechanisms. Build health check implementations for both adapters.
    </implementation_details>
    <acceptance_criteria>
        <criterion>Claude adapter maintains 100% backward compatibility with existing agent configurations and behavior</criterion>
        <criterion>Codex adapter generates valid TOML configuration with all supported features and options</criterion>
        <criterion>Both adapters implement complete CliAdapter trait interface with all required methods</criterion>
        <criterion>OAuth authentication flow works end-to-end for Codex with token refresh and error handling</criterion>
        <criterion>Memory file operations (read/write/update) work correctly for both CLAUDE.md and AGENTS.md patterns</criterion>
        <criterion>Configuration mapping converts between universal and CLI-specific formats without data loss</criterion>
        <criterion>Response parsing handles all output formats including streaming, tool calls, and error responses</criterion>
        <criterion>Health checks accurately report CLI availability and connectivity status</criterion>
        <criterion>Error handling provides graceful degradation and helpful error messages</criterion>
        <criterion>Performance matches or exceeds direct CLI usage with appropriate caching strategies</criterion>
    </acceptance_criteria>
    <test_strategy>
        Integration test both adapters with real CLI binaries in containers. Test configuration generation produces valid TOML/JSON. Verify memory file operations (read/write/update). Test authentication flows with mock OAuth server. Verify response parsing handles all output formats. Test error recovery with simulated failures. Benchmark adapter performance vs direct CLI usage. Test backward compatibility with existing Claude agent configurations.
    </test_strategy>
    <instructions>
        Think step-by-step about implementing these critical adapter implementations. The Claude adapter must maintain perfect backward compatibility while the Codex adapter demonstrates the new patterns.
        Start with the Claude adapter as the reference implementation - it must behave identically to existing code while implementing the new CliAdapter interface. Focus on configuration generation, memory file handling, and response parsing.
        The Codex adapter is more complex due to TOML configuration, OAuth authentication, and different memory patterns. Handle the OAuth flow carefully with proper token management and refresh logic.
        Both adapters must handle errors gracefully, provide comprehensive health checks, and support the full range of CLI capabilities. Consider memory management, connection pooling, and performance optimization.
        Provide complete, production-ready Rust code with comprehensive error handling, async/await patterns, and proper resource management. Include extensive testing for both happy paths and error scenarios.
        Where appropriate, use MCP tools to research CLI adapter patterns, OAuth best practices, and TOML configuration management to ensure robust implementation.
    </instructions>
</prompt>
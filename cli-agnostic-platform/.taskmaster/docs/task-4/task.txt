# Task 4: Implement Configuration Resolution Engine

## Description
Build the multi-source configuration merger that handles Helm defaults, cto-config.json overrides, and runtime parameters with field-level granularity

## Implementation Details
Create controller/src/agents/resolver.rs with AgentResolver struct. Implement configuration loading from multiple sources: Helm values via ConfigMap (agent.agentCliConfigs), repository cto-config.json via Git clone, environment variables, and runtime parameters. Build MergeStrategy enum with Replace, Merge, Append, and DeepMerge options per field. Implement field-level merge rules using serde_json::Value manipulation. Add JSONSchema validation using jsonschema-rs v0.20.0 for configuration validation. Create precedence rules: Runtime > Environment > CtoConfig > Helm. Implement configuration caching with Redis using redis-rs v0.27.0 with 5-minute TTL. Add configuration preview API that shows resolved config without applying. Build audit trail logging all configuration changes with who/what/when/why. Handle backwards compatibility for agents without CLI specifications.

## Test Strategy
Test merge strategies with conflicting configurations. Verify precedence rules with multiple override sources. Test deep merge with nested JSON structures. Validate schema enforcement rejects invalid configs. Test cache invalidation on configuration changes. Verify audit trail captures all modifications. Load test with 100+ agents with different configurations.

# Task 10: Create Controller API and Monitoring Infrastructure

## Description
Implement REST API endpoints for CLI operations, migration tools, and comprehensive observability with Prometheus metrics and Grafana dashboards

## Implementation Details
Create controller/src/api/mod.rs with Axum v0.7.0 web framework. Implement REST endpoints: GET /agents/{name}/cli-options (available CLIs), POST /agents/{name}/migrate (initiate migration), GET /agents/{name}/cli-config (resolved configuration), POST /agents/{name}/validate (test configuration), GET /health (liveness probe), GET /ready (readiness probe). Add OpenAPI documentation with utoipa v5.2.0. Implement Prometheus metrics: cli_requests_total{cli_type,agent}, cli_response_time_seconds{cli_type,operation}, cli_errors_total{cli_type,error_type}, cli_tokens_used{cli_type,model}, cli_active_sessions{cli_type}. Create Grafana dashboards for CLI comparison, cost analysis, and performance monitoring. Add distributed tracing with OpenTelemetry and Jaeger. Implement structured logging with tracing-subscriber v0.3.0. Build alerting rules for SLO violations. Create runbooks linked to alerts.

## Test Strategy
API endpoints return correct status codes and responses. OpenAPI spec validates against implementation. Prometheus metrics increment correctly for operations. Grafana dashboards render without errors. Traces connect across service boundaries. Alerts fire for simulated failures. Load test API handles 1000 req/s.

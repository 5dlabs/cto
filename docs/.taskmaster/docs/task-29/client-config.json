{
  "remoteTools": [
    {
      "name": "mcp_documentation_server",
      "description": "MCP documentation server for Rex agent documentation queries",
      "endpoint": "https://mcp-server.taskmaster.local/api/v1"
    },
    {
      "name": "github_api",
      "description": "GitHub API for PR management and status updates",
      "endpoint": "https://api.github.com"
    },
    {
      "name": "kubernetes_api",
      "description": "Kubernetes API for workflow status updates and resource management",
      "endpoint": "https://kubernetes.default.svc"
    },
    {
      "name": "cargo_registry",
      "description": "Cargo package registry for dependency resolution and tool installation",
      "endpoint": "https://crates.io"
    },
    {
      "name": "rustup_toolchain",
      "description": "Rustup toolchain management for component installation",
      "endpoint": "https://forge.rust-lang.org"
    },
    {
      "name": "codecov_api",
      "description": "Code coverage reporting and analysis service",
      "endpoint": "https://codecov.io/api"
    },
    {
      "name": "docker_registry",
      "description": "Docker registry for container image management",
      "endpoint": "https://registry.taskmaster.local"
    }
  ],
  "localServers": {
    "bash_shell": {
      "command": ["bash"],
      "args": ["--version"],
      "description": "Bash shell for script execution and system operations"
    },
    "git": {
      "command": ["git"],
      "args": ["--version"],
      "description": "Git version control for repository operations and commit management"
    },
    "cargo": {
      "command": ["cargo"],
      "args": ["--version"],
      "description": "Rust package manager for building, testing, and tool management"
    },
    "rustfmt": {
      "command": ["rustfmt"],
      "args": ["--version"],
      "description": "Rust code formatter for consistent code styling"
    },
    "clippy": {
      "command": ["cargo-clippy"],
      "args": ["--version"],
      "description": "Rust linter for code quality analysis and suggestions"
    },
    "llvm_cov": {
      "command": ["cargo-llvm-cov"],
      "args": ["--version"],
      "description": "Code coverage analysis tool for Rust projects"
    },
    "tarpaulin": {
      "command": ["cargo-tarpaulin"],
      "args": ["--version"],
      "description": "Alternative code coverage tool for Rust projects"
    },
    "nextest": {
      "command": ["cargo-nextest"],
      "args": ["--version"],
      "description": "Next-generation test runner for Rust projects"
    },
    "audit": {
      "command": ["cargo-audit"],
      "args": ["--version"],
      "description": "Security vulnerability scanner for Rust dependencies"
    },
    "kubectl": {
      "command": ["kubectl"],
      "args": ["version", "--client"],
      "description": "Kubernetes CLI for cluster resource management"
    },
    "jq": {
      "command": ["jq"],
      "args": ["--version"],
      "description": "JSON processor for parsing API responses and data manipulation"
    },
    "curl": {
      "command": ["curl"],
      "args": ["--version"],
      "description": "HTTP client for API requests and webhook operations"
    },
    "yq": {
      "command": ["yq"],
      "args": ["--version"],
      "description": "YAML processor for configuration file validation and manipulation"
    },
    "hadolint": {
      "command": ["hadolint"],
      "args": ["--version"],
      "description": "Dockerfile linter for container best practices validation"
    },
    "genhtml": {
      "command": ["genhtml"],
      "args": ["--version"],
      "description": "HTML report generator for LCOV coverage data"
    }
  }
}
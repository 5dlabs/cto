# Task ID: 10
# Title: QA Kubernetes verification and PR approval action (no auto-merge)
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Implement strict QA verification in Kubernetes with evidence collection and allow QA agent to approve PRs via GitHub Review API while blocking merges.
# Details:
Implementation:
- In qa-testing (from DAGs), instruct agent via system prompt to run tests only and collect artifacts under /artifacts/qa/proof.
- Add a post-QA step approve-pr (container) that, when verify-k8s-proof passed, posts an APPROVE review using GitHub App token:
  - POST /repos/{owner}/{repo}/pulls/{pr}/reviews with event=APPROVE
- Enforce no merge: do not call merge endpoints; rely on branch protection to require human review as needed.
- Evidence collection:
  - kubectl logs, kubectl get, curl responses saved to artifacts and uploaded to object store if configured.
  - Attach a summary comment with links to artifacts.
- Compliance enforcement reminder: ensure verify-compliance step is a required dependency before approve-pr.
Pseudocode (approve-pr):
if [ -f /artifacts/qa/proof/summary.json ]; then
  curl -H "Authorization: Bearer $GITHUB_TOKEN" \
    -d '{"body":"QA verification passed with evidence.","event":"APPROVE"}' \
    https://api.github.com/repos/$OWNER/$REPO/pulls/$PR/reviews
else
  echo "Missing QA proof"; exit 1
fi

# Test Strategy:
Open a PR and run the PR flow. Ensure that when QA proof exists, the review is submitted as APPROVE by the QA GitHub App account. If proof is missing, the approval step fails and the workflow fails. Verify that the PR is not merged automatically and branch protection remains intact. Validate artifact links are present in the PR comment.

# Subtasks:
## 1. Define QA agent prompt and artifact contract for Kubernetes proof [pending]
### Dependencies: None
### Description: Refine the QA agent system prompt and specify the artifact contract under /artifacts/qa/proof, including required files and summary.json schema.
### Details:
System prompt (essentials):
- Purpose: Run tests only; do not modify code or trigger merges. Collect evidence to /artifacts/qa/proof.
- Required outputs:
  - /artifacts/qa/proof/summary.json (mandatory)
  - /artifacts/qa/proof/logs/* (kubectl logs, test logs)
  - /artifacts/qa/proof/k8s/* (kubectl get resources)
  - /artifacts/qa/proof/http/* (HTTP checks/curl responses)
- Failure semantics: If tests fail or critical checks fail, set qa.passed=false in summary.json and exit non-zero.

Directory conventions:
- /artifacts/qa/proof/logs/{pod}-{container}.log
- /artifacts/qa/proof/k8s/{resource}.yaml (pods.yaml, deployments.yaml, events.yaml, services.yaml)
- /artifacts/qa/proof/http/{name}.json and/or {name}.txt

summary.json minimum schema:
{
  "version": "1.0",
  "pr": {"owner": "string", "repo": "string", "number": 0, "headSha": "string"},
  "qa": {"passed": true, "startedAt": "RFC3339", "finishedAt": "RFC3339"},
  "environment": {"k8sContext": "string", "namespace": "string"},
  "artifacts": [
    {"name": "pods", "path": "k8s/pods.yaml", "contentType": "application/yaml", "bytes": 0, "url": "optional"}
  ],
  "evidence": {
    "k8s": {"resources": ["pods","deployments","events","services"]},
    "logs": [{"pod": "string", "container": "string", "path": "logs/..."}],
    "httpChecks": [{"name":"string","url":"string","status":200,"latencyMs":0,"bodyPath":"http/..."}]
  }
}

Required env vars exposed to agent: OWNER, REPO, PR_NUMBER, K8S_NAMESPACE, SERVICE_ENDPOINTS (optional JSON), ARTIFACTS_DIR=/artifacts/qa/proof.
Acceptance criteria:
- Agent produces the required directory structure and summary.json matching the schema.
- On success qa.passed=true; on failure qa.passed=false and non-zero exit.
- File paths in summary.json are relative to /artifacts/qa/proof and exist.

## 2. Implement verify-k8s-proof gate and compliance enforcement [pending]
### Dependencies: 10.1
### Description: Add a verify-k8s-proof step that validates presence and schema of summary.json and enforce verify-compliance as a required dependency before approve-pr.
### Details:
Gate logic (container/script):
- Inputs: ARTIFACTS_DIR=/artifacts/qa/proof, SUMMARY=$ARTIFACTS_DIR/summary.json.
- Checks: file exists; parse via jq; ensure .qa.passed is boolean and required keys exist; list required artifacts files referenced in summary.json and ensure they exist.
- Exit 0 only if summary.json exists, validates, and qa.passed==true.
- On failure: echo cause and exit 1.

Example command:
- test -f "$SUMMARY" || { echo "missing summary"; exit 1; }
- jq -e '.qa.passed == true and .pr.number and .environment.namespace' "$SUMMARY" > /dev/null || exit 1

DAG enforcement:
- Ensure approve-pr has dependencies: [verify-compliance, verify-k8s-proof].
- Ensure verify-k8s-proof depends on qa-testing.

Acceptance criteria:
- Pipeline fails when summary.json missing/invalid or qa.passed=false.
- approve-pr cannot run unless verify-compliance and verify-k8s-proof succeeded.

## 3. Implement approve-pr step using GitHub App token (POST review APPROVE, no merge) [pending]
### Dependencies: 10.2
### Description: Create a container/script that posts an APPROVE review via GitHub Review API upon successful gates using a GitHub App installation token.
### Details:
Inputs/env:
- OWNER, REPO, PR_NUMBER (required)
- GITHUB_TOKEN or GITHUB_TOKEN_PATH (installation token) 
- SUMMARY_PATH=/artifacts/qa/proof/summary.json

Behavior:
- Verify SUMMARY_PATH exists before proceeding; else exit 1.
- Read token from GITHUB_TOKEN or file path into header.
- POST review:
  - Method: POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews
  - Headers: Authorization: Bearer $GITHUB_TOKEN; Accept: application/vnd.github+json; X-GitHub-Api-Version: 2022-11-28
  - Body: {"event":"APPROVE","body":"QA verification passed with evidence. See summary.json in artifacts."}
- Do not call any merge endpoints.
- Handle 403/404/422 gracefully with clear logs; retry on 502/503 with backoff.

Example curl:
- curl -sS -X POST "https://api.github.com/repos/$OWNER/$REPO/pulls/$PR_NUMBER/reviews" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "Accept: application/vnd.github+json" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  -d '{"event":"APPROVE","body":"QA verification passed with evidence."}'

Acceptance criteria:
- When gates pass and summary exists, an APPROVE review is posted by the QA GitHub App account.
- Step fails if summary.json is missing or token is invalid.
- No merge API is invoked; logs confirm only review POST occurs.

## 4. Implement evidence collection and optional artifact upload to object store [pending]
### Dependencies: 10.1
### Description: Enhance qa-testing to collect kubectl logs/gets and HTTP responses, store under /artifacts/qa/proof, and optionally upload to an object store with links recorded in summary.json.
### Details:
Collection commands (examples):
- mkdir -p "$ARTIFACTS_DIR"/logs "$ARTIFACTS_DIR"/k8s "$ARTIFACTS_DIR"/http
- kubectl -n "$K8S_NAMESPACE" get pods -o yaml > "$ARTIFACTS_DIR"/k8s/pods.yaml
- kubectl -n "$K8S_NAMESPACE" get deploy -o yaml > "$ARTIFACTS_DIR"/k8s/deployments.yaml
- kubectl -n "$K8S_NAMESPACE" get events --sort-by=.lastTimestamp -o yaml > "$ARTIFACTS_DIR"/k8s/events.yaml
- for p in $(kubectl -n "$K8S_NAMESPACE" get pods -o name); do kubectl -n "$K8S_NAMESPACE" logs "$p" --all-containers=true > "$ARTIFACTS_DIR"/logs/"${p##*/}".log || true; done
- curl -sS -w '\n%{http_code} %{time_total}\n' "$HEALTH_URL" -o "$ARTIFACTS_DIR"/http/health.json > "$ARTIFACTS_DIR"/http/health.meta

Optional upload (S3/MinIO/GCS):
- Env: OBJECT_STORE_UPLOAD=true|false, OBJECT_STORE_PROVIDER=s3|gcs, OBJECT_STORE_BUCKET, OBJECT_STORE_PREFIX, OBJECT_STORE_ENDPOINT (for MinIO), AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, GCS_SERVICE_ACCOUNT_JSON (path).
- S3 example: aws s3 cp "$ARTIFACTS_DIR" "s3://$OBJECT_STORE_BUCKET/$OBJECT_STORE_PREFIX/" --recursive
- Generate presigned URLs for key artifacts and inject into summary.json .artifacts[].url.

Acceptance criteria:
- Artifacts directory contains logs, k8s resources, and HTTP outputs as specified.
- If upload enabled, files appear in the bucket and summary.json includes valid URLs.
- summary.json accurately references all collected files.

## 5. Post PR summary comment with artifact links and context [pending]
### Dependencies: 10.2, 10.4
### Description: Create a step that posts a concise PR issue comment summarizing QA results and linking to artifacts/object-store URLs.
### Details:
Inputs/env:
- OWNER, REPO, PR_NUMBER, SUMMARY_PATH=/artifacts/qa/proof/summary.json
- GITHUB_TOKEN or GITHUB_TOKEN_PATH

API call:
- POST /repos/{owner}/{repo}/issues/{issue_number}/comments
- Headers: Authorization: Bearer $GITHUB_TOKEN; Accept: application/vnd.github+json; X-GitHub-Api-Version: 2022-11-28
- Body template: includes qa.passed, namespace, counts of artifacts, and top links (from summary.json .artifacts[].url). Fallback to path references if no URLs.

Behavior:
- Parse summary.json with jq to build message.
- Post one comment per run; optionally update if a prior bot comment exists (GET comments, PATCH if desired).

Acceptance criteria:
- A PR issue comment appears with pass/fail status and at least 1 link or path to artifacts.
- On missing summary.json, step fails and logs clear reason.

## 6. Verify branch protection and enforce no auto-merge policy [pending]
### Dependencies: 10.3
### Description: Confirm repository branch protection prevents auto-merge and ensure pipeline never calls merge endpoints.
### Details:
Verification steps:
- Ensure codebase contains no calls to merge endpoints (e.g., grep for "/merges" and "/pulls/{}/merge").
- Query protection (if token has scope): GET /repos/{owner}/{repo}/branches/{branch}/protection; verify required status checks or required reviews include human review as policy dictates.
- After an approval by QA App, confirm PR remains open and unmerged until human action.

Env/inputs: OWNER, REPO, BRANCH, GITHUB_TOKEN.
Acceptance criteria:
- Approvals by QA App do not merge the PR.
- Branch protection is intact (endpoint returns protection settings or manual verification documented).
- No merge API calls executed by any step.

## 7. End-to-end tests (pass/fail paths) and documentation [pending]
### Dependencies: 10.1, 10.2, 10.3, 10.4, 10.5, 10.6
### Description: Create E2E tests for both successful and failing QA proof scenarios and write documentation covering setup, env vars, API usage, and artifact schema.
### Details:
Test scenarios:
- Success: qa-testing produces valid summary.json with qa.passed=true; verify-k8s-proof passes; approve-pr posts APPROVE; comment posted; PR not merged.
- Failure: summary.json missing or qa.passed=false; verify-k8s-proof fails; approve-pr and comment steps do not run; workflow fails.

Implementation:
- Use a sandbox repo/PR. Inject tokens via secrets. Optionally mock GitHub API with a test server for reliability.
- Assertions: review presence by QA App identity; comment content includes links; PR merge state unchanged; artifacts uploaded when enabled.

Docs:
- README: architecture, DAG dependencies, required env vars (OWNER, REPO, PR_NUMBER, BRANCH, GITHUB_TOKEN[_PATH], ARTIFACTS_DIR, OBJECT_STORE_*), API endpoints used, summary.json schema, troubleshooting.

Acceptance criteria:
- Automated E2E runs pass deterministically for both paths.
- Documentation reviewed and usable for setup without external guidance.


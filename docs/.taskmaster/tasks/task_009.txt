# Task ID: 9
# Title: Observability: OTEL traces/metrics and correlated logging
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Emit OpenTelemetry spans/metrics for each agent step with correlation labels (repo, prNumber, taskId, agent) and surface links to PRs, Actions, and deployments as workflow outputs.
# Details:
Implementation:
- Inject OTEL environment variables into workflow pods: OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317, OTEL_SERVICE_NAME=agent-steps.
- Wrap agent and verification steps with a lightweight tracer shim (sidecar or entrypoint wrapper) that:
  - Starts a span per step with attributes: repo, prNumber, ref, taskId, agent, workflowName, nodeId.
  - Emits counters: agent_step_duration_ms, agent_step_success{agent=...} using OTLP metrics if supported, or Prometheus sidecar.
- Configure Argo Workflows to annotate pods with labels for correlation (workflows.argoproj.io/workflow, repo, pr), and ensure logs include these fields.
- Add workflow.outputs.parameters for URLs: prHtmlUrl, actionsRunUrl (from event), previewUrl (from deploy step).
- Update Grafana dashboards to include new metrics and exemplars linking to traces.
Pseudocode (bash wrapper):
start_span --name "$AGENT/$STEP" --attrs repo=$REPO pr=$PR task=$TASK
trap 'end_span $?; exit' EXIT
exec "$@"

# Test Strategy:
Run sample workflows and verify spans appear in the tracing backend with correct attributes and timing. Confirm metrics scraped/exported. Check logs include correlation labels and can be queried by repo/pr. Validate workflow outputs include clickable links. Chaos test: restart controller/pods mid-run and ensure traces continue for resumed steps.

# Subtasks:
## 1. Tracer shim/entrypoint wrapper for OTEL spans [pending]
### Dependencies: None
### Description: Build a lightweight shim (entrypoint wrapper or sidecar) that starts and ends an OpenTelemetry span per agent step with required attributes.
### Details:
- Deliverable: small wrapper (bash + otel-cli or tiny Go binary) usable as entrypoint for agent and verification steps.
- Span behavior: start on process launch, end on normal exit or signal; set status=ERROR on non-zero exit; include child spans if needed.
- Span naming: agentName/stepName (e.g., clippy/verify).
- Attribute keys (span attributes): repo, prNumber, ref, taskId, agent, workflowName, nodeId. Optional extras: commitSha, stepName, namespace.
- Resource attributes (OTEL_RESOURCE_ATTRIBUTES): service.name=agent-steps, deployment.environment, k8s.namespace, k8s.pod.name.
- Context propagation: read/write W3C traceparent; export trace_id and span_id to env; print a one-line JSON with traceId/spanId at start for log correlation.
- Integration: wrapper accepts the real command via exec "$@"; minimal overhead; packaged container image and/or script.
- Acceptance criteria:
  - For a sample workflow step, a span appears in tracing backend with the exact name and attributes above.
  - Erroring step marks span status=ERROR and records exit code.
  - trace_id and span_id are accessible to the process (env) and printed once to stdout.

## 2. Metrics emission: duration and success counters [pending]
### Dependencies: 9.1
### Description: Expose per-step metrics via OTLP Metrics if available, else via Prometheus sidecar/exporter.
### Details:
- Metric set:
  - agent_step_duration_ms: histogram (unit=ms), labels: repo, prNumber, taskId, agent, workflowName, stepName, outcome.
  - agent_step_success_total: counter, labels: agent, repo, prNumber, stepName; increment 1 on success only.
  - agent_step_fail_total: counter, same labels; increment 1 on failure only.
- Emission path:
  - Primary: OTLP metrics (grpc) from shim using OTEL SDK or otel-cli timer.
  - Fallback: expose Prometheus /metrics via a tiny sidecar or pushgateway pattern disabled; ensure scrape annotations.
- Exemplars: attach trace_id exemplar to duration observations when supported.
- Units and cardinality: bound prNumber and taskId labels to active runs only; consider bucketing on prNumber hash if needed.
- Acceptance criteria:
  - Duration histogram and success/fail counters visible in Prometheus (or OTEL metrics backend) with labels.
  - At least one duration sample carries exemplars linking to traces.
  - No high-cardinality alert triggered during a test run of 100 steps.

## 3. Inject OTEL env vars into workflow pods and verify collector [pending]
### Dependencies: None
### Description: Configure Argo templates to set OTEL environment and validate connectivity to the collector endpoint.
### Details:
- Env var list (baseline):
  - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
  - OTEL_SERVICE_NAME=agent-steps
  - OTEL_RESOURCE_ATTRIBUTES=service.name=agent-steps,deployment.environment=${ENV},k8s.namespace=${NAMESPACE}
  - OTEL_TRACES_SAMPLER=parentbased_traceidratio
  - OTEL_TRACES_SAMPLER_ARG=0.5 (tune per env)
  - OTEL_METRICS_EXPORTER=otlp
  - OTEL_LOGS_EXPORTER=none
  - OTEL_EXPORTER_OTLP_TIMEOUT=10000
- Template changes: add env to all agent/verification steps via WorkflowTemplate or PodSpecPatch.
- Network/policy: ensure DNS and NetworkPolicy allow egress to otel-collector:4317.
- Health check: add initContainer that runs a quick gRPC dial (or tcp check) to the collector and logs status.
- Acceptance criteria:
  - All relevant pods have the env vars set.
  - Collector endpoint is reachable from pods (init check passes) in dev/stage.
  - If collector is down, steps still run and shim buffers/drops gracefully without failing business logic.

## 4. Pod annotations/labels and log correlation [pending]
### Dependencies: 9.1, 9.3
### Description: Ensure pods are labeled/annotated for correlation and logs include fields for repo/pr and trace IDs.
### Details:
- Pod labels: workflows.argoproj.io/workflow, repo, pr, taskId, agent, stepName.
- Annotations (optional): trace.context=traceparent at start (wrapper writes), commitSha.
- Logging pipeline: configure Fluent Bit/Fluentd to enrich logs with k8s labels; parse the wrapper's initial JSON line to capture traceId and spanId into structured fields.
- Query patterns: ability to query logs by repo, pr, taskId, agent and pivot to a trace using traceId.
- Privacy: avoid logging secrets; add drop filters for known sensitive envs.
- Acceptance criteria:
  - From logging UI, user can filter logs by repo and pr and see only relevant pod logs.
  - Each step's log stream includes traceId/spanId fields matching the tracing backend.
  - Labels are present on all workflow pods created by the templates.

## 5. Workflow outputs: PR, Actions run, and preview URLs [pending]
### Dependencies: None
### Description: Expose key URLs as workflow.outputs.parameters for downstream linking.
### Details:
- Output parameters:
  - prHtmlUrl: from event payload (e.g., {{workflow.parameters.github.event.pull_request.html_url}}).
  - actionsRunUrl: from event/run context (e.g., {{workflow.parameters.github.run_url}}) or constructed from repo, runId.
  - previewUrl: emitted by deploy step via parameter artifact or file (e.g., write to /tmp/preview_url and pass via output parameter).
- Template wiring: ensure upstream steps set parameters and DAG outputs propagate to workflow.outputs.parameters.
- Validation: parameters show in Argo UI and are exported as annotations for external systems if needed.
- Acceptance criteria:
  - All three URLs are present, correct, and clickable in the Argo UI and exposed via CLI/json output.
  - For PR-triggered runs, prHtmlUrl matches the actual PR; for preview deployments, previewUrl resolves (HTTP 200/302).

## 6. Grafana dashboards with exemplars and correlations [pending]
### Dependencies: 9.1, 9.2
### Description: Add/modify Grafana dashboards to visualize new metrics with exemplars linking to traces.
### Details:
- Data sources: Prometheus for metrics, Tempo/Jaeger for traces, Loki/Elastic for logs (if available).
- Dashboard panels:
  - Step duration (P50/P90/P99) by agent and repo (histogram/heatmap).
  - Success rate and failure count by agent, with annotations for deployments.
  - Active PRs and tasks in-flight (gauge) per repo.
  - Errors by stepName with quick links to traces via exemplars.
  - Top slow PRs (by prNumber) and top agents by latency.
  - Correlated logs panel (if Loki): logs for selected traceId/taskId.
- Variables: repo, prNumber, agent, workflowName, taskId, environment.
- Exemplars: enable exemplars on duration panel, map trace exemplar label to traceId in Tempo/Jaeger.
- Permissions: read access for devs; no sensitive labels exposed.
- Acceptance criteria:
  - Dashboards load with data for sample runs; selecting a time bucket shows exemplar links that open traces.
  - Variable filters work and reduce series without errors.
  - Panels refresh within 15s and stay within target Prometheus query costs.

## 7. Resiliency and validation tests [pending]
### Dependencies: 9.1, 9.2, 9.3, 9.4
### Description: Chaos and reliability testing for tracing/metrics/logs across failures and restarts; validate data in backends.
### Details:
- Scenarios:
  - Kill agent pod mid-step; verify span ends with error and partial logs correlate; retries create new spans with link/parent preserved if applicable.
  - Restart argoexec/controller during workflow; ensure spans for resumed steps are present and metrics not double-counted.
  - Collector outage (simulate by scaling to 0 or blocking egress); confirm app continues, spans buffered/dropped without step failure.
  - High concurrency burst (e.g., 50 parallel steps) to check cardinality and scrape performance.
- Validation:
  - No orphan child spans without parents for a standard run.
  - Counters equal number of successes/failures observed in Argo.
  - Logs for a given taskId can pivot to a trace via traceId.
- Acceptance criteria:
  - All scenarios pass with documented observations and no critical data loss beyond expected sampling/drop policies.
  - Sampling rate and retries tuned to meet SLOs (e.g., >95% span coverage in dev).

## 8. Documentation and runbook [pending]
### Dependencies: 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7
### Description: Produce user/dev docs covering setup, env vars, attributes, dashboards, and troubleshooting.
### Details:
- Content:
  - Overview of observability architecture and data flow (textual description) and components (Argo, shim, OTEL collector, Prometheus, Grafana, tracing backend).
  - Environment variable list and meanings; recommended sampler settings per environment.
  - Attribute keys and when they appear (span vs resource vs log fields).
  - How to read workflow outputs (PR, Actions, preview) and where they are surfaced.
  - Dashboard guide: panels, variables, exemplars, common queries.
  - Troubleshooting: collector connectivity, missing spans, high-cardinality mitigation, log correlation gotchas.
  - Acceptance criteria for the overall feature set.
- Acceptance criteria:
  - Docs published in repo (docs/observability.md) and linked from README; reviewed by at least one SRE and one developer.


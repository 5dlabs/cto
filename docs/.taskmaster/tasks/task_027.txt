# Task ID: 27
# Title: Configure Comprehensive Admin Access for Tess Agent
# Status: pending
# Dependencies: 11, 9
# Priority: medium
# Description: Setup full infrastructure admin access for Tess agent including database credentials, Argo CD admin rights, and additional secret mounts for live deployment testing beyond standard Kubernetes RBAC
# Details:
Create dedicated External Secrets for Tess admin credentials including Postgres superuser (host, port, username, password, database), Redis admin (host, port, password, cluster endpoints), and Argo CD admin token. Configure secret store mappings in AWS Secrets Manager or Vault under paths like '/infrastructure/tess-admin/postgres', '/infrastructure/tess-admin/redis', '/infrastructure/tess-admin/argocd'. Mount secrets as environment variables in Tess pod spec with names like POSTGRES_ADMIN_URL, REDIS_ADMIN_URL, ARGOCD_TOKEN. Create ConfigMap for non-sensitive configs (endpoints, ports). Implement secret rotation policy with 24h refresh interval. Add volume mounts for TLS certificates needed for database connections. Configure Argo CD AppProject with admin permissions for Tess service account. Create RBAC policies in Postgres and Redis granting full admin rights to Tess credentials. Implement secret validation init container to verify connectivity before main container starts. Use Kubernetes CSI Secret Store for dynamic secret injection. Configure audit logging for all admin operations performed by Tess. Set up break-glass access procedures for emergency scenarios. Document all access paths and permissions in security matrix.

# Test Strategy:
Verify Tess can connect to Postgres with admin rights by creating/dropping test databases. Test Redis admin operations including FLUSHDB, CONFIG SET, and cluster management. Validate Argo CD access by creating/modifying/deleting test applications. Check secret rotation by forcing refresh and verifying new credentials work. Test TLS certificate validation for encrypted connections. Verify audit logs capture Tess admin operations. Simulate credential compromise and test revocation procedures. Validate init container blocks pod startup on invalid credentials. Test break-glass access with temporary elevated permissions. Monitor for credential leaks in logs or environment dumps. Verify other agents cannot access Tess admin secrets. Test failover scenarios with multiple database replicas.

# Task ID: 4
# Title: Discord Embed Builder, Truncation, and Attachments
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Convert parsed events and stats into Discord embeds adhering to UX and constraints, with safe truncation and optional file attachments.
# Details:
Implementation using twilight-model and twilight-util builders:
- Build per-event embeds based on templates:
  - ToolUse Bash: title "‚ö° Bash", fields: Command (```bash), Working Dir, Tool Count, color=0xF39C12.
  - Write/Edit/Read: title "üìù Write" / "üëÅÔ∏è Read", fields: File, Summary, Tool Count; include compact diff rendered as ```diff with ¬± lines; generate attachment for full diff if >60 lines.
  - AssistantText: title optional, description with text; fields: Tokens In/Out, Session Cost, Model; color=0x3498DB.
  - ToolResult error: title "‚ùå Error", description with stderr as ```text, Total Errors field; color=0xE74C3C.
  - Completion: title "‚úÖ Complete", fields: Cost, Duration, Tokens total, Tools Used; color=0x27AE60.
- Truncation:
  - Enforce: embed description ‚â§4096 chars, ‚â§25 fields per embed; message ‚â§10 embeds; use ellipses ‚Ä¶ and note "(truncated)".
  - Large outputs (>1200 chars) attached as files. For webhooks, use ExecuteWebhook with attached files.
- Sanitize code fences: escape backticks in content; ensure language fences are properly closed.
- Batch builder: coalesce up to BATCH_SIZE embeds into a single message. If overflow, split into multiple messages.
- Threading (optional): provide API to open a thread for long logs if flagged; MVP disabled.
Pseudo-code:
fn build_embeds(ev, stats) -> (Vec<Embed>, Vec<Attachment>) { match ev.kind { ... } apply_truncation(); return (embeds, files); }


# Test Strategy:
Unit tests: feed synthetic events and assert embeds conform to size limits (length checks). Verify code block fencing is balanced. Snapshot tests of embeds for deterministic formatting. Tests for diff compaction (hunk extraction). Test attachment generation when content exceeds thresholds.

# Subtasks:
## 1. Define limits, types, and builders scaffold [pending]
### Dependencies: None
### Description: Establish Discord limits, shared types, and builder scaffolding for embeds and attachments.
### Details:
Implement constants: EMBED_DESC_MAX=4096, FIELDS_MAX=25, EMBEDS_PER_MESSAGE_MAX=10, LARGE_OUTPUT_ATTACH_THRESHOLD=1200 chars, DIFF_EMBED_MAX_LINES=60, BATCH_SIZE (configurable). Define structs: BuildConfig { thresholds, parity_mode }, BuildResult { embeds: Vec<Embed>, files: Vec<Attachment> }, MessagePayload { embeds, files }. Integrate twilight-model and twilight-util::builder::EmbedBuilder. Provide helper to create colored embeds, add fields, and convert to Vec<Embed>.

## 2. Sanitization utilities [pending]
### Dependencies: 4.1
### Description: Create safe text sanitization and code-fence helpers to prevent malformed blocks and pings.
### Details:
Implement sanitize_text(s: &str) -> String: normalize newlines to \n, escape backticks inside by breaking ``` into ``\u200b``, neutralize mentions by inserting zero-width space after '@' for @everyone/@here and user/role mentions (<@...>). Implement code_block(lang: &str, content: &str) -> String ensuring starting ```{lang}\n and ending ```; if content contains ``` ensure it's escaped/split to keep fences balanced. Provide finalize_fences() to guarantee closing fence even after truncation.

## 3. Diff rendering and compaction [pending]
### Dependencies: 4.1, 4.2
### Description: Render compact diffs with ¬± lines and prepare full diff for attachment when large.
### Details:
Implement build_compact_diff(old: &str, new: &str, cfg: &BuildConfig) -> { embed_snippet: String, full_diff: String, total_lines: usize }. Use a simple hunk extraction: compute line-by-line diff, group changes with small context, prefix '+'/'-' for adds/removes, and limit snippet to DIFF_EMBED_MAX_LINES (post-sanitization). Wrap snippet in code_block("diff", ...). If total_lines > DIFF_EMBED_MAX_LINES, mark for attachment generation. Include summary header like "¬± lines: +A/‚àíD (~T)" optionally.

## 4. Truncation engine [pending]
### Dependencies: 4.1, 4.2
### Description: Apply Discord limits with safe ellipses and markers after sanitization.
### Details:
Implement apply_truncation_to_desc(desc: &str, max: usize) -> (String, TruncMeta) that truncates at character boundaries, adds "‚Ä¶ (truncated)", and ensures code fences remain balanced via finalize_fences(). Implement apply_truncation_to_fields(fields: Vec<(name, value, inline)>) limiting to FIELDS_MAX; if dropping fields, append a final Note field indicating truncation. All counts measured after sanitization. Provide helper to compute remaining space and prioritize important fields.

## 5. Per-event embed builders [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4
### Description: Implement embeds for Bash, Write/Edit/Read, AssistantText, ToolResult error, and Completion.
### Details:
For ToolUse Bash: title "‚ö° Bash", color 0xF39C12, fields: Command (code_block("bash", cmd)), Working Dir, Tool Count. For Write/Edit/Read: title "üìù Write" or "üëÅÔ∏è Read", fields: File, Summary, Tool Count; include compact diff snippet from diff renderer and note when full diff is attached. For AssistantText: optional title, description is sanitized text, fields: Tokens In/Out, Session Cost, Model; color 0x3498DB. For ToolResult error: title "‚ùå Error", description code_block("text", stderr tail if necessary), field Total Errors; color 0xE74C3C. For Completion: title "‚úÖ Complete", fields: Cost, Duration, Tokens total, Tools Used; color 0x27AE60. After building, run truncation engine on description and fields.

## 6. Attachment generation and integration [pending]
### Dependencies: 4.1, 4.3, 4.4, 4.5
### Description: Generate file attachments for large outputs/diffs and wire into result.
### Details:
Implement generate_attachments(ev) producing Vec<Attachment> when content exceeds thresholds: full diffs when total_lines > DIFF_EMBED_MAX_LINES, large text outputs > LARGE_OUTPUT_ATTACH_THRESHOLD (assistant text, stderr/stdout). Use names like diff_full_{file}.diff, assistant_text.txt, stderr.txt with content-type text/plain; sanitize filenames. Ensure embeds reference attachments via notes like "Full diff attached". Return BuildResult { embeds, files } shaped for webhook execution (Task 5).

## 7. Batching and message splitting [pending]
### Dependencies: 4.1, 4.4, 4.5, 4.6
### Description: Coalesce embeds into messages up to limits and split overflow deterministically.
### Details:
Implement batch_messages(items: Vec<BuildResult>, cfg) -> Vec<MessagePayload> that concatenates embeds in order until reaching EMBEDS_PER_MESSAGE_MAX, then starts a new payload. Coalesce attachments with the message that references them. Preserve input order (by event ts/index). Ensure each MessagePayload has allowed_mentions set to none (for webhook sender) and adheres to Discord max embeds/message.

## 8. Config toggles and thresholds [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7
### Description: Expose configuration for thresholds and parity_mode to influence truncation/attachments.
### Details:
Define BuildConfig with fields: parity_mode (bool), batch_size, large_output_attach_threshold, diff_embed_max_lines, embeds_per_message_max, embed_desc_max, fields_max. When parity_mode=true, prefer minimal truncation: increase attach usage earlier, avoid modifying content formatting beyond sanitization, and reduce ellipsis usage. Thread config through all builders and engines.

## 9. Tests and documentation [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8
### Description: Add unit/snapshot tests and author style guide with examples and known limits.
### Details:
Tests: length checks for descriptions/fields, fence balance after sanitization and truncation, diff compaction with hunk extraction and line caps, attachment generation boundaries at 60 lines and 1200 chars, batching/splitting at 10 embeds. Snapshot embeds for deterministic formatting. Documentation: per-event template guide, truncation rules, sanitization rules, attachment naming/MIME, batching behavior, config reference, and acceptance criteria.


# Task ID: 8
# Title: Optional Input Path: Slash Command Handling and Pod-Local HTTP Bridge
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Enable operators to send input to the running agent via Discord slash commands in the run channel, forwarding JSON to a pod-local HTTP bridge (POST /input).
# Details:
Approach without gateway (REST-first):
- Register slash command /input with an optional string parameter text and optional json attachment. Use application command interactions with public key verification.
- Bot service exposes POST /interactions endpoint; verify Discord signatures (X-Signature-Ed25519, X-Signature-Timestamp) using ed25519-dalek.
- Maintain a channel→bridge mapping store when /runs is created: {channel_id, bridge_url} stored securely. Only forward inputs for mapped channels.
- On /input usage: validate the channel is a run channel and user permissions if needed; construct payload { user, channelId, runId, text, timestamp } and POST to http://127.0.0.1:PORT/input bridged via a per-pod Service or via injected env variable BRIDGE_URL when creating the run (out-of-band). For cluster routing, use a short-lived secret mapping or pre-provisioned per-run endpoint.
- Pod-local bridge (small HTTP server in watcher or a separate sidecar binary):
  - Expose POST /input on 127.0.0.1 only; write streaming JSON to an agent FIFO/stdin path (env: AGENT_STDIN or FIFO_PATH). Use Tokio to write and flush.
  - Return 200 fast; do not block on agent.
- Security: validate channel/run mapping in bot; bridge only binds to localhost; optional HMAC between bot and bridge.
Interaction response:
- Acknowledge with a short ephemeral message confirming delivery or error.
Pseudo-code (bot):
fn handle_interaction(req) { verify_signature(); match command.name { "input" => { if !is_run_channel(channel_id) { respond_ephemeral("Not allowed here"); } else { post_to_bridge(bridge_url, payload).await; respond_ephemeral("Sent"); } } }
Pseudo-code (bridge):
POST /input -> read JSON -> write to stdin FIFO -> 200.


# Test Strategy:
Unit tests for signature verification using known public/private key pairs. Integration test with a local bridge server that captures payloads; simulate interaction JSON and assert forwarding only for authorized channel IDs. Test FIFO writing with a temp named pipe. Security tests: attempt requests from wrong channel → rejected.

# Subtasks:
## 1. Define and register /input slash command [pending]
### Dependencies: None
### Description: Create the Discord application command with optional text string and optional JSON attachment parameters.
### Details:
Specify command name 'input' with: param 'text' (STRING, optional) and param 'json' (ATTACHMENT, optional). Disable in DMs. Choose registration strategy (startup sync or out-of-band script). Make registration idempotent and upsert by command name. Document required OAuth2 scopes and permissions.

## 2. Implement Discord signature verification [pending]
### Dependencies: None
### Description: Add ed25519 verification for POST /interactions requests with replay protection.
### Details:
Verify X-Signature-Ed25519 and X-Signature-Timestamp using ed25519-dalek against the app public key. Enforce a 5-minute replay window and reject non-POST or missing headers with 401. Use constant-time comparisons and return PLAIN 401 without body details on failures. Log attempt metadata without sensitive contents.

## 3. Build /interactions handler and command routing [pending]
### Dependencies: 8.2
### Description: Parse interaction payloads, handle PING, and route to the /input command handler.
### Details:
Implement axum/warp handler for POST /interactions. Respond to PING with PONG. For application_command, extract command name and options. Provide a hook to defer responses when forwarding may exceed 3 seconds. Include versioning of payload schema in context for downstream steps.

## 4. Channel-to-bridge mapping store [pending]
### Dependencies: None
### Description: Create secure mapping storage for {channel_id, run_id, bridge_url} with TTL, set at /runs creation time.
### Details:
Implement get/put/delete APIs with TTL expiration. Store fields: channel_id, run_id, bridge_url, created_at, expires_at, optional hmac_secret. Prefer in-memory cache with optional persistent backing. Validate inputs and ensure only known channels are mapped. Expose metrics for hits/misses/expired.

## 5. Authorization and channel validation [pending]
### Dependencies: 8.3, 8.4
### Description: Enforce that /input is used in a mapped run channel and optionally check user roles/allowlist.
### Details:
Lookup channel_id in mapping; reject if absent or expired. Optionally enforce role IDs or user allowlist from config. Log denied attempts with minimal fields. Provide clear ephemeral error messages and do not leak internal details.

## 6. Payload construction and attachment handling [pending]
### Dependencies: 8.3, 8.5
### Description: Build sanitized payload {user, channelId, runId, text, timestamp, json} and enforce size/type limits.
### Details:
Assemble payload with schema_version and correlation_id. Sanitize text (limit length, strip control chars). If 'json' attachment present, ensure content type is application/json and size within limit (e.g., 1 MB); fetch from CDN with bot token and parse or pass-through as string. Add user metadata (id, username, roles).

## 7. HTTP client to pod-local bridge with retries and HMAC [pending]
### Dependencies: 8.6, 8.4
### Description: POST payload to bridge_url/input with robust error handling and optional HMAC signing.
### Details:
Use reqwest with connect/read timeouts (e.g., 200ms/1s). Retry transient failures (3 attempts, jittered backoff). Include HMAC header (e.g., X-Input-Signature: hex(hmac_sha256(secret, body))) when secret available. Treat non-2xx as errors. Never block interaction thread; run async task.

## 8. Ephemeral interaction responses and deferrals [pending]
### Dependencies: 8.3, 8.7
### Description: Send ephemeral ACKs or errors per Discord interaction lifecycle.
### Details:
If forwarding may take >3s, send deferred ephemeral response, then follow up with success/failure. On quick success, respond immediately with ephemeral 'Sent'. On errors, show concise message and correlation_id. Ensure proper interaction token usage and followup message deletion policies.

## 9. Pod-local bridge HTTP server [pending]
### Dependencies: 8.6
### Description: Implement 127.0.0.1-bound server with POST /input writing to FIFO/STDIN asynchronously.
### Details:
Use axum/warp bound to 127.0.0.1:PORT (env BRIDGE_PORT). Accept JSON payload and stream a single line into FIFO_PATH or AGENT_STDIN via Tokio, flush promptly, and return 200 without waiting for agent processing. Handle FIFO open semantics and backpressure gracefully. Add basic health endpoint if needed.

## 10. Bridge security hardening [pending]
### Dependencies: 8.9, 8.7
### Description: Enforce localhost binding, validate optional HMAC, and apply body limits and validation.
### Details:
Ensure server only binds to 127.0.0.1. Enforce max body size (e.g., 1 MB). Verify X-Input-Signature HMAC when configured; reject mismatches with 401. Validate required fields and schema_version. Add minimal structured error responses and audit logs for rejected requests.

## 11. Unit and integration tests [pending]
### Dependencies: 8.2, 8.5, 8.7, 8.9, 8.10
### Description: Add tests for signature verification, authorization, payload building, forwarding, and FIFO writes.
### Details:
Use known ed25519 keypair for signature tests. Simulate interaction JSON and assert only mapped channels are accepted. Stand up a test bridge to capture payloads. Create a temp named pipe for FIFO tests. Include negative tests (bad signature, wrong channel, oversized attachment, HMAC mismatch).

## 12. Observability and documentation [pending]
### Dependencies: 8.8, 8.10, 8.11
### Description: Add tracing/metrics and write setup/security docs with acceptance criteria mapping.
### Details:
Emit tracing spans with run/channel IDs and outcome tags. Export counters for forwarded inputs, failures, and histograms for end-to-end latency. Document setup: command registration, environment variables (BRIDGE_URL, FIFO_PATH, HMAC secret), security model, and failure modes. Provide acceptance test checklist.


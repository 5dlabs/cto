# Task ID: 8
# Title: Create Trading UI Components
# Status: pending
# Dependencies: 2, 5
# Priority: medium
# Description: Build React components for the trading interface including order forms, position displays, and market data visualization
# Details:
Create TradingPanel component with buy/sell forms. Build PositionList showing open positions with PnL. Implement OrderBook component for market depth. Create PriceChart using TradingView or lightweight-charts. Build TokenSelector with search functionality. Add SlippageSettings component. Implement responsive design for mobile. Use React Query for data fetching.

# Test Strategy:
Test UI components with various screen sizes, verify form validations, test real-time data updates, validate chart rendering performance, test accessibility compliance

# Subtasks:
## 1. Build TradingPanel Component with Buy/Sell Forms [pending]
### Dependencies: None
### Description: Create the main trading panel component with integrated buy and sell order forms, including input validation and order submission logic
### Details:
Implement TradingPanel as the main container component. Create BuyForm and SellForm sub-components with inputs for amount, price (for limit orders), and order type selection. Add form validation for numeric inputs, minimum amounts, and available balance checks. Implement order preview functionality showing estimated costs and fees. Add loading states and error handling for order submission. Style with consistent theme and ensure proper spacing.

## 2. Create PositionList Component with PnL Display [pending]
### Dependencies: None
### Description: Build a component to display user's open positions with real-time profit/loss calculations and position management actions
### Details:
Create PositionList component that fetches and displays all open positions. Implement PositionCard sub-component showing token pair, entry price, current price, position size, and PnL (both absolute and percentage). Add real-time price updates using WebSocket connections. Include action buttons for closing positions or modifying orders. Implement color coding for profit (green) and loss (red). Add sorting and filtering options by token pair, PnL, or position size.

## 3. Implement OrderBook Component [pending]
### Dependencies: None
### Description: Create an order book component displaying market depth with bid/ask orders and spread visualization
### Details:
Build OrderBook component with separate bid and ask sections. Implement real-time order book updates via WebSocket subscription. Display price levels with aggregated volumes and visual depth bars. Add spread indicator showing the difference between best bid and ask. Implement price level grouping with adjustable precision. Add click-to-fill functionality for quick order placement. Optimize rendering performance for frequent updates using React.memo and virtualization for large order books.

## 4. Integrate Price Charts with TradingView or Lightweight-Charts [pending]
### Dependencies: None
### Description: Implement interactive price charts with technical indicators and drawing tools for market analysis
### Details:
Create PriceChart component using TradingView widget or lightweight-charts library. Implement multiple timeframe options (1m, 5m, 1h, 1d, etc.). Add popular technical indicators (MA, RSI, MACD, Bollinger Bands). Include drawing tools for trend lines and support/resistance levels. Implement chart type switching (candlestick, line, bars). Add volume overlay display. Ensure proper cleanup of chart instances on component unmount. Handle responsive sizing for different screen dimensions.

## 5. Build TokenSelector Component with Search [pending]
### Dependencies: None
### Description: Create a token selection component with search functionality, filtering, and token metadata display
### Details:
Implement TokenSelector as a modal or dropdown component. Add search input with fuzzy matching on token name, symbol, and address. Display token list with icons, names, symbols, and balances. Implement filtering by token type, balance > 0, or favorites. Add token metadata fetching with caching. Include recent/popular tokens section. Implement keyboard navigation for accessibility. Add loading states while fetching token lists and metadata.

## 6. Create SlippageSettings Component [pending]
### Dependencies: None
### Description: Build a component for users to configure slippage tolerance and other trading preferences
### Details:
Create SlippageSettings component with preset options (0.1%, 0.5%, 1%) and custom input. Add validation for reasonable slippage values with warnings for high settings. Implement transaction deadline setting for order expiration. Add expert mode toggle for advanced features. Include gas price adjustment options. Store user preferences in localStorage. Add tooltips explaining each setting's impact. Implement visual feedback for setting changes.

## 7. Implement Responsive Design for Mobile [pending]
### Dependencies: 8.1, 8.2, 8.3, 8.4, 8.5, 8.6
### Description: Adapt all trading UI components for mobile devices with touch-optimized interactions and responsive layouts
### Details:
Implement responsive breakpoints using CSS Grid and Flexbox. Create mobile-specific layouts for TradingPanel with tabbed interface. Adapt OrderBook for vertical space constraints with collapsible sections. Optimize PriceChart for touch interactions and smaller screens. Design mobile-friendly TokenSelector with full-screen modal. Implement swipe gestures for navigation between components. Add bottom sheet pattern for forms and settings. Test on various device sizes and orientations.

## 8. Setup React Query for Data Fetching [pending]
### Dependencies: None
### Description: Configure React Query for efficient data fetching, caching, and synchronization across all trading components
### Details:
Install and configure React Query with QueryClient. Create custom hooks for fetching market data, positions, and order book. Implement query invalidation strategies for real-time updates. Set up optimistic updates for order placement and cancellation. Configure stale time and cache time for different data types. Add error retry logic with exponential backoff. Implement query prefetching for improved performance. Create loading and error boundary components for consistent UX.


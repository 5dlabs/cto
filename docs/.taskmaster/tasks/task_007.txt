# Task ID: 7
# Title: MCP tool/API for efficient PR comment retrieval
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Implement a lightweight MCP tool/service that fetches PR and review comments for use by Rex and other agents when reacting to feedback.
# Details:
Implementation:
- Implement a small HTTP service (Go/Node) called mcp-github-comments exposing endpoints:
  - GET /repos/{owner}/{repo}/pulls/{number}/comments (review comments)
  - GET /repos/{owner}/{repo}/issues/{number}/comments (issue comments on PR)
  - Optional: GET /repos/{owner}/{repo}/issues/{number}/timeline for richer context
- Auth: read installation token from /var/run/github/token populated by the token generator (Task 2).
- Response shaping: return combined sorted comments with author, created_at, body, in a compact JSON suitable for prompts and include a token budget friendly summarization option.
- Package as a container and deploy as a ClusterIP service mcp-github-comments; add to requirements.yaml tools list.
- In coderun-template, when github-app=rex and event is a comment, call the MCP endpoint to fetch comments and store at /work/comments.json; pass the path to CodeRun as an input so the agent can use it.
Pseudocode (Go):
r.GET("/repos/:owner/:repo/pulls/:number/comments", func(c) {
  tok := os.ReadFile("/var/run/github/token")
  f := fetch("https://api.github.com/repos/..", tok)
  c.JSON(200, normalize(f))
})

# Test Strategy:
Unit-test normalization and pagination handling. Integration: with a PR containing both review and issue comments, verify merged output ordering and content. Security: ensure no secret is logged; rate limit requests; handle 403/404 gracefully. In a workflow run, assert that /work/comments.json exists and includes the latest comments.

# Subtasks:
## 1. Service design and OpenAPI-lite specification [pending]
### Dependencies: None
### Description: Design the mcp-github-comments HTTP service contract, including endpoints, query parameters, headers, response schema, and non-functional requirements.
### Details:
Scope:
- Service name: mcp-github-comments (HTTP, port 8080)
- Endpoints:
  - GET /repos/{owner}/{repo}/pulls/{number}/comments           (review comments)
  - GET /repos/{owner}/{repo}/issues/{number}/comments          (issue comments on PR)
  - GET /repos/{owner}/{repo}/issues/{number}/timeline          (optional timeline)
  - GET /repos/{owner}/{repo}/pulls/{number}/comments/combined  (merged review+issue+optional timeline)
- Query parameters:
  - summarize=none|brief|compact (default: none)
  - include=review,issue,timeline (only for combined; default: review,issue)
  - since=ISO8601, until=ISO8601 (optional server-side filtering)
  - max_items=int (cap to prevent oversized payloads; default 2000)
  - summary_budget_chars=int (default 2000 when summarize!=none)
- Request headers:
  - If-None-Match: client ETag for conditional GETs
- Response schema (combined endpoint):
  {
    "comments": [
      {
        "id": "string",
        "type": "review"|"issue"|"timeline",
        "author": {"login": "string", "type": "User|Bot|Organization"},
        "created_at": "RFC3339",
        "updated_at": "RFC3339",
        "body": "string",
        "url": "string",
        "html_url": "string",
        "file_path": "string?",
        "line": "number?",
        "commit_id": "string?",
        "in_reply_to_id": "string?",
        "review_state": "approved|changes_requested|commented|dismissed|pending?"
      }
    ],
    "summary": {
      "text": "string",
      "stats": {
        "total_comments": "number",
        "review_comments": "number",
        "issue_comments": "number",
        "timeline_events": "number",
        "characters": "number"
      }
    }?
  }
- Error schema:
  {"error": {"code": "string", "message": "string", "upstream_status": "number?", "retry_after_seconds": "number?"}}
- Non-functional:
  - Content-Type: application/json; charset=utf-8
  - ETag support on all endpoints (304 when not modified)
  - Max response size cap; safe defaults; timeouts documented
Acceptance criteria:
- OpenAPI-lite (YAML/JSON) spec checked into repo covering all endpoints, params, headers, response and error schemas.
- Example requests/responses for each endpoint included in docs.
- Stakeholder sign-off on API surface and constraints.

## 2. GitHub API integration with installation token, pagination, and ETag [pending]
### Dependencies: 7.1
### Description: Implement upstream GitHub calls using the installation token from /var/run/github/token with pagination and ETag handling.
### Details:
Implementation:
- Token: read from GITHUB_TOKEN_FILE (default /var/run/github/token); header: Authorization: Bearer <token>; Accept: application/vnd.github+json
- Upstream endpoints:
  - Review comments: https://api.github.com/repos/{owner}/{repo}/pulls/{number}/comments
  - Issue comments:  https://api.github.com/repos/{owner}/{repo}/issues/{number}/comments
  - Timeline:        https://api.github.com/repos/{owner}/{repo}/issues/{number}/timeline
- Pagination: parse Link headers (rel="next"/"last"); iterate until exhausted; allow caller to force page/per_page passthrough for raw endpoints; combined endpoint fetches all pages by default under max_items cap.
- ETag: maintain in-memory cache keyed by upstream URL+query; send If-None-Match; on 304, reuse cached body; compute and return service-level ETag for combined responses.
- Timeouts: connect 5s, read 10s; user-agent header set; context propagation per request.
- Retries: limited retry with backoff for 502/503/504; no retry on 4xx except 409 transient.
- Security: never log token; validate owner/repo/number inputs.
Acceptance criteria:
- Service reads token from file and authenticates successfully.
- For a PR with >100 comments, retrieves all pages correctly.
- Subsequent call with If-None-Match returns 304 when unchanged.
- Requests include correct headers; errors from GitHub are mapped to service error schema.

## 3. Normalization, merge, sorting, and summarization [pending]
### Dependencies: 7.1, 7.2
### Description: Normalize upstream payloads into a compact schema, merge streams, sort deterministically, and add optional token/char-budget summarization.
### Details:
Normalization:
- Map review comments, issue comments, and selected timeline events into NormalizedComment schema.
- Timeline: include key events (review submitted states, label changes, commits) when requested; exclude noisy events by default.
- Preserve threading via in_reply_to_id when present; capture file_path, line, commit_id for review comments.
Merge and sorting:
- Merge sources per include parameter; sort by created_at ascending; tie-break by id lexicographically for stability.
Summarization:
- Modes: none|brief|compact; budget via summary_budget_chars.
- Produce concise bullets: key themes, requested changes, approvals, action items, per-file hotspots; deterministic algorithm (no external LLM dependency).
- Include stats: totals by type and character count.
Response shaping:
- Apply schema defined in subtask 7.1; omit summary when summarize=none.
Acceptance criteria:
- Given a PR with both review and issue comments, combined output is correctly merged, sorted, and fields populated.
- Summaries respect budget and mode, contain no secrets, and reflect major feedback accurately.
- Handles >1k comments within memory/time bounds; output adheres to schema.

## 4. Containerization and Kubernetes Deployment/Service [pending]
### Dependencies: 7.2, 7.3
### Description: Package as a container and deploy as a ClusterIP service mcp-github-comments with token volume mount.
### Details:
Containerization:
- Multi-stage Dockerfile (Go build); minimal runtime (distroless/alpine); non-root user; port 8080; env GITHUB_TOKEN_FILE=/var/run/github/token.
- Health endpoint: GET /healthz returns 200.
Kubernetes manifests:
- Deployment: replicas=2; resources requests/limits; readiness/liveness probes (/healthz); volume /var/run/github shared with token generator sidecar; labels app=mcp-github-comments.
- Service: ClusterIP mcp-github-comments, port 80 -> 8080.
- Optional: /metrics endpoint for Prometheus scraping; basic NetworkPolicy to restrict ingress within namespace.
Release:
- Build and push image to registry; kustomize/helm templates committed.
Acceptance criteria:
- kubectl shows ready pods; Service endpoints reachable inside cluster.
- Health probes pass; token volume mounted; image size reasonably small (<50 MB if feasible).
- curl from a debug pod to combined endpoint returns valid JSON.

## 5. Tool registration and coderun-template integration [pending]
### Dependencies: 7.4, 7.3
### Description: Add tool entry to requirements.yaml and integrate service call in coderun-template on comment events; store output at /work/comments.json and pass to CodeRun.
### Details:
Tool registration:
- Update requirements.yaml tools list:
  - name: mcp-github-comments
  - baseUrl: http://mcp-github-comments
  - endpoints documented for discovery.
Workflow integration:
- In coderun-template, when github-app=rex AND event is a comment (issue_comment or pull_request_review_comment), add a step to call:
  GET http://mcp-github-comments/repos/{owner}/{repo}/pulls/{number}/comments/combined?summarize=compact&include=review,issue,timeline
- Write response to /work/comments.json and pass parameter comments_path=/work/comments.json into CodeRun.
- Ensure network access to Service and no token leakage in logs.
Acceptance criteria:
- On a PR comment-triggered run, /work/comments.json exists with merged comments.
- CodeRun receives comments_path and can read the file.
- requirements.yaml contains the tool entry; pipeline step is conditional on comment events and rex app.

## 6. Rate limiting, error handling, and logging redaction [pending]
### Dependencies: 7.2, 7.3
### Description: Implement rate limiting aligned with GitHub quotas, robust error handling, retries/backoff, and strict log redaction.
### Details:
Rate limiting:
- In-memory token bucket per installation/repo key; tune to stay within GitHub rate (e.g., 5000/h); honor X-RateLimit-* headers and set Retry-After on 429.
Resilience:
- Exponential backoff for 5xx and secondary rate limiting 403; cap retries; circuit breaker on repeated upstream failures; request timeouts and context cancellation respected.
Errors and responses:
- Use unified error schema with upstream_status and retry_after_seconds when applicable.
- Map 403/404/422 from GitHub appropriately; return 304 on conditional requests when unchanged.
Logging and PII:
- Redact Authorization and token values; avoid logging full comment bodies at info level; include request id, method, path, status, latency.
Acceptance criteria:
- Load test shows graceful 429 with Retry-After when budget exceeded; normal traffic stays under limits.
- No secrets appear in logs; structured errors are returned with useful messages.
- Circuit breaker triggers on repeated failures and recovers automatically.

## 7. Unit/integration tests and documentation [pending]
### Dependencies: 7.1, 7.2, 7.3, 7.4, 7.5, 7.6
### Description: Add tests for normalization, pagination, ETag and error paths; create integration/E2E tests and documentation (README and OpenAPI-lite).
### Details:
Tests:
- Unit: normalization mapping, merge/sort determinism, summarization budget enforcement, Link header pagination, ETag cache hits/misses, error mapping.
- Integration: against a test PR with both review and issue comments; verify combined output and 304 on repeat with If-None-Match; timeline include/exclude behavior.
- E2E: run coderun-template in cluster on a synthetic comment event; verify /work/comments.json created and passed to CodeRun.
Docs:
- README covering setup, environment variables, endpoints, query params, response and error schemas, limits, examples (curl); troubleshooting section.
- OpenAPI-lite artifact checked in and linked; example response payloads included.
Acceptance criteria:
- CI passes with high coverage on core packages (>80%).
- Example curl commands in README return expected shapes.
- E2E demonstration recorded in PR or docs; stakeholder sign-off on documentation.


# Task ID: 7
# Title: Discord Bot Service: Channel Lifecycle and Webhook Provisioning
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Build a RESTful bot service (Twilight REST-first) that creates per-run channels in the 'Agent Runs' category, creates a channel-scoped webhook, and returns {channelId, webhookUrl}.
# Details:
Implementation:
- Bot service runs with a bot token (env: DISCORD_BOT_TOKEN) in a central deployment (never in pods running agents).
- Provide POST /runs API: { taskId, attempt, shortId, guildId, retentionHours }.
  - Find or create category 'Agent Runs' in the guild.
  - Create text channel name: run-{taskId}-{attempt}-{shortId} under category.
  - Create webhook in that channel with name 'Agent Run {shortId}'.
  - Return { channelId, webhookUrl }.
- Provide POST /runs/{channelId}/finalize: archive or delete channel after retention window; delete webhook.
- Post initial header embed via bot using twilight-http CreateMessage with run metadata, or leave to watcher once webhook is used.
- Use twilight_http::Client for all operations. Respect REST rate limits.
- Security: AuthN for our API (e.g., internal token), allow only trusted callers (CI or operator tool). Validate channel naming to prevent collisions.
Pseudo-code:
POST /runs -> create_category_if_needed(); create_channel(); create_webhook(); respond JSON.


# Test Strategy:
Integration tests using a Discord test guild (with caution) or mocked HTTP. Unit tests for name formatting and category resolution. Verify that webhook is scoped to channel. Test finalize endpoint deleting or archiving channel and revoking webhook. Negative tests: invalid guild/category name, permission errors.

# Subtasks:
## 1. Service Skeleton and Configuration [pending]
### Dependencies: None
### Description: Set up the REST service with Axum/Warp, configuration, structured logging, and error handling.
### Details:
Initialize a Rust binary crate with axum (or warp) HTTP server. Load config from env: DISCORD_BOT_TOKEN, API_AUTH_TOKEN (or mTLS), PORT, INITIAL_HEADER_ENABLED, DEFAULT_RETENTION_HOURS. Implement healthz/ready endpoints, graceful shutdown, tracing-based structured logging, and a unified error type with mappable HTTP status codes. Define base routes for POST /runs and POST /runs/{channelId}/finalize (handlers stubbed).

## 2. API Authentication and Request Logging Middleware [pending]
### Dependencies: 7.1
### Description: Add internal authentication and safe request logging without leaking secrets.
### Details:
Implement middleware for Authorization: Bearer <API_AUTH_TOKEN> (or pluggable mTLS). Enforce auth on all mutating endpoints. Add request/response logging with redaction of tokens and webhook URLs. Include simple per-IP or token rate limiting to protect the service. Return 401/403 as appropriate, and include correlation IDs in logs.

## 3. Discord REST Client Initialization and Permission Validation [pending]
### Dependencies: 7.1
### Description: Create twilight_http::Client with bot token and validate required permissions.
### Details:
Instantiate twilight_http::Client using DISCORD_BOT_TOKEN and custom User-Agent. On startup, fetch current user (/users/@me) to verify token. Provide utility functions for channel, category, webhook operations. Optionally probe configured guild(s) to ensure Manage Channels and Manage Webhooks permissions or surface clear errors at runtime. Ensure client respects Twilight's rate-limit handling.

## 4. In-Memory Store and Caching Layer [pending]
### Dependencies: 7.1
### Description: Design and implement caches for category IDs and run metadata with safe secret handling.
### Details:
Introduce a concurrency-safe store (DashMap/RwLock) to cache: guildId -> categoryId for 'Agent Runs'; channelId -> run metadata (taskId, attempt, shortId, guildId, retention deadline); channelId -> webhook id/token (token handled carefully, never logged). Add TTL/refresh policy for categories. On restart, tolerate empty caches and re-resolve from Discord as needed.

## 5. Category Manager: Find-or-Create 'Agent Runs' [pending]
### Dependencies: 7.3, 7.4
### Description: Implement find-or-create logic for the 'Agent Runs' category per guild with caching and perms handling.
### Details:
Implement get_or_create_category(guildId, name='Agent Runs'): list guild channels, find matching category; if absent, create category. Cache the categoryId in the store. Handle permission errors with clear diagnostics. Ensure idempotency under concurrency (double-check after create). Optionally set permission overwrites if needed.

## 6. POST /runs: Request Schema and Validation [pending]
### Dependencies: 7.1, 7.2
### Description: Define payload schema and validate inputs, including safe channel name generation.
### Details:
Define DTO: { taskId: String, attempt: u32, shortId: String, guildId: Snowflake, retentionHours: Option<u32> }. Validate length/charset; shortId constrained to safe characters. Generate channel name run-{taskId}-{attempt}-{shortId} with normalization (lowercase, hyphenated, max length). Compute retention_deadline = now + retentionHours or default. Reject malformed inputs early with 400.

## 7. Channel Creation Under Category with Collision Handling [pending]
### Dependencies: 7.3, 7.5, 7.6
### Description: Create the text channel under the category and handle name collisions and metadata.
### Details:
Using the validated name and categoryId, create a text channel in the guild. If a channel with the same name exists, detect and avoid collisions (e.g., append a short suffix or fail with 409). Set channel topic with metadata (taskId/attempt/shortId). Store run metadata in the cache. Ensure operations respect rate limits and surface retriable vs fatal errors.

## 8. Webhook Provisioning and Secure Response [pending]
### Dependencies: 7.7, 7.3
### Description: Create a channel-scoped webhook and return {channelId, webhookUrl} securely.
### Details:
Create a webhook named 'Agent Run {shortId}' in the channel. Construct https://discord.com/api/webhooks/{id}/{token}. Store id/token in cache for finalize, but redact in logs. Return JSON response { channelId, webhookUrl } to the caller. Do not log the URL or token; ensure headers and traces are scrubbed. Handle conflicts (existing webhook) idempotently.

## 9. Optional Initial Header Embed Posting [pending]
### Dependencies: 7.8, 7.3
### Description: Post an initial header embed with run metadata via bot client when enabled.
### Details:
If INITIAL_HEADER_ENABLED=true, post a CreateMessage to the channel with an embed summarizing taskId, attempt, shortId, retention window, and timestamps. Enforce embed size limits and handle errors without failing the main /runs flow. If disabled, rely on the watcher to post via webhook later.

## 10. POST /runs/{channelId}/finalize: Retention and Idempotent Cleanup [pending]
### Dependencies: 7.3, 7.4, 7.5, 7.7, 7.8
### Description: Implement finalize to archive/delete the channel and delete the webhook respecting retention.
### Details:
Authorize request, look up run by channelId. If retention has not elapsed, archive (lock/rename/move) or no-op with 202. If elapsed, delete webhook (using cached id/token or by listing channel webhooks) and delete or archive the channel. Make idempotent: missing resources should return 200 with status noted. Record cleanup state in cache. Emit audit logs without secrets.

## 11. Tests, Mocks, Rate-Limit Scenarios, and Operational Docs [pending]
### Dependencies: 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 7.10
### Description: Build test suites and write deployment/operations documentation.
### Details:
Unit tests for name formatting, request validation, auth middleware, category resolution. Mocked Discord HTTP (e.g., wiremock) for create/delete channel/webhook paths, 429 with retry-after, and transient 5xx. Optional integration tests in a test guild with caution. Document required Discord permissions, environment variables, rate-limit behavior, error triage, and deployment steps.


# Task ID: 7
# Title: Pod-local Input Bridge (Sidecar HTTP â†’ Agent FIFO/stdin)
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Implement an optional HTTP bridge in the sidecar that accepts JSON POST /input and writes streaming JSONL to agent FIFO/stdin without blocking the agent.
# Details:
- Add an axum server in the Rust sidecar, listening on 0.0.0.0:8088 (configurable), with route POST /input; disabled by default via config
- Request payload schema: { runId: string, channelId: string, userId: string, username: string, content: string, timestamp: string, token?: string }
- Security: require a shared per-run token (HMAC or random) set by bot on /runs; reject if missing/invalid; optionally restrict to cluster network via NetworkPolicy (K8s)
- Writing to agent: support two modes via config: FIFO path (AGENT_INPUT_FIFO) or inherit agent stdin (file descriptor). Implement non-blocking open on FIFO and spawn a writer task with bounded queue; write one line per message as compact JSON followed by newline
- Backpressure: if agent not reading, buffer up to N messages (config); drop-oldest with warning beyond that to avoid deadlock
- Pseudo-code handler:
  async fn input(Json(msg)): -> Status { if !auth(msg.token) || !validate_channel(msg.channelId) { return 403 }
    let line = serde_json::to_string(&msg)? + "\n"; input_tx.try_send(line).map_err(|_| 503)?; 202 }
- Observability: counters for messages forwarded, dropped, bytes written


# Test Strategy:
- Unit tests for auth token validation and schema validation
- Integration test: create a temp FIFO, start reader, POST to /input, assert line arrives intact
- Load test: 100 msgs/sec for 10s; verify no deadlocks and bounded memory
- Failure test: reader paused; verify backpressure and drop policy works as configured

# Task ID: 6
# Title: Argo Events GitHub EventSource and Sensors mapping to workflows
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Configure Argo Events to consume GitHub webhooks and trigger appropriate workflows with parameters for repo, PR, branch, taskId, and agent type.
# Details:
Implementation:
- Create an EventSource of type github with webhook secret from External Secrets:
  apiVersion: argoproj.io/v1alpha1
  kind: EventSource
  metadata: {name: github-es}
  spec:
    github:
      main:
        repositories:
          - owner: "*"
            repository: "*"
        webhook:
          endpoint: /events
          port: 12000
          method: POST
          secret:
            name: github-webhook-secret
            key: secret
        events:
          - pull_request
          - issues
          - issue_comment
          - pull_request_review_comment
          - push
          - workflow_run
          - check_run
          - security_advisory
- Create Sensors mapping to workflows:
  - PR opened/updated → pr-validation WorkflowTemplate
  - issue_comment or pull_request_review_comment → coderun-template with github-app=rex and include downloaded comments param
  - workflow_run/check_run failure → coderun-template with github-app=triage
  - issues opened → implementation WorkflowTemplate (start with Rex)
  - security events or scan complete → coderun-template with github-app=security
  - push/merge → trigger orchestrator to resume/close as needed
- Use trigger.template.ref to reference WorkflowTemplates and pass the raw event payload into workflow.parameters.event. Add rate limiters/concurrencyPolicy per Sensor to mitigate event storms.
- Ensure Sensors include serviceAccounts with minimal RBAC to submit Workflows.
Pseudocode (Sensor trigger):
triggers:
- template:
    name: pr-validation
    k8s:
      group: argoproj.io
      version: v1alpha1
      resource: Workflow
      operation: create
      source:
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Workflow
          metadata:
            generateName: pr-validation-
          spec:
            workflowTemplateRef: {name: pr-validation}
            arguments:
              parameters:
                - name: event
                  value: "{{events.github-es.main.body}}"

# Test Strategy:
Webhook integration test using a GitHub test repo: point its webhook to the EventSource service; create PRs, issues, comments, force failing checks; verify corresponding workflows are created with correct parameters. Security: invalid signature payloads must be rejected. Load test moderate event bursts; confirm debounce/rate limits prevent storm cascades.

# Subtasks:
## 1. GitHub EventSource with webhook secret from External Secrets [pending]
### Dependencies: None
### Description: Provision ExternalSecret-backed webhook secret and create a GitHub EventSource to receive GitHub webhooks at /events.
### Details:
Manifests:
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: github-webhook-secret-es
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: my-secret-store
    kind: ClusterSecretStore
  target:
    name: github-webhook-secret
    creationPolicy: Owner
  data:
    - secretKey: secret
      remoteRef:
        key: github/webhook
        property: secret
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: github-es
spec:
  github:
    main:
      repositories:
        - owner: "*"
          repository: "*"
      webhook:
        endpoint: /events
        port: 12000
        method: POST
        secret:
          name: github-webhook-secret
          key: secret
      events:
        - pull_request
        - issues
        - issue_comment
        - pull_request_review_comment
        - push
        - workflow_run
        - check_run
        - security_advisory
Notes:
- Expose the EventSource service via your ingress/gateway as https://<domain>/events.
Acceptance criteria:
- EventSource pod ready; service routes POST /events.
- Valid signature payloads accepted; invalid signatures rejected (HTTP 401/403).

## 2. Sensor for PR events → pr-validation WorkflowTemplate [pending]
### Dependencies: 6.1
### Description: Create a Sensor that triggers pr-validation on PR opened/updated events with parameters for repo, owner, pr, branch, and full event.
### Details:
Manifest:
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-pr-to-pr-validation
spec:
  template:
    serviceAccountName: argo-events-workflow-submitter
  dependencies:
    - name: pr
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["pull_request"]
          - path: body.action
            type: string
            value: ["opened", "reopened", "synchronize", "ready_for_review"]
        exprs:
          - expression: "body.pull_request.draft == false"
  triggers:
    - template:
        name: pr-validation
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: pr-validation-
              spec:
                workflowTemplateRef:
                  name: pr-validation
                arguments:
                  parameters:
                    - name: event
                      value: "{{events.github-es.main.body}}"
                    - name: owner
                      value: "{{events.github-es.main.body.repository.owner.login}}"
                    - name: repo
                      value: "{{events.github-es.main.body.repository.name}}"
                    - name: pr
                      value: "{{events.github-es.main.body.number}}"
                    - name: branch
                      value: "{{events.github-es.main.body.pull_request.head.ref}}"
                synchronization:
                  semaphore:
                    configMapKeyRef:
                      name: workflow-semaphores
                      key: pr-validation
      policy:
        rateLimit:
          unit: minute
          requestsPerUnit: 20
Acceptance criteria:
- Opening/updating a non-draft PR creates a Workflow from WorkflowTemplate pr-validation with parameters set correctly.
- Draft PRs do not trigger.

## 3. Sensors for issue_comment/review_comment → coderun-template (rex) with comment payload [pending]
### Dependencies: 6.1
### Description: Create Sensors to trigger coderun-template with github-app=rex for issue_comment and pull_request_review_comment events, including comment body and option to fetch full thread.
### Details:
Manifests (2 Sensors):
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-issue-comment-to-rex
spec:
  template:
    serviceAccountName: argo-events-workflow-submitter
  dependencies:
    - name: ic
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["issue_comment"]
          - path: body.action
            type: string
            value: ["created"]
        exprs:
          - expression: "body.comment.user.type != 'Bot'"
  triggers:
    - template:
        name: coderun-rex-issue-comment
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: coderun-rex-
              spec:
                workflowTemplateRef:
                  name: coderun-template
                arguments:
                  parameters:
                    - name: event
                      value: "{{events.github-es.main.body}}"
                    - name: owner
                      value: "{{events.github-es.main.body.repository.owner.login}}"
                    - name: repo
                      value: "{{events.github-es.main.body.repository.name}}"
                    - name: issue
                      value: "{{events.github-es.main.body.issue.number}}"
                    - name: agent
                      value: "rex"
                    - name: includeComments
                      value: "true"
                    - name: commentBody
                      value: "{{events.github-es.main.body.comment.body}}"
                synchronization:
                  semaphore:
                    configMapKeyRef:
                      name: workflow-semaphores
                      key: coderun
      policy:
        rateLimit:
          unit: minute
          requestsPerUnit: 30
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-pr-review-comment-to-rex
spec:
  template:
    serviceAccountName: argo-events-workflow-submitter
  dependencies:
    - name: prc
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["pull_request_review_comment"]
          - path: body.action
            type: string
            value: ["created"]
        exprs:
          - expression: "body.comment.user.type != 'Bot'"
  triggers:
    - template:
        name: coderun-rex-pr-comment
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: coderun-rex-
              spec:
                workflowTemplateRef:
                  name: coderun-template
                arguments:
                  parameters:
                    - name: event
                      value: "{{events.github-es.main.body}}"
                    - name: owner
                      value: "{{events.github-es.main.body.repository.owner.login}}"
                    - name: repo
                      value: "{{events.github-es.main.body.repository.name}}"
                    - name: pr
                      value: "{{events.github-es.main.body.pull_request.number}}"
                    - name: agent
                      value: "rex"
                    - name: includeComments
                      value: "true"
                    - name: commentBody
                      value: "{{events.github-es.main.body.comment.body}}"
                synchronization:
                  semaphore:
                    configMapKeyRef:
                      name: workflow-semaphores
                      key: coderun
      policy:
        rateLimit:
          unit: minute
          requestsPerUnit: 30
Acceptance criteria:
- Creating a new issue comment or PR review comment triggers a Workflow from coderun-template with agent=rex and includes comment body.
- Bot comments are ignored.

## 4. Sensors for workflow_run/check_run failures → coderun-template (triage) [pending]
### Dependencies: 6.1
### Description: Route failing CI checks and workflow runs to triage via coderun-template with github-app=triage.
### Details:
Manifest (one Sensor with OR condition):
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-ci-failures-to-triage
spec:
  template:
    serviceAccountName: argo-events-workflow-submitter
  dependencies:
    - name: wr
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["workflow_run"]
          - path: body.action
            type: string
            value: ["completed"]
        exprs:
          - expression: "body.workflow_run.conclusion in ['failure','timed_out']"
    - name: cr
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["check_run"]
          - path: body.action
            type: string
            value: ["completed"]
        exprs:
          - expression: "body.check_run.conclusion in ['failure','timed_out']"
  triggers:
    - template:
        name: coderun-triage
        conditions: "wr || cr"
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: coderun-triage-
              spec:
                workflowTemplateRef:
                  name: coderun-template
                arguments:
                  parameters:
                    - name: event
                      value: "{{inputs.parameters.event}}"
                    - name: owner
                      value: "{{inputs.parameters.owner}}"
                    - name: repo
                      value: "{{inputs.parameters.repo}}"
                    - name: agent
                      value: "triage"
                synchronization:
                  semaphore:
                    configMapKeyRef:
                      name: workflow-semaphores
                      key: coderun
      parameters:
        - src:
            dependencyName: wr
            dataKey: body
          dest: spec.arguments.parameters.0.value
        - src:
            dependencyName: cr
            dataKey: body
          dest: spec.arguments.parameters.0.value
        - src:
            dependencyName: wr
            dataKey: body.repository.owner.login
          dest: spec.arguments.parameters.1.value
        - src:
            dependencyName: cr
            dataKey: body.repository.owner.login
          dest: spec.arguments.parameters.1.value
        - src:
            dependencyName: wr
            dataKey: body.repository.name
          dest: spec.arguments.parameters.2.value
        - src:
            dependencyName: cr
            dataKey: body.repository.name
          dest: spec.arguments.parameters.2.value
      policy:
        rateLimit:
          unit: minute
          requestsPerUnit: 15
Acceptance criteria:
- Failing workflow_run or check_run events create a coderun-template Workflow with agent=triage, passing full event body.
- Success/neutral conclusions do not trigger.

## 5. Sensors for issues opened → implementation DAG, security events → security agent, and push/merge → orchestrator [pending]
### Dependencies: 6.1
### Description: Create Sensors to trigger the implementation WorkflowTemplate on new issues, security agent on security signals, and orchestrator on push/merge.
### Details:
Manifests (3 Sensors):
---
# Issues → implementation
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-issues-to-implementation
spec:
  template:
    serviceAccountName: argo-events-workflow-submitter
  dependencies:
    - name: issues
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["issues"]
          - path: body.action
            type: string
            value: ["opened"]
  triggers:
    - template:
        name: implementation-dag
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: implementation-
              spec:
                workflowTemplateRef:
                  name: implementation
                arguments:
                  parameters:
                    - name: event
                      value: "{{events.github-es.main.body}}"
                    - name: owner
                      value: "{{events.github-es.main.body.repository.owner.login}}"
                    - name: repo
                      value: "{{events.github-es.main.body.repository.name}}"
                    - name: issue
                      value: "{{events.github-es.main.body.issue.number}}"
                synchronization:
                  semaphore:
                    configMapKeyRef:
                      name: workflow-semaphores
                      key: implementation
      policy:
        rateLimit:
          unit: minute
          requestsPerUnit: 10
---
# Security advisories / scans → security agent
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-security-to-agent
spec:
  template:
    serviceAccountName: argo-events-workflow-submitter
  dependencies:
    - name: secadv
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["security_advisory"]
    - name: secscan
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["workflow_run"]
          - path: body.action
            type: string
            value: ["completed"]
        exprs:
          - expression: "has(body.workflow_run.name) && (body.workflow_run.name.matches('(?i)security|scan'))"
  triggers:
    - template:
        name: coderun-security
        conditions: "secadv || secscan"
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: coderun-security-
              spec:
                workflowTemplateRef:
                  name: coderun-template
                arguments:
                  parameters:
                    - name: event
                      value: "{{events.github-es.main.body}}"
                    - name: owner
                      value: "{{events.github-es.main.body.repository.owner.login}}"
                    - name: repo
                      value: "{{events.github-es.main.body.repository.name}}"
                    - name: agent
                      value: "security"
                synchronization:
                  semaphore:
                    configMapKeyRef:
                      name: workflow-semaphores
                      key: coderun
      policy:
        rateLimit:
          unit: minute
          requestsPerUnit: 10
---
# Push/merge → orchestrator
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-push-merge-to-orchestrator
spec:
  template:
    serviceAccountName: argo-events-workflow-submitter
  dependencies:
    - name: push
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["push"]
        exprs:
          - expression: "['refs/heads/main','refs/heads/master'].exists(body.ref) || body.base_ref == body.repository.default_branch"
    - name: merged
      eventSourceName: github-es
      eventName: main
      filters:
        data:
          - path: headers.X-GitHub-Event
            type: string
            value: ["pull_request"]
          - path: body.action
            type: string
            value: ["closed"]
        exprs:
          - expression: "body.pull_request.merged == true"
  triggers:
    - template:
        name: orchestrator-resume-close
        conditions: "push || merged"
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: orchestrator-
              spec:
                workflowTemplateRef:
                  name: orchestrator-resume-close
                arguments:
                  parameters:
                    - name: event
                      value: "{{events.github-es.main.body}}"
                    - name: owner
                      value: "{{events.github-es.main.body.repository.owner.login}}"
                    - name: repo
                      value: "{{events.github-es.main.body.repository.name}}"
                synchronization:
                  semaphore:
                    configMapKeyRef:
                      name: workflow-semaphores
                      key: orchestrator
      policy:
        rateLimit:
          unit: minute
          requestsPerUnit: 10
Acceptance criteria:
- New issues trigger implementation Workflow with correct parameters.
- Security advisories or security-related workflow runs trigger coderun-template with agent=security.
- Pushes to main/master and merged PRs trigger orchestrator-resume-close.

## 6. Parameter mapping: pass full event body and core fields to workflows [pending]
### Dependencies: 6.2, 6.3, 6.4, 6.5
### Description: Define and enforce a consistent parameter contract across Sensors and WorkflowTemplates for event, owner, repo, pr/issue, branch, taskId, and agent.
### Details:
Parameter contract:
- event: full raw event payload (body) as JSON string.
- owner: repository.owner.login
- repo: repository.name
- pr: number (PR events only)
- issue: issue.number (Issue events only)
- branch: pull_request.head.ref (PR) or ref (Push)
- agent: one of [rex, triage, security]
- includeComments: boolean when comment-driven tasks should hydrate full thread
- commentBody: original comment content (when applicable)
- taskId: to be parsed by downstream templates from comment/issue title using a pattern like /task[:\s]*([A-Za-z0-9_-]+)/i.
Enforcement:
- Sensors in 6.2–6.5 already pass parameters per this contract using template values or parameter mappings.
- Downstream WorkflowTemplates (pr-validation, coderun-template, implementation, orchestrator-resume-close) must declare matching parameters; example:
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: pr-validation
spec:
  arguments:
    parameters:
      - name: event
      - name: owner
      - name: repo
      - name: pr
      - name: branch
Acceptance criteria:
- All referenced WorkflowTemplates compile with argo lint and accept the defined parameters.
- Event JSON arrives intact in workflows (.spec.arguments.parameters[event]).

## 7. Concurrency, rate limiting, and minimal RBAC for Sensors [pending]
### Dependencies: 6.1, 6.2, 6.3, 6.4, 6.5, 6.6
### Description: Apply trigger rate limits, workflow semaphores, and minimal RBAC service accounts for Sensors to submit Workflows.
### Details:
Manifests:
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-events-workflow-submitter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-events-workflow-submit-role
rules:
  - apiGroups: ["argoproj.io"]
    resources: ["workflows"]
    verbs: ["create", "get", "list"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-events-workflow-submit-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-events-workflow-submit-role
subjects:
  - kind: ServiceAccount
    name: argo-events-workflow-submitter
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-semaphores
data:
  pr-validation: "5"
  coderun: "10"
  implementation: "5"
  orchestrator: "2"
Notes:
- Sensors in 6.2–6.5 already reference serviceAccountName and include trigger policy.rateLimit and workflow synchronization.semaphore.
- Adjust semaphore values to suit cluster capacity.
Acceptance criteria:
- Sensors can create workflows; no permission to modify unrelated resources.
- Rate limits enforced (no more than configured requests per minute per Sensor).
- Concurrent workflows do not exceed semaphore limits.

## 8. Integration tests and documentation [pending]
### Dependencies: 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7
### Description: Validate end-to-end event routing and document deployment, webhook setup, and acceptance criteria.
### Details:
Test plan:
- Configure a GitHub test repo webhook pointing to https://<domain>/events with secret.
- PR flow: open PR (non-draft), push commits → expect pr-validation workflow with correct owner/repo/pr/branch.
- Comments: add issue and PR review comments → expect coderun-template with agent=rex and commentBody.
- CI failure: force a failing workflow_run/check_run → expect coderun-template with agent=triage.
- Issues: open an issue → expect implementation workflow.
- Security: publish a security advisory or complete a security scan workflow → expect coderun-template with agent=security.
- Merge/push: merge a PR to main and push to main → expect orchestrator workflow.
- Negative tests: invalid signatures rejected; drafts ignored; successful checks do not trigger triage; bot comments ignored.
Verification:
- Inspect Workflow parameters to match mapping in 6.6.
- Confirm rate limiting and semaphore behavior under burst (simulate with webhook replay).
Docs:
- README covering manifests apply order, required WorkflowTemplates, ingress config, webhook configuration, parameter contract, and troubleshooting.
Acceptance criteria:
- All event types trigger correct WorkflowTemplates with correct parameters.
- Security and negative test conditions behave as specified.


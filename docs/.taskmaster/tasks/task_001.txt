# Task ID: 1
# Title: Initialize Rust Workspace, Crates, and CI
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Create a Rust workspace with two binaries: sidecar watcher and Discord bot service. Set up common utilities crate, linting, formatting, and basic CI.
# Details:
Structure:
- crates/
  - watcher/ (bin)
  - bot/ (bin)
  - common/ (lib)
- Use Tokio async runtime for both services.
- Dependencies (latest stable): tokio, serde, serde_json, anyhow, thiserror, tracing, tracing-subscriber, twilight-http, twilight-model, twilight-util (builders), reqwest (for HTTP bridge only), bytes, tokio-util, futures, clap, parking_lot, time, base64, ed25519-dalek (for interaction signature verification), warp or axum (HTTP server for bot interactions and pod-local bridge), notify (optional), sysinfo (optional metrics).
- Enable release profile optimizations for size and perf: lto=true, codegen-units=1, opt-level=z for release.
- Add .cargo/config.toml with RUSTFLAGS to reduce binary size where appropriate.
- Set up GitHub Actions CI: build, clippy -D warnings, fmt --check, unit tests.
- Common crate provides: types for transcript events, embed helpers, truncation utilities, constants for colors, rate-limit/backoff utils, webhook URL parser (extract id/token), and fencing sanitizers.
- Security: never include bot token in watcher crate; only accepts webhook URL env.
Pseudo-code:
- cargo new --workspace
- cargo new crates/common --lib
- cargo new crates/watcher --bin
- cargo new crates/bot --bin
- Implement feature flags: watcher: "parity_mode".
- Add tracing init to both bins.
Test scaffolding:
- Add a dev profile and run lib tests.
- Ensure builds pass in CI.

# Test Strategy:
CI validates clippy, formatting, and unit tests in common. Verify that crates compile on stable Rust. Smoke run both binaries with --help. Ensure no secret leakage: scan logs for token placeholders.

# Subtasks:
## 1. Scaffold Rust workspace and crate structure [pending]
### Dependencies: None
### Description: Create a new Rust workspace with three crates: common (lib), watcher (bin), and bot (bin). Ensure a clean repository layout matching the provided structure.
### Details:
Steps:
- Initialize repository and workspace: cargo new --vcs git --workspace .
- Create crates: cargo new crates/common --lib; cargo new crates/watcher --bin; cargo new crates/bot --bin
- Update root Cargo.toml with [workspace] members = ["crates/common", "crates/watcher", "crates/bot"]
- Verify cargo build works with default templates
- Add .gitignore for Rust (target/, Cargo.lock for libs as appropriate), and minimal README placeholder

## 2. Configure workspace dependencies and features [pending]
### Dependencies: 1.1
### Description: Add and pin shared dependencies, set MSRV, and configure feature flags (watcher: parity_mode).
### Details:
Steps:
- Use [workspace.dependencies] to centralize versions for: tokio (rt-multi-thread, macros, fs, io-util, signal), serde, serde_json, anyhow, thiserror, tracing, tracing-subscriber, reqwest (for bot HTTP bridge), bytes, tokio-util, futures, clap (derive), parking_lot, time, base64, ed25519-dalek, axum or warp (choose one), notify (optional), sysinfo (optional), twilight-http, twilight-model, twilight-util
- In crates/common, add dependencies: serde, serde_json, thiserror, anyhow, time, base64; optionally twilight-model and twilight-util for embed helpers
- In crates/watcher, add: tokio, tracing, tracing-subscriber, clap, reqwest (if needed later), bytes, tokio-util, futures, parking_lot, notify (optional), sysinfo (optional), serde/serde_json, anyhow/thiserror
- In crates/bot, add: tokio, tracing, tracing-subscriber, clap, axum or warp, twilight-http, twilight-model, twilight-util, ed25519-dalek (for signature verification), serde/serde_json, anyhow/thiserror
- Set rust-version (MSRV) in each crate Cargo.toml (e.g., 1.75 or current stable) and document in README
- Define feature flags: in watcher Cargo.toml, [features] parity_mode = [] (not default)
- Ensure both bins depend on common

## 3. Optimize Cargo profiles for size and performance [pending]
### Dependencies: 1.1, 1.2
### Description: Configure release and dev profiles for smaller, optimized binaries per requirements.
### Details:
Steps:
- In root Cargo.toml, set [profile.release]: lto = true, codegen-units = 1, opt-level = "z", strip = true if supported
- Set [profile.dev] for faster local builds (e.g., opt-level = 1) and add [profile.dev.package.*] overrides if useful
- Add [profile.test] with similar settings as dev where appropriate
- Add comments explaining trade-offs and how to override locally

## 4. Add .cargo/config.toml RUSTFLAGS and build tuning [pending]
### Dependencies: 1.1, 1.3
### Description: Provide cross-platform safe RUSTFLAGS to reduce size and control panics/linking behavior.
### Details:
Steps:
- Create .cargo/config.toml with:
  - For release builds: -C strip=symbols, -C panic=abort (if acceptable), -Z if not using nightly (avoid), set via build.rustflags guarded by CARGO_PROFILE if needed
  - Target-specific sections to avoid unsupported flags on Windows/macOS
  - Consider linker settings only when safe (e.g., no target-cpu=native by default)
- Document how to temporarily disable panic=abort for test runs if required

## 5. Set up formatting and linting [pending]
### Dependencies: 1.1
### Description: Add rustfmt and clippy configurations, ensuring clippy -D warnings and fmt --check pass locally.
### Details:
Steps:
- Add rustfmt.toml with stable-friendly options (edition formatting, imports_granularity, group_imports, max_width)
- Add clippy configuration (Clippy.toml or workspace-level allow/deny list) to fail on warnings
- Run cargo fmt --all and cargo clippy --workspace --all-features -- -D warnings to verify baseline
- Add basic module doc headers to suppress missing_docs only where necessary

## 6. Implement common crate modules and unit tests [pending]
### Dependencies: 1.2
### Description: Create stubs and minimal implementations for shared utilities: types, embed helpers, truncation, constants, backoff, webhook URL parser, and sanitizers, with unit tests.
### Details:
Steps:
- Modules:
  - types: transcript event enums/structs with serde derives
  - embeds: helper fns/builders scaffolding (may use twilight-model/util; return minimal builders or placeholder structs)
  - truncate: safe truncation preserving code fences and UTF-8 boundaries
  - constants: color palette and shared limits
  - backoff: exponential backoff with jitter; expose iterator or fn
  - webhook: parse Discord webhook URL into {id, token}; handle edge cases and return Result
  - sanitize: fence/code block balancing, escaping backticks
- Add unit tests for webhook parser, sanitizers, backoff behavior, truncation edge cases
- Ensure crate compiles independently and tests pass

## 7. Scaffold watcher and bot binaries [pending]
### Dependencies: 1.2, 1.6
### Description: Add minimal runnable mains for watcher and bot using Tokio, Clap, and tracing with safe configuration and feature flags.
### Details:
Steps:
- watcher:
  - tokio::main, initialize tracing-subscriber with env filter
  - Clap CLI with --help/--version and flags/env (e.g., DISCORD_WEBHOOK_URL), include --parity-mode behind feature "parity_mode"
  - Ensure no bot token references; only accept webhook URL
  - Return 0 after printing help; add placeholder logic guarded behind feature flags
- bot:
  - tokio::main, tracing init
  - Clap for basic options; read DISCORD_BOT_TOKEN from env
  - Start minimal HTTP server (axum or warp) exposing /healthz returning 200
  - Wire twilight HTTP client creation behind a placeholder function
- Verify both binaries compile and run with --help

## 8. Create GitHub Actions CI workflow [pending]
### Dependencies: 1.3, 1.4, 1.5, 1.6, 1.7
### Description: Add CI that builds, lints, formats, and tests across OS matrix with caching and PR triggers.
### Details:
Steps:
- Workflow triggers: pull_request, push to main
- Matrix: os = [ubuntu-latest, macos-latest]; toolchain = stable
- Steps: checkout, cache Cargo registry/target, install Rust toolchain, rustfmt check, clippy -D warnings, cargo build --workspace --release, cargo test --workspace
- Smoke run: run crates/watcher -- --help and crates/bot -- --help (Linux at least)
- Ensure secrets are not printed; redaction for env outputs
- Require CI to be green before merge

## 9. Repo hygiene and acceptance verification [pending]
### Dependencies: 1.8
### Description: Add LICENSE and README with build/run instructions, security notes, and verify acceptance criteria including binary size and no secret leakage.
### Details:
Steps:
- Add LICENSE (e.g., MIT/Apache-2.0 dual) and expand README with: project overview, MSRV, workspace layout, how to build, run, and test; security note that watcher only uses webhook URL and never bot token
- Add dev profile notes and contribution guidelines for fmt/clippy
- Validate acceptance:
  - cargo build/test/clippy/fmt all pass locally
  - Both bins run with --help
  - Common crate unit tests pass
  - Compare binary sizes: cargo build --release and record sizes to confirm reductions from profiles/flags
  - Confirm logs do not include secrets (document redaction and environment usage)
- Open initial PR to exercise CI and document outcomes


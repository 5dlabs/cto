# Task ID: 1
# Title: Helm values and Agents ConfigMap for personas and project-wide tools
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Add Helm values and templates to render agent personas' system prompts into a ConfigMap and define project-wide MCP tools configuration per PRD.
# Details:
Implementation:
- Update charts/platform (or create a new chart) with values.yaml:
  agents:
    - name: rex
      githubApp: rex-agent
      systemPromptFile: rex_system-prompt.md
    - name: clippy
      githubApp: clippy-agent
      systemPromptFile: clippy_system-prompt.md
    - name: qa
      githubApp: qa-agent
      systemPromptFile: qa_system-prompt.md
    - name: triage
      githubApp: triage-agent
      systemPromptFile: triage_system-prompt.md
    - name: security
      githubApp: security-agent
      systemPromptFile: security_system-prompt.md
  mcp:
    requirementsFile: requirements.yaml
- Helm template to render controller-agents ConfigMap:
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: controller-agents
  data:
    rex_system-prompt.md: |-
      {{ .Values.agents | include "renderPrompt" }}
    clippy_system-prompt.md: |-
      ...
    qa_system-prompt.md: |-
      ...
    triage_system-prompt.md: |-
      ...
    security_system-prompt.md: |-
      ...
- Include a project-level requirements.yaml for MCP tools (not per-task), e.g.:
  tools:
    - name: github-comments
      transport: http
      endpoint: http://mcp-github-comments:8080
    - name: k8s-verify
      transport: exec
      command: [/bin/kubectl, ...]
- Mount controller-agents ConfigMap into workflow pods using volume/volumeMounts in WorkflowTemplate(s) so agent processes can read their system prompts at /etc/agents/*.md.
- Ensure docs live under repo path docs/.taskmaster per I2; add architecture.md skeleton referencing this PRD.
Pseudocode (Helm helper):
- define "renderPrompt" to select .Values.agents by name and include file content from files/ dir: {{- $f := printf "agents/%s" .systemPromptFile -}} {{ .Files.Get $f | nindent 6 }}

# Test Strategy:
Helm template rendering: run `helm template` and verify controller-agents ConfigMap includes all expected keys; deploy to a dev namespace; exec into a workflow pod and confirm /etc/agents/* exist. Validate MCP requirements.yaml is packaged via Helm and mounted or accessible at runtime. Lint prompts for size and encoding. Validate docs path exists.

# Subtasks:
## 1. Define Helm values schema and helpers for agents and MCP tools [pending]
### Dependencies: None
### Description: Create/extend the platform chart values, add a JSON schema, and add Helm helper templates to render agent prompt files.
### Details:
- Chart name/location: charts/platform
- Files to add/modify:
  - charts/platform/values.yaml (add agents[] and mcp.requirementsFile)
  - charts/platform/values.schema.json (validate required fields and types)
  - charts/platform/templates/_helpers.tpl (add helper templates)
- values.yaml additions:
  agents:
    - name: rex
      githubApp: rex-agent
      systemPromptFile: rex_system-prompt.md
    - name: clippy
      githubApp: clippy-agent
      systemPromptFile: clippy_system-prompt.md
    - name: qa
      githubApp: qa-agent
      systemPromptFile: qa_system-prompt.md
    - name: triage
      githubApp: triage-agent
      systemPromptFile: triage_system-prompt.md
    - name: security
      githubApp: security-agent
      systemPromptFile: security_system-prompt.md
  mcp:
    requirementsFile: requirements.yaml
- values.schema.json (excerpt):
  {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "properties": {
      "agents": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["name", "githubApp", "systemPromptFile"],
          "properties": {
            "name": {"type": "string", "minLength": 1},
            "githubApp": {"type": "string", "minLength": 1},
            "systemPromptFile": {"type": "string", "pattern": "^.+\\.md$"}
          }
        },
        "minItems": 1
      },
      "mcp": {
        "type": "object",
        "properties": {
          "requirementsFile": {"type": "string", "minLength": 1}
        },
        "required": ["requirementsFile"]
      }
    },
    "required": ["agents", "mcp"]
  }
- templates/_helpers.tpl additions:
  {{- define "platform.renderPrompt" -}}
  {{- $f := printf "agents/%s" .systemPromptFile -}}
  {{- .Files.Get $f | nindent 6 -}}
  {{- end -}}
  {{- define "platform.agentVolumes" -}}
  - name: agents-prompts
    configMap:
      name: controller-agents
  - name: mcp-requirements
    configMap:
      name: mcp-requirements
  {{- end -}}
  {{- define "platform.agentVolumeMounts" -}}
  - name: agents-prompts
    mountPath: /etc/agents
    readOnly: true
  - name: mcp-requirements
    mountPath: /work/requirements.yaml
    subPath: requirements.yaml
    readOnly: true
  {{- end -}}
- Acceptance criteria:
  - helm lint passes and validates values.schema.json.
  - Helpers are renderable via helm template without errors.
  - Values remain overridable via -f or --set for per-environment overrides.
- Test commands:
  - helm lint charts/platform
  - helm template charts/platform | head -n 50
- Risks:
  - Helper name collisions; use chart-scoped names (platform.*).
  - Incorrect nindent leading whitespace in rendered ConfigMaps.
  - Missing files under charts/platform/files will break .Files.Get at template time.

## 2. Implement controller-agents ConfigMap template rendering system prompts [pending]
### Dependencies: 1.1
### Description: Create a Helm template that renders each agent system prompt into a controller-agents ConfigMap using the helper.
### Details:
- Chart name/location: charts/platform
- Files to add:
  - charts/platform/templates/controller-agents-configmap.yaml
- Template snippet (controller-agents-configmap.yaml):
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: controller-agents
    labels:
      app.kubernetes.io/name: controller-agents
      app.kubernetes.io/part-of: platform
  data:
  {{- range .Values.agents }}
    {{ .systemPromptFile }}: |-
  {{ include "platform.renderPrompt" . }}
  {{- end }}
- Notes:
  - Keys are the exact systemPromptFile names (e.g., rex_system-prompt.md).
  - If a file is missing under charts/platform/files/agents, helm template/install will fail fast.
- Acceptance criteria:
  - helm template renders a single ConfigMap named controller-agents with one key per agent systemPromptFile.
  - Rendered content preserves newlines/formatting of the source .md files.
- Test commands:
  - helm template charts/platform | yq '. | select(.kind=="ConfigMap" and .metadata.name=="controller-agents") | .data | keys' -o yaml
  - helm template charts/platform | yq '. | select(.kind=="ConfigMap" and .metadata.name=="controller-agents") | .data["rex_system-prompt.md"]' -o yaml | head -n 20
- Risks:
  - Indentation errors if helper nindent changes.
  - Very large prompt files can bloat the ConfigMap; see size checks in validation subtask.

## 3. Package prompt files and MCP requirements.yaml into the chart [pending]
### Dependencies: 1.1, 1.2
### Description: Add all agent prompt files under files/agents and include a project-level MCP requirements.yaml with a ConfigMap to expose it.
### Details:
- Chart name/location: charts/platform
- Files to add:
  - charts/platform/files/agents/rex_system-prompt.md
  - charts/platform/files/agents/clippy_system-prompt.md
  - charts/platform/files/agents/qa_system-prompt.md
  - charts/platform/files/agents/triage_system-prompt.md
  - charts/platform/files/agents/security_system-prompt.md
  - charts/platform/files/requirements.yaml
  - charts/platform/templates/mcp-requirements-configmap.yaml
- Example charts/platform/files/requirements.yaml:
  tools:
    - name: github-comments
      transport: http
      endpoint: http://mcp-github-comments:8080
    - name: k8s-verify
      transport: exec
      command: [/bin/kubectl, version, --client]
- Template (mcp-requirements-configmap.yaml):
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: mcp-requirements
    labels:
      app.kubernetes.io/name: mcp-requirements
      app.kubernetes.io/part-of: platform
  data:
    requirements.yaml: |-
  {{ .Files.Get (printf "%s" .Values.mcp.requirementsFile) | nindent 6 }}
- Acceptance criteria:
  - helm template renders a ConfigMap named mcp-requirements with requirements.yaml key matching the file content.
  - All .md prompt files are packaged under the chart's files/ directory and referenced correctly by controller-agents ConfigMap.
- Test commands:
  - helm template charts/platform | yq '. | select(.kind=="ConfigMap" and .metadata.name=="mcp-requirements") | .data["requirements.yaml"]' -o yaml
  - helm package charts/platform && tar -tzf platform-*.tgz | grep 'files/agents/'
- Risks:
  - requirements.yaml path override must remain valid; a wrong path will break install.
  - YAML syntax in requirements.yaml must be valid; consider a CI yaml-lint step.

## 4. Mount controller-agents and MCP requirements into WorkflowTemplates [pending]
### Dependencies: 1.2, 1.3
### Description: Add reusable volume and volumeMount helpers and wire them into WorkflowTemplates so pods see prompts at /etc/agents/*.md and /work/requirements.yaml.
### Details:
- Chart name/location: charts/platform
- Helpers to use (already added in 1.1): platform.agentVolumes and platform.agentVolumeMounts
- Update or create WorkflowTemplates to include mounts:
  - If existing: patch the following files to include helpers where pod specs are defined:
    - charts/platform/templates/workflowtemplates/coderun-template.yaml (when Task 3 lands)
    - charts/platform/templates/workflowtemplates/pr-validation.yaml (Task 4)
    - charts/platform/templates/workflowtemplates/implementation-dag.yaml (Task 5)
  - Add a smoke test WorkflowTemplate now to validate mounts:
    - charts/platform/templates/workflowtemplates/agent-mount-smoke.yaml
- Snippet to include in container templates:
  spec:
    templates:
      - name: main
        container:
          image: alpine:3.20
          command: ['sh', '-c']
          args: ['ls -l /etc/agents && test -f /work/requirements.yaml && echo OK']
          volumeMounts:
  {{ include "platform.agentVolumeMounts" . | nindent 12 }}
    volumes:
  {{ include "platform.agentVolumes" . | nindent 6 }}
- Acceptance criteria:
  - helm template shows volumes and volumeMounts injected wherever applicable.
  - Deploying the chart creates the agent-mount-smoke WorkflowTemplate that successfully validates mounts when executed.
- Test commands:
  - helm template charts/platform | yq '. | select(.kind=="WorkflowTemplate" and .metadata.name=="agent-mount-smoke")' -o yaml
  - helm upgrade --install platform charts/platform -n dev
  - kubectl -n dev create wf --from=wftmpl/agent-mount-smoke
  - argo -n dev get wf | tail -n +1 (or kubectl logs) and verify "OK" output
- Risks:
  - Some templates (e.g., resource templates creating CRs) may not accept volume mounts; ensure mounts are applied only to container templates.
  - Name collisions for volumes; using helper ensures consistent names across templates.

## 5. Add docs/.taskmaster/architecture.md skeleton referencing PRD [pending]
### Dependencies: 1.4
### Description: Create documentation describing the agents ConfigMap, MCP requirements, mounting approach, and overrides, referencing the PRD.
### Details:
- File to add: docs/.taskmaster/architecture.md
- Content outline:
  - Title: Agents ConfigMap and Project-wide MCP Tools Configuration
  - PRD reference: link or path to the PRD this implements.
  - Chart: charts/platform overview and how values.yaml controls agents and mcp.requirementsFile.
  - How prompts are packaged (files/agents) and rendered via platform.renderPrompt helper.
  - ConfigMaps: controller-agents and mcp-requirements; keys and expected paths.
  - Mounting: helpers platform.agentVolumes and platform.agentVolumeMounts; mount points /etc/agents and /work/requirements.yaml.
  - Overrides per environment: examples using helm -f env/values-dev.yaml or --set.
  - Risks and limits: ConfigMap size limits, newline/indentation, file encoding.
  - Validation steps: helm lint/template, cluster smoke run.
- Acceptance criteria:
  - Document exists under docs/.taskmaster and accurately reflects implemented chart structure and helpers.
  - Includes copy-pastable commands for linting, templating, and a sample smoke Workflow execution.
- Test commands:
  - test -f docs/.taskmaster/architecture.md && echo OK
- Risks:
  - Doc drift as templates evolve; keep in same PR to ensure accuracy.

## 6. Validation, linting, and dev deployment checks [pending]
### Dependencies: 1.1, 1.2, 1.3, 1.4, 1.5
### Description: Run helm lint/template, deploy to a dev namespace, verify mounts in a running pod, and check size/encoding constraints.
### Details:
- Linting and render checks:
  - helm lint charts/platform
  - helm template charts/platform --set mcp.requirementsFile=requirements.yaml | grep -q 'controller-agents'
  - helm template charts/platform | yq '. | select(.kind=="ConfigMap" and .metadata.name=="controller-agents") | .data | length' -o json
- Dev install/upgrade:
  - kubectl create ns dev || true
  - helm upgrade --install platform charts/platform -n dev
  - kubectl -n dev get cm controller-agents -o yaml | head -n 30
  - kubectl -n dev get cm mcp-requirements -o yaml | head -n 30
- Runtime validation (smoke):
  - kubectl -n dev create wf --from=wftmpl/agent-mount-smoke
  - argo -n dev logs @latest | tee /tmp/agent-mount-smoke.log
  - grep -q 'OK' /tmp/agent-mount-smoke.log
- Size and encoding checks (guard against ConfigMap limits ~1MiB per object):
  - find charts/platform/files/agents -type f -name '*_system-prompt.md' -print0 | xargs -0 stat -f '%N %z' 2>/dev/null || find charts/platform/files/agents -type f -printf '%p %s\n'
  - total=$(find charts/platform/files/agents -type f -printf '%s\n' | awk '{s+=$1} END {print s}'); echo "Total bytes:" $total; test $total -lt 900000
  - file -I charts/platform/files/agents/*.md | grep -v 'charset=utf-8' && echo 'Non-UTF-8 detected' && exit 1 || echo 'All UTF-8'
- Failure injection:
  - Temporarily set a non-existent systemPromptFile in values to ensure helm template fails with .Files.Get error (fast-fail safety).
- Acceptance criteria:
  - All lint/render commands succeed.
  - Dev install succeeds; smoke workflow prints OK; mounted files present.
  - Combined prompt sizes stay comfortably under ConfigMap limit; files are UTF-8.
- Risks:
  - Cluster RBAC may block WorkflowTemplate creation; ensure chart has necessary permissions or adjust namespace.
  - Large prompts can exceed limits; if close to limit, consider splitting ConfigMaps or compressing prompts.


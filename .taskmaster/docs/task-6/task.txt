# Task ID: 6
# Title: Create Dockerfile with Multi-Stage Build
# Status: pending
# Dependencies: 3
# Priority: medium
# Description: Create a Dockerfile using multi-stage builds to minimize image size while ensuring proper containerization of the application.
# Details:
1. Create .dockerignore file:
```
node_modules
npm-debug.log
.git
.gitignore
.env
.vscode
coverage
.DS_Store
```

2. Create Dockerfile with multi-stage build:
```dockerfile
# Build stage
FROM node:18-alpine AS build

WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm ci --only=production

# Runtime stage
FROM node:18-alpine

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

WORKDIR /app

# Copy from build stage
COPY --from=build --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy application code
COPY --chown=nodejs:nodejs . .

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1

# Start application
CMD ["node", "src/server.js"]
```

3. Create a build and run script in scripts/docker-build.sh:
```bash
#!/bin/bash
set -e

IMAGE_NAME="hello-world-api"
IMAGE_TAG="latest"

echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .

echo "Image size:"
docker images ${IMAGE_NAME}:${IMAGE_TAG} --format "{{.Size}}"

echo "Running container for testing..."
docker run -d --name hello-world-api-test -p 3000:3000 ${IMAGE_NAME}:${IMAGE_TAG}

echo "Waiting for container to start..."
sleep 3

echo "Testing health endpoint..."
RESPONSE=$(curl -s http://localhost:3000/health)
echo $RESPONSE

echo "Stopping and removing test container..."
docker stop hello-world-api-test
docker rm hello-world-api-test

echo "Docker build and test complete!"
```

4. Make the script executable: `chmod +x scripts/docker-build.sh`

# Test Strategy:
1. Build the Docker image using the Dockerfile
2. Verify the image size is less than 200MB
3. Run a container from the image and test the health endpoint
4. Verify that the container starts successfully and responds to requests
5. Test graceful shutdown by sending SIGTERM to the container
6. Verify the Docker health check works correctly

# Subtasks:
## 1. Create .dockerignore File [pending]
### Dependencies: None
### Description: Define a .dockerignore file to exclude unnecessary files and directories from the Docker build context, reducing image size and build time.
### Details:
Add entries such as node_modules, npm-debug.log, .git, .gitignore, .env, .vscode, coverage, and .DS_Store to the .dockerignore file.

## 2. Write Multi-Stage Dockerfile [pending]
### Dependencies: 6.1
### Description: Develop a Dockerfile utilizing multi-stage builds to separate build and runtime environments, minimizing the final image size and improving security.
### Details:
Implement a build stage for dependency installation and a runtime stage for running the application, copying only necessary artifacts between stages and using a non-root user.

## 3. Implement Health Check and Security Best Practices [pending]
### Dependencies: 6.2
### Description: Add a health check instruction and configure the container to run as a non-root user for improved security and observability.
### Details:
Include a HEALTHCHECK directive in the Dockerfile and ensure the application runs under a dedicated non-root user.

## 4. Create Docker Build and Run Script [pending]
### Dependencies: 6.3
### Description: Develop a shell script to automate building the Docker image, running a test container, checking the health endpoint, and cleaning up resources.
### Details:
Write scripts/docker-build.sh to build the image, display its size, start a container, test the health endpoint, and remove the test container after validation.

## 5. Set Script Permissions and Validate Workflow [pending]
### Dependencies: 6.4
### Description: Make the build script executable and perform an end-to-end validation of the Docker build and run workflow.
### Details:
Set executable permissions on scripts/docker-build.sh and run a full build-test-cleanup cycle to ensure the process is robust and repeatable.


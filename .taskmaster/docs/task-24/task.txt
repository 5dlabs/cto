# Task ID: 24
# Title: Implement Argo Workflow for Project Intake
# Status: pending
# Dependencies: 2, 6, 7, 8, 22
# Priority: high
# Description: Create an Argo Workflow to replace the GitHub Actions intake workflow, handling project initialization with support for webhook triggers and integration with existing agent workflows.
# Details:
1. Analyze the existing GitHub Actions intake workflow (.github/workflows/intake.yml) to identify all functionality that needs to be migrated:
   - Project parameter handling (name, description, type)
   - TaskMaster initialization steps
   - PRD parsing and processing
   - File operations for PRD/architecture files

2. Create a new WorkflowTemplate YAML in `infra/workflows/intake-workflow-template.yaml` with the following components:
   - Define input parameters (project name, description, type)
   - Configure persistent volume claims for workspace operations
   - Set appropriate timeouts to avoid the current GitHub Actions timeout issues
   - Implement steps for TaskMaster initialization
   - Add steps for PRD parsing and processing
   - Configure file operations within the workflow

3. Implement the workflow steps:
   ```yaml
   apiVersion: argoproj.io/v1alpha1
   kind: WorkflowTemplate
   metadata:
     name: project-intake
     namespace: workflows
   spec:
     entrypoint: intake-main
     arguments:
       parameters:
       - name: project-name
         description: "Name of the project"
       - name: project-description
         description: "Description of the project"
       - name: project-type
         description: "Type of project"
     volumeClaimTemplates:
     - metadata:
         name: workspace-pvc
       spec:
         accessModes: ["ReadWriteOnce"]
         resources:
           requests:
             storage: 1Gi
     templates:
     - name: intake-main
       steps:
       - - name: initialize-taskmaster
           template: initialize-taskmaster
       - - name: parse-prd
           template: parse-prd
       - - name: process-files
           template: process-files
       - - name: trigger-agent-workflows
           template: trigger-agent-workflows
     # Define individual step templates below
   ```

4. Evaluate whether to create a new CRD (IntakeRun) or use parameterized WorkflowTemplates directly:
   - For initial implementation, use parameterized WorkflowTemplates for simplicity
   - Document considerations for future CRD implementation if needed

5. Configure integration with existing DocsRun/CodeRun workflows:
   - Add steps to trigger these workflows after intake completion
   - Pass necessary parameters between workflows
   - Ensure proper sequencing of workflow execution

6. Implement Argo Events configuration to trigger the workflow:
   - Create an EventSource for GitHub webhooks in `infra/events/github-eventsource.yaml`
   - Create a Sensor in `infra/events/intake-sensor.yaml` to trigger the workflow
   - Configure filters to only trigger on relevant GitHub events

7. Add proper error handling and notification mechanisms:
   - Configure retry policies for transient failures
   - Implement notification steps for workflow completion or failure
   - Add appropriate logging for debugging

8. Update documentation to reflect the new intake process:
   - Update developer guides
   - Document API endpoints for manual triggering
   - Create examples of webhook payloads
<info added on 2025-08-02T17:45:33.486Z>
9. Implementation Decision: The team has confirmed to use the WorkflowTemplate approach rather than creating a new IntakeRun CRD. This decision:
   - Simplifies implementation by leveraging existing Argo Workflows functionality
   - Avoids the need for custom controller modifications
   - Provides a more straightforward path to production
   - Maintains flexibility for future enhancements

10. Workflow Trigger Mechanisms:
   - Primary: Argo Events webhook triggers from GitHub events
   - Secondary: Direct API calls for manual or programmatic triggering
   - Both methods will accept the same project parameters (name, description, type)

11. End-to-End Orchestration Responsibility:
   - The intake workflow will handle the complete project initialization process
   - Orchestrate TaskMaster initialization and configuration
   - Manage PRD parsing and initial file generation
   - Trigger subsequent DocsRun/CodeRun workflows with appropriate parameters
   - Ensure proper handoff between workflow stages
</info added on 2025-08-02T17:45:33.486Z>

# Test Strategy:
1. Verify the workflow template can be successfully applied to the Argo Workflows system:
   ```bash
   kubectl apply -f infra/workflows/intake-workflow-template.yaml
   ```

2. Test manual workflow submission with sample parameters:
   ```bash
   argo submit --from workflowtemplate/project-intake \
     -p project-name="Test Project" \
     -p project-description="A test project" \
     -p project-type="web"
   ```

3. Verify each step of the workflow executes correctly:
   - Monitor the workflow execution using `argo watch`
   - Check logs for each step to ensure proper execution
   - Verify TaskMaster initialization completes successfully
   - Confirm PRD parsing produces expected outputs
   - Validate file operations work correctly

4. Test webhook-triggered execution:
   - Send a test webhook payload to the EventSource endpoint
   - Verify the Sensor correctly triggers the workflow
   - Confirm parameters are properly extracted from the webhook payload

5. Test integration with DocsRun/CodeRun workflows:
   - Verify these workflows are triggered after intake completion
   - Confirm parameters are correctly passed between workflows
   - Check for proper sequencing of workflow execution

6. Perform error handling tests:
   - Introduce intentional failures to test retry mechanisms
   - Verify notifications are sent on workflow completion/failure
   - Check that logs contain sufficient information for debugging

7. Compare with GitHub Actions workflow:
   - Create a test project using both the old and new methods
   - Verify feature parity between the two approaches
   - Confirm the new workflow resolves timeout issues

8. Conduct end-to-end testing:
   - Create a new project through the entire intake process
   - Verify all artifacts are correctly generated
   - Confirm the project is properly initialized in the system

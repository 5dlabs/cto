# Task Master Project Memory

## Project Information
- **Repository**: {{repository.url}}{{#if repository}}
- **Source Branch**: {{repository.branch}}
- **GitHub User**: {{repository.githubUser}}{{/if}}
- **Working Directory**: {{working_directory}}
- **Documentation Target**: {{#if task_id}}task {{task_id}}{{else}}all tasks{{/if}}

## Project Architecture

This is a Task Master project with the following structure:
- `.taskmaster/tasks/tasks.json` - Complete task definitions and relationships
- `.taskmaster/docs/` - Generated documentation directory
- `.taskmaster/docs/architecture.md` - System architecture and design
- `.taskmaster/docs/prd.txt` or `.taskmaster/docs/prd.md` - Product requirements

## Documentation Standards

### File Structure
{{#if task_id}}For task {{task_id}}, create documentation in `.taskmaster/docs/task-{{task_id}}/`:{{else}}For each task, create documentation in `.taskmaster/docs/task-{id}/`:{{/if}}
- `task.md` - Comprehensive task overview and implementation guide
- `prompt.md` - Autonomous prompt for AI agents
- `acceptance-criteria.md` - Clear acceptance criteria and test cases

### Content Requirements
- **Include Architecture Context**: Reference architecture.md patterns and decisions
- **Align with PRD**: Ensure implementation supports product goals
- **Show Task Relationships**: Reference dependencies from tasks.json
- **Provide Implementation Details**: Include specific code examples and commands
- **Define Clear Acceptance Criteria**: Based on architecture constraints and PRD requirements
- **Maintain Consistency**: Use consistent terminology across all documents

### Quality Standards
- Well-structured and comprehensive content
- Actionable implementation guidance
- Proper markdown formatting
- Code examples where relevant
- Clear cross-references between documents

## Common Commands

### Git Workflow
```bash
# Git Workflow

When you have completed the documentation generation:

1. Create new branch: `git checkout -b docs-generation-$(date +%Y%m%d-%H%M%S)`
2. Stage all changes: `git add .`
3. Commit with descriptive message: `git commit -m "docs: Generate documentation for {{task.title}}"`
4. Push new branch: `git push origin HEAD`
5. Create pull request: `gh pr create --base "{{repository.branch}}" --title "docs: Generate documentation for {{task.title}}" --body "Automated documentation generation for task {{task.id}}"`
```

## Import References

{{#if working_directory}}See @{{working_directory}}/.taskmaster/docs/architecture.md for system design details
See @{{working_directory}}/.taskmaster/docs/prd.txt for product requirements
See @{{working_directory}}/.taskmaster/tasks/tasks.json for complete task definitions{{else}}See @.taskmaster/docs/architecture.md for system design details
See @.taskmaster/docs/prd.txt for product requirements
See @.taskmaster/tasks/tasks.json for complete task definitions{{/if}}

{{#if repository}}## Repository Context

This documentation generation is working with:
- **Repository**: {{repository.url}}
- **Branch**: {{repository.branch}}
- **Working Directory**: {{working_directory}}

Ensure all file paths and references are relative to the working directory.{{/if}}
# CRITICAL: Complete Documentation Generation Task

**üö® MANDATORY COMPLETION REQUIREMENT üö®**
You MUST complete ALL steps in this process. Partial completion is not acceptable. This is especially critical for large projects with many tasks.

## Task Overview
Generate comprehensive documentation for {{#if task_id}}task {{task_id}}{{else}}**ALL Task Master tasks**{{/if}}.

**If this is a large project with many tasks (10+ tasks), you MUST:**
- Process ALL tasks without stopping
- Show progress updates as you work through each task
- Complete the ENTIRE git workflow including PR creation
- Do NOT stop partway through - finish everything

## Required Process

### Step 1: Context Analysis (REQUIRED)
1. Read CLAUDE.md for project context and standards
2. Read .taskmaster/tasks/tasks.json for ALL task definitions
3. Review architecture.md and prd.txt for context
4. **For large projects: Announce total task count and confirm you will process ALL of them**

### Step 2: Documentation Generation (MANDATORY FOR ALL TASKS)
{{#if task_id}}
Focus specifically on task {{task_id}} and create:
{{else}}
**YOU MUST CREATE DOCUMENTATION FOR EVERY SINGLE TASK. DO NOT SKIP ANY.**

For each task (process ALL tasks, no exceptions):
{{/if}}
- `task.md` - Comprehensive task overview and implementation guide
- `prompt.md` - Autonomous prompt for AI agents
- `acceptance-criteria.md` - Clear acceptance criteria and test cases

**Progress Requirements:**
- Announce each task as you start it: "üìù Processing Task [ID]: [Title]"
- Confirm completion of each task: "‚úÖ Completed Task [ID]"
- **For large projects: Provide periodic updates (every 5 tasks): "Progress: [X] of [Y] tasks completed"**

Place all documentation in `.taskmaster/docs/task-{id}/` directories.

### Step 3: Git Workflow (ABSOLUTELY MANDATORY - NO EXCEPTIONS)
**‚ö†Ô∏è CRITICAL: You MUST complete ALL of these git steps. Do not stop before creating the PR.**

1. **Create and checkout new branch:**
   ```bash
   git checkout -b {{targetBranch}}
   ```
   ‚úÖ Confirm: "Created branch {{targetBranch}}"

2. **Stage all changes:**
   ```bash
   git add .
   ```
   ‚úÖ Confirm: "Staged all documentation files"

3. **Commit with standard message:**
   ```bash
   git commit -m "docs: auto-generate Task Master documentation{{#if task_id}} for task {{task_id}}{{else}} for all tasks{{/if}}"
   ```
   ‚úÖ Confirm: "Committed documentation changes"

4. **Push new branch:**
   ```bash
   git push origin {{targetBranch}}
   ```
   ‚úÖ Confirm: "Pushed branch to origin"

5. **Create pull request (MANDATORY FINAL STEP):**
   ```bash
   gh pr create --base "{{repository.branch}}" --title "docs: auto-generate Task Master documentation{{#if task_id}} for task {{task_id}}{{else}} for all tasks{{/if}}" --body "Auto-generated documentation for Task Master tasks

   Generated from repository: {{repository.url}}
   Target working directory: {{working_directory}}
   {{#if task_id}}Specific task: {{task_id}}{{else}}Coverage: All Task Master tasks{{/if}}

   ü§ñ Auto-generated by Claude Code"
   ```
   ‚úÖ **REQUIRED CONFIRMATION:** "‚úÖ PULL REQUEST CREATED SUCCESSFULLY - TASK COMPLETE"

## Error Handling
- If any step fails, report the error and retry
- If git push fails, check auth and retry
- If PR creation fails, try alternative method
- **DO NOT give up - complete the task**

## Quality Standards
- Well-structured and comprehensive content
- Actionable implementation guidance
- Proper markdown formatting
- Code examples where relevant
- Clear cross-references between documents
- Maintain consistency across ALL documents

## Final Confirmation Required
**YOU MUST END WITH THIS EXACT MESSAGE:**
```
üéâ DOCUMENTATION GENERATION COMPLETE üéâ
‚úÖ Generated documentation for {{#if task_id}}task {{task_id}}{{else}}ALL tasks{{/if}}
‚úÖ Created git branch: {{targetBranch}}
‚úÖ Committed all changes
‚úÖ Pushed to origin
‚úÖ Created pull request
üìã Total files created: [COUNT]
üîó Pull request URL: [URL]
```

**If you cannot provide this final confirmation, the task is NOT complete and you must continue working until it is done.**
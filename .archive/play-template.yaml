---
# Argo Workflow Template for Multi-Task Orchestration ("Press Play")
# This template processes all pending tasks sequentially with full agent pipeline

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: play-template
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: play-template
    app.kubernetes.io/part-of: platform
    agents.platform/template-type: orchestrator
spec:
  # Define input parameters for the play orchestrator
  arguments:
    parameters:
      # Core repository parameters
      - name: repository-url
        description: "Target repository URL in org/repo format (e.g., 5dlabs/cto)"
      - name: docs-repository-url
        description: "Documentation repository URL in org/repo format"
        default: "{{workflow.parameters.repository-url}}"
      - name: docs-project-directory
        description: "Project directory within docs repository"
        default: "projects/cto"
      - name: working-directory
        description: "Working directory within target repository"
        default: "."

      # Model and session parameters
      - name: model
        description: "Claude model to use for execution"
        default: "claude-3-5-sonnet-20241022"
      - name: continue-session
        description: "Whether to continue previous session"
        default: "false"
      - name: overwrite-memory
        description: "Whether to overwrite CLAUDE.md memory file"
        default: "false"
      - name: docs-branch
        description: "Documentation branch to work from"
        default: "main"

      # Orchestration parameters
      - name: task-requirements
        description: "Base64-encoded requirements.yaml content"
        default: ""
      - name: service-id
        description: "Service identifier for persistent workspace"
        default: "cto"
      - name: parallelism
        description: "Maximum parallel task execution (future use)"
        default: "1"

  # Service account for workflow execution
  serviceAccountName: argo-workflow

  # Workflow timeout (6 hours - longer for multi-task execution)
  activeDeadlineSeconds: 21600

  # Main workflow entry point
  entrypoint: play-main

  templates:
    # Main play orchestration - discover and process tasks sequentially
    - name: play-main
      steps:
      - - name: discover-tasks
          template: discover-pending-tasks
      - - name: process-tasks-sequentially
          template: task-loop
          arguments:
            parameters:
            - name: task-list
              value: "{{steps.discover-tasks.outputs.parameters.task-list}}"
          when: "{{steps.discover-tasks.outputs.parameters.task-count}} > 0"

    # Discover all pending tasks from the filesystem
    - name: discover-pending-tasks
      outputs:
        parameters:
        - name: task-list
          valueFrom:
            path: /tmp/task-list.json
        - name: task-count
          valueFrom:
            path: /tmp/task-count.txt
      container:
        image: alpine:3.18
        command: [sh, -c]
        args:
        - |
          set -e
          echo "Discovering pending tasks..."

          # Create task list in JSON format for withParam
          TASKS="["
          FIRST=true

          # Find all task directories, sort numerically
          for task_dir in $(find /work/docs/.taskmaster/docs/ -name 'task-*' -type d | sort -V); do
            if [ -d "$task_dir" ] && [ -f "$task_dir/task.md" ]; then
              task_name=$(basename "$task_dir")
              task_number=${task_name#task-}

              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                TASKS="$TASKS,"
              fi

              TASKS="$TASKS{\"taskId\":\"$task_number\",\"taskName\":\"$task_name\",\"taskDir\":\"$task_dir\"}"
            fi
          done

          TASKS="$TASKS]"

          # Output task list and count
          echo "$TASKS" > /tmp/task-list.json
          echo "$TASKS" | jq length > /tmp/task-count.txt

          TASK_COUNT=$(cat /tmp/task-count.txt)
          echo "Found $TASK_COUNT pending tasks"
          echo "Task list: $TASKS"
        volumeMounts:
        - name: workspace
          mountPath: /work

    # Process tasks sequentially (withParam ensures ordering when parallelism=1)
    - name: task-loop
      inputs:
        parameters:
        - name: task-list
      steps:
      - - name: process-single-task
          template: full-task-pipeline
          arguments:
            parameters:
            - name: current-task-id
              value: "{{item.taskId}}"
            - name: current-task-name
              value: "{{item.taskName}}"
            - name: current-task-dir
              value: "{{item.taskDir}}"
          withParam: "{{inputs.parameters.task-list}}"
      - - name: mark-task-complete
          template: mark-task-complete
          arguments:
            parameters:
            - name: completed-task-name
              value: "{{item.taskName}}"
          withParam: "{{inputs.parameters.task-list}}"

    # Full agent pipeline for a single task: Rex -> Cleo -> Tess
    - name: full-task-pipeline
      inputs:
        parameters:
        - name: current-task-id
        - name: current-task-name
        - name: current-task-dir
      steps:
      # Step 1: Implementation (Rex)
      - - name: implement
          templateRef:
            name: coderun-template
          arguments:
            parameters:
            - name: task-id
              value: "{{inputs.parameters.current-task-id}}"
            - name: service-id
              value: "{{workflow.parameters.service-id}}"
            - name: repository-url
              value: "{{workflow.parameters.repository-url}}"
            - name: docs-repository-url
              value: "{{workflow.parameters.docs-repository-url}}"
            - name: docs-project-directory
              value: "{{workflow.parameters.docs-project-directory}}"
            - name: working-directory
              value: "{{workflow.parameters.working-directory}}"
            - name: github-app
              value: "5DLabs-Rex"
            - name: model
              value: "{{workflow.parameters.model}}"
            - name: continue-session
              value: "{{workflow.parameters.continue-session}}"
            - name: overwrite-memory
              value: "{{workflow.parameters.overwrite-memory}}"
            - name: docs-branch
              value: "{{workflow.parameters.docs-branch}}"
            - name: task-requirements
              value: "{{workflow.parameters.task-requirements}}"

      # Step 2: Code Quality & Formatting (Cleo)
      - - name: format-and-quality
          templateRef:
            name: coderun-template
          arguments:
            parameters:
            - name: task-id
              value: "{{inputs.parameters.current-task-id}}"
            - name: service-id
              value: "{{workflow.parameters.service-id}}"
            - name: repository-url
              value: "{{workflow.parameters.repository-url}}"
            - name: docs-repository-url
              value: "{{workflow.parameters.docs-repository-url}}"
            - name: docs-project-directory
              value: "{{workflow.parameters.docs-project-directory}}"
            - name: working-directory
              value: "{{workflow.parameters.working-directory}}"
            - name: github-app
              value: "5DLabs-Cleo"
            - name: model
              value: "{{workflow.parameters.model}}"
            - name: continue-session
              value: "true"  # Continue session from Rex
            - name: overwrite-memory
              value: "false" # Preserve Rex's memory
            - name: docs-branch
              value: "{{workflow.parameters.docs-branch}}"
            - name: task-requirements
              value: "{{workflow.parameters.task-requirements}}"

      # Step 3: Testing & Quality Assurance (Tess)
      - - name: test-and-validate
          templateRef:
            name: coderun-template
          arguments:
            parameters:
            - name: task-id
              value: "{{inputs.parameters.current-task-id}}"
            - name: service-id
              value: "{{workflow.parameters.service-id}}"
            - name: repository-url
              value: "{{workflow.parameters.repository-url}}"
            - name: docs-repository-url
              value: "{{workflow.parameters.docs-repository-url}}"
            - name: docs-project-directory
              value: "{{workflow.parameters.docs-project-directory}}"
            - name: working-directory
              value: "{{workflow.parameters.working-directory}}"
            - name: github-app
              value: "5DLabs-Tess"
            - name: model
              value: "{{workflow.parameters.model}}"
            - name: continue-session
              value: "true"  # Continue session from Cleo
            - name: overwrite-memory
              value: "false" # Preserve previous memory
            - name: docs-branch
              value: "{{workflow.parameters.docs-branch}}"
            - name: task-requirements
              value: "{{workflow.parameters.task-requirements}}"

    # Mark task as completed by moving to .completed directory
    - name: mark-task-complete
      inputs:
        parameters:
        - name: completed-task-name
      container:
        image: alpine:3.18
        command: [sh, -c]
        args:
        - |
          set -e
          TASK_NAME="{{inputs.parameters.completed-task-name}}"

          echo "Marking task $TASK_NAME as completed..."

          # Create .completed directory if it doesn't exist
          mkdir -p /work/docs/.taskmaster/docs/.completed

          # Move completed task to .completed directory
          if [ -d "/work/docs/.taskmaster/docs/$TASK_NAME" ]; then
            mv "/work/docs/.taskmaster/docs/$TASK_NAME" "/work/docs/.taskmaster/docs/.completed/"
            echo "Moved $TASK_NAME to .completed directory"
          else
            echo "Warning: Task directory $TASK_NAME not found"
          fi

          # Log completion
          echo "$(date): Completed $TASK_NAME" >> /work/docs/.taskmaster/docs/.completed/completion.log
        volumeMounts:
        - name: workspace
          mountPath: /work

    # Shared volumes for workspace
    volumes:
    - name: workspace
      emptyDir: {}

  # Cleanup policy - keep workflows longer for debugging multi-task execution
  ttlStrategy:
    secondsAfterCompletion: 1800     # Keep completed workflows for 30 minutes
    secondsAfterFailure: 10800       # Keep failed workflows for 3 hours

  # Pod garbage collection
  podGC:
    strategy: OnPodCompletion        # Delete pods immediately when they complete

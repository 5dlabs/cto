# Task ID: 1
# Title: Setup GitHub Webhook Infrastructure
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create and configure Argo Events Sensor resource (using existing Sensor CRD) for detecting and processing PR comments with 'ðŸ”´ Required Changes' format from the existing GitHub webhook infrastructure
# Details:
Leverage the existing GitHub webhook EventSource infrastructure to create a new remediation-specific Sensor resource (using the existing Argo Events Sensor CRD) that processes PR comments containing feedback. Implementation:
1. Create new Sensor resource (using existing Sensor CRD) that listens to the existing GitHub EventSource
2. Configure event filtering for issue_comment events with 'ðŸ”´ Required Changes' pattern
3. Extract task ID from PR labels and comment metadata
4. Generate CodeRun resources with REMEDIATION_MODE=true
5. Deploy alongside existing sensors in infra/gitops/resources/github-webhooks/

Existing infrastructure components (already deployed):
- GitHub EventSource at infra/gitops/resources/github-webhooks/eventsource.yaml
- HTTPRoute for webhook ingress
- Service accounts and RBAC
- GitHub webhook secret
- Working sensors: play-workflow-sensors.yaml, implementation-agent-remediation

Key technologies:
- Argo Events v1.9+ Sensor (using existing Sensor CRD)
- Existing GitHub webhook infrastructure
- CodeRun CRD generation with remediation mode

# Test Strategy:
1. Test sensor activation with PR comments containing 'ðŸ”´ Required Changes'
2. Verify CodeRun creation with REMEDIATION_MODE=true environment variable
3. Test event filtering to ensure only feedback comments trigger the sensor
4. Validate task ID extraction from PR labels
5. Test integration with existing play workflow infrastructure

# Subtasks:
## 1. Create Remediation Sensor YAML Configuration [pending]
### Dependencies: None
### Description: Design and create the Argo Events Sensor resource (using existing Sensor CRD) that listens to the existing GitHub EventSource for PR feedback comments
### Details:
Create a new Sensor YAML manifest following the pattern of existing sensors (play-workflow-sensors.yaml and implementation-agent-remediation). Configure the sensor to:
- Listen to the existing github-eventsource for issue_comment events
- Filter for comments containing 'ðŸ”´ Required Changes' pattern
- Extract task ID from PR labels using JSONPath expressions
- Use the existing service account and RBAC permissions
- Reference the sensor templates from existing configurations
Place the new sensor configuration in infra/gitops/resources/github-webhooks/ directory alongside existing sensors.

## 2. Implement Event Filtering for Feedback Comments [pending]
### Dependencies: 1.1
### Description: Configure sensor event dependency to filter specifically for PR comments with required changes feedback
### Details:
Add event filtering logic to the sensor dependency configuration:
- Filter for issue_comment events where action is 'created'
- Check comment body contains 'ðŸ”´ Required Changes' marker
- Verify comment is on a pull request (not issue)
- Optionally validate comment author (Tess QA bot or authorized reviewers)
- Use JSONPath expressions similar to existing sensors for data extraction
- Ensure filtering excludes bot comments except from authorized accounts

## 3. Configure CodeRun Resource Generation Trigger [pending]
### Dependencies: 1.2
### Description: Set up the sensor trigger to create CodeRun resources with remediation-specific configuration
### Details:
Configure the Kubernetes resource trigger in the sensor to generate CodeRun CRDs:
- Use resource template similar to implementation-agent-remediation sensor
- Set REMEDIATION_MODE=true in environment variables
- Extract and pass comment ID, PR number, and task ID as parameters
- Configure proper labels including task ID, PR number, and remediation iteration
- Set appropriate resource naming convention (e.g., coderun-remediation-task{id}-{hash})
- Include feedback content in CodeRun spec for Rex agent context

## 4. Deploy and Integrate with Existing Infrastructure [pending]
### Dependencies: 1.3
### Description: Deploy the remediation sensor to the cluster and verify integration with existing webhook infrastructure
### Details:
Deploy the new sensor to the Kubernetes cluster:
- Apply the sensor YAML using kubectl or through GitOps
- Verify sensor pod starts and connects to existing EventSource
- Check sensor appears in Argo Events dashboard/logs
- Validate sensor can receive events from the existing GitHub EventSource
- Ensure no conflicts with existing sensors or workflows
- Test that the sensor properly creates CodeRun resources when triggered
- Verify RBAC permissions allow CodeRun creation in target namespace

## 5. Test End-to-End Remediation Flow [pending]
### Dependencies: 1.4
### Description: Comprehensive testing of the feedback comment detection and CodeRun generation pipeline
### Details:
Perform end-to-end testing of the remediation sensor:
- Create test PR with appropriate task labels
- Post comment with 'ðŸ”´ Required Changes' format
- Verify sensor receives and processes the webhook event
- Confirm CodeRun is created with correct parameters and REMEDIATION_MODE=true
- Test with various comment formats and edge cases
- Validate integration with play workflow (ensure no interference)
- Test concurrent feedback comments on multiple PRs
- Document the remediation trigger flow and troubleshooting steps
- Set up monitoring/alerts for sensor health and failures


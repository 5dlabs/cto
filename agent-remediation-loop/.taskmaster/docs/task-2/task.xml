<?xml version="1.0" encoding="UTF-8"?>
<task id="2" type="implementation">
    <title>Implement Feedback Comment Parser</title>
    <status>pending</status>
    <priority>high</priority>
    <dependencies>none</dependencies>
    
    <overview>
        <description>
            Build a robust Rust-based parsing system to extract structured feedback from PR comments 
            in the Agent Remediation Loop. This parser enables automatic remediation by converting 
            human-readable QA feedback into actionable data structures that Rex can use to implement fixes.
        </description>
        
        <context>
            The Agent Remediation Loop requires a sophisticated comment parser to extract structured 
            feedback from Tess QA comments. When Tess posts "ðŸ”´ Required Changes" comments, this parser 
            must extract Issue Type, Severity, acceptance criteria checkboxes, and other metadata to 
            trigger automated remediation cycles.
        </context>
    </overview>
    
    <technical_requirements>
        <architecture>
            <component name="Data Structures" path="controller/src/remediation/types.rs">
                <requirement>StructuredFeedback struct with all feedback components</requirement>
                <requirement>IssueType enum: Bug, MissingFeature, Regression, Performance</requirement>
                <requirement>Severity enum: Critical, High, Medium, Low with ordering</requirement>
                <requirement>CriteriaStatus struct for checkbox state and description</requirement>
                <requirement>FeedbackMetadata struct for author, timestamp, PR context</requirement>
                <requirement>Implement Display traits and serde serialization</requirement>
            </component>
            
            <component name="Pattern Extraction" path="controller/src/remediation/patterns.rs">
                <requirement>Regex library for metadata extraction with lazy compilation</requirement>
                <requirement>Issue Type pattern: r"(?m)^\s*\*\*Issue Type\*\*:\s*\[(.*?)\]"</requirement>
                <requirement>Severity pattern: r"(?m)^\s*\*\*Severity\*\*:\s*\[(.*?)\]"</requirement>
                <requirement>Description, Steps to Reproduce, Expected/Actual extraction</requirement>
                <requirement>Performance optimization to prevent catastrophic backtracking</requirement>
            </component>
            
            <component name="Markdown Parser" path="controller/src/remediation/markdown.rs">
                <requirement>Checkbox extraction from "Acceptance Criteria Not Met" section</requirement>
                <requirement>Support for - [ ] (uncompleted) and - [x] (completed) syntax</requirement>
                <requirement>Handle nested lists, indentation, and malformed markdown</requirement>
                <requirement>Robust parsing with pulldown-cmark crate integration</requirement>
            </component>
            
            <component name="Author Validation" path="controller/src/remediation/auth.rs">
                <requirement>Validate "5DLabs-Tess" and approved reviewers</requirement>
                <requirement>Configurable allowlist management with dynamic updates</requirement>
                <requirement>Caching mechanism using DashMap with 5-minute TTL</requirement>
                <requirement>Team-based permissions and admin override support</requirement>
            </component>
            
            <component name="Error Handling" path="controller/src/remediation/error.rs">
                <requirement>Custom error types using thiserror crate</requirement>
                <requirement>ParseError enum covering all failure modes</requirement>
                <requirement>Structured error context for debugging and monitoring</requirement>
                <requirement>Graceful degradation for partial extraction scenarios</requirement>
            </component>
            
            <component name="Main Parser" path="controller/src/remediation/parser.rs">
                <requirement>FeedbackParser struct orchestrating all components</requirement>
                <requirement>parse_comment() method returning Result&lt;StructuredFeedback&gt;</requirement>
                <requirement>Check for "ðŸ”´ Required Changes" marker for actionable feedback</requirement>
                <requirement>Integration point for Rex container usage with proper API</requirement>
            </component>
        </architecture>
        
        <integration>
            <rex_container>
                <requirement>Library integration when compiled into controller binary</requirement>
                <requirement>HTTP API endpoint for remote access via controller</requirement>
                <requirement>Session context preservation for remediation mode</requirement>
                <requirement>Error propagation compatible with existing patterns</requirement>
            </rex_container>
            
            <controller_api>
                <requirement>Public API in controller/src/remediation/mod.rs</requirement>
                <requirement>Convenience function parse_feedback_comment() for external use</requirement>
                <requirement>JSON serialization support for API responses</requirement>
                <requirement>Integration with controller configuration system</requirement>
            </controller_api>
        </integration>
    </technical_requirements>
    
    <expected_input_format>
        <comment_structure>
            <![CDATA[
ðŸ”´ Required Changes
**Issue Type**: [Bug|Missing Feature|Regression|Performance]
**Severity**: [Critical|High|Medium|Low]

### Description
[Clear description of the issue]

### Acceptance Criteria Not Met
- [ ] Specific criterion not satisfied
- [ ] Another missing requirement  
- [x] This criterion was already met

### Steps to Reproduce (optional)
1. Step one
2. Step two
3. Step three

### Expected vs Actual (optional)
- **Expected**: [what should happen]
- **Actual**: [what actually happens]
            ]]>
        </comment_structure>
        
        <parsing_requirements>
            <requirement>Detect "ðŸ”´ Required Changes" marker for actionable feedback</requirement>
            <requirement>Extract structured metadata using regex patterns</requirement>
            <requirement>Parse markdown checkboxes with state preservation</requirement>
            <requirement>Handle optional sections gracefully (Steps, Expected/Actual)</requirement>
            <requirement>Validate author authorization before processing</requirement>
        </parsing_requirements>
    </expected_input_format>
    
    <performance_requirements>
        <benchmarks>
            <benchmark>Typical comments (1-10KB) parse in under 10ms</benchmark>
            <benchmark>Large comments (1MB+) parse in under 100ms</benchmark>
            <benchmark>Regex patterns prevent catastrophic backtracking</benchmark>
            <benchmark>Author validation cache reduces API calls by 80%+</benchmark>
            <benchmark>Memory usage bounded for very large inputs</benchmark>
            <benchmark>Concurrent parsing operations don't interfere</benchmark>
        </benchmarks>
        
        <optimizations>
            <optimization>Compile regex patterns once using lazy_static</optimization>
            <optimization>Implement author validation caching with TTL</optimization>
            <optimization>Stream processing for very large comments</optimization>
            <optimization>Bounded regex matching to prevent DoS</optimization>
        </optimizations>
    </performance_requirements>
    
    <security_requirements>
        <protections>
            <protection>XSS prevention: HTML/script tags don't execute</protection>
            <protection>Command injection prevention: Shell metacharacters are safe</protection>
            <protection>ReDoS prevention: Regex patterns have complexity bounds</protection>
            <protection>Path traversal prevention: No file system access from comment data</protection>
            <protection>Memory exhaustion prevention: Large inputs don't cause OOM</protection>
            <protection>Authorization bypass prevention: Cache poisoning not possible</protection>
        </protections>
        
        <validation>
            <rule>All user input is treated as untrusted</rule>
            <rule>Regex patterns are tested against malicious inputs</rule>
            <rule>Author validation cannot be bypassed</rule>
            <rule>Error messages don't leak sensitive information</rule>
        </validation>
    </security_requirements>
    
    <testing_strategy>
        <unit_tests>
            <test_category>Valid comment parsing with all field combinations</test_category>
            <test_category>Issue Type and Severity extraction for all enum variants</test_category>
            <test_category>Checkbox parsing for various markdown formats</test_category>
            <test_category>Author validation for authorized/unauthorized users</test_category>
            <test_category>Error conditions for all ParseError variants</test_category>
            <test_category>Edge cases: empty, whitespace, special characters</test_category>
        </unit_tests>
        
        <integration_tests>
            <test_category>End-to-end parsing with realistic GitHub comments</test_category>
            <test_category>Real webhook payload processing</test_category>
            <test_category>Large comment processing (>1MB input)</test_category>
            <test_category>Concurrent parsing stress tests</test_category>
            <test_category>Author cache invalidation and refresh</test_category>
        </integration_tests>
        
        <property_tests>
            <test_category>Proptest fuzzing for input validation</test_category>
            <test_category>Random string generation robustness</test_category>
            <test_category>Unicode and emoji handling</test_category>
            <test_category>Serialization/deserialization round-trip</test_category>
        </property_tests>
        
        <security_tests>
            <test_category>XSS injection attempt handling</test_category>
            <test_category>Command injection prevention</test_category>
            <test_category>Regex DoS attack resistance</test_category>
            <test_category>Memory exhaustion prevention</test_category>
        </security_tests>
        
        <performance_tests>
            <test_category>Benchmark typical comment parsing speed</test_category>
            <test_category>Benchmark large comment processing</test_category>
            <test_category>Regex compilation performance impact</test_category>
            <test_category>Author validation cache effectiveness</test_category>
            <test_category>Memory usage profiling</test_category>
        </performance_tests>
    </testing_strategy>
    
    <dependencies>
        <rust_crates>
            <crate name="anyhow" version="1.0" purpose="Error handling with context" />
            <crate name="regex" version="1.0" purpose="Pattern matching and extraction" />
            <crate name="serde" version="1.0" features="derive" purpose="Serialization support" />
            <crate name="chrono" version="0.4" features="serde" purpose="Timestamp handling" />
            <crate name="lazy_static" version="1.4" purpose="Regex compilation optimization" />
            <crate name="thiserror" version="1.0" purpose="Custom error type definitions" />
            <crate name="dashmap" version="5.4" purpose="Concurrent caching for auth validation" />
            <crate name="pulldown-cmark" version="0.9" purpose="Robust markdown parsing" />
            <crate name="tracing" version="0.1" purpose="Structured logging integration" />
        </rust_crates>
        
        <dev_dependencies>
            <crate name="proptest" version="1.0" purpose="Property-based testing and fuzzing" />
            <crate name="tokio-test" version="0.4" purpose="Async test utilities" />
        </dev_dependencies>
    </dependencies>
    
    <deliverables>
        <code_files>
            <file path="controller/src/remediation/types.rs" description="Data structures and type definitions" />
            <file path="controller/src/remediation/patterns.rs" description="Regex pattern extraction logic" />
            <file path="controller/src/remediation/markdown.rs" description="Markdown checkbox parser" />
            <file path="controller/src/remediation/auth.rs" description="Author validation and authorization" />
            <file path="controller/src/remediation/parser.rs" description="Main parser orchestration" />
            <file path="controller/src/remediation/error.rs" description="Error types and handling" />
            <file path="controller/src/remediation/mod.rs" description="Module exports and public API" />
        </code_files>
        
        <test_files>
            <file path="controller/src/remediation/tests/mod.rs" description="Test module organization" />
            <file path="controller/src/remediation/tests/test_patterns.rs" description="Pattern extraction tests" />
            <file path="controller/src/remediation/tests/test_markdown.rs" description="Markdown parsing tests" />
            <file path="controller/src/remediation/tests/test_auth.rs" description="Authorization tests" />
            <file path="controller/src/remediation/tests/test_parser.rs" description="Parser integration tests" />
            <file path="controller/src/remediation/tests/test_integration.rs" description="End-to-end tests" />
            <file path="controller/src/remediation/tests/fixtures.rs" description="Test data and examples" />
        </test_files>
    </deliverables>
    
    <acceptance_criteria>
        <criterion id="parsing_accuracy">
            <description>Correctly extracts all structured data from valid comments</description>
            <validation>Unit tests pass for all supported comment formats</validation>
        </criterion>
        
        <criterion id="error_resilience">
            <description>Handles malformed input gracefully without crashes</description>
            <validation>Error handling tests cover all failure modes</validation>
        </criterion>
        
        <criterion id="performance_targets">
            <description>Meets performance benchmarks for typical and large comments</description>
            <validation>Performance tests verify sub-100ms parsing for 1MB+ comments</validation>
        </criterion>
        
        <criterion id="security_validation">
            <description>Resists common injection and DoS attack vectors</description>
            <validation>Security tests pass without vulnerabilities</validation>
        </criterion>
        
        <criterion id="integration_compatibility">
            <description>Works seamlessly with controller architecture patterns</description>
            <validation>Integration tests verify Rex container and API compatibility</validation>
        </criterion>
        
        <criterion id="test_coverage">
            <description>Comprehensive test coverage including edge cases and security</description>
            <validation>Test suite achieves >95% code coverage with all scenarios</validation>
        </criterion>
        
        <criterion id="production_readiness">
            <description>Code is production-ready with proper documentation</description>
            <validation>Code review passes, documentation complete, builds without warnings</validation>
        </criterion>
    </acceptance_criteria>
    
    <success_metrics>
        <metric name="test_coverage" target="95%" measurement="Code coverage percentage" />
        <metric name="parse_time_typical" target="10ms" measurement="Average parse time for 1-10KB comments" />
        <metric name="parse_time_large" target="100ms" measurement="Average parse time for 1MB+ comments" />
        <metric name="error_rate" target="0%" measurement="Percentage of valid comments that fail to parse" />
        <metric name="security_vulnerabilities" target="0" measurement="Number of identified security issues" />
        <metric name="integration_test_success" target="100%" measurement="Percentage of integration tests passing" />
    </success_metrics>
</task>
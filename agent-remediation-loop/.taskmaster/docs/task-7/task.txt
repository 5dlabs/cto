# Task ID: 7
# Title: Build Label-Based Workflow Orchestration
# Status: pending
# Dependencies: 4, 6
# Priority: medium
# Description: Implement PR label management system for tracking remediation state and iteration counts
# Details:
Create comprehensive label management for workflow state tracking:

1. Design label schema (task-{id}, iteration-{n}, status labels)
2. Implement atomic label updates via GitHub API
3. Handle label transitions based on workflow events
4. Add skip-automation override detection
5. Implement label cleanup after completion

Label state machine:
- task-{id}: Persistent task association
- iteration-{n}: Updated each remediation cycle
- needs-remediation: Added by Tess
- remediation-in-progress: Active during Rex fixes
- ready-for-qa: Added after Cleo
- approved: Final state
- skip-automation: Human override

Implementation:
```typescript
class LabelOrchestrator {
    async transitionState(pr: number, from: State, to: State) {
        const labels = await this.getLabels(pr);
        
        if (labels.includes('skip-automation')) {
            throw new Error('Automation disabled by human override');
        }
        
        await this.removeLabel(pr, stateToLabel(from));
        await this.addLabel(pr, stateToLabel(to));
        
        if (to === State.Remediation) {
            const iteration = this.extractIteration(labels) + 1;
            await this.updateIterationLabel(pr, iteration);
        }
    }
}
```

# Test Strategy:
1. Test all label state transitions
2. Verify iteration counter updates
3. Test skip-automation override behavior
4. Validate concurrent label updates
5. Test label cleanup after task completion

# Subtasks:
## 1. Design and Document Label Schema [pending]
### Dependencies: None
### Description: Define comprehensive label schema for workflow state tracking including naming conventions, state transitions, and usage guidelines
### Details:
Create detailed documentation for label schema including: task-{id} format for task association, iteration-{n} counter format, status labels (needs-remediation, remediation-in-progress, ready-for-qa, approved), skip-automation override label. Document valid state transitions, label lifecycle, and cleanup rules. Create TypeScript interfaces for label types and state machine definitions.

## 2. Implement GitHub API Label Integration [pending]
### Dependencies: 7.1
### Description: Build GitHub API client wrapper for atomic label operations with rate limiting and retry logic
### Details:
Implement GitHub API integration layer with methods for: getLabels(), addLabel(), removeLabel(), updateLabel(). Include rate limiting handling, exponential backoff for retries, batch operations support, and error handling for API failures. Ensure atomic operations using GitHub's label locking mechanism. Add logging and metrics collection for API calls.

## 3. Build State Transition Logic Engine [pending]
### Dependencies: 7.1, 7.2
### Description: Implement core state machine for label transitions with validation and state consistency checks
### Details:
Create LabelOrchestrator class with transitionState() method implementing state machine logic. Build state validation to ensure legal transitions only. Implement iteration counter extraction and increment logic. Add state history tracking for audit purposes. Include rollback capability for failed transitions. Implement stateToLabel() and labelToState() conversion functions.

## 4. Add Skip-Automation Override Detection [pending]
### Dependencies: 7.3
### Description: Implement detection and handling of skip-automation label to disable automated workflows
### Details:
Build override detection system that checks for skip-automation label before any state transition. Implement early exit with appropriate error messages when override detected. Add notification system to alert relevant parties when automation is skipped. Include audit logging for override events. Create bypass mechanism for emergency situations with proper authorization.

## 5. Implement Label Cleanup System [pending]
### Dependencies: 7.3
### Description: Build automated cleanup for removing obsolete labels after workflow completion or termination
### Details:
Create cleanup manager that removes workflow labels after task completion. Implement TTL-based cleanup for abandoned tasks. Build selective cleanup that preserves task-{id} labels for history. Add cleanup triggers for success, failure, and timeout scenarios. Include dry-run mode for testing cleanup operations. Implement cleanup scheduling to avoid conflicts with active workflows.

## 6. Handle Concurrent Label Updates [pending]
### Dependencies: 7.2, 7.3
### Description: Implement concurrency control and conflict resolution for simultaneous label operations
### Details:
Build optimistic locking mechanism using ETags or version numbers. Implement conflict detection and resolution strategies (last-write-wins, merge, or retry). Add distributed lock support using Redis or similar for critical sections. Create queue-based label update system to serialize conflicting operations. Include deadlock detection and prevention. Add metrics for concurrent operation conflicts and resolution success rates.


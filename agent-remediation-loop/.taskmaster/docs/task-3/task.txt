# Task ID: 3
# Title: Create Remediation Sensor and Trigger
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Deploy Argo Events Sensor to process feedback comments and trigger Rex remediation CodeRuns
# Details:
Implement Sensor that integrates with existing play workflow infrastructure to trigger Rex remediation:

1. Create Sensor CRD following patterns from play-workflow-sensors.yaml
2. Extract task ID from PR labels using JSONPath
3. Generate CodeRun resources (not workflows) with REMEDIATION_MODE=true
4. Pass comment ID and iteration count to Rex via environment variables
5. Implement retry logic and error handling

Key features:
- Builds on existing GitHub webhook EventSource
- Creates CodeRun resources for Rust controller to process
- Integrates with implementation-agent-remediation sensor for cancellation
- Uses ConfigMaps for state tracking (implemented separately)
- JSONPath expressions for data extraction
- Event deduplication

Implementation:
```yaml
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: pr-comment-remediation
  namespace: github-webhooks
spec:
  eventBusName: default
  dependencies:
    - name: feedback-comment
      eventSourceName: github
      eventName: issue_comment
      filters:
        data:
          - path: body.comment.body
            type: string
            comparator: "~"
            value: ".*ðŸ”´ Required Changes.*"
  triggers:
    - template:
        name: create-remediation-coderun
        k8s:
          operation: create
          source:
            resource:
              apiVersion: cto.5dlabs.com/v1alpha1
              kind: CodeRun
              metadata:
                generateName: remediation-rex-
                labels:
                  task-id: ""  # Extracted from PR
                  iteration: ""  # From ConfigMap
              spec:
                github_app: rex
                remediation_mode: true
                pr_comment_id: ""  # From event
```

When Rex pushes fixes, the existing implementation-agent-remediation sensor handles Cleo/Tess cancellation automatically.

# Test Strategy:
1. Test sensor activation with valid feedback comments in play workflow
2. Verify CodeRun creation with REMEDIATION_MODE=true
3. Test filtering logic (should ignore non-feedback comments)
4. Validate task ID extraction from PR labels
5. Test integration with existing implementation-agent-remediation sensor
6. Verify play workflow continues normally after Rex remediation

# Subtasks:
## 1. Define Sensor CRD Following Existing Patterns [pending]
### Dependencies: None
### Description: Create the Sensor CRD modeled after existing sensors in play-workflow-sensors.yaml
### Details:
Implement the Sensor CRD structure following existing patterns:
- Place in infra/gitops/resources/github-webhooks/ alongside existing sensors
- Metadata with name 'pr-comment-remediation' in namespace 'github-webhooks'
- Use existing GitHub EventSource (already configured)
- EventBus configuration matching other play workflow sensors
- Proper API version (argoproj.io/v1alpha1) and kind
- Labels and annotations consistent with play-workflow-sensors
- Follow naming conventions from implementation-agent-remediation sensor

## 2. Configure JSONPath Event Filters [pending]
### Dependencies: 3.1
### Description: Implement JSONPath expressions to filter PR comments containing feedback markers and extract required data fields
### Details:
Set up filtering logic matching existing sensor patterns:
- Filter for comment body containing 'ðŸ”´ Required Changes' using regex comparator
- Add eventName filter for 'issue_comment' events
- Implement JSONPath for extracting PR number (body.issue.number)
- Extract comment ID (body.comment.id) for passing to Rex
- Extract PR labels array for task ID identification
- Add filters to exclude bot comments except from Cleo/Tess
- Use same filter structure as implementation-agent-remediation sensor

## 3. Create CodeRun Resource Template [pending]
### Dependencies: 3.2
### Description: Build the Kubernetes resource template for generating Rex remediation CodeRun objects
### Details:
Design CodeRun generation template using existing CRD:
- Use apiVersion: cto.5dlabs.com/v1alpha1, kind: CodeRun
- Set github_app: rex (controller uses this for agent identification)
- Add spec.remediation_mode: true flag for Rex to detect mode
- Pass PR comment ID via spec.pr_comment_id field
- Use generateName for unique CodeRun names
- Add labels for task-id and iteration tracking
- Match resource structure from existing CodeRun implementations
- Controller will handle PVC mounting and container execution

## 4. Implement Task ID Extraction from PR Labels [pending]
### Dependencies: 3.3
### Description: Create logic to extract task IDs from PR labels and add to CodeRun metadata
### Details:
Build task identification using JSONPath:
- Parse PR labels using body.issue.labels[?(@.name =~ 'task-.*')].name
- Extract numeric task ID from 'task-X' label format
- Add extracted task-id to CodeRun labels for tracking
- Implement parameter mapping from event data to resource
- Use same JSONPath patterns as other play workflow sensors
- Handle missing task label scenario with default behavior
- Task context will be loaded by Rex from ConfigMap (separate implementation)

## 5. Add Iteration Tracking via ConfigMap [pending]
### Dependencies: 3.4
### Description: Implement iteration counter using ConfigMap for state persistence across remediation cycles
### Details:
Create iteration management integrated with play workflow:
- Read current iteration from ConfigMap (remediation-state-{task-id})
- Increment counter and update ConfigMap via trigger
- Pass iteration count to CodeRun via label or annotation
- Rex will check iteration limit (MAX_ITERATIONS env var)
- ConfigMap managed separately from sensor (controller responsibility)
- Follow state management patterns from play workflow
- Sensor only reads/updates counter, escalation handled elsewhere

## 6. Configure Retry and Error Handling [pending]
### Dependencies: 3.5
### Description: Implement retry mechanisms matching existing sensor configurations
### Details:
Build reliability features consistent with play workflow:
- Use same retry policy as implementation-agent-remediation sensor
- Configure exponential backoff (if supported by trigger type)
- Handle CodeRun creation failures gracefully
- Add error logging to match existing sensor patterns
- Leverage EventBus delivery guarantees
- No custom dead letter queue (use platform defaults)
- Timeout configurations matching other sensors
- Errors logged but not blocking play workflow progression

## 7. Implement Event Deduplication [pending]
### Dependencies: 3.6
### Description: Add deduplication to prevent duplicate CodeRuns from rapid comment edits
### Details:
Design deduplication following platform patterns:
- Use event ID from GitHub webhook (built-in deduplication)
- Leverage Argo Events' native deduplication features
- Configure dependency filters to ignore duplicate events
- Time window configuration (default 60 seconds)
- No custom caching needed (platform handles this)
- Test with GitHub's webhook retry behavior
- Ensure idempotent CodeRun creation
- Match deduplication approach from other play sensors


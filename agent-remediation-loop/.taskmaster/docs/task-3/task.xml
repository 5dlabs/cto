<prompt>
    <role>You are a senior DevOps engineer specializing in Kubernetes, Argo Events, event-driven architecture, and automated remediation systems.</role>
    <task>
        <id>3</id>
        <title>Create Remediation Sensor and Trigger</title>
        <description>Deploy Argo Events Sensor to process feedback comments and trigger Rex remediation CodeRuns, integrating with existing play workflow infrastructure to enable automated remediation when QA feedback is received</description>
        <priority>high</priority>
        <status>pending</status>
        <dependencies>1, 2</dependencies>
    </task>
    <technical_specifications>
        <spec>Use Argo Events v1.9+ Sensor CRD with proper resource limits (128Mi-256Mi memory, 100m-200m CPU)</spec>
        <spec>Deploy to github-webhooks namespace using existing argo-events-sa service account</spec>
        <spec>Integrate with existing GitHub EventSource for issue_comment event processing</spec>
        <spec>Filter for comments containing 'ðŸ”´ Required Changes' pattern from authorized users only</spec>
        <spec>Extract task ID from PR labels using JSONPath expressions with regex pattern ^task-\\d+$</spec>
        <spec>Generate CodeRun CRDs with github_app: "5DLabs-Rex" and remediation_mode: true</spec>
        <spec>Pass comment ID and iteration count via environment variables FEEDBACK_COMMENT_ID and ITERATION_COUNT</spec>
        <spec>Integrate with ConfigMap-based state management for iteration tracking (max 10 iterations)</spec>
        <spec>Coordinate with implementation-agent-remediation sensor for Cleo/Tess cancellation</spec>
        <spec>Implement event deduplication using comment ID to prevent duplicate CodeRuns</spec>
        <spec>Configure retry logic with exponential backoff (3 attempts) for failed resource creation</spec>
        <spec>Add monitoring integration with Prometheus scraping and structured JSON logging</spec>
    </technical_specifications>
    <implementation_details>
        Create a comprehensive Argo Events Sensor that acts as the core automation bridge in the remediation loop system. The implementation must:
        
        1. **Sensor Configuration Structure**:
           - Create file: infra/gitops/resources/github-webhooks/pr-comment-remediation-sensor.yaml
           - Metadata: name pr-comment-remediation, namespace github-webhooks
           - Use existing serviceAccount argo-events-sa and eventBusName default
           - Configure resource limits: requests 128Mi memory/100m CPU, limits 256Mi memory/200m CPU
           - Add prometheus monitoring annotations and structured logging configuration
        
        2. **Event Dependency and Filtering**:
           - Configure dependency on existing github EventSource for issue_comment events
           - Implement comprehensive filtering:
             * body.action = "created" (only new comments)
             * body.issue.pull_request.url != "" (ensure it's a PR)
             * body.comment.body matches regex ".*ðŸ”´ Required Changes.*"
             * body.comment.user.login in ["5DLabs-Tess", "5DLabs-Tess[bot]"]
             * body.issue.state == "open" using expression filter
           - Add deduplication logic using comment.id to prevent duplicate processing
        
        3. **JSONPath Parameter Extraction**:
           - PR Number: extract from body.issue.number
           - Comment ID: extract from body.comment.id for FEEDBACK_COMMENT_ID env var
           - Task ID extraction using dataTemplate:
             ```yaml
             dataTemplate: |
               {{- range .body.issue.labels -}}
                 {{- if regexMatch "^task-\\d+$" .name -}}
                   {{ regexReplaceAll "^task-" .name "" }}
                 {{- end -}}
               {{- end -}}
             ```
           - Handle missing task labels by defaulting to "unknown"
        
        4. **CodeRun Resource Generation**:
           - API version: cto.5dlabs.com/v1alpha1, Kind: CodeRun
           - Namespace: agent-platform with generateName: remediation-rex-
           - Required labels: task-id, trigger-type: comment-feedback, agent-type: rex
           - Annotations: remediation.5dlabs.com/pr-number, comment-id, iteration
           - Spec configuration:
             * github_app: "5DLabs-Rex"
             * remediation_mode: true
             * continue_session: true
             * pr_number and pr_comment_id from parameters
           - Environment variables:
             * REMEDIATION_MODE: "true"
             * FEEDBACK_COMMENT_ID: from comment.id parameter
             * ITERATION_COUNT: from ConfigMap state lookup
             * MAX_ITERATIONS: "10"
        
        5. **State Management Integration**:
           - Create/update ConfigMap: task-{id}-remediation-state in agent-platform namespace
           - Track fields: current_iteration, max_iterations, last_comment_id, status
           - Implement iteration increment logic with maximum limit enforcement
           - Configure state persistence for deduplication and limit checking
           - Handle concurrent access and state consistency
        
        6. **Agent Cancellation Integration**:
           - Coordinate with implementation-agent-remediation sensor patterns
           - Cancel existing Cleo/Tess CodeRuns with matching task-id labels
           - Update PR labels: remove ready-for-qa, add remediation-in-progress and iteration-{n}
           - Implement proper state transition coordination without race conditions
        
        7. **Error Handling and Reliability**:
           - Configure retry strategy: 3 attempts with exponential backoff
           - Implement fallback error event creation for monitoring
           - Handle malformed webhook payloads gracefully without crashing
           - Maintain state consistency during partial failures
           - Configure proper timeout values for all operations
        
        8. **Integration Testing Setup**:
           - Provide test webhook payloads for validation
           - Create test ConfigMaps for state management testing
           - Include sample CodeRun validation commands
           - Document integration points with existing sensors
        
        The sensor must integrate seamlessly with existing infrastructure while providing the automation bridge between QA feedback and remediation execution. Follow established patterns from play-workflow-sensors.yaml and implementation-agent-remediation sensor.
    </implementation_details>
    <acceptance_criteria>
        <criterion>Sensor successfully deployed and running in github-webhooks namespace with proper resource utilization</criterion>
        <criterion>PR comments containing 'ðŸ”´ Required Changes' from authorized users trigger sensor activation</criterion>
        <criterion>Task ID correctly extracted from PR labels using JSONPath with regex pattern matching</criterion>
        <criterion>CodeRun resources created with correct structure: github_app=5DLabs-Rex, remediation_mode=true</criterion>
        <criterion>Environment variables properly set: REMEDIATION_MODE, FEEDBACK_COMMENT_ID, ITERATION_COUNT</criterion>
        <criterion>ConfigMap state management tracks iterations and prevents exceeding maximum limit (10)</criterion>
        <criterion>Event deduplication prevents multiple CodeRuns from same comment using comment ID</criterion>
        <criterion>Integration with implementation-agent-remediation sensor cancels existing Cleo/Tess agents</criterion>
        <criterion>PR labels updated correctly: remove ready-for-qa, add remediation-in-progress and iteration-{n}</criterion>
        <criterion>Only authorized users (5DLabs-Tess, 5DLabs-Tess[bot]) can trigger remediation</criterion>
        <criterion>Error handling works correctly with malformed payloads and API failures</criterion>
        <criterion>Retry logic functions with exponential backoff for failed resource creation</criterion>
        <criterion>Event processing latency under 5 seconds for typical webhook payloads</criterion>
        <criterion>Resource usage stays within limits: memory &lt; 256Mi, CPU &lt; 200m under normal load</criterion>
        <criterion>Concurrent processing of multiple PR comments works without conflicts</criterion>
        <criterion>State consistency maintained across sensor restarts and failures</criterion>
        <criterion>Monitoring integration provides metrics and structured logging</criterion>
        <criterion>End-to-end remediation workflow integration verified with real PRs</criterion>
        <criterion>No interference with existing play workflow sensors or EventSource</criterion>
        <criterion>Security validation: RBAC restrictions and no sensitive data exposure</criterion>
    </acceptance_criteria>
    <test_strategy>
        1. **Unit Testing**:
           - Validate JSONPath expressions with sample webhook payloads
           - Test task ID extraction with various label combinations
           - Verify CodeRun resource template generation and parameter mapping
           - Test filtering logic with authorized/unauthorized users
           - Validate state management ConfigMap operations
        
        2. **Integration Testing**:
           - Deploy sensor in test environment with existing infrastructure
           - Create test PR with task-{id} label and authorized user account
           - Post feedback comment with 'ðŸ”´ Required Changes' marker
           - Verify sensor activation and CodeRun creation with correct parameters
           - Test cancellation of existing Cleo/Tess agents
           - Validate ConfigMap state updates and iteration tracking
        
        3. **Event Processing Tests**:
           - Test with malformed JSON webhook payloads (should not crash)
           - Test with missing required fields (should handle gracefully)
           - Test with unauthorized users (should be filtered out)
           - Test with non-PR issues (should be ignored)
           - Test with closed/merged PRs (should be filtered)
           - Test rapid comment edits (deduplication should work)
        
        4. **State Management Tests**:
           - Test iteration increment across multiple remediation cycles
           - Test maximum iteration limit enforcement (should stop at 10)
           - Test ConfigMap concurrent access scenarios
           - Test state recovery after sensor restart
           - Test duplicate comment processing prevention
        
        5. **Performance Testing**:
           - Process 10+ concurrent PR comments simultaneously
           - Measure event processing latency under various loads
           - Monitor resource usage during extended operation
           - Test memory usage stability over 24+ hours
           - Validate no resource leaks or gradual degradation
        
        6. **Error Handling Tests**:
           - Simulate API server unavailability during CodeRun creation
           - Test webhook signature validation failures (if configured)
           - Test with extremely large webhook payloads
           - Test retry logic with temporary failures
           - Verify error event creation and logging
        
        7. **End-to-End Workflow Tests**:
           - Complete remediation cycle: QA feedback â†’ Rex remediation â†’ fix push
           - Test multiple iteration cycles with different feedback
           - Verify integration with implementation-agent-remediation sensor
           - Test human override scenarios (skip-automation label)
           - Validate PR label lifecycle management
        
        8. **Security Testing**:
           - Verify RBAC permissions are minimal and appropriate
           - Test unauthorized webhook attempts
           - Check for sensitive data in logs and events
           - Validate namespace isolation and access controls
        
        9. **Monitoring and Observability Tests**:
           - Verify Prometheus metrics collection
           - Test structured logging output format
           - Validate alert conditions and thresholds
           - Test dashboard integration and visualization
        
        10. **Rollback and Recovery Tests**:
            - Test sensor deletion and recreation
            - Verify no impact on other infrastructure components
            - Test state recovery from ConfigMap after failures
            - Validate EventSource continues functioning correctly
    </test_strategy>
    <instructions>
        Approach this implementation systematically by first understanding the existing infrastructure patterns. Study the architecture.md file and examine existing sensors in the infra/gitops/resources/github-webhooks/ directory to understand established conventions.
        
        Focus on the critical integration points: the sensor must work seamlessly with the existing GitHub EventSource while adding remediation-specific logic. Pay special attention to the JSONPath expressions for task ID extraction - test these thoroughly with real webhook data before deployment.
        
        The CodeRun resource generation is the core functionality - ensure all required fields are properly templated and that the resulting resources match the expected CRD structure. The github_app field is crucial for the controller to identify Rex as the target agent.
        
        State management through ConfigMaps is essential for preventing infinite loops. Implement robust iteration tracking with proper concurrency handling. The max iteration limit (10) is a critical safety mechanism.
        
        Integration with the implementation-agent-remediation sensor requires careful coordination. Study how that sensor handles agent cancellation and replicate the pattern for triggering cancellation when remediation begins.
        
        Error handling is paramount - the sensor must be resilient to malformed webhooks, API failures, and transient issues. Implement comprehensive retry logic with exponential backoff.
        
        Test thoroughly in a development environment before production deployment. Use realistic webhook payloads and validate all JSONPath expressions. Monitor resource usage and ensure the sensor can handle concurrent processing.
        
        Document all assumptions, configuration decisions, and integration points. Provide clear troubleshooting steps for common failure scenarios.
        
        Remember that this sensor is the critical automation bridge in the remediation loop - it must be highly reliable and handle edge cases gracefully to ensure the entire system functions correctly.
    </instructions>
</prompt>
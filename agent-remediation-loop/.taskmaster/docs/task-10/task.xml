<prompt>
    <role>You are a senior security engineer and Go developer specializing in Kubernetes security, RBAC, input validation, and audit logging systems.</role>
    <task>
        <id>10</id>
        <title>Implement Security and RBAC Controls</title>
        <description>Implement comprehensive security layer for the Agent Remediation Loop including GitHub token scoping, Kubernetes RBAC, input validation, rate limiting, and audit logging</description>
        <priority>high</priority>
        <status>pending</status>
        <dependencies>1, 3, 6</dependencies>
    </task>
    <technical_specifications>
        <spec>GitHub App permissions limited to minimal required scope: contents:read, issues:write, pull_requests:write, metadata:read, statuses:read, discussions:write</spec>
        <spec>Kubernetes RBAC with least-privilege access: ServiceAccount, Role, ClusterRole, RoleBinding, ClusterRoleBinding</spec>
        <spec>Input validation framework preventing XSS, injection attacks, and malicious content in PR comments</spec>
        <spec>Rate limiting system: 100 requests/minute per task, respect GitHub API limits (5000/hour, 100/min content creation)</spec>
        <spec>Comprehensive audit logging for authentication, authorization, input validation, and security events</spec>
        <spec>Security manager integration providing centralized validation for all operations</spec>
        <spec>RBAC validation using SelfSubjectAccessReview for programmatic permission checking</spec>
        <spec>Token management with scope validation and permission testing via GitHub API</spec>
        <spec>Authorized reviewer allowlist for comment validation (5DLabs-* users, [bot] accounts)</spec>
        <spec>Structured audit events with severity-based logging and correlation support</spec>
    </technical_specifications>
    <implementation_details>
        Create a comprehensive security framework in Go with the following components:

        1. GitHub Token Management (security/github_token_manager.go):
           - GitHubTokenManager struct with token validation and scope checking
           - validateToken function using GitHub API to verify permissions
           - ValidatePermissions method testing repository access non-destructively
           - Integration with oauth2 client for secure token handling
           - Support for token refresh and expiration handling

        2. Kubernetes RBAC Configuration:
           - YAML manifests for ServiceAccount: remediation-controller-sa in agent-platform namespace
           - Role with minimal permissions: configmaps, secrets (limited), coderuns, events, leases
           - ClusterRole for limited cluster-wide access: nodes, namespaces (read-only)
           - RBACValidator struct using SelfSubjectAccessReview for permission validation
           - Programmatic permission checking for all required operations

        3. Input Validation Framework (security/input_validator.go):
           - InputValidator struct with comprehensive validation rules
           - validateFeedback method checking authorized users, content sanitization, malicious patterns
           - HTML escaping and shell metacharacter sanitization
           - Regex-based malicious pattern detection: script tags, JavaScript URLs, template injection
           - StructuredFeedback validation with severity and issue type checking
           - UTF-8 validation and content length limits (50KB maximum)

        4. Rate Limiting System (security/rate_limiter.go):
           - RateLimiter struct with per-task rate limiting using golang.org/x/time/rate
           - Task-based limiting: 100 requests/minute with configurable burst
           - GitHubRateLimiter respecting official GitHub API limits
           - Dynamic limiter creation with cleanup routines
           - Context-aware rate limiting with timeout support

        5. Audit Logging Infrastructure (security/audit_logger.go):
           - AuditLogger struct with structured event logging
           - AuditEvent struct with comprehensive metadata
           - Severity-based log routing (critical→error, high→warn, others→info)
           - Specific audit methods: authentication, authorization, input validation, rate limiting
           - Context-based correlation ID support and metadata serialization

        6. Security Manager Integration (security/security_manager.go):
           - SecurityManager struct coordinating all security components
           - ValidateOperation method providing centralized security validation
           - SecurityOperation struct defining validation context
           - InitializeSecurityChecks for system startup validation
           - Integration with existing agent architecture

        7. RBAC Kubernetes Manifests (security/rbac.yaml):
           - Complete RBAC configuration with service accounts, roles, bindings
           - Proper namespace isolation and permission scoping
           - Documentation of permission requirements and security rationale

        The implementation must provide defense in depth with multiple security layers, comprehensive audit trails, and seamless integration with existing remediation workflows. All security components must be thoroughly tested against common attack vectors and edge cases.
    </implementation_details>
    <acceptance_criteria>
        <criterion>GitHub token permissions configured with minimal required scope and validated via API</criterion>
        <criterion>Kubernetes RBAC provides least-privilege access to required resources only</criterion>
        <criterion>Input validation successfully blocks XSS, injection attacks, and malicious content</criterion>
        <criterion>Rate limiting prevents resource exhaustion (100 req/min per task, GitHub limits respected)</criterion>
        <criterion>Audit logging captures all security events with appropriate severity levels</criterion>
        <criterion>Security controls integrate seamlessly without breaking existing functionality</criterion>
        <criterion>RBAC validation prevents unauthorized access to Kubernetes resources</criterion>
        <criterion>Token validation detects insufficient permissions and expired tokens</criterion>
        <criterion>Authorized reviewer allowlist properly enforced for comment validation</criterion>
        <criterion>Performance overhead remains below 5% for security operations</criterion>
        <criterion>Security components handle failures gracefully without system disruption</criterion>
        <criterion>Comprehensive test suite validates security controls against attack vectors</criterion>
        <criterion>Security monitoring and alerting operational for all violation types</criterion>
        <criterion>Documentation complete for security architecture and procedures</criterion>
    </acceptance_criteria>
    <test_strategy>
        1. Security Testing:
           - Penetration testing with XSS, SQL injection, command injection attempts
           - Token permission testing with invalid, expired, and insufficient scope tokens
           - RBAC bypass attempts using privilege escalation techniques
           - Rate limiting bypass testing with distributed attacks and burst scenarios
           - Input validation testing against OWASP Top 10 attack patterns
           - Audit log integrity testing during system failures and attacks

        2. Integration Testing:
           - End-to-end security validation in complete remediation workflow
           - Multi-component security failure scenarios and recovery testing
           - Performance impact testing under normal and high-load conditions
           - Concurrent access testing for shared security resources
           - Security state consistency testing during system restarts

        3. Compliance Testing:
           - Audit trail completeness for all security-relevant operations
           - Data protection validation ensuring no PII exposure in logs
           - Access control testing for regulatory compliance requirements
           - Security configuration validation against industry standards

        4. Edge Case Testing:
           - Malformed input handling and system stability under attack
           - Resource exhaustion scenarios and graceful degradation
           - Network failures during security validation operations
           - Concurrent security operations and race condition testing
           - Memory and resource leak testing for long-running operations

        5. Monitoring and Alerting Testing:
           - Security metrics collection and alerting rule validation
           - Anomaly detection testing with simulated attack patterns
           - Incident response testing and escalation procedures
           - Security dashboard validation and operational usability
    </test_strategy>
    <instructions>
        Begin by understanding the existing Agent Remediation Loop architecture and identifying all security touchpoints. Design a comprehensive security framework that provides multiple layers of protection while maintaining system performance and usability.

        Implement GitHub token management first to secure external API access, then proceed with Kubernetes RBAC for internal resource protection. Build the input validation framework with comprehensive attack pattern detection, followed by rate limiting to prevent abuse.

        Create a structured audit logging system that provides complete visibility into security events. Finally, integrate all components into a unified security manager that provides centralized validation.

        Test each component thoroughly against real attack vectors and edge cases. Ensure all security controls fail securely and provide clear error messages for troubleshooting.

        Pay special attention to performance impact and ensure security operations don't significantly slow down the system. Implement proper error handling and recovery mechanisms for all security components.

        Document all security decisions, configurations, and procedures. Create operational runbooks for security incident response and routine security maintenance.

        Validate that the implementation meets all compliance and regulatory requirements for the organization. Ensure audit trails are complete and tamper-evident.
    </instructions>
</prompt>
# Task ID: 8
# Title: Implement MEV Risk Simulation for Paper Trading
# Status: pending
# Dependencies: 1, 7
# Priority: medium
# Description: Create a realistic MEV risk simulation system that models sandwich attack probability and impact for paper trading
# Details:
1. Implement MEV probability model:
   - 15-20% attack probability for memecoins as specified
   - Adjust probability based on trade size and token liquidity
   - Use token characteristics to determine risk levels

2. Create impact simulation:
   - Calculate estimated loss in basis points
   - Model slippage increase during sandwich attacks
   - Apply realistic price impact based on historical patterns

3. Implement protection simulation:
   - Calculate recommended priority fees (1,000-10,000 lamports)
   - Model effectiveness of MEV protection strategies
   - Track protected vs at-risk trades

Example implementation:
```rust
pub struct MevSimulator {
    token_risk_profiles: HashMap<String, TokenRiskProfile>,
    rng: ThreadRng,
}

pub struct TokenRiskProfile {
    base_attack_probability: f64,  // 0.0-1.0
    size_sensitivity: f64,         // How much trade size affects probability
    max_impact_bps: u32,           // Maximum impact in basis points
}

impl MevSimulator {
    pub fn new() -> Self {
        let mut token_risk_profiles = HashMap::new();
        
        // Configure risk profiles based on PRD specifications
        token_risk_profiles.insert("SOL".to_string(), TokenRiskProfile {
            base_attack_probability: 0.05,
            size_sensitivity: 0.1,
            max_impact_bps: 50,
        });
        
        token_risk_profiles.insert("BONK".to_string(), TokenRiskProfile {
            base_attack_probability: 0.20,  // 20% as specified for memecoins
            size_sensitivity: 0.3,
            max_impact_bps: 200,
        });
        
        // Add other tokens...
        
        Self {
            token_risk_profiles,
            rng: rand::thread_rng(),
        }
    }
    
    pub fn simulate_mev(&mut self, token: &str, trade_size_usd: Decimal) -> MevRiskAssessment {
        let profile = self.token_risk_profiles.get(token)
            .unwrap_or_else(|| panic!("No risk profile for token: {}", token));
        
        // Calculate attack probability based on token and size
        let size_factor = (trade_size_usd.to_f64().unwrap() / 1000.0).min(1.0);
        let attack_probability = profile.base_attack_probability + 
            (profile.size_sensitivity * size_factor);
        
        // Determine if this trade would be attacked
        let is_attacked = self.rng.gen::<f64>() < attack_probability;
        
        // Calculate impact if attacked
        let impact_bps = if is_attacked {
            let max_impact = profile.max_impact_bps as f64;
            let impact = self.rng.gen::<f64>() * max_impact;
            impact as u32
        } else {
            0
        };
        
        // Calculate recommended priority fee
        let base_fee = 1000; // 1000 lamports base
        let size_multiplier = (trade_size_usd.to_f64().unwrap() / 100.0).min(10.0) as u64;
        let recommended_fee = base_fee * size_multiplier;
        
        MevRiskAssessment {
            sandwich_probability: attack_probability,
            is_attacked,
            estimated_loss_bps: impact_bps,
            recommended_fee: recommended_fee.min(10000), // Cap at 10,000 lamports
        }
    }
}
```

# Test Strategy:
Create unit tests for MEV probability calculations with different token types and trade sizes. Verify that memecoin attack rates match the 15-20% specified in the PRD. Test impact calculations for realistic values. Create statistical tests to verify distribution of simulated attacks matches expected patterns. Test recommended fee calculations against the 1,000-10,000 lamport range specified in the PRD.

# Subtasks:
## 1. Implement MEV Probability Model [pending]
### Dependencies: None
### Description: Develop a probabilistic model that calculates MEV attack likelihood based on token-specific risk profiles and trade size sensitivity.
### Details:
Create a model that assigns risk scores to different tokens based on historical MEV activity, liquidity profiles, and market characteristics. Implement sensitivity curves that show how probability increases with trade size. Include factors like token volatility, DEX liquidity depth, and historical sandwich attack frequency. The model should output a probability percentage for a given token and trade size.

## 2. Develop Impact Simulation Engine [pending]
### Dependencies: 8.1
### Description: Build a simulation engine that calculates realistic price impact of MEV attacks based on historical patterns and market conditions.
### Details:
Create algorithms to calculate expected slippage in basis points for different attack scenarios. Incorporate historical data to model realistic price movements during attacks. Include impact variations based on market conditions (high/low volatility periods). The simulation should output expected financial loss in both percentage and absolute terms for a given trade under attack.

## 3. Implement Protection Strategy Simulator [pending]
### Dependencies: 8.1, 8.2
### Description: Develop a simulator for MEV protection strategies with priority fee recommendations and effectiveness modeling.
### Details:
Create models to simulate the effectiveness of different protection strategies including priority fees, private RPC endpoints, and timing strategies. Implement an algorithm that recommends optimal priority fees based on current network conditions and desired protection level. Include a cost-benefit analysis component that compares protection costs against expected MEV losses. The simulator should output protection strategy recommendations with expected effectiveness percentages.


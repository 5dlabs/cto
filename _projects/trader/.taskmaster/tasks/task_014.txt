# Task ID: 14
# Title: Implement Correlation Analysis for Paper vs Live Trading
# Status: pending
# Dependencies: 9, 12
# Priority: medium
# Description: Create tools to analyze and compare paper trading results with small live trades to validate simulation accuracy
# Details:
1. Implement correlation analysis tools:
   - Compare execution prices between paper and live trades
   - Calculate slippage accuracy metrics
   - Measure MEV simulation effectiveness

2. Create data collection system:
   - Record identical paper and live trades for comparison
   - Track key metrics including execution price, slippage, and MEV impact
   - Store results in QuestDB for analysis

3. Implement reporting functionality:
   - Calculate correlation coefficients for key metrics
   - Generate statistical analysis of simulation accuracy
   - Provide recommendations for model improvements

Example implementation:
```rust
pub struct CorrelationAnalyzer {
    quest_db: Arc<QuestDbClient>,
}

pub struct CorrelationMetrics {
    price_correlation: f64,        // -1.0 to 1.0
    slippage_accuracy: f64,        // 0.0 to 1.0 (higher is better)
    mev_prediction_accuracy: f64,  // 0.0 to 1.0 (higher is better)
    overall_correlation: f64,      // 0.0 to 1.0 (target: 0.85-0.90)
}

impl CorrelationAnalyzer {
    pub async fn analyze_correlation(&self, start_time: DateTime<Utc>, end_time: DateTime<Utc>) -> Result<CorrelationMetrics> {
        // Fetch paper and live trades for the same period
        let paper_trades = self.quest_db.get_paper_trades(start_time, end_time).await?;
        let live_trades = self.quest_db.get_live_trades(start_time, end_time).await?;
        
        // Match paper and live trades by timestamp and parameters
        let matched_trades = self.match_trades(paper_trades, live_trades)?;
        
        if matched_trades.is_empty() {
            return Err(Error::InsufficientData("No matching paper and live trades found".into()));
        }
        
        // Calculate price correlation
        let price_correlation = self.calculate_price_correlation(&matched_trades)?;
        
        // Calculate slippage accuracy
        let slippage_accuracy = self.calculate_slippage_accuracy(&matched_trades)?;
        
        // Calculate MEV prediction accuracy
        let mev_prediction_accuracy = self.calculate_mev_prediction_accuracy(&matched_trades)?;
        
        // Calculate overall correlation (weighted average)
        let overall_correlation = (
            price_correlation * 0.5 +
            slippage_accuracy * 0.3 +
            mev_prediction_accuracy * 0.2
        ).max(0.0).min(1.0);
        
        Ok(CorrelationMetrics {
            price_correlation,
            slippage_accuracy,
            mev_prediction_accuracy,
            overall_correlation,
        })
    }
    
    fn match_trades(&self, paper_trades: Vec<Trade>, live_trades: Vec<Trade>) -> Result<Vec<(Trade, Trade)>> {
        // Implementation to match paper and live trades
        // ...
    }
    
    fn calculate_price_correlation(&self, matched_trades: &[(Trade, Trade)]) -> Result<f64> {
        // Calculate Pearson correlation coefficient between paper and live prices
        // ...
    }
    
    fn calculate_slippage_accuracy(&self, matched_trades: &[(Trade, Trade)]) -> Result<f64> {
        // Calculate how accurately paper trading predicted slippage
        // ...
    }
    
    fn calculate_mev_prediction_accuracy(&self, matched_trades: &[(Trade, Trade)]) -> Result<f64> {
        // Calculate how accurately MEV simulation predicted actual MEV encounters
        // ...
    }
    
    pub fn generate_report(&self, metrics: CorrelationMetrics) -> String {
        let mut report = String::new();
        
        report.push_str("Correlation Analysis Report\n");
        report.push_str("===========================\n\n");
        
        report.push_str(&format!("Price Correlation: {:.2}\n", metrics.price_correlation));
        report.push_str(&format!("Slippage Accuracy: {:.2}%\n", metrics.slippage_accuracy * 100.0));
        report.push_str(&format!("MEV Prediction Accuracy: {:.2}%\n", metrics.mev_prediction_accuracy * 100.0));
        report.push_str(&format!("Overall Correlation: {:.2}%\n\n", metrics.overall_correlation * 100.0));
        
        // Add interpretation
        if metrics.overall_correlation >= 0.85 {
            report.push_str("✅ Strategy validation PASSED: Paper trading results show strong correlation with live trading (>85%)\n");
        } else {
            report.push_str("❌ Strategy validation FAILED: Paper trading results show insufficient correlation with live trading (<85%)\n");
        }
        
        // Add recommendations
        report.push_str("\nRecommendations:\n");
        if metrics.price_correlation < 0.9 {
            report.push_str("- Improve price simulation model\n");
        }
        if metrics.slippage_accuracy < 0.8 {
            report.push_str("- Refine slippage model based on recent trade data\n");
        }
        if metrics.mev_prediction_accuracy < 0.7 {
            report.push_str("- Update MEV simulation parameters\n");
        }
        
        report
    }
}
```

# Test Strategy:
Create unit tests for correlation calculations with known data sets. Test trade matching algorithm with various scenarios. Verify statistical calculations for accuracy. Create integration tests with sample paper and live trade data. Test report generation with different correlation levels. Verify that the 85-90% correlation target from the PRD is correctly assessed.

# Subtasks:
## 1. Implement Data Collection System [pending]
### Dependencies: None
### Description: Create a system to collect and pair paper trading and live trading data for comparison analysis
### Details:
Design and implement a data collection framework that captures identical data points from both paper and live trading environments. Include trade entry/exit times, prices, sizes, slippage metrics, and execution details. Ensure proper time synchronization between systems and implement data validation to flag inconsistencies. Create a database schema optimized for correlation analysis with appropriate indexing.

## 2. Develop Statistical Analysis Tools [pending]
### Dependencies: 14.1
### Description: Build tools to calculate correlation coefficients and accuracy metrics between paper and live trading results
### Details:
Implement statistical analysis functions to calculate Pearson and Spearman correlation coefficients, RMSE, MAE, and other relevant metrics. Create functionality to analyze performance divergence by market conditions, volatility levels, and trade characteristics. Develop statistical significance tests to validate findings and identify patterns in divergence. Include visualization capabilities for correlation matrices and scatter plots.

## 3. Create Reporting System with Recommendations [pending]
### Dependencies: 14.2
### Description: Develop a reporting system that generates insights and actionable recommendations for model improvements
### Details:
Design a reporting framework that automatically generates periodic correlation analysis reports with key metrics and visualizations. Implement an algorithm to identify specific conditions where simulation accuracy decreases. Create a recommendation engine that suggests specific model adjustments based on correlation analysis findings. Include functionality to track the impact of implemented recommendations over time.


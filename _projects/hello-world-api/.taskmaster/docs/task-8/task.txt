# Task ID: 8
# Title: Create Main Server File
# Status: pending
# Dependencies: 7
# Priority: high
# Description: Implement the main server file (src/index.js) with basic Express.js setup.
# Details:
Create src/index.js with the following implementation:
```javascript
const express = require('express');
const app = express();
const PORT = 3000;

// Middleware for request logging
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  next();
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

# Test Strategy:
Run the server with 'npm start' and verify that it starts without errors. Check that the server is listening on port 3000 as specified in the requirements.

# Subtasks:
## 1. Set up Express.js server initialization [pending]
### Dependencies: None
### Description: Create the src/index.js file and implement the basic Express.js server initialization with port configuration.
### Details:
Create the src directory if it doesn't exist. Create the index.js file inside it. Import the Express.js library and initialize the app. Define the PORT constant and set it to 3000. This subtask focuses only on the server initialization, not on middleware or starting the server.

## 2. Implement request logging middleware [pending]
### Dependencies: 8.1
### Description: Add middleware to log all incoming requests with timestamp, HTTP method, and URL.
### Details:
Implement the middleware function using app.use() that logs each request with the format: `${new Date().toISOString()} - ${req.method} ${req.url}`. Make sure to call next() to continue the request processing pipeline.

## 3. Configure server listening functionality [pending]
### Dependencies: 8.1
### Description: Implement the server.listen() method to start the Express server on the specified port.
### Details:
Add the app.listen() call at the end of the file, using the PORT constant defined earlier. Include a callback function that logs a message indicating the server is running and which port it's using.

## 4. Add environment variable support for PORT [pending]
### Dependencies: 8.1
### Description: Enhance the PORT configuration to use an environment variable if available, with 3000 as fallback.
### Details:
Modify the PORT constant to use process.env.PORT if it exists, otherwise default to 3000: `const PORT = process.env.PORT || 3000;`. This allows for more flexibility when deploying the application.

## 5. Add error handling for server startup [pending]
### Dependencies: 8.3
### Description: Implement basic error handling for the server startup process.
### Details:
Enhance the app.listen() call to include error handling. Wrap it in a try-catch block or add an error event listener to handle potential startup failures gracefully. Log meaningful error messages if the server fails to start.


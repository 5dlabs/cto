# Task ID: 5
# Title: Implement Comprehensive Testing Suite
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: Create a comprehensive test suite with unit and integration tests to achieve >90% code coverage.
# Details:
1. Create test configuration in jest.config.js:
```javascript
module.exports = {
  testEnvironment: 'node',
  collectCoverage: true,
  coverageThreshold: {
    global: {
      branches: 90,
      functions: 90,
      lines: 90,
      statements: 90
    }
  },
  coverageReporters: ['text', 'lcov', 'clover'],
  testMatch: ['**/tests/**/*.test.js'],
  verbose: true
};
```

2. Create unit tests for utility functions in tests/unit/response.test.js:
```javascript
const { success, error } = require('../../src/utils/response');

describe('Response Utilities', () => {
  describe('success()', () => {
    it('should create a success response with the correct format', () => {
      const message = 'Test success';
      const data = { key: 'value' };
      const response = success(message, data);
      
      expect(response).toHaveProperty('status', 'success');
      expect(response).toHaveProperty('message', message);
      expect(response).toHaveProperty('data', data);
      expect(response).toHaveProperty('timestamp');
      expect(new Date(response.timestamp)).toBeInstanceOf(Date);
    });
    
    it('should handle null data', () => {
      const response = success('Test success');
      expect(response.data).toBeNull();
    });
  });
  
  describe('error()', () => {
    it('should create an error with the correct properties', () => {
      const message = 'Test error';
      const status = 404;
      const data = { reason: 'Not found' };
      
      const err = error(message, status, data);
      
      expect(err).toBeInstanceOf(Error);
      expect(err.message).toBe(message);
      expect(err.status).toBe(status);
      expect(err.data).toEqual(data);
    });
    
    it('should use default status 400 when not provided', () => {
      const err = error('Test error');
      expect(err.status).toBe(400);
    });
    
    it('should handle null data', () => {
      const err = error('Test error', 500);
      expect(err.data).toBeNull();
    });
  });
});
```

3. Create integration tests for API endpoints in tests/integration/api.test.js:
```javascript
const request = require('supertest');
const app = require('../../src/app');

describe('API Endpoints', () => {
  describe('GET /health', () => {
    it('should return 200 and healthy status', async () => {
      const res = await request(app).get('/health');
      
      expect(res.statusCode).toBe(200);
      expect(res.body).toHaveProperty('status', 'success');
      expect(res.body).toHaveProperty('data.status', 'up');
      expect(res.body).toHaveProperty('timestamp');
    });
  });
  
  describe('GET /hello', () => {
    it('should return 200 and hello world message', async () => {
      const res = await request(app).get('/hello');
      
      expect(res.statusCode).toBe(200);
      expect(res.body).toHaveProperty('status', 'success');
      expect(res.body).toHaveProperty('data.greeting', 'Hello, World!');
    });
  });
  
  describe('GET /hello/:name', () => {
    it('should return 200 and personalized greeting', async () => {
      const name = 'John';
      const res = await request(app).get(`/hello/${name}`);
      
      expect(res.statusCode).toBe(200);
      expect(res.body).toHaveProperty('status', 'success');
      expect(res.body).toHaveProperty('data.greeting', `Hello, ${name}!`);
    });
    
    it('should sanitize name parameter', async () => {
      const res = await request(app).get('/hello/<script>alert(1)</script>');
      
      expect(res.statusCode).toBe(200);
      expect(res.body.data.greeting).toBe('Hello, scriptalert1script!');
    });
    
    it('should return 400 for empty name parameter', async () => {
      const res = await request(app).get('/hello/ ');
      
      expect(res.statusCode).toBe(400);
      expect(res.body).toHaveProperty('status', 'error');
    });
  });
  
  describe('POST /echo', () => {
    it('should return 200 and echo the request body', async () => {
      const payload = { test: 'data', nested: { value: 123 } };
      const res = await request(app)
        .post('/echo')
        .send(payload)
        .set('Content-Type', 'application/json');
      
      expect(res.statusCode).toBe(200);
      expect(res.body).toHaveProperty('status', 'success');
      expect(res.body).toHaveProperty('data', payload);
    });
    
    it('should return 400 for empty request body', async () => {
      const res = await request(app)
        .post('/echo')
        .send({})
        .set('Content-Type', 'application/json');
      
      expect(res.statusCode).toBe(400);
      expect(res.body).toHaveProperty('status', 'error');
    });
  });
  
  describe('GET /info', () => {
    it('should return 200 and service information', async () => {
      const res = await request(app).get('/info');
      
      expect(res.statusCode).toBe(200);
      expect(res.body).toHaveProperty('status', 'success');
      expect(res.body.data).toHaveProperty('version');
      expect(res.body.data).toHaveProperty('uptime');
      expect(res.body.data).toHaveProperty('environment');
    });
  });
  
  describe('GET /docs', () => {
    it('should return 200 and HTML content', async () => {
      const res = await request(app).get('/docs');
      
      expect(res.statusCode).toBe(200);
      expect(res.headers['content-type']).toMatch(/html/);
    });
  });
  
  describe('GET /docs.json', () => {
    it('should return 200 and valid OpenAPI spec', async () => {
      const res = await request(app).get('/docs.json');
      
      expect(res.statusCode).toBe(200);
      expect(res.headers['content-type']).toMatch(/json/);
      expect(res.body).toHaveProperty('openapi');
      expect(res.body).toHaveProperty('paths');
    });
  });
  
  describe('Error handling', () => {
    it('should return 404 for non-existent routes', async () => {
      const res = await request(app).get('/not-found');
      
      expect(res.statusCode).toBe(404);
      expect(res.body).toHaveProperty('status', 'error');
      expect(res.body).toHaveProperty('message', 'Not Found');
    });
    
    it('should include correlation ID in response headers', async () => {
      const res = await request(app).get('/health');
      
      expect(res.headers).toHaveProperty('x-correlation-id');
      expect(res.headers['x-correlation-id']).toBeTruthy();
    });
    
    it('should use provided correlation ID if available', async () => {
      const correlationId = 'test-correlation-id';
      const res = await request(app)
        .get('/health')
        .set('x-correlation-id', correlationId);
      
      expect(res.headers['x-correlation-id']).toBe(correlationId);
    });
  });
});
```

4. Create a load test script in tests/load/load.test.js:
```javascript
const http = require('http');

// Simple load test to verify concurrent request handling
const runLoadTest = async () => {
  const CONCURRENT_REQUESTS = 100;
  const TARGET = 'http://localhost:3000/health';
  
  console.log(`Running load test with ${CONCURRENT_REQUESTS} concurrent requests`);
  
  const startTime = Date.now();
  const promises = [];
  
  for (let i = 0; i < CONCURRENT_REQUESTS; i++) {
    promises.push(
      new Promise((resolve, reject) => {
        const req = http.get(TARGET, (res) => {
          let data = '';
          res.on('data', (chunk) => { data += chunk; });
          res.on('end', () => {
            resolve({
              statusCode: res.statusCode,
              responseTime: Date.now() - startTime
            });
          });
        });
        
        req.on('error', reject);
      })
    );
  }
  
  const results = await Promise.all(promises);
  const totalTime = Date.now() - startTime;
  
  const avgResponseTime = results.reduce((sum, result) => sum + result.responseTime, 0) / results.length;
  const successRate = results.filter(r => r.statusCode === 200).length / results.length * 100;
  
  console.log(`Load test completed in ${totalTime}ms`);
  console.log(`Average response time: ${avgResponseTime.toFixed(2)}ms`);
  console.log(`Success rate: ${successRate.toFixed(2)}%`);
  
  return {
    totalTime,
    avgResponseTime,
    successRate,
    results
  };
};

// Can be run directly: node tests/load/load.test.js
if (require.main === module) {
  runLoadTest().catch(console.error);
}

module.exports = { runLoadTest };
```

# Test Strategy:
1. Run unit tests with `npm test` and verify >90% code coverage
2. Run integration tests to ensure all endpoints work correctly
3. Manually test the load test script to verify it can handle 100 concurrent requests
4. Verify that all tests pass in the CI/CD pipeline
5. Check that response times are within the required <100ms threshold

# Subtasks:
## 1. Configure Jest for Comprehensive Testing [pending]
### Dependencies: None
### Description: Set up and validate the Jest configuration in jest.config.js to enable code coverage collection and enforce >90% global coverage thresholds.
### Details:
Ensure jest.config.js specifies test environment, coverage collection, coverage thresholds, reporters, and test file patterns as required for the project.

## 2. Develop Unit Tests for Utility Functions [pending]
### Dependencies: 5.1
### Description: Write and maintain unit tests for all utility functions, focusing on src/utils/response.js and similar modules.
### Details:
Implement tests in tests/unit/response.test.js to cover all branches and edge cases of the utility functions, ensuring high coverage and correctness.

## 3. Implement Integration Tests for API Endpoints [pending]
### Dependencies: 5.1
### Description: Create integration tests for all API endpoints to validate end-to-end behavior, including success and error scenarios.
### Details:
Write tests in tests/integration/api.test.js using Supertest to cover all routes, input validation, error handling, and response formats.

## 4. Create and Execute Load Test Script [pending]
### Dependencies: 5.3
### Description: Develop a load test script to simulate concurrent requests and assess the application's performance under stress.
### Details:
Implement tests/load/load.test.js to send at least 100 concurrent requests to critical endpoints and report on response times and success rates.

## 5. Integrate Testing Suite with CI/CD Pipeline [pending]
### Dependencies: 5.2, 5.3, 5.4
### Description: Ensure all tests (unit, integration, load) are executed automatically in the CI/CD pipeline and that code coverage is enforced.
### Details:
Configure the CI/CD workflow to run all test suites, fail builds on test or coverage failures, and generate coverage reports for review.


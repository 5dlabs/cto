# Task ID: 5
# Title: Add Error Handling and Documentation
# Status: pending
# Dependencies: 3, 4
# Priority: low
# Description: Implement basic error handling middleware and create a README with usage instructions
# Details:
1. Add error handling middleware to src/index.js:
```javascript
// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

// 404 handler for undefined routes
app.use((req, res) => {
  res.status(404).json({ error: 'Not found' });
});
```

2. Create a README.md file in the project root with the following content:
```markdown
# Hello World API

A simple Express.js API that serves a Hello World message and health check endpoint.

## Installation

```
npm install
```

## Usage

Start the server:

```
npm start
```

The server will run on http://localhost:3000

## Endpoints

- GET / - Returns a Hello World message
- GET /health - Returns the service health status and timestamp

## Example Responses

### Root Endpoint

```json
{
  "message": "Hello, World!"
}
```

### Health Endpoint

```json
{
  "status": "healthy",
  "timestamp": "2023-11-14T12:00:00.000Z"
}
```
```

# Test Strategy:
1. Test error handling by intentionally causing an error (e.g., add a route that throws an error) and verify that the 500 response is returned.
2. Test the 404 handler by making a request to a non-existent endpoint.
3. Review the README.md file to ensure it contains all the required information and is formatted correctly.

# Subtasks:
## 1. Implement Error Handling Middleware [pending]
### Dependencies: None
### Description: Add error handling middleware to catch and process server errors with appropriate responses
### Details:
Add the following error handling middleware to src/index.js after all route definitions but before the server listen call:

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

This middleware will catch any errors thrown during request processing and return a standardized 500 error response.

## 2. Implement 404 Handler for Undefined Routes [pending]
### Dependencies: 5.1
### Description: Add middleware to handle requests to undefined routes with a 404 response
### Details:
Add the following 404 handler middleware to src/index.js after the error handling middleware but before the server listen call:

// 404 handler for undefined routes
app.use((req, res) => {
  res.status(404).json({ error: 'Not found' });
});

This middleware will catch any requests that don't match defined routes and return a standardized 404 error response.

## 3. Create Basic README Structure [pending]
### Dependencies: None
### Description: Create a README.md file with project title, description, and installation instructions
### Details:
Create a README.md file in the project root with the following initial content:

# Hello World API

A simple Express.js API that serves a Hello World message and health check endpoint.

## Installation

```
npm install
```

## Usage

Start the server:

```
npm start
```

The server will run on http://localhost:3000

## 4. Document API Endpoints in README [pending]
### Dependencies: 5.3
### Description: Add detailed documentation for all API endpoints including examples
### Details:
Add the following endpoint documentation section to the README.md file:

## Endpoints

- GET / - Returns a Hello World message
- GET /health - Returns the service health status and timestamp

## Example Responses

### Root Endpoint

```json
{
  "message": "Hello, World!"
}
```

### Health Endpoint

```json
{
  "status": "healthy",
  "timestamp": "2023-11-14T12:00:00.000Z"
}
```

## 5. Test Error Handling and Documentation [pending]
### Dependencies: 5.1, 5.2, 5.3, 5.4
### Description: Verify that error handling works correctly and documentation is complete
### Details:
1. Start the server with `npm start`
2. Test the error handling by making requests that should trigger errors
3. Test the 404 handler by requesting a non-existent endpoint
4. Review the README.md file to ensure it's complete and accurate
5. Make any necessary adjustments to error handling or documentation based on testing results


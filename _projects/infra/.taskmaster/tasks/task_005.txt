# Task ID: 5
# Title: Build and Deploy Solana Validator Container
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: Build Solana Agave v1.18.x container image with Yellowstone gRPC plugin, optimize for performance, and deploy using Helm charts as a StatefulSet with appropriate resource limits and NUMA pinning.
# Details:
1. Create Dockerfile for Solana Agave v1.18.x:
```dockerfile
FROM rust:1.70 as builder
WORKDIR /build
RUN apt-get update && apt-get install -y libclang-dev cmake
RUN git clone https://github.com/solana-labs/solana.git
WORKDIR /build/solana
RUN git checkout v1.18.23
RUN cargo build --release

FROM ubuntu:22.04
RUN apt-get update && apt-get install -y libssl-dev ca-certificates
COPY --from=builder /build/solana/target/release/solana-validator /usr/local/bin/
COPY --from=builder /build/solana/target/release/solana-gossip /usr/local/bin/
COPY --from=builder /build/solana/target/release/solana-ledger-tool /usr/local/bin/

# Install Yellowstone gRPC plugin
RUN curl -L https://github.com/rpcpool/yellowstone-grpc/releases/download/v1.0.0/yellowstone-grpc-linux-x86_64.tar.gz | tar -xz -C /usr/local/bin

ENTRYPOINT ["solana-validator"]
```

2. Create Helm chart structure:
```
solana-validator/
├── Chart.yaml
├── values.yaml
├── templates/
│   ├── _helpers.tpl
│   ├── statefulset.yaml
│   ├── service.yaml
│   ├── configmap.yaml
│   ├── secret.yaml
│   ├── networkpolicy.yaml
│   └── storageclass.yaml
└── values/
    ├── mainnet.yaml
    ├── testnet.yaml
    └── devnet.yaml
```

3. Define values.yaml with configurable parameters:
```yaml
replicaCount: 1

image:
  repository: solana-validator
  tag: v1.18.23
  pullPolicy: IfNotPresent

network: mainnet-beta

resources:
  requests:
    cpu: "64"
    memory: 512Gi
    hugepages-1Gi: 100Gi
  limits:
    cpu: "96"
    memory: 640Gi
    hugepages-1Gi: 100Gi

storage:
  ledger:
    size: 15Ti
    storageClass: local-nvme-ledger
  accounts:
    size: 6Ti
    storageClass: local-nvme-accounts
  snapshots:
    size: 2Ti
    storageClass: local-nvme-snapshots

validator:
  args:
    accountsIndexMemoryLimitMb: 25000
    accountsDbCacheLimitMb: 50000
    accountsDbIndexThreads: 16
    rpcPort: 8899
    gossipPort: 8001

yellowstone:
  enabled: true
  port: 10000

numa:
  enabled: true
  policy: restricted

memoryOptimizer:
  enabled: true
  alertThreshold: 80
```

4. Deploy using Helm:
```bash
# Install
helm install solana-validator ./solana-validator -f values/mainnet.yaml

# Upgrade
helm upgrade solana-validator ./solana-validator -f values/mainnet.yaml
```

# Test Strategy:
1. Verify Helm chart validation with `helm lint`
2. Test Helm installation in dry-run mode
3. Verify container builds successfully
4. Test container startup with minimal configuration
5. Validate NUMA pinning with `numastat -p`
6. Monitor memory usage during initial sync (target: stay within 512GB allocation)
7. Verify Yellowstone gRPC plugin functionality
8. Test Helm upgrade process with configuration changes
9. Validate storage performance during operation
10. Test environment-specific deployments (mainnet, testnet, devnet)

# Subtasks:
## 1. Build Solana Agave v1.18.x Container Image with Yellowstone gRPC Plugin [pending]
### Dependencies: None
### Description: Create a Dockerfile to build the Solana Agave v1.18.x validator binary, integrate the Yellowstone gRPC plugin, and produce a container image optimized for performance.
### Details:
Clone the Solana repository at v1.18.23, build the validator and required tools, and install the Yellowstone gRPC plugin in the final image. Ensure all dependencies are included and the image is production-ready.

## 2. Create Helm Chart Structure and Templates [pending]
### Dependencies: 5.1
### Description: Develop a comprehensive Helm chart for the Solana validator deployment, including all necessary templates, helper functions, and configuration files.
### Details:
Create Chart.yaml with proper versioning, develop templates for StatefulSet, Services, ConfigMaps, Secrets, NetworkPolicies, and StorageClasses. Implement helper templates for common patterns like labels, selectors, and resource names. Ensure templates are properly parameterized using values.

## 3. Define Configurable Values and Environment-Specific Configurations [pending]
### Dependencies: 5.2
### Description: Create a comprehensive values.yaml with all configurable parameters and environment-specific value files for mainnet, testnet, and devnet deployments.
### Details:
Define default values for memory allocation (512GB default), CPU allocation, storage configuration, network settings, and Solana-specific parameters. Create separate values files for mainnet, testnet, and devnet with appropriate network-specific configurations. Include NUMA settings, memory optimizer configuration, and Yellowstone gRPC settings.

## 4. Implement NUMA Pinning and Resource Optimization in Helm Templates [pending]
### Dependencies: 5.3
### Description: Configure NUMA-aware resource allocation and CPU pinning within the Helm chart templates to maximize performance on multi-socket systems.
### Details:
Update StatefulSet template to include NUMA configuration when enabled in values. Use init containers or Downward API for dynamic NUMA pinning. Ensure Guaranteed QoS with proper resource requests/limits. Template hugepages allocation based on values. Include conditional logic for NUMA features based on values.yaml settings.

## 5. Integrate Memory Optimizer and Yellowstone gRPC Service in Helm Chart [pending]
### Dependencies: 5.4
### Description: Add memory optimizer sidecar container and Yellowstone gRPC service configuration to the Helm templates with proper parameterization.
### Details:
Create conditional sidecar container template for memory optimizer with configurable alert thresholds. Template Yellowstone gRPC service and port configuration. Ensure both features can be enabled/disabled via values. Configure memory optimizer to work within the configurable memory allocation (default 512GB).

## 6. Implement CI/CD Integration and Deployment Automation [pending]
### Dependencies: 5.5
### Description: Set up CI/CD pipelines for automated Helm chart testing, packaging, and deployment across different environments.
### Details:
Create CI pipeline for chart linting, testing, and packaging. Implement CD pipeline for automated deployments using Helm. Set up chart repository for version management. Create deployment scripts that use environment-specific values files. Implement rollback procedures and health checks.

## 7. Create Backup and Snapshot Management Templates [pending]
### Dependencies: 5.5
### Description: Implement Kubernetes CronJob templates within the Helm chart for automated backup and snapshot management.
### Details:
Create CronJob templates for periodic ledger/account backups. Add configurable snapshot management with retention policies. Template backup storage configuration. Include restore procedures in chart documentation. Make backup schedules and retention configurable via values.yaml.


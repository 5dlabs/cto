<context>
This is a simple Todo REST API built with Node.js and Express for testing documentation generation workflows. The goal is to create a minimal but functional API that can be implemented quickly for testing purposes.

Stack: Node.js, Express, SQLite, Jest for testing
Target: ~15-20 minutes of implementation time
</context>

<PRD>
# Simple Todo REST API

## Overview
A lightweight REST API for managing todo items, built with Node.js and Express. This API provides basic CRUD operations for todo management with persistent storage.

## Technical Stack
- **Runtime**: Node.js 18+
- **Framework**: Express.js 4.x
- **Database**: SQLite with better-sqlite3 driver
- **Testing**: Jest with supertest
- **Validation**: express-validator
- **Documentation**: OpenAPI/Swagger

## Core Features

### 1. Todo Management
- Create new todos with title and description
- Mark todos as complete/incomplete
- Update todo details
- Delete todos
- List all todos with optional filtering

### 2. Data Model
```javascript
Todo {
  id: integer (auto-increment primary key)
  title: string (required, max 200 chars)
  description: string (optional, max 1000 chars)
  completed: boolean (default false)
  createdAt: datetime (auto-generated)
  updatedAt: datetime (auto-updated)
}
```

### 3. API Endpoints

#### GET /api/todos
- List all todos
- Query parameters: `completed` (true/false), `limit`, `offset`
- Response: Array of todo objects

#### POST /api/todos
- Create new todo
- Body: `{ title, description? }`
- Validation: title required, max lengths enforced
- Response: Created todo object

#### GET /api/todos/:id
- Get specific todo by ID
- Response: Todo object or 404

#### PUT /api/todos/:id
- Update existing todo
- Body: `{ title?, description?, completed? }`
- Response: Updated todo object or 404

#### DELETE /api/todos/:id
- Delete todo by ID
- Response: 204 No Content or 404

#### GET /api/health
- Health check endpoint
- Response: `{ status: "ok", timestamp }`

### 4. Technical Requirements

#### Database Setup
- SQLite database file in `./data/todos.db`
- Auto-create database and tables on startup
- Database connection pooling not needed (SQLite)

#### Error Handling
- Consistent JSON error responses
- HTTP status codes: 200, 201, 204, 400, 404, 500
- Request validation with descriptive error messages

#### Testing
- Unit tests for all endpoints
- Integration tests with test database
- Minimum 90% code coverage
- Test data fixtures and cleanup

#### Project Structure
```
simple-api/
├── src/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   └── app.js
├── tests/
├── data/
├── package.json
├── server.js
└── README.md
```

### 5. Development Setup
- npm scripts for dev, test, start
- Environment configuration via .env
- Auto-restart with nodemon for development
- Consistent code formatting with prettier

## Success Criteria
- All CRUD operations working correctly
- Full test coverage with passing tests
- Clean, documented code structure
- API documentation available
- Ready for deployment

## Out of Scope
- User authentication/authorization
- Advanced querying or search
- File attachments
- Real-time updates
- Performance optimization beyond basics
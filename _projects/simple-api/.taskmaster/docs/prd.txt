# Simple Express API - Product Requirements Document

## Project Overview
Create a basic REST API using Express.js with user management functionality, health monitoring, and proper error handling.

## Technical Requirements

### Technology Stack
- **Backend Framework**: Express.js (Node.js)
- **Package Manager**: npm
- **Environment**: Node.js 18+

### Core Features

#### 1. Basic Server Setup
- Express.js server running on configurable port (default: 3000)
- JSON middleware for request parsing
- Environment variable support
- Clean startup logging

#### 2. Health & Status Endpoints
- GET `/health` - Health check endpoint returning server status and uptime
- GET `/` - Welcome endpoint with API information and version

#### 3. User Management API
- GET `/api/users` - List all users (mock data initially)
- POST `/api/users` - Create new user with name and email validation
- Proper HTTP status codes (200, 201, 400, 404, 500)
- JSON request/response format

#### 4. Error Handling
- Global error handler middleware
- 404 handler for unknown routes
- Input validation with meaningful error messages
- Consistent error response format

#### 5. Development Setup
- package.json with proper scripts (start, dev)
- Basic project structure
- Environment configuration support

## API Specifications

### User Object
```json
{
  "id": number,
  "name": string,
  "email": string,
  "createdAt": string (ISO date)
}
```

### Endpoints

**GET /**
- Returns welcome message with version and timestamp

**GET /health**
- Returns server health status and uptime

**GET /api/users**
- Returns array of user objects

**POST /api/users**
- Body: `{ "name": string, "email": string }`
- Returns created user object with generated ID
- Validates required fields

## Quality Requirements
- Clean, readable code structure
- Proper error handling for all scenarios
- Consistent JSON response format
- Input validation for all endpoints
- Meaningful HTTP status codes

## Deliverables
1. Working Express.js server
2. All specified endpoints implemented
3. Error handling middleware
4. Package.json with dependencies and scripts
5. Basic documentation for API usage